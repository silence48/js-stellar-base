var StellarBase;
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/assert/build/assert.js":
/*!*********************************************!*\
  !*** ./node_modules/assert/build/assert.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var _require = __webpack_require__(/*! ./internal/errors */ "./node_modules/assert/build/internal/errors.js"),
    _require$codes = _require.codes,
    ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT,
    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,
    ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE,
    ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE,
    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;

var AssertionError = __webpack_require__(/*! ./internal/assert/assertion_error */ "./node_modules/assert/build/internal/assert/assertion_error.js");

var _require2 = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
    inspect = _require2.inspect;

var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/util/util.js").types),
    isPromise = _require$types.isPromise,
    isRegExp = _require$types.isRegExp;

var objectAssign = Object.assign ? Object.assign : (__webpack_require__(/*! es6-object-assign */ "./node_modules/es6-object-assign/index.js").assign);
var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/object-is/index.js");
var errorCache = new Map();
var isDeepEqual;
var isDeepStrictEqual;
var parseExpressionAt;
var findNodeAround;
var decoder;

function lazyLoadComparison() {
  var comparison = __webpack_require__(/*! ./internal/util/comparisons */ "./node_modules/assert/build/internal/util/comparisons.js");

  isDeepEqual = comparison.isDeepEqual;
  isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex


var escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var meta = ["\\u0000", "\\u0001", "\\u0002", "\\u0003", "\\u0004", "\\u0005", "\\u0006", "\\u0007", '\\b', '', '', "\\u000b", '\\f', '', "\\u000e", "\\u000f", "\\u0010", "\\u0011", "\\u0012", "\\u0013", "\\u0014", "\\u0015", "\\u0016", "\\u0017", "\\u0018", "\\u0019", "\\u001a", "\\u001b", "\\u001c", "\\u001d", "\\u001e", "\\u001f"];

var escapeFn = function escapeFn(str) {
  return meta[str.charCodeAt(0)];
};

var warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;
var NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function innerFail(obj) {
  if (obj.message instanceof Error) throw obj.message;
  throw new AssertionError(obj);
}

function fail(actual, expected, message, operator, stackStartFn) {
  var argsLen = arguments.length;
  var internalMessage;

  if (argsLen === 0) {
    internalMessage = 'Failed';
  } else if (argsLen === 1) {
    message = actual;
    actual = undefined;
  } else {
    if (warned === false) {
      warned = true;
      var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
      warn('assert.fail() with more than one argument is deprecated. ' + 'Please use assert.strictEqual() instead or only pass a message.', 'DeprecationWarning', 'DEP0094');
    }

    if (argsLen === 2) operator = '!=';
  }

  if (message instanceof Error) throw message;
  var errArgs = {
    actual: actual,
    expected: expected,
    operator: operator === undefined ? 'fail' : operator,
    stackStartFn: stackStartFn || fail
  };

  if (message !== undefined) {
    errArgs.message = message;
  }

  var err = new AssertionError(errArgs);

  if (internalMessage) {
    err.message = internalMessage;
    err.generatedMessage = true;
  }

  throw err;
}

assert.fail = fail; // The AssertionError is defined in internal/error.

assert.AssertionError = AssertionError;

function innerOk(fn, argLen, value, message) {
  if (!value) {
    var generatedMessage = false;

    if (argLen === 0) {
      generatedMessage = true;
      message = 'No value argument passed to `assert.ok()`';
    } else if (message instanceof Error) {
      throw message;
    }

    var err = new AssertionError({
      actual: value,
      expected: true,
      message: message,
      operator: '==',
      stackStartFn: fn
    });
    err.generatedMessage = generatedMessage;
    throw err;
  }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.


function ok() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  innerOk.apply(void 0, [ok, args.length].concat(args));
}

assert.ok = ok; // The equality assertion tests shallow, coercive equality with ==.

/* eslint-disable no-restricted-properties */

assert.equal = function equal(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual != expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '==',
      stackStartFn: equal
    });
  }
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.


assert.notEqual = function notEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  } // eslint-disable-next-line eqeqeq


  if (actual == expected) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: '!=',
      stackStartFn: notEqual
    });
  }
}; // The equivalence assertion tests a deep equality relation.


assert.deepEqual = function deepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepEqual',
      stackStartFn: deepEqual
    });
  }
}; // The non-equivalence assertion tests for any deep inequality.


assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepEqual',
      stackStartFn: notDeepEqual
    });
  }
};
/* eslint-enable */


assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (!isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'deepStrictEqual',
      stackStartFn: deepStrictEqual
    });
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;

function notDeepStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (isDeepEqual === undefined) lazyLoadComparison();

  if (isDeepStrictEqual(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notDeepStrictEqual',
      stackStartFn: notDeepStrictEqual
    });
  }
}

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (!objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'strictEqual',
      stackStartFn: strictEqual
    });
  }
};

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (arguments.length < 2) {
    throw new ERR_MISSING_ARGS('actual', 'expected');
  }

  if (objectIs(actual, expected)) {
    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: 'notStrictEqual',
      stackStartFn: notStrictEqual
    });
  }
};

var Comparison = function Comparison(obj, keys, actual) {
  var _this = this;

  _classCallCheck(this, Comparison);

  keys.forEach(function (key) {
    if (key in obj) {
      if (actual !== undefined && typeof actual[key] === 'string' && isRegExp(obj[key]) && obj[key].test(actual[key])) {
        _this[key] = actual[key];
      } else {
        _this[key] = obj[key];
      }
    }
  });
};

function compareExceptionKey(actual, expected, key, message, keys, fn) {
  if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
    if (!message) {
      // Create placeholder objects to create a nice output.
      var a = new Comparison(actual, keys);
      var b = new Comparison(expected, keys, actual);
      var err = new AssertionError({
        actual: a,
        expected: b,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.actual = actual;
      err.expected = expected;
      err.operator = fn.name;
      throw err;
    }

    innerFail({
      actual: actual,
      expected: expected,
      message: message,
      operator: fn.name,
      stackStartFn: fn
    });
  }
}

function expectedException(actual, expected, msg, fn) {
  if (typeof expected !== 'function') {
    if (isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.

    if (arguments.length === 2) {
      throw new ERR_INVALID_ARG_TYPE('expected', ['Function', 'RegExp'], expected);
    } // Handle primitives properly.


    if (_typeof(actual) !== 'object' || actual === null) {
      var err = new AssertionError({
        actual: actual,
        expected: expected,
        message: msg,
        operator: 'deepStrictEqual',
        stackStartFn: fn
      });
      err.operator = fn.name;
      throw err;
    }

    var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
    // as well.

    if (expected instanceof Error) {
      keys.push('name', 'message');
    } else if (keys.length === 0) {
      throw new ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
    }

    if (isDeepEqual === undefined) lazyLoadComparison();
    keys.forEach(function (key) {
      if (typeof actual[key] === 'string' && isRegExp(expected[key]) && expected[key].test(actual[key])) {
        return;
      }

      compareExceptionKey(actual, expected, key, msg, keys, fn);
    });
    return true;
  } // Guard instanceof against arrow functions as they don't have a prototype.


  if (expected.prototype !== undefined && actual instanceof expected) {
    return true;
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function getActual(fn) {
  if (typeof fn !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
  }

  try {
    fn();
  } catch (e) {
    return e;
  }

  return NO_EXCEPTION_SENTINEL;
}

function checkIsPromise(obj) {
  // Accept native ES6 promises and promises that are implemented in a similar
  // way. Do not accept thenables that use a function as `obj` and that have no
  // `catch` handler.
  // TODO: thenables are checked up until they have the correct methods,
  // but according to documentation, the `then` method should receive
  // the `fulfill` and `reject` arguments as well or it may be never resolved.
  return isPromise(obj) || obj !== null && _typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}

function waitForActual(promiseFn) {
  return Promise.resolve().then(function () {
    var resultPromise;

    if (typeof promiseFn === 'function') {
      // Return a rejected promise if `promiseFn` throws synchronously.
      resultPromise = promiseFn(); // Fail in case no promise is returned.

      if (!checkIsPromise(resultPromise)) {
        throw new ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
      }
    } else if (checkIsPromise(promiseFn)) {
      resultPromise = promiseFn;
    } else {
      throw new ERR_INVALID_ARG_TYPE('promiseFn', ['Function', 'Promise'], promiseFn);
    }

    return Promise.resolve().then(function () {
      return resultPromise;
    }).then(function () {
      return NO_EXCEPTION_SENTINEL;
    }).catch(function (e) {
      return e;
    });
  });
}

function expectsError(stackStartFn, actual, error, message) {
  if (typeof error === 'string') {
    if (arguments.length === 4) {
      throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
    }

    if (_typeof(actual) === 'object' && actual !== null) {
      if (actual.message === error) {
        throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
      }
    } else if (actual === error) {
      throw new ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
    }

    message = error;
    error = undefined;
  } else if (error != null && _typeof(error) !== 'object' && typeof error !== 'function') {
    throw new ERR_INVALID_ARG_TYPE('error', ['Object', 'Error', 'Function', 'RegExp'], error);
  }

  if (actual === NO_EXCEPTION_SENTINEL) {
    var details = '';

    if (error && error.name) {
      details += " (".concat(error.name, ")");
    }

    details += message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
    innerFail({
      actual: undefined,
      expected: error,
      operator: stackStartFn.name,
      message: "Missing expected ".concat(fnType).concat(details),
      stackStartFn: stackStartFn
    });
  }

  if (error && !expectedException(actual, error, message, stackStartFn)) {
    throw actual;
  }
}

function expectsNoError(stackStartFn, actual, error, message) {
  if (actual === NO_EXCEPTION_SENTINEL) return;

  if (typeof error === 'string') {
    message = error;
    error = undefined;
  }

  if (!error || expectedException(actual, error)) {
    var details = message ? ": ".concat(message) : '.';
    var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
    innerFail({
      actual: actual,
      expected: error,
      operator: stackStartFn.name,
      message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
      stackStartFn: stackStartFn
    });
  }

  throw actual;
}

assert.throws = function throws(promiseFn) {
  for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
};

assert.rejects = function rejects(promiseFn) {
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }

  return waitForActual(promiseFn).then(function (result) {
    return expectsError.apply(void 0, [rejects, result].concat(args));
  });
};

assert.doesNotThrow = function doesNotThrow(fn) {
  for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    args[_key4 - 1] = arguments[_key4];
  }

  expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
};

assert.doesNotReject = function doesNotReject(fn) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }

  return waitForActual(fn).then(function (result) {
    return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
  });
};

assert.ifError = function ifError(err) {
  if (err !== null && err !== undefined) {
    var message = 'ifError got unwanted exception: ';

    if (_typeof(err) === 'object' && typeof err.message === 'string') {
      if (err.message.length === 0 && err.constructor) {
        message += err.constructor.name;
      } else {
        message += err.message;
      }
    } else {
      message += inspect(err);
    }

    var newErr = new AssertionError({
      actual: err,
      expected: null,
      operator: 'ifError',
      message: message,
      stackStartFn: ifError
    }); // Make sure we actually have a stack trace!

    var origStack = err.stack;

    if (typeof origStack === 'string') {
      // This will remove any duplicated frames from the error frames taken
      // from within `ifError` and add the original error frames to the newly
      // created ones.
      var tmp2 = origStack.split('\n');
      tmp2.shift(); // Filter all frames existing in err.stack.

      var tmp1 = newErr.stack.split('\n');

      for (var i = 0; i < tmp2.length; i++) {
        // Find the first occurrence of the frame.
        var pos = tmp1.indexOf(tmp2[i]);

        if (pos !== -1) {
          // Only keep new frames.
          tmp1 = tmp1.slice(0, pos);
          break;
        }
      }

      newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
    }

    throw newErr;
  }
}; // Expose a strict only variant of assert


function strict() {
  for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
    args[_key6] = arguments[_key6];
  }

  innerOk.apply(void 0, [strict, args.length].concat(args));
}

assert.strict = objectAssign(strict, assert, {
  equal: assert.strictEqual,
  deepEqual: assert.deepStrictEqual,
  notEqual: assert.notStrictEqual,
  notDeepEqual: assert.notDeepStrictEqual
});
assert.strict.strict = assert.strict;

/***/ }),

/***/ "./node_modules/assert/build/internal/assert/assertion_error.js":
/*!**********************************************************************!*\
  !*** ./node_modules/assert/build/internal/assert/assertion_error.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c


function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _wrapNativeSuper(Class) { var _cache = typeof Map === "function" ? new Map() : undefined; _wrapNativeSuper = function _wrapNativeSuper(Class) { if (Class === null || !_isNativeFunction(Class)) return Class; if (typeof Class !== "function") { throw new TypeError("Super expression must either be null or a function"); } if (typeof _cache !== "undefined") { if (_cache.has(Class)) return _cache.get(Class); _cache.set(Class, Wrapper); } function Wrapper() { return _construct(Class, arguments, _getPrototypeOf(this).constructor); } Wrapper.prototype = Object.create(Class.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } }); return _setPrototypeOf(Wrapper, Class); }; return _wrapNativeSuper(Class); }

function isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _construct(Parent, args, Class) { if (isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }

function _isNativeFunction(fn) { return Function.toString.call(fn).indexOf("[native code]") !== -1; }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var _require = __webpack_require__(/*! util/ */ "./node_modules/util/util.js"),
    inspect = _require.inspect;

var _require2 = __webpack_require__(/*! ../errors */ "./node_modules/assert/build/internal/errors.js"),
    ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat


function repeat(str, count) {
  count = Math.floor(count);
  if (str.length == 0 || count == 0) return '';
  var maxCount = str.length * count;
  count = Math.floor(Math.log(count) / Math.log(2));

  while (count) {
    str += str;
    count--;
  }

  str += str.substring(0, maxCount - str.length);
  return str;
}

var blue = '';
var green = '';
var red = '';
var white = '';
var kReadableOperator = {
  deepStrictEqual: 'Expected values to be strictly deep-equal:',
  strictEqual: 'Expected values to be strictly equal:',
  strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
  deepEqual: 'Expected values to be loosely deep-equal:',
  equal: 'Expected values to be loosely equal:',
  notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
  notStrictEqual: 'Expected "actual" to be strictly unequal to:',
  notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
  notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
  notEqual: 'Expected "actual" to be loosely unequal to:',
  notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.

var kMaxShortLength = 10;

function copyError(source) {
  var keys = Object.keys(source);
  var target = Object.create(Object.getPrototypeOf(source));
  keys.forEach(function (key) {
    target[key] = source[key];
  });
  Object.defineProperty(target, 'message', {
    value: source.message
  });
  return target;
}

function inspectValue(val) {
  // The util.inspect default values could be changed. This makes sure the
  // error messages contain the necessary information nevertheless.
  return inspect(val, {
    compact: false,
    customInspect: false,
    depth: 1000,
    maxArrayLength: Infinity,
    // Assert compares only enumerable properties (with a few exceptions).
    showHidden: false,
    // Having a long line as error is better than wrapping the line for
    // comparison for now.
    // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
    // have meta information about the inspected properties (i.e., know where
    // in what line the property starts and ends).
    breakLength: Infinity,
    // Assert does not detect proxies currently.
    showProxy: false,
    sorted: true,
    // Inspect getters as we also check them when comparing entries.
    getters: true
  });
}

function createErrDiff(actual, expected, operator) {
  var other = '';
  var res = '';
  var lastPos = 0;
  var end = '';
  var skipped = false;
  var actualInspected = inspectValue(actual);
  var actualLines = actualInspected.split('\n');
  var expectedLines = inspectValue(expected).split('\n');
  var i = 0;
  var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
  // for the `strictEqual` operator.

  if (operator === 'strictEqual' && _typeof(actual) === 'object' && _typeof(expected) === 'object' && actual !== null && expected !== null) {
    operator = 'strictEqualObject';
  } // If "actual" and "expected" fit on a single line and they are not strictly
  // equal, check further special handling.


  if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
    var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
    // kMaxShortLength and if neither is an object and at least one of them is
    // not `zero`, use the strict equal comparison to visualize the output.

    if (inputLength <= kMaxShortLength) {
      if ((_typeof(actual) !== 'object' || actual === null) && (_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) {
        // -0 === +0
        return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
      }
    } else if (operator !== 'strictEqualObject') {
      // If the stderr is a tty and the input length is lower than the current
      // columns per line, add a mismatch indicator below the output. If it is
      // not a tty, use a default value of 80 characters.
      var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;

      if (inputLength < maxLength) {
        while (actualLines[0][i] === expectedLines[0][i]) {
          i++;
        } // Ignore the first characters.


        if (i > 2) {
          // Add position indicator for the first mismatch in case it is a
          // single line and the input length is less than the column length.
          indicator = "\n  ".concat(repeat(' ', i), "^");
          i = 0;
        }
      }
    }
  } // Remove all ending lines that match (this optimizes the output for
  // readability by reducing the number of total changed lines).


  var a = actualLines[actualLines.length - 1];
  var b = expectedLines[expectedLines.length - 1];

  while (a === b) {
    if (i++ < 2) {
      end = "\n  ".concat(a).concat(end);
    } else {
      other = a;
    }

    actualLines.pop();
    expectedLines.pop();
    if (actualLines.length === 0 || expectedLines.length === 0) break;
    a = actualLines[actualLines.length - 1];
    b = expectedLines[expectedLines.length - 1];
  }

  var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
  // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })

  if (maxLines === 0) {
    // We have to get the result again. The lines were all removed before.
    var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
    // TODO: Accept env to always show the full error.


    if (_actualLines.length > 30) {
      _actualLines[26] = "".concat(blue, "...").concat(white);

      while (_actualLines.length > 27) {
        _actualLines.pop();
      }
    }

    return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
  }

  if (i > 3) {
    end = "\n".concat(blue, "...").concat(white).concat(end);
    skipped = true;
  }

  if (other !== '') {
    end = "\n  ".concat(other).concat(end);
    other = '';
  }

  var printedLines = 0;
  var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
  var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");

  for (i = 0; i < maxLines; i++) {
    // Only extra expected lines exist
    var cur = i - lastPos;

    if (actualLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(expectedLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(expectedLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the expected line to the cache.

      other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
      printedLines++; // Only extra actual lines exist
    } else if (expectedLines.length < i + 1) {
      // If the last diverging line is more than one line above and the
      // current line is at least line three, add some of the former lines and
      // also add dots to indicate skipped entries.
      if (cur > 1 && i > 2) {
        if (cur > 4) {
          res += "\n".concat(blue, "...").concat(white);
          skipped = true;
        } else if (cur > 3) {
          res += "\n  ".concat(actualLines[i - 2]);
          printedLines++;
        }

        res += "\n  ".concat(actualLines[i - 1]);
        printedLines++;
      } // Mark the current line as the last diverging one.


      lastPos = i; // Add the actual line to the result.

      res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
      printedLines++; // Lines diverge
    } else {
      var expectedLine = expectedLines[i];
      var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
      // a trailing comma. In that case it is actually identical and we should
      // mark it as such.

      var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
      // add a comma at the end of the actual line. Otherwise the output could
      // look weird as in:
      //
      //   [
      //     1         // No comma at the end!
      // +   2
      //   ]
      //

      if (divergingLines && endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
        divergingLines = false;
        actualLine += ',';
      }

      if (divergingLines) {
        // If the last diverging line is more than one line above and the
        // current line is at least line three, add some of the former lines and
        // also add dots to indicate skipped entries.
        if (cur > 1 && i > 2) {
          if (cur > 4) {
            res += "\n".concat(blue, "...").concat(white);
            skipped = true;
          } else if (cur > 3) {
            res += "\n  ".concat(actualLines[i - 2]);
            printedLines++;
          }

          res += "\n  ".concat(actualLines[i - 1]);
          printedLines++;
        } // Mark the current line as the last diverging one.


        lastPos = i; // Add the actual line to the result and cache the expected diverging
        // line so consecutive diverging lines show up as +++--- and not +-+-+-.

        res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
        other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
        printedLines += 2; // Lines are identical
      } else {
        // Add all cached information to the result before adding other things
        // and reset the cache.
        res += other;
        other = ''; // If the last diverging line is exactly one line above or if it is the
        // very first line, add the line to the result.

        if (cur === 1 || i === 0) {
          res += "\n  ".concat(actualLine);
          printedLines++;
        }
      }
    } // Inspected object to big (Show ~20 rows max)


    if (printedLines > 20 && i < maxLines - 2) {
      return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
    }
  }

  return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}

var AssertionError =
/*#__PURE__*/
function (_Error) {
  _inherits(AssertionError, _Error);

  function AssertionError(options) {
    var _this;

    _classCallCheck(this, AssertionError);

    if (_typeof(options) !== 'object' || options === null) {
      throw new ERR_INVALID_ARG_TYPE('options', 'Object', options);
    }

    var message = options.message,
        operator = options.operator,
        stackStartFn = options.stackStartFn;
    var actual = options.actual,
        expected = options.expected;
    var limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;

    if (message != null) {
      _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, String(message)));
    } else {
      if (process.stderr && process.stderr.isTTY) {
        // Reset on each call to make sure we handle dynamically set environment
        // variables correct.
        if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
          blue = "\x1B[34m";
          green = "\x1B[32m";
          white = "\x1B[39m";
          red = "\x1B[31m";
        } else {
          blue = '';
          green = '';
          white = '';
          red = '';
        }
      } // Prevent the error stack from being visible by duplicating the error
      // in a very close way to the original in case both sides are actually
      // instances of Error.


      if (_typeof(actual) === 'object' && actual !== null && _typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
        actual = copyError(actual);
        expected = copyError(expected);
      }

      if (operator === 'deepStrictEqual' || operator === 'strictEqual') {
        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, createErrDiff(actual, expected, operator)));
      } else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
        // In case the objects are equal but the operator requires unequal, show
        // the first object and say A equals B
        var base = kReadableOperator[operator];
        var res = inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.

        if (operator === 'notStrictEqual' && _typeof(actual) === 'object' && actual !== null) {
          base = kReadableOperator.notStrictEqualObject;
        } // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.


        if (res.length > 30) {
          res[26] = "".concat(blue, "...").concat(white);

          while (res.length > 27) {
            res.pop();
          }
        } // Only print a single input.


        if (res.length === 1) {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
        } else {
          _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
        }
      } else {
        var _res = inspectValue(actual);

        var other = '';
        var knownOperators = kReadableOperator[operator];

        if (operator === 'notDeepEqual' || operator === 'notEqual') {
          _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);

          if (_res.length > 1024) {
            _res = "".concat(_res.slice(0, 1021), "...");
          }
        } else {
          other = "".concat(inspectValue(expected));

          if (_res.length > 512) {
            _res = "".concat(_res.slice(0, 509), "...");
          }

          if (other.length > 512) {
            other = "".concat(other.slice(0, 509), "...");
          }

          if (operator === 'deepEqual' || operator === 'equal') {
            _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
          } else {
            other = " ".concat(operator, " ").concat(other);
          }
        }

        _this = _possibleConstructorReturn(this, _getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
      }
    }

    Error.stackTraceLimit = limit;
    _this.generatedMessage = !message;
    Object.defineProperty(_assertThisInitialized(_this), 'name', {
      value: 'AssertionError [ERR_ASSERTION]',
      enumerable: false,
      writable: true,
      configurable: true
    });
    _this.code = 'ERR_ASSERTION';
    _this.actual = actual;
    _this.expected = expected;
    _this.operator = operator;

    if (Error.captureStackTrace) {
      // eslint-disable-next-line no-restricted-syntax
      Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
    } // Create error message including the error code in the name.


    _this.stack; // Reset the name.

    _this.name = 'AssertionError';
    return _possibleConstructorReturn(_this);
  }

  _createClass(AssertionError, [{
    key: "toString",
    value: function toString() {
      return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
    }
  }, {
    key: inspect.custom,
    value: function value(recurseTimes, ctx) {
      // This limits the `actual` and `expected` property default inspection to
      // the minimum depth. Otherwise those values would be too verbose compared
      // to the actual error message which contains a combined view of these two
      // input values.
      return inspect(this, _objectSpread({}, ctx, {
        customInspect: false,
        depth: 0
      }));
    }
  }]);

  return AssertionError;
}(_wrapNativeSuper(Error));

module.exports = AssertionError;

/***/ }),

/***/ "./node_modules/assert/build/internal/errors.js":
/*!******************************************************!*\
  !*** ./node_modules/assert/build/internal/errors.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f

/* eslint node-core/documented-errors: "error" */

/* eslint node-core/alphabetize-errors: "error" */

/* eslint node-core/prefer-util-format-errors: "error" */
 // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

var codes = {}; // Lazy loaded

var assert;
var util;

function createErrorType(code, message, Base) {
  if (!Base) {
    Base = Error;
  }

  function getMessage(arg1, arg2, arg3) {
    if (typeof message === 'string') {
      return message;
    } else {
      return message(arg1, arg2, arg3);
    }
  }

  var NodeError =
  /*#__PURE__*/
  function (_Base) {
    _inherits(NodeError, _Base);

    function NodeError(arg1, arg2, arg3) {
      var _this;

      _classCallCheck(this, NodeError);

      _this = _possibleConstructorReturn(this, _getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
      _this.code = code;
      return _this;
    }

    return NodeError;
  }(Base);

  codes[code] = NodeError;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js


function oneOf(expected, thing) {
  if (Array.isArray(expected)) {
    var len = expected.length;
    expected = expected.map(function (i) {
      return String(i);
    });

    if (len > 2) {
      return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
    } else if (len === 2) {
      return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
    } else {
      return "of ".concat(thing, " ").concat(expected[0]);
    }
  } else {
    return "of ".concat(thing, " ").concat(String(expected));
  }
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith


function startsWith(str, search, pos) {
  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith


function endsWith(str, search, this_len) {
  if (this_len === undefined || this_len > str.length) {
    this_len = str.length;
  }

  return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes


function includes(str, search, start) {
  if (typeof start !== 'number') {
    start = 0;
  }

  if (start + search.length > str.length) {
    return false;
  } else {
    return str.indexOf(search, start) !== -1;
  }
}

createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'

  var determiner;

  if (typeof expected === 'string' && startsWith(expected, 'not ')) {
    determiner = 'must not be';
    expected = expected.replace(/^not /, '');
  } else {
    determiner = 'must be';
  }

  var msg;

  if (endsWith(name, ' argument')) {
    // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } else {
    var type = includes(name, '.') ? 'property' : 'argument';
    msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
  } // TODO(BridgeAR): Improve the output by showing `null` and similar.


  msg += ". Received type ".concat(_typeof(actual));
  return msg;
}, TypeError);
createErrorType('ERR_INVALID_ARG_VALUE', function (name, value) {
  var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
  if (util === undefined) util = __webpack_require__(/*! util/ */ "./node_modules/util/util.js");
  var inspected = util.inspect(value);

  if (inspected.length > 128) {
    inspected = "".concat(inspected.slice(0, 128), "...");
  }

  return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
createErrorType('ERR_INVALID_RETURN_VALUE', function (input, name, value) {
  var type;

  if (value && value.constructor && value.constructor.name) {
    type = "instance of ".concat(value.constructor.name);
  } else {
    type = "type ".concat(_typeof(value));
  }

  return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);
createErrorType('ERR_MISSING_ARGS', function () {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (assert === undefined) assert = __webpack_require__(/*! ../assert */ "./node_modules/assert/build/assert.js");
  assert(args.length > 0, 'At least one arg needs to be specified');
  var msg = 'The ';
  var len = args.length;
  args = args.map(function (a) {
    return "\"".concat(a, "\"");
  });

  switch (len) {
    case 1:
      msg += "".concat(args[0], " argument");
      break;

    case 2:
      msg += "".concat(args[0], " and ").concat(args[1], " arguments");
      break;

    default:
      msg += args.slice(0, len - 1).join(', ');
      msg += ", and ".concat(args[len - 1], " arguments");
      break;
  }

  return "".concat(msg, " must be specified");
}, TypeError);
module.exports.codes = codes;

/***/ }),

/***/ "./node_modules/assert/build/internal/util/comparisons.js":
/*!****************************************************************!*\
  !*** ./node_modules/assert/build/internal/util/comparisons.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9


function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var regexFlagsSupported = /a/g.flags !== undefined;

var arrayFromSet = function arrayFromSet(set) {
  var array = [];
  set.forEach(function (value) {
    return array.push(value);
  });
  return array;
};

var arrayFromMap = function arrayFromMap(map) {
  var array = [];
  map.forEach(function (value, key) {
    return array.push([key, value]);
  });
  return array;
};

var objectIs = Object.is ? Object.is : __webpack_require__(/*! object-is */ "./node_modules/object-is/index.js");
var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function () {
  return [];
};
var numberIsNaN = Number.isNaN ? Number.isNaN : __webpack_require__(/*! is-nan */ "./node_modules/is-nan/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
var objectToString = uncurryThis(Object.prototype.toString);

var _require$types = (__webpack_require__(/*! util/ */ "./node_modules/util/util.js").types),
    isAnyArrayBuffer = _require$types.isAnyArrayBuffer,
    isArrayBufferView = _require$types.isArrayBufferView,
    isDate = _require$types.isDate,
    isMap = _require$types.isMap,
    isRegExp = _require$types.isRegExp,
    isSet = _require$types.isSet,
    isNativeError = _require$types.isNativeError,
    isBoxedPrimitive = _require$types.isBoxedPrimitive,
    isNumberObject = _require$types.isNumberObject,
    isStringObject = _require$types.isStringObject,
    isBooleanObject = _require$types.isBooleanObject,
    isBigIntObject = _require$types.isBigIntObject,
    isSymbolObject = _require$types.isSymbolObject,
    isFloat32Array = _require$types.isFloat32Array,
    isFloat64Array = _require$types.isFloat64Array;

function isNonIndex(key) {
  if (key.length === 0 || key.length > 10) return true;

  for (var i = 0; i < key.length; i++) {
    var code = key.charCodeAt(i);
    if (code < 48 || code > 57) return true;
  } // The maximum size for an array is 2 ** 32 -1.


  return key.length === 10 && key >= Math.pow(2, 32);
}

function getOwnNonIndexProperties(value) {
  return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */


function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }

  if (y < x) {
    return 1;
  }

  return 0;
}

var ONLY_ENUMERABLE = undefined;
var kStrict = true;
var kLoose = false;
var kNoIterator = 0;
var kIsArray = 1;
var kIsSet = 2;
var kIsMap = 3; // Check if they have the same source and flags

function areSimilarRegExps(a, b) {
  return regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}

function areSimilarFloatArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  for (var offset = 0; offset < a.byteLength; offset++) {
    if (a[offset] !== b[offset]) {
      return false;
    }
  }

  return true;
}

function areSimilarTypedArrays(a, b) {
  if (a.byteLength !== b.byteLength) {
    return false;
  }

  return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}

function areEqualArrayBuffers(buf1, buf2) {
  return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}

function isEqualBoxedPrimitive(val1, val2) {
  if (isNumberObject(val1)) {
    return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
  }

  if (isStringObject(val1)) {
    return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
  }

  if (isBooleanObject(val1)) {
    return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
  }

  if (isBigIntObject(val1)) {
    return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
  }

  return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.


function innerDeepEqual(val1, val2, strict, memos) {
  // All identical values are equivalent, as determined by ===.
  if (val1 === val2) {
    if (val1 !== 0) return true;
    return strict ? objectIs(val1, val2) : true;
  } // Check more closely if val1 and val2 are equal.


  if (strict) {
    if (_typeof(val1) !== 'object') {
      return typeof val1 === 'number' && numberIsNaN(val1) && numberIsNaN(val2);
    }

    if (_typeof(val2) !== 'object' || val1 === null || val2 === null) {
      return false;
    }

    if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
      return false;
    }
  } else {
    if (val1 === null || _typeof(val1) !== 'object') {
      if (val2 === null || _typeof(val2) !== 'object') {
        // eslint-disable-next-line eqeqeq
        return val1 == val2;
      }

      return false;
    }

    if (val2 === null || _typeof(val2) !== 'object') {
      return false;
    }
  }

  var val1Tag = objectToString(val1);
  var val2Tag = objectToString(val2);

  if (val1Tag !== val2Tag) {
    return false;
  }

  if (Array.isArray(val1)) {
    // Check for sparse arrays and general fast path
    if (val1.length !== val2.length) {
      return false;
    }

    var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
    var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (keys1.length !== keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
  } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
  // wan't to early return out of the rest of the checks. However we can check
  // if the second value is one of these values and the first isn't.


  if (val1Tag === '[object Object]') {
    // return keyCheck(val1, val2, strict, memos, kNoIterator);
    if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
      return false;
    }
  }

  if (isDate(val1)) {
    if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
      return false;
    }
  } else if (isRegExp(val1)) {
    if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
      return false;
    }
  } else if (isNativeError(val1) || val1 instanceof Error) {
    // Do not compare the stack as it might differ even though the error itself
    // is otherwise identical.
    if (val1.message !== val2.message || val1.name !== val2.name) {
      return false;
    }
  } else if (isArrayBufferView(val1)) {
    if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
      if (!areSimilarFloatArrays(val1, val2)) {
        return false;
      }
    } else if (!areSimilarTypedArrays(val1, val2)) {
      return false;
    } // Buffer.compare returns true, so val1.length === val2.length. If they both
    // only contain numeric keys, we don't need to exam further than checking
    // the symbols.


    var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);

    var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);

    if (_keys.length !== _keys2.length) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
  } else if (isSet(val1)) {
    if (!isSet(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsSet);
  } else if (isMap(val1)) {
    if (!isMap(val2) || val1.size !== val2.size) {
      return false;
    }

    return keyCheck(val1, val2, strict, memos, kIsMap);
  } else if (isAnyArrayBuffer(val1)) {
    if (!areEqualArrayBuffers(val1, val2)) {
      return false;
    }
  } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
    return false;
  }

  return keyCheck(val1, val2, strict, memos, kNoIterator);
}

function getEnumerables(val, keys) {
  return keys.filter(function (k) {
    return propertyIsEnumerable(val, k);
  });
}

function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
  // For all remaining Object pairs, including Array, objects and Maps,
  // equivalence is determined by having:
  // a) The same number of owned enumerable properties
  // b) The same set of keys/indexes (although not necessarily the same order)
  // c) Equivalent values for every corresponding key/index
  // d) For Sets and Maps, equal contents
  // Note: this accounts for both named and indexed properties on Arrays.
  if (arguments.length === 5) {
    aKeys = Object.keys(val1);
    var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.

    if (aKeys.length !== bKeys.length) {
      return false;
    }
  } // Cheap key test


  var i = 0;

  for (; i < aKeys.length; i++) {
    if (!hasOwnProperty(val2, aKeys[i])) {
      return false;
    }
  }

  if (strict && arguments.length === 5) {
    var symbolKeysA = objectGetOwnPropertySymbols(val1);

    if (symbolKeysA.length !== 0) {
      var count = 0;

      for (i = 0; i < symbolKeysA.length; i++) {
        var key = symbolKeysA[i];

        if (propertyIsEnumerable(val1, key)) {
          if (!propertyIsEnumerable(val2, key)) {
            return false;
          }

          aKeys.push(key);
          count++;
        } else if (propertyIsEnumerable(val2, key)) {
          return false;
        }
      }

      var symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
        return false;
      }
    } else {
      var _symbolKeysB = objectGetOwnPropertySymbols(val2);

      if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
        return false;
      }
    }
  }

  if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
    return true;
  } // Use memos to handle cycles.


  if (memos === undefined) {
    memos = {
      val1: new Map(),
      val2: new Map(),
      position: 0
    };
  } else {
    // We prevent up to two map.has(x) calls by directly retrieving the value
    // and checking for undefined. The map can only contain numbers, so it is
    // safe to check for undefined only.
    var val2MemoA = memos.val1.get(val1);

    if (val2MemoA !== undefined) {
      var val2MemoB = memos.val2.get(val2);

      if (val2MemoB !== undefined) {
        return val2MemoA === val2MemoB;
      }
    }

    memos.position++;
  }

  memos.val1.set(val1, memos.position);
  memos.val2.set(val2, memos.position);
  var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
  memos.val1.delete(val1);
  memos.val2.delete(val2);
  return areEq;
}

function setHasEqualElement(set, val1, strict, memo) {
  // Go looking.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var val2 = setValues[i];

    if (innerDeepEqual(val1, val2, strict, memo)) {
      // Remove the matching element to make sure we do not check that again.
      set.delete(val2);
      return true;
    }
  }

  return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').


function findLooseMatchingPrimitives(prim) {
  switch (_typeof(prim)) {
    case 'undefined':
      return null;

    case 'object':
      // Only pass in null as object!
      return undefined;

    case 'symbol':
      return false;

    case 'string':
      prim = +prim;
    // Loose equal entries exist only if the string is possible to convert to
    // a regular number and not NaN.
    // Fall through

    case 'number':
      if (numberIsNaN(prim)) {
        return false;
      }

  }

  return true;
}

function setMightHaveLoosePrim(a, b, prim) {
  var altValue = findLooseMatchingPrimitives(prim);
  if (altValue != null) return altValue;
  return b.has(altValue) && !a.has(altValue);
}

function mapMightHaveLoosePrim(a, b, prim, item, memo) {
  var altValue = findLooseMatchingPrimitives(prim);

  if (altValue != null) {
    return altValue;
  }

  var curB = b.get(altValue);

  if (curB === undefined && !b.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
    return false;
  }

  return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
}

function setEquiv(a, b, strict, memo) {
  // This is a lazily initiated Set of entries which have to be compared
  // pairwise.
  var set = null;
  var aValues = arrayFromSet(a);

  for (var i = 0; i < aValues.length; i++) {
    var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
    // heavy sets but it is a minor slow down for primitives. As they are fast
    // to check this improves the worst case scenario instead.

    if (_typeof(val) === 'object' && val !== null) {
      if (set === null) {
        set = new Set();
      } // If the specified value doesn't exist in the second set its an not null
      // object (or non strict only: a not matching primitive) we'll need to go
      // hunting for something thats deep-(strict-)equal to it. To make this
      // O(n log n) complexity we have to copy these values in a new set first.


      set.add(val);
    } else if (!b.has(val)) {
      if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.

      if (!setMightHaveLoosePrim(a, b, val)) {
        return false;
      }

      if (set === null) {
        set = new Set();
      }

      set.add(val);
    }
  }

  if (set !== null) {
    var bValues = arrayFromSet(b);

    for (var _i = 0; _i < bValues.length; _i++) {
      var _val = bValues[_i]; // We have to check if a primitive value is already
      // matching and only if it's not, go hunting for it.

      if (_typeof(_val) === 'object' && _val !== null) {
        if (!setHasEqualElement(set, _val, strict, memo)) return false;
      } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
  // To be able to handle cases like:
  //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
  // ... we need to consider *all* matching keys, not just the first we find.
  var setValues = arrayFromSet(set);

  for (var i = 0; i < setValues.length; i++) {
    var key2 = setValues[i];

    if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
      set.delete(key2);
      return true;
    }
  }

  return false;
}

function mapEquiv(a, b, strict, memo) {
  var set = null;
  var aEntries = arrayFromMap(a);

  for (var i = 0; i < aEntries.length; i++) {
    var _aEntries$i = _slicedToArray(aEntries[i], 2),
        key = _aEntries$i[0],
        item1 = _aEntries$i[1];

    if (_typeof(key) === 'object' && key !== null) {
      if (set === null) {
        set = new Set();
      }

      set.add(key);
    } else {
      // By directly retrieving the value we prevent another b.has(key) check in
      // almost all possible cases.
      var item2 = b.get(key);

      if (item2 === undefined && !b.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
        if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
        // keys.

        if (!mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;

        if (set === null) {
          set = new Set();
        }

        set.add(key);
      }
    }
  }

  if (set !== null) {
    var bEntries = arrayFromMap(b);

    for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
      var _bEntries$_i = _slicedToArray(bEntries[_i2], 2),
          key = _bEntries$_i[0],
          item = _bEntries$_i[1];

      if (_typeof(key) === 'object' && key !== null) {
        if (!mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
      } else if (!strict && (!a.has(key) || !innerDeepEqual(a.get(key), item, false, memo)) && !mapHasEqualEntry(set, a, key, item, false, memo)) {
        return false;
      }
    }

    return set.size === 0;
  }

  return true;
}

function objEquiv(a, b, strict, keys, memos, iterationType) {
  // Sets and maps don't have their entries accessible via normal object
  // properties.
  var i = 0;

  if (iterationType === kIsSet) {
    if (!setEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsMap) {
    if (!mapEquiv(a, b, strict, memos)) {
      return false;
    }
  } else if (iterationType === kIsArray) {
    for (; i < a.length; i++) {
      if (hasOwnProperty(a, i)) {
        if (!hasOwnProperty(b, i) || !innerDeepEqual(a[i], b[i], strict, memos)) {
          return false;
        }
      } else if (hasOwnProperty(b, i)) {
        return false;
      } else {
        // Array is sparse.
        var keysA = Object.keys(a);

        for (; i < keysA.length; i++) {
          var key = keysA[i];

          if (!hasOwnProperty(b, key) || !innerDeepEqual(a[key], b[key], strict, memos)) {
            return false;
          }
        }

        if (keysA.length !== Object.keys(b).length) {
          return false;
        }

        return true;
      }
    }
  } // The pair must have equivalent values for every corresponding key.
  // Possibly expensive deep test:


  for (i = 0; i < keys.length; i++) {
    var _key = keys[i];

    if (!innerDeepEqual(a[_key], b[_key], strict, memos)) {
      return false;
    }
  }

  return true;
}

function isDeepEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kLoose);
}

function isDeepStrictEqual(val1, val2) {
  return innerDeepEqual(val1, val2, kStrict);
}

module.exports = {
  isDeepEqual: isDeepEqual,
  isDeepStrictEqual: isDeepStrictEqual
};

/***/ }),

/***/ "./src/account.js":
/*!************************!*\
  !*** ./src/account.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Account": () => (/* binding */ Account)
/* harmony export */ });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
function cov_bm0p59jbk() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\account.js";
  var hash = "a73e7a7aedc4887d50c56fe541162e68a58bf964";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\account.js",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "1": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 77
        }
      },
      "2": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      "3": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 46
        }
      },
      "4": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "5": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 57
        }
      },
      "6": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 32
        }
      },
      "7": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "8": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 27
        }
      },
      "9": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 36
        }
      },
      "10": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 42
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        },
        loc: {
          start: {
            line: 24,
            column: 35
          },
          end: {
            line: 38,
            column: 3
          }
        },
        line: 24
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        },
        loc: {
          start: {
            line: 45,
            column: 14
          },
          end: {
            line: 47,
            column: 3
          }
        },
        line: 45
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 52,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        },
        loc: {
          start: {
            line: 52,
            column: 19
          },
          end: {
            line: 54,
            column: 3
          }
        },
        line: 52
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 60,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        },
        loc: {
          start: {
            line: 60,
            column: 28
          },
          end: {
            line: 62,
            column: 3
          }
        },
        line: 60
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a73e7a7aedc4887d50c56fe541162e68a58bf964"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_bm0p59jbk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_bm0p59jbk();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




/**
 * Create a new Account object.
 *
 * `Account` represents a single account in the Stellar network and its sequence
 * number. Account tracks the sequence number as it is used by {@link
 * TransactionBuilder}. See
 * [Accounts](https://developers.stellar.org/docs/glossary/accounts/) for
 * more information about how accounts work in Stellar.
 *
 * @constructor
 *
 * @param {string} accountId - ID of the account (ex.
 *     `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`). If you
 *     provide a muxed account address, this will throw; use {@link
 *     MuxedAccount} instead.
 * @param {string} sequence  - current sequence number of the account
 */
var Account = /*#__PURE__*/function () {
  function Account(accountId, sequence) {
    _classCallCheck(this, Account);
    cov_bm0p59jbk().f[0]++;
    cov_bm0p59jbk().s[0]++;
    if (_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidMed25519PublicKey(accountId)) {
      cov_bm0p59jbk().b[0][0]++;
      cov_bm0p59jbk().s[1]++;
      throw new Error('accountId is an M-address; use MuxedAccount instead');
    } else {
      cov_bm0p59jbk().b[0][1]++;
    }
    cov_bm0p59jbk().s[2]++;
    if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(accountId)) {
      cov_bm0p59jbk().b[1][0]++;
      cov_bm0p59jbk().s[3]++;
      throw new Error('accountId is invalid');
    } else {
      cov_bm0p59jbk().b[1][1]++;
    }
    cov_bm0p59jbk().s[4]++;
    if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(sequence)) {
      cov_bm0p59jbk().b[2][0]++;
      cov_bm0p59jbk().s[5]++;
      throw new Error('sequence must be of type string');
    } else {
      cov_bm0p59jbk().b[2][1]++;
    }
    cov_bm0p59jbk().s[6]++;
    this._accountId = accountId;
    cov_bm0p59jbk().s[7]++;
    this.sequence = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](sequence);
  }

  /**
   * Returns Stellar account ID, ex.
   * `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`.
   * @returns {string}
   */
  _createClass(Account, [{
    key: "accountId",
    value: function accountId() {
      cov_bm0p59jbk().f[1]++;
      cov_bm0p59jbk().s[8]++;
      return this._accountId;
    }

    /**
     * @returns {string}  sequence number for the account as a string
     */
  }, {
    key: "sequenceNumber",
    value: function sequenceNumber() {
      cov_bm0p59jbk().f[2]++;
      cov_bm0p59jbk().s[9]++;
      return this.sequence.toString();
    }

    /**
     * Increments sequence number in this object by one.
     * @returns {void}
     */
  }, {
    key: "incrementSequenceNumber",
    value: function incrementSequenceNumber() {
      cov_bm0p59jbk().f[3]++;
      cov_bm0p59jbk().s[10]++;
      this.sequence = this.sequence.plus(1);
    }
  }]);
  return Account;
}();

/***/ }),

/***/ "./src/asset.js":
/*!**********************!*\
  !*** ./src/asset.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Asset": () => (/* binding */ Asset)
/* harmony export */ });
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_padEnd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/padEnd */ "./node_modules/lodash/padEnd.js");
/* harmony import */ var lodash_padEnd__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_padEnd__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/trimEnd */ "./node_modules/lodash/trimEnd.js");
/* harmony import */ var lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./keypair */ "./src/keypair.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
function cov_1jktlcbul8() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\asset.js";
  var hash = "67ef071b7b5692acfe8039fe3883d3d2922cf9a4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\asset.js",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "1": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 24,
          column: 8
        }
      },
      "2": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 28,
          column: 5
        }
      },
      "3": {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 47
        }
      },
      "4": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "5": {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 101
        }
      },
      "6": {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 31,
          column: 70
        }
      },
      "7": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 53
        }
      },
      "8": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 40,
          column: 5
        }
      },
      "9": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 24
        }
      },
      "10": {
        start: {
          line: 39,
          column: 6
        },
        end: {
          line: 39,
          column: 23
        }
      },
      "11": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 25
        }
      },
      "12": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 28
        }
      },
      "13": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "14": {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 29
        }
      },
      "15": {
        start: {
          line: 66,
          column: 8
        },
        end: {
          line: 66,
          column: 36
        }
      },
      "16": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 45
        }
      },
      "17": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 72
        }
      },
      "18": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 47
        }
      },
      "19": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "20": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 73
        }
      },
      "21": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 40
        }
      },
      "22": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 51
        }
      },
      "23": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 49
        }
      },
      "24": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 110,
          column: 5
        }
      },
      "25": {
        start: {
          line: 109,
          column: 6
        },
        end: {
          line: 109,
          column: 40
        }
      },
      "26": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "27": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 115,
          column: 30
        }
      },
      "28": {
        start: {
          line: 116,
          column: 6
        },
        end: {
          line: 116,
          column: 49
        }
      },
      "29": {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 31
        }
      },
      "30": {
        start: {
          line: 119,
          column: 6
        },
        end: {
          line: 119,
          column: 50
        }
      },
      "31": {
        start: {
          line: 123,
          column: 22
        },
        end: {
          line: 123,
          column: 52
        }
      },
      "32": {
        start: {
          line: 124,
          column: 23
        },
        end: {
          line: 124,
          column: 57
        }
      },
      "33": {
        start: {
          line: 127,
          column: 22
        },
        end: {
          line: 130,
          column: 6
        }
      },
      "34": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 50
        }
      },
      "35": {
        start: {
          line: 139,
          column: 4
        },
        end: {
          line: 139,
          column: 28
        }
      },
      "36": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 30
        }
      },
      "37": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 168,
          column: 5
        }
      },
      "38": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 24
        }
      },
      "39": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 34
        }
      },
      "40": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 35
        }
      },
      "41": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 25
        }
      },
      "42": {
        start: {
          line: 175,
          column: 4
        },
        end: {
          line: 177,
          column: 5
        }
      },
      "43": {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 176,
          column: 45
        }
      },
      "44": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 181,
          column: 5
        }
      },
      "45": {
        start: {
          line: 180,
          column: 6
        },
        end: {
          line: 180,
          column: 54
        }
      },
      "46": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 183,
          column: 53
        }
      },
      "47": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 24
        }
      },
      "48": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 198,
          column: 78
        }
      },
      "49": {
        start: {
          line: 202,
          column: 4
        },
        end: {
          line: 204,
          column: 5
        }
      },
      "50": {
        start: {
          line: 203,
          column: 6
        },
        end: {
          line: 203,
          column: 22
        }
      },
      "51": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 206,
          column: 51
        }
      },
      "52": {
        start: {
          line: 224,
          column: 4
        },
        end: {
          line: 226,
          column: 5
        }
      },
      "53": {
        start: {
          line: 225,
          column: 6
        },
        end: {
          line: 225,
          column: 43
        }
      },
      "54": {
        start: {
          line: 227,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      "55": {
        start: {
          line: 228,
          column: 6
        },
        end: {
          line: 228,
          column: 43
        }
      },
      "56": {
        start: {
          line: 231,
          column: 4
        },
        end: {
          line: 233,
          column: 5
        }
      },
      "57": {
        start: {
          line: 232,
          column: 6
        },
        end: {
          line: 232,
          column: 15
        }
      },
      "58": {
        start: {
          line: 236,
          column: 21
        },
        end: {
          line: 236,
          column: 51
        }
      },
      "59": {
        start: {
          line: 237,
          column: 21
        },
        end: {
          line: 237,
          column: 51
        }
      },
      "60": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 240,
          column: 5
        }
      },
      "61": {
        start: {
          line: 239,
          column: 6
        },
        end: {
          line: 239,
          column: 42
        }
      },
      "62": {
        start: {
          line: 243,
          column: 19
        },
        end: {
          line: 243,
          column: 67
        }
      },
      "63": {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 246,
          column: 5
        }
      },
      "64": {
        start: {
          line: 245,
          column: 6
        },
        end: {
          line: 245,
          column: 20
        }
      },
      "65": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 249,
          column: 64
        }
      },
      "66": {
        start: {
          line: 264,
          column: 14
        },
        end: {
          line: 264,
          column: 42
        }
      },
      "67": {
        start: {
          line: 266,
          column: 2
        },
        end: {
          line: 271,
          column: 3
        }
      },
      "68": {
        start: {
          line: 266,
          column: 15
        },
        end: {
          line: 266,
          column: 16
        }
      },
      "69": {
        start: {
          line: 267,
          column: 17
        },
        end: {
          line: 267,
          column: 50
        }
      },
      "70": {
        start: {
          line: 268,
          column: 4
        },
        end: {
          line: 270,
          column: 5
        }
      },
      "71": {
        start: {
          line: 269,
          column: 6
        },
        end: {
          line: 269,
          column: 31
        }
      },
      "72": {
        start: {
          line: 273,
          column: 2
        },
        end: {
          line: 275,
          column: 3
        }
      },
      "73": {
        start: {
          line: 274,
          column: 4
        },
        end: {
          line: 274,
          column: 13
        }
      },
      "74": {
        start: {
          line: 276,
          column: 2
        },
        end: {
          line: 276,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        loc: {
          start: {
            line: 20,
            column: 28
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 20
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        },
        loc: {
          start: {
            line: 49,
            column: 18
          },
          end: {
            line: 51,
            column: 3
          }
        },
        line: 49
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 58,
            column: 3
          }
        },
        loc: {
          start: {
            line: 58,
            column: 33
          },
          end: {
            line: 76,
            column: 3
          }
        },
        line: 58
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 82
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 90,
            column: 2
          },
          end: {
            line: 90,
            column: 3
          }
        },
        loc: {
          start: {
            line: 90,
            column: 27
          },
          end: {
            line: 92,
            column: 3
          }
        },
        line: 90
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 98,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        },
        loc: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 100,
            column: 3
          }
        },
        line: 98
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 107,
            column: 2
          },
          end: {
            line: 107,
            column: 3
          }
        },
        loc: {
          start: {
            line: 107,
            column: 37
          },
          end: {
            line: 133,
            column: 3
          }
        },
        line: 107
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 138,
            column: 2
          },
          end: {
            line: 138,
            column: 3
          }
        },
        loc: {
          start: {
            line: 138,
            column: 12
          },
          end: {
            line: 140,
            column: 3
          }
        },
        line: 138
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 145,
            column: 2
          },
          end: {
            line: 145,
            column: 3
          }
        },
        loc: {
          start: {
            line: 145,
            column: 14
          },
          end: {
            line: 147,
            column: 3
          }
        },
        line: 145
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 158,
            column: 2
          },
          end: {
            line: 158,
            column: 3
          }
        },
        loc: {
          start: {
            line: 158,
            column: 17
          },
          end: {
            line: 169,
            column: 3
          }
        },
        line: 158
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 174,
            column: 2
          },
          end: {
            line: 174,
            column: 3
          }
        },
        loc: {
          start: {
            line: 174,
            column: 20
          },
          end: {
            line: 184,
            column: 3
          }
        },
        line: 174
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 189,
            column: 2
          },
          end: {
            line: 189,
            column: 3
          }
        },
        loc: {
          start: {
            line: 189,
            column: 13
          },
          end: {
            line: 191,
            column: 3
          }
        },
        line: 189
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 197,
            column: 2
          },
          end: {
            line: 197,
            column: 3
          }
        },
        loc: {
          start: {
            line: 197,
            column: 16
          },
          end: {
            line: 199,
            column: 3
          }
        },
        line: 197
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 201,
            column: 2
          },
          end: {
            line: 201,
            column: 3
          }
        },
        loc: {
          start: {
            line: 201,
            column: 13
          },
          end: {
            line: 207,
            column: 3
          }
        },
        line: 201
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 223,
            column: 2
          },
          end: {
            line: 223,
            column: 3
          }
        },
        loc: {
          start: {
            line: 223,
            column: 33
          },
          end: {
            line: 250,
            column: 3
          }
        },
        line: 223
      },
      "15": {
        name: "asciiCompare",
        decl: {
          start: {
            line: 263,
            column: 9
          },
          end: {
            line: 263,
            column: 21
          }
        },
        loc: {
          start: {
            line: 263,
            column: 28
          },
          end: {
            line: 277,
            column: 1
          }
        },
        line: 263
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "1": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 55
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 26,
            column: 8
          },
          end: {
            line: 26,
            column: 44
          }
        }, {
          start: {
            line: 26,
            column: 48
          },
          end: {
            line: 26,
            column: 55
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "4": {
        loc: {
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 29,
            column: 8
          },
          end: {
            line: 29,
            column: 14
          }
        }, {
          start: {
            line: 29,
            column: 18
          },
          end: {
            line: 29,
            column: 57
          }
        }],
        line: 29
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 40,
            column: 5
          }
        }, {
          start: {
            line: 38,
            column: 11
          },
          end: {
            line: 40,
            column: 5
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 63,
            column: 6
          },
          end: {
            line: 64,
            column: 29
          }
        }, {
          start: {
            line: 65,
            column: 6
          },
          end: {
            line: 66,
            column: 36
          }
        }, {
          start: {
            line: 68,
            column: 6
          },
          end: {
            line: 72,
            column: 38
          }
        }, {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 74,
            column: 73
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 69,
            column: 15
          },
          end: {
            line: 69,
            column: 19
          }
        }, {
          start: {
            line: 69,
            column: 23
          },
          end: {
            line: 69,
            column: 44
          }
        }],
        line: 69
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 15
          },
          end: {
            line: 107,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 107,
            column: 26
          },
          end: {
            line: 107,
            column: 35
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 108,
            column: 4
          },
          end: {
            line: 110,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 108
      },
      "10": {
        loc: {
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 114,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: 117,
            column: 11
          },
          end: {
            line: 120,
            column: 5
          }
        }],
        line: 114
      },
      "11": {
        loc: {
          start: {
            line: 123,
            column: 22
          },
          end: {
            line: 123,
            column: 52
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 123,
            column: 46
          },
          end: {
            line: 123,
            column: 47
          }
        }, {
          start: {
            line: 123,
            column: 50
          },
          end: {
            line: 123,
            column: 52
          }
        }],
        line: 123
      },
      "12": {
        loc: {
          start: {
            line: 159,
            column: 4
          },
          end: {
            line: 168,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 160,
            column: 6
          },
          end: {
            line: 161,
            column: 24
          }
        }, {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 163,
            column: 34
          }
        }, {
          start: {
            line: 164,
            column: 6
          },
          end: {
            line: 165,
            column: 35
          }
        }, {
          start: {
            line: 166,
            column: 6
          },
          end: {
            line: 167,
            column: 25
          }
        }],
        line: 159
      },
      "13": {
        loc: {
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 4
          },
          end: {
            line: 177,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "14": {
        loc: {
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 179,
            column: 4
          },
          end: {
            line: 181,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 179
      },
      "15": {
        loc: {
          start: {
            line: 198,
            column: 11
          },
          end: {
            line: 198,
            column: 77
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 198,
            column: 11
          },
          end: {
            line: 198,
            column: 40
          }
        }, {
          start: {
            line: 198,
            column: 44
          },
          end: {
            line: 198,
            column: 77
          }
        }],
        line: 198
      },
      "16": {
        loc: {
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 202,
            column: 4
          },
          end: {
            line: 204,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 202
      },
      "17": {
        loc: {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 224
      },
      "18": {
        loc: {
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 224,
            column: 8
          },
          end: {
            line: 224,
            column: 15
          }
        }, {
          start: {
            line: 224,
            column: 19
          },
          end: {
            line: 224,
            column: 45
          }
        }],
        line: 224
      },
      "19": {
        loc: {
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "20": {
        loc: {
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 227,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 8
          },
          end: {
            line: 227,
            column: 15
          }
        }, {
          start: {
            line: 227,
            column: 19
          },
          end: {
            line: 227,
            column: 45
          }
        }],
        line: 227
      },
      "21": {
        loc: {
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 231,
            column: 4
          },
          end: {
            line: 233,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 231
      },
      "22": {
        loc: {
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 238,
            column: 4
          },
          end: {
            line: 240,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 238
      },
      "23": {
        loc: {
          start: {
            line: 239,
            column: 13
          },
          end: {
            line: 239,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 239,
            column: 35
          },
          end: {
            line: 239,
            column: 37
          }
        }, {
          start: {
            line: 239,
            column: 40
          },
          end: {
            line: 239,
            column: 41
          }
        }],
        line: 239
      },
      "24": {
        loc: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 246,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 244
      },
      "25": {
        loc: {
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 268,
            column: 4
          },
          end: {
            line: 270,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 268
      },
      "26": {
        loc: {
          start: {
            line: 269,
            column: 13
          },
          end: {
            line: 269,
            column: 30
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 269,
            column: 24
          },
          end: {
            line: 269,
            column: 26
          }
        }, {
          start: {
            line: 269,
            column: 29
          },
          end: {
            line: 269,
            column: 30
          }
        }],
        line: 269
      },
      "27": {
        loc: {
          start: {
            line: 273,
            column: 2
          },
          end: {
            line: 275,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 273,
            column: 2
          },
          end: {
            line: 275,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 273
      },
      "28": {
        loc: {
          start: {
            line: 276,
            column: 9
          },
          end: {
            line: 276,
            column: 37
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 276,
            column: 31
          },
          end: {
            line: 276,
            column: 33
          }
        }, {
          start: {
            line: 276,
            column: 36
          },
          end: {
            line: 276,
            column: 37
          }
        }],
        line: 276
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0],
      "7": [0, 0],
      "8": [0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "67ef071b7b5692acfe8039fe3883d3d2922cf9a4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jktlcbul8 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jktlcbul8();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }







/**
 * Asset class represents an asset, either the native asset (`XLM`)
 * or an asset code / issuer account ID pair.
 *
 * An asset code describes an asset code and issuer pair. In the case of the native
 * asset XLM, the issuer will be null.
 *
 * @constructor
 * @param {string} code - The asset code.
 * @param {string} issuer - The account ID of the issuer.
 */
var Asset = /*#__PURE__*/function () {
  function Asset(code, issuer) {
    _classCallCheck(this, Asset);
    cov_1jktlcbul8().f[0]++;
    cov_1jktlcbul8().s[0]++;
    if (!/^[a-zA-Z0-9]{1,12}$/.test(code)) {
      cov_1jktlcbul8().b[0][0]++;
      cov_1jktlcbul8().s[1]++;
      throw new Error('Asset code is invalid (maximum alphanumeric, 12 characters at max)');
    } else {
      cov_1jktlcbul8().b[0][1]++;
    }
    cov_1jktlcbul8().s[2]++;
    if ((cov_1jktlcbul8().b[2][0]++, String(code).toLowerCase() !== 'xlm') && (cov_1jktlcbul8().b[2][1]++, !issuer)) {
      cov_1jktlcbul8().b[1][0]++;
      cov_1jktlcbul8().s[3]++;
      throw new Error('Issuer cannot be null');
    } else {
      cov_1jktlcbul8().b[1][1]++;
    }
    cov_1jktlcbul8().s[4]++;
    if ((cov_1jktlcbul8().b[4][0]++, issuer) && (cov_1jktlcbul8().b[4][1]++, !_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidEd25519PublicKey(issuer))) {
      cov_1jktlcbul8().b[3][0]++;
      cov_1jktlcbul8().s[5]++;
      console.log(!_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidEd25519PublicKey(issuer), '!StrKey.isValidEd25519PublicKey(issuer)');
      cov_1jktlcbul8().s[6]++;
      console.log(_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidEd25519PublicKey(issuer), 'without !');
      cov_1jktlcbul8().s[7]++;
      throw new Error("Issuer is invalid ".concat(issuer));
    } else {
      cov_1jktlcbul8().b[3][1]++;
    }
    cov_1jktlcbul8().s[8]++;
    if (String(code).toLowerCase() === 'xlm') {
      cov_1jktlcbul8().b[5][0]++;
      cov_1jktlcbul8().s[9]++;
      // transform all xLM, Xlm, etc. variants -> XLM
      this.code = 'XLM';
    } else {
      cov_1jktlcbul8().b[5][1]++;
      cov_1jktlcbul8().s[10]++;
      this.code = code;
    }
    cov_1jktlcbul8().s[11]++;
    this.issuer = issuer;
  }

  /**
   * Returns an asset object for the native asset.
   * @Return {Asset}
   */
  _createClass(Asset, [{
    key: "toXDRObject",
    value:
    /**
     * Returns the xdr.Asset object for this asset.
     * @returns {xdr.Asset} XDR asset object
     */
    function toXDRObject() {
      cov_1jktlcbul8().f[3]++;
      cov_1jktlcbul8().s[21]++;
      return this._toXDRObject(_xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Asset);
    }

    /**
     * Returns the xdr.ChangeTrustAsset object for this asset.
     * @returns {xdr.ChangeTrustAsset} XDR asset object
     */
  }, {
    key: "toChangeTrustXDRObject",
    value: function toChangeTrustXDRObject() {
      cov_1jktlcbul8().f[4]++;
      cov_1jktlcbul8().s[22]++;
      return this._toXDRObject(_xdr__WEBPACK_IMPORTED_MODULE_3__["default"].ChangeTrustAsset);
    }

    /**
     * Returns the xdr.TrustLineAsset object for this asset.
     * @returns {xdr.TrustLineAsset} XDR asset object
     */
  }, {
    key: "toTrustLineXDRObject",
    value: function toTrustLineXDRObject() {
      cov_1jktlcbul8().f[5]++;
      cov_1jktlcbul8().s[23]++;
      return this._toXDRObject(_xdr__WEBPACK_IMPORTED_MODULE_3__["default"].TrustLineAsset);
    }

    /**
     * Returns the xdr object for this asset.
     * @param {xdr.Asset | xdr.ChangeTrustAsset} xdrAsset - The asset xdr object.
     * @returns {xdr.Asset | xdr.ChangeTrustAsset | xdr.TrustLineAsset} XDR Asset object
     */
  }, {
    key: "_toXDRObject",
    value: function _toXDRObject() {
      var xdrAsset = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1jktlcbul8().b[8][0]++, _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Asset);
      cov_1jktlcbul8().f[6]++;
      cov_1jktlcbul8().s[24]++;
      if (this.isNative()) {
        cov_1jktlcbul8().b[9][0]++;
        cov_1jktlcbul8().s[25]++;
        return xdrAsset.assetTypeNative();
      } else {
        cov_1jktlcbul8().b[9][1]++;
      }
      var xdrType;
      var xdrTypeString;
      cov_1jktlcbul8().s[26]++;
      if (this.code.length <= 4) {
        cov_1jktlcbul8().b[10][0]++;
        cov_1jktlcbul8().s[27]++;
        xdrType = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AlphaNum4;
        cov_1jktlcbul8().s[28]++;
        xdrTypeString = 'assetTypeCreditAlphanum4';
      } else {
        cov_1jktlcbul8().b[10][1]++;
        cov_1jktlcbul8().s[29]++;
        xdrType = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AlphaNum12;
        cov_1jktlcbul8().s[30]++;
        xdrTypeString = 'assetTypeCreditAlphanum12';
      }

      // pad code with null bytes if necessary
      var padLength = (cov_1jktlcbul8().s[31]++, this.code.length <= 4 ? (cov_1jktlcbul8().b[11][0]++, 4) : (cov_1jktlcbul8().b[11][1]++, 12));
      var paddedCode = (cov_1jktlcbul8().s[32]++, lodash_padEnd__WEBPACK_IMPORTED_MODULE_1___default()(this.code, padLength, '\0'));

      // eslint-disable-next-line new-cap
      var assetType = (cov_1jktlcbul8().s[33]++, new xdrType({
        assetCode: paddedCode,
        issuer: _keypair__WEBPACK_IMPORTED_MODULE_4__.Keypair.fromPublicKey(this.issuer).xdrAccountId()
      }));
      cov_1jktlcbul8().s[34]++;
      return new xdrAsset(xdrTypeString, assetType);
    }

    /**
     * @returns {string} Asset code
     */
  }, {
    key: "getCode",
    value: function getCode() {
      cov_1jktlcbul8().f[7]++;
      cov_1jktlcbul8().s[35]++;
      return lodash_clone__WEBPACK_IMPORTED_MODULE_0___default()(this.code);
    }

    /**
     * @returns {string} Asset issuer
     */
  }, {
    key: "getIssuer",
    value: function getIssuer() {
      cov_1jktlcbul8().f[8]++;
      cov_1jktlcbul8().s[36]++;
      return lodash_clone__WEBPACK_IMPORTED_MODULE_0___default()(this.issuer);
    }

    /**
     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)
     * @returns {string} Asset type. Can be one of following types:
     *
     *  - `native`,
     *  - `credit_alphanum4`,
     *  - `credit_alphanum12`, or
     *  - `unknown` as the error case (which should never occur)
     */
  }, {
    key: "getAssetType",
    value: function getAssetType() {
      cov_1jktlcbul8().f[9]++;
      cov_1jktlcbul8().s[37]++;
      switch (this.getRawAssetType()) {
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeNative():
          cov_1jktlcbul8().b[12][0]++;
          cov_1jktlcbul8().s[38]++;
          return 'native';
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum4():
          cov_1jktlcbul8().b[12][1]++;
          cov_1jktlcbul8().s[39]++;
          return 'credit_alphanum4';
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum12():
          cov_1jktlcbul8().b[12][2]++;
          cov_1jktlcbul8().s[40]++;
          return 'credit_alphanum12';
        default:
          cov_1jktlcbul8().b[12][3]++;
          cov_1jktlcbul8().s[41]++;
          return 'unknown';
      }
    }

    /**
     * @returns {xdr.AssetType}  the raw XDR representation of the asset type
     */
  }, {
    key: "getRawAssetType",
    value: function getRawAssetType() {
      cov_1jktlcbul8().f[10]++;
      cov_1jktlcbul8().s[42]++;
      if (this.isNative()) {
        cov_1jktlcbul8().b[13][0]++;
        cov_1jktlcbul8().s[43]++;
        return _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeNative();
      } else {
        cov_1jktlcbul8().b[13][1]++;
      }
      cov_1jktlcbul8().s[44]++;
      if (this.code.length <= 4) {
        cov_1jktlcbul8().b[14][0]++;
        cov_1jktlcbul8().s[45]++;
        return _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum4();
      } else {
        cov_1jktlcbul8().b[14][1]++;
      }
      cov_1jktlcbul8().s[46]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum12();
    }

    /**
     * @returns {boolean}  true if this asset object is the native asset.
     */
  }, {
    key: "isNative",
    value: function isNative() {
      cov_1jktlcbul8().f[11]++;
      cov_1jktlcbul8().s[47]++;
      return !this.issuer;
    }

    /**
     * @param {Asset} asset Asset to compare
     * @returns {boolean} true if this asset equals the given asset.
     */
  }, {
    key: "equals",
    value: function equals(asset) {
      cov_1jktlcbul8().f[12]++;
      cov_1jktlcbul8().s[48]++;
      return (cov_1jktlcbul8().b[15][0]++, this.code === asset.getCode()) && (cov_1jktlcbul8().b[15][1]++, this.issuer === asset.getIssuer());
    }
  }, {
    key: "toString",
    value: function toString() {
      cov_1jktlcbul8().f[13]++;
      cov_1jktlcbul8().s[49]++;
      if (this.isNative()) {
        cov_1jktlcbul8().b[16][0]++;
        cov_1jktlcbul8().s[50]++;
        return 'native';
      } else {
        cov_1jktlcbul8().b[16][1]++;
      }
      cov_1jktlcbul8().s[51]++;
      return "".concat(this.getCode(), ":").concat(this.getIssuer());
    }

    /**
     * Compares two assets according to the criteria:
     *
     *  1. First compare the type (native < alphanum4 < alphanum12).
     *  2. If the types are equal, compare the assets codes.
     *  3. If the asset codes are equal, compare the issuers.
     *
     * @param   {Asset} assetA - the first asset
     * @param   {Asset} assetB - the second asset
     * @returns {number} `-1` if assetA < assetB, `0` if assetA == assetB, `1` if assetA > assetB.
     *
     * @static
     * @memberof Asset
     */
  }], [{
    key: "native",
    value: function native() {
      cov_1jktlcbul8().f[1]++;
      cov_1jktlcbul8().s[12]++;
      return new Asset('XLM');
    }

    /**
     * Returns an asset object from its XDR object representation.
     * @param {xdr.Asset} assetXdr - The asset xdr object.
     * @returns {Asset}
     */
  }, {
    key: "fromOperation",
    value: function fromOperation(assetXdr) {
      cov_1jktlcbul8().f[2]++;
      var anum;
      var code;
      var issuer;
      cov_1jktlcbul8().s[13]++;
      switch (assetXdr["switch"]()) {
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeNative():
          cov_1jktlcbul8().b[6][0]++;
          cov_1jktlcbul8().s[14]++;
          return this["native"]();
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum4():
          cov_1jktlcbul8().b[6][1]++;
          cov_1jktlcbul8().s[15]++;
          anum = assetXdr.alphaNum4();
        /* falls through */
        case _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].AssetType.assetTypeCreditAlphanum12():
          cov_1jktlcbul8().b[6][2]++;
          cov_1jktlcbul8().s[16]++;
          anum = (cov_1jktlcbul8().b[7][0]++, anum) || (cov_1jktlcbul8().b[7][1]++, assetXdr.alphaNum12());
          cov_1jktlcbul8().s[17]++;
          issuer = _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.encodeEd25519PublicKey(anum.issuer().ed25519());
          cov_1jktlcbul8().s[18]++;
          code = lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2___default()(anum.assetCode(), '\0');
          cov_1jktlcbul8().s[19]++;
          return new this(code, issuer);
        default:
          cov_1jktlcbul8().b[6][3]++;
          cov_1jktlcbul8().s[20]++;
          throw new Error("Invalid asset type: ".concat(assetXdr["switch"]().name));
      }
    }
  }, {
    key: "compare",
    value: function compare(assetA, assetB) {
      cov_1jktlcbul8().f[14]++;
      cov_1jktlcbul8().s[52]++;
      if ((cov_1jktlcbul8().b[18][0]++, !assetA) || (cov_1jktlcbul8().b[18][1]++, !(assetA instanceof Asset))) {
        cov_1jktlcbul8().b[17][0]++;
        cov_1jktlcbul8().s[53]++;
        throw new Error('assetA is invalid');
      } else {
        cov_1jktlcbul8().b[17][1]++;
      }
      cov_1jktlcbul8().s[54]++;
      if ((cov_1jktlcbul8().b[20][0]++, !assetB) || (cov_1jktlcbul8().b[20][1]++, !(assetB instanceof Asset))) {
        cov_1jktlcbul8().b[19][0]++;
        cov_1jktlcbul8().s[55]++;
        throw new Error('assetB is invalid');
      } else {
        cov_1jktlcbul8().b[19][1]++;
      }
      cov_1jktlcbul8().s[56]++;
      if (assetA.equals(assetB)) {
        cov_1jktlcbul8().b[21][0]++;
        cov_1jktlcbul8().s[57]++;
        return 0;
      } else {
        cov_1jktlcbul8().b[21][1]++;
      }

      // Compare asset types.
      var xdrAtype = (cov_1jktlcbul8().s[58]++, assetA.getRawAssetType().value);
      var xdrBtype = (cov_1jktlcbul8().s[59]++, assetB.getRawAssetType().value);
      cov_1jktlcbul8().s[60]++;
      if (xdrAtype !== xdrBtype) {
        cov_1jktlcbul8().b[22][0]++;
        cov_1jktlcbul8().s[61]++;
        return xdrAtype < xdrBtype ? (cov_1jktlcbul8().b[23][0]++, -1) : (cov_1jktlcbul8().b[23][1]++, 1);
      } else {
        cov_1jktlcbul8().b[22][1]++;
      }

      // Compare asset codes.
      var result = (cov_1jktlcbul8().s[62]++, asciiCompare(assetA.getCode(), assetB.getCode()));
      cov_1jktlcbul8().s[63]++;
      if (result !== 0) {
        cov_1jktlcbul8().b[24][0]++;
        cov_1jktlcbul8().s[64]++;
        return result;
      } else {
        cov_1jktlcbul8().b[24][1]++;
      }

      // Compare asset issuers.
      cov_1jktlcbul8().s[65]++;
      return asciiCompare(assetA.getIssuer(), assetB.getIssuer());
    }
  }]);
  return Asset;
}();

/**
 * Compares two ASCII strings in lexographic order with uppercase precedence.
 *
 * @param   {string} a - the first string to compare
 * @param   {string} b - the second
 * @returns {number} like all `compare()`s:
 *     -1 if `a < b`, 0 if `a == b`, and 1 if `a > b`
 *
 * @warning No type-checks are done on the parameters
 */
function asciiCompare(a, b) {
  cov_1jktlcbul8().f[15]++;
  var len = (cov_1jktlcbul8().s[66]++, Math.min(a.length, b.length));
  cov_1jktlcbul8().s[67]++;
  for (var i = (cov_1jktlcbul8().s[68]++, 0); i < len; i += 1) {
    var diff = (cov_1jktlcbul8().s[69]++, a.charCodeAt(i) - b.charCodeAt(i));
    cov_1jktlcbul8().s[70]++;
    if (diff !== 0) {
      cov_1jktlcbul8().b[25][0]++;
      cov_1jktlcbul8().s[71]++;
      return diff < 0 ? (cov_1jktlcbul8().b[26][0]++, -1) : (cov_1jktlcbul8().b[26][1]++, 1);
    } else {
      cov_1jktlcbul8().b[25][1]++;
    }
  }
  cov_1jktlcbul8().s[72]++;
  if (a.length === b.length) {
    cov_1jktlcbul8().b[27][0]++;
    cov_1jktlcbul8().s[73]++;
    return 0;
  } else {
    cov_1jktlcbul8().b[27][1]++;
  }
  cov_1jktlcbul8().s[74]++;
  return a.length < b.length ? (cov_1jktlcbul8().b[28][0]++, -1) : (cov_1jktlcbul8().b[28][1]++, 1);
}

/***/ }),

/***/ "./src/claimant.js":
/*!*************************!*\
  !*** ./src/claimant.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Claimant": () => (/* binding */ Claimant)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./keypair */ "./src/keypair.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
function cov_r8bgkssay() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\claimant.js";
  var hash = "079ed0c867a1f93dd6166a299ff20d575637c2b0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\claimant.js",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "1": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "4": {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 73
        }
      },
      "5": {
        start: {
          line: 23,
          column: 11
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "6": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 34
        }
      },
      "7": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 67
        }
      },
      "8": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 60
        }
      },
      "9": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 47,
          column: 5
        }
      },
      "10": {
        start: {
          line: 46,
          column: 6
        },
        end: {
          line: 46,
          column: 72
        }
      },
      "11": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 50,
          column: 5
        }
      },
      "12": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 73
        }
      },
      "13": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 63
        }
      },
      "14": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 64,
          column: 5
        }
      },
      "15": {
        start: {
          line: 63,
          column: 6
        },
        end: {
          line: 63,
          column: 72
        }
      },
      "16": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 67,
          column: 5
        }
      },
      "17": {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 73
        }
      },
      "18": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 62
        }
      },
      "19": {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 80,
          column: 5
        }
      },
      "20": {
        start: {
          line: 79,
          column: 6
        },
        end: {
          line: 79,
          column: 73
        }
      },
      "21": {
        start: {
          line: 82,
          column: 4
        },
        end: {
          line: 82,
          column: 59
        }
      },
      "22": {
        start: {
          line: 96,
          column: 4
        },
        end: {
          line: 98,
          column: 6
        }
      },
      "23": {
        start: {
          line: 112,
          column: 4
        },
        end: {
          line: 114,
          column: 6
        }
      },
      "24": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "25": {
        start: {
          line: 126,
          column: 8
        },
        end: {
          line: 126,
          column: 33
        }
      },
      "26": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 130,
          column: 10
        }
      },
      "27": {
        start: {
          line: 132,
          column: 8
        },
        end: {
          line: 132,
          column: 79
        }
      },
      "28": {
        start: {
          line: 141,
          column: 21
        },
        end: {
          line: 144,
          column: 6
        }
      },
      "29": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 49
        }
      },
      "30": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 29
        }
      },
      "31": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 45
        }
      },
      "32": {
        start: {
          line: 166,
          column: 4
        },
        end: {
          line: 166,
          column: 27
        }
      },
      "33": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 45
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 15,
            column: 2
          },
          end: {
            line: 15,
            column: 3
          }
        },
        loc: {
          start: {
            line: 15,
            column: 38
          },
          end: {
            line: 28,
            column: 3
          }
        },
        line: 15
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        },
        loc: {
          start: {
            line: 34,
            column: 34
          },
          end: {
            line: 36,
            column: 3
          }
        },
        line: 34
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        },
        loc: {
          start: {
            line: 44,
            column: 35
          },
          end: {
            line: 53,
            column: 3
          }
        },
        line: 44
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 61,
            column: 3
          }
        },
        loc: {
          start: {
            line: 61,
            column: 34
          },
          end: {
            line: 70,
            column: 3
          }
        },
        line: 61
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 77,
            column: 2
          },
          end: {
            line: 77,
            column: 3
          }
        },
        loc: {
          start: {
            line: 77,
            column: 33
          },
          end: {
            line: 83,
            column: 3
          }
        },
        line: 77
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 95,
            column: 2
          },
          end: {
            line: 95,
            column: 3
          }
        },
        loc: {
          start: {
            line: 95,
            column: 48
          },
          end: {
            line: 99,
            column: 3
          }
        },
        line: 95
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 111,
            column: 2
          },
          end: {
            line: 111,
            column: 3
          }
        },
        loc: {
          start: {
            line: 111,
            column: 46
          },
          end: {
            line: 115,
            column: 3
          }
        },
        line: 111
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 122,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        },
        loc: {
          start: {
            line: 122,
            column: 30
          },
          end: {
            line: 134,
            column: 3
          }
        },
        line: 122
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 140,
            column: 2
          },
          end: {
            line: 140,
            column: 3
          }
        },
        loc: {
          start: {
            line: 140,
            column: 16
          },
          end: {
            line: 147,
            column: 3
          }
        },
        line: 140
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 153,
            column: 3
          }
        },
        loc: {
          start: {
            line: 153,
            column: 20
          },
          end: {
            line: 155,
            column: 3
          }
        },
        line: 153
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 157,
            column: 2
          },
          end: {
            line: 157,
            column: 3
          }
        },
        loc: {
          start: {
            line: 157,
            column: 25
          },
          end: {
            line: 159,
            column: 3
          }
        },
        line: 157
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 165,
            column: 2
          },
          end: {
            line: 165,
            column: 3
          }
        },
        loc: {
          start: {
            line: 165,
            column: 18
          },
          end: {
            line: 167,
            column: 3
          }
        },
        line: 165
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 169,
            column: 2
          },
          end: {
            line: 169,
            column: 3
          }
        },
        loc: {
          start: {
            line: 169,
            column: 23
          },
          end: {
            line: 171,
            column: 3
          }
        },
        line: 169
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 16,
            column: 8
          },
          end: {
            line: 16,
            column: 19
          }
        }, {
          start: {
            line: 16,
            column: 23
          },
          end: {
            line: 16,
            column: 67
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 21
      },
      "3": {
        loc: {
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: 25,
            column: 11
          },
          end: {
            line: 27,
            column: 5
          }
        }],
        line: 23
      },
      "4": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "5": {
        loc: {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 50,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 48
      },
      "6": {
        loc: {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 64,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "7": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 67,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 65
      },
      "8": {
        loc: {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 80,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 78
      },
      "9": {
        loc: {
          start: {
            line: 124,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 125,
            column: 6
          },
          end: {
            line: 130,
            column: 10
          }
        }, {
          start: {
            line: 131,
            column: 6
          },
          end: {
            line: 132,
            column: 79
          }
        }],
        line: 124
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "079ed0c867a1f93dd6166a299ff20d575637c2b0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_r8bgkssay = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_r8bgkssay();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }




/**
 * Claimant class represents an xdr.Claimant
 *
 * The claim predicate is optional, it defaults to unconditional if none is specified.
 *
 * @constructor
 * @param {string} destination - The destination account ID.
 * @param {xdr.ClaimPredicate} [predicate] - The claim predicate.
 */
var Claimant = /*#__PURE__*/function () {
  function Claimant(destination, predicate) {
    _classCallCheck(this, Claimant);
    cov_r8bgkssay().f[0]++;
    cov_r8bgkssay().s[0]++;
    if ((cov_r8bgkssay().b[1][0]++, destination) && (cov_r8bgkssay().b[1][1]++, !_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(destination))) {
      cov_r8bgkssay().b[0][0]++;
      cov_r8bgkssay().s[1]++;
      throw new Error('Destination is invalid');
    } else {
      cov_r8bgkssay().b[0][1]++;
    }
    cov_r8bgkssay().s[2]++;
    this._destination = destination;
    cov_r8bgkssay().s[3]++;
    if (!predicate) {
      cov_r8bgkssay().b[2][0]++;
      cov_r8bgkssay().s[4]++;
      this._predicate = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateUnconditional();
    } else {
      cov_r8bgkssay().b[2][1]++;
      cov_r8bgkssay().s[5]++;
      if (predicate instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate) {
        cov_r8bgkssay().b[3][0]++;
        cov_r8bgkssay().s[6]++;
        this._predicate = predicate;
      } else {
        cov_r8bgkssay().b[3][1]++;
        cov_r8bgkssay().s[7]++;
        throw new Error('Predicate should be an xdr.ClaimPredicate');
      }
    }
  }

  /**
   * Returns an unconditional claim predicate
   * @Return {xdr.ClaimPredicate}
   */
  _createClass(Claimant, [{
    key: "toXDRObject",
    value:
    /**
     * Returns the xdr object for this claimant.
     * @returns {xdr.Claimant} XDR Claimant object
     */
    function toXDRObject() {
      cov_r8bgkssay().f[8]++;
      var claimant = (cov_r8bgkssay().s[28]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimantV0({
        destination: _keypair__WEBPACK_IMPORTED_MODULE_1__.Keypair.fromPublicKey(this._destination).xdrAccountId(),
        predicate: this._predicate
      }));
      cov_r8bgkssay().s[29]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Claimant.claimantTypeV0(claimant);
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "destination",
    get: function get() {
      cov_r8bgkssay().f[9]++;
      cov_r8bgkssay().s[30]++;
      return this._destination;
    },
    set: function set(value) {
      cov_r8bgkssay().f[10]++;
      cov_r8bgkssay().s[31]++;
      throw new Error('Claimant is immutable');
    }

    /**
     * @type {xdr.ClaimPredicate}
     * @readonly
     */
  }, {
    key: "predicate",
    get: function get() {
      cov_r8bgkssay().f[11]++;
      cov_r8bgkssay().s[32]++;
      return this._predicate;
    },
    set: function set(value) {
      cov_r8bgkssay().f[12]++;
      cov_r8bgkssay().s[33]++;
      throw new Error('Claimant is immutable');
    }
  }], [{
    key: "predicateUnconditional",
    value: function predicateUnconditional() {
      cov_r8bgkssay().f[1]++;
      cov_r8bgkssay().s[8]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateUnconditional();
    }

    /**
     * Returns an `and` claim predicate
     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate
     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate
     * @Return {xdr.ClaimPredicate}
     */
  }, {
    key: "predicateAnd",
    value: function predicateAnd(left, right) {
      cov_r8bgkssay().f[2]++;
      cov_r8bgkssay().s[9]++;
      if (!(left instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate)) {
        cov_r8bgkssay().b[4][0]++;
        cov_r8bgkssay().s[10]++;
        throw new Error('left Predicate should be an xdr.ClaimPredicate');
      } else {
        cov_r8bgkssay().b[4][1]++;
      }
      cov_r8bgkssay().s[11]++;
      if (!(right instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate)) {
        cov_r8bgkssay().b[5][0]++;
        cov_r8bgkssay().s[12]++;
        throw new Error('right Predicate should be an xdr.ClaimPredicate');
      } else {
        cov_r8bgkssay().b[5][1]++;
      }
      cov_r8bgkssay().s[13]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateAnd([left, right]);
    }

    /**
     * Returns an `or` claim predicate
     * @param {xdr.ClaimPredicate} left an xdr.ClaimPredicate
     * @param {xdr.ClaimPredicate} right an xdr.ClaimPredicate
     * @Return {xdr.ClaimPredicate}
     */
  }, {
    key: "predicateOr",
    value: function predicateOr(left, right) {
      cov_r8bgkssay().f[3]++;
      cov_r8bgkssay().s[14]++;
      if (!(left instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate)) {
        cov_r8bgkssay().b[6][0]++;
        cov_r8bgkssay().s[15]++;
        throw new Error('left Predicate should be an xdr.ClaimPredicate');
      } else {
        cov_r8bgkssay().b[6][1]++;
      }
      cov_r8bgkssay().s[16]++;
      if (!(right instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate)) {
        cov_r8bgkssay().b[7][0]++;
        cov_r8bgkssay().s[17]++;
        throw new Error('right Predicate should be an xdr.ClaimPredicate');
      } else {
        cov_r8bgkssay().b[7][1]++;
      }
      cov_r8bgkssay().s[18]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateOr([left, right]);
    }

    /**
     * Returns a `not` claim predicate
     * @param {xdr.ClaimPredicate} predicate an xdr.ClaimPredicate
     * @Return {xdr.ClaimPredicate}
     */
  }, {
    key: "predicateNot",
    value: function predicateNot(predicate) {
      cov_r8bgkssay().f[4]++;
      cov_r8bgkssay().s[19]++;
      if (!(predicate instanceof _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate)) {
        cov_r8bgkssay().b[8][0]++;
        cov_r8bgkssay().s[20]++;
        throw new Error('right Predicate should be an xdr.ClaimPredicate');
      } else {
        cov_r8bgkssay().b[8][1]++;
      }
      cov_r8bgkssay().s[21]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateNot(predicate);
    }

    /**
     * Returns a `BeforeAbsoluteTime` claim predicate
     *
     * This predicate will be fulfilled if the closing time of the ledger that
     * includes the CreateClaimableBalance operation is less than this (absolute)
     * Unix timestamp (expressed in seconds).
     *
     * @param {string} absBefore Unix epoch (in seconds) as a string
     * @Return {xdr.ClaimPredicate}
     */
  }, {
    key: "predicateBeforeAbsoluteTime",
    value: function predicateBeforeAbsoluteTime(absBefore) {
      cov_r8bgkssay().f[5]++;
      cov_r8bgkssay().s[22]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateBeforeAbsoluteTime(_xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Int64.fromString(absBefore));
    }

    /**
     * Returns a `BeforeRelativeTime` claim predicate
     *
     * This predicate will be fulfilled if the closing time of the ledger that
     * includes the CreateClaimableBalance operation plus this relative time delta
     * (in seconds) is less than the current time.
     *
     * @param {strings} seconds seconds since closeTime of the ledger in which the ClaimableBalanceEntry was created (as string)
     * @Return {xdr.ClaimPredicate}
     */
  }, {
    key: "predicateBeforeRelativeTime",
    value: function predicateBeforeRelativeTime(seconds) {
      cov_r8bgkssay().f[6]++;
      cov_r8bgkssay().s[23]++;
      return _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimPredicate.claimPredicateBeforeRelativeTime(_xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Int64.fromString(seconds));
    }

    /**
     * Returns a claimant object from its XDR object representation.
     * @param {xdr.Claimant} claimantXdr - The claimant xdr object.
     * @returns {Claimant}
     */
  }, {
    key: "fromXDR",
    value: function fromXDR(claimantXdr) {
      cov_r8bgkssay().f[7]++;
      var value;
      cov_r8bgkssay().s[24]++;
      switch (claimantXdr["switch"]()) {
        case _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimantType.claimantTypeV0():
          cov_r8bgkssay().b[9][0]++;
          cov_r8bgkssay().s[25]++;
          value = claimantXdr.v0();
          cov_r8bgkssay().s[26]++;
          return new this(_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.encodeEd25519PublicKey(value.destination().ed25519()), value.predicate());
        default:
          cov_r8bgkssay().b[9][1]++;
          cov_r8bgkssay().s[27]++;
          throw new Error("Invalid claimant type: ".concat(claimantXdr["switch"]().name));
      }
    }
  }]);
  return Claimant;
}();

/***/ }),

/***/ "./src/fee_bump_transaction.js":
/*!*************************************!*\
  !*** ./src/fee_bump_transaction.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FeeBumpTransaction": () => (/* binding */ FeeBumpTransaction)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transaction */ "./src/transaction.js");
/* harmony import */ var _transaction_base__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./transaction_base */ "./src/transaction_base.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function cov_2hg7bjtz9p() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\fee_bump_transaction.js";
  var hash = "2a47c9df27da58e670a29375bd79cac82455a47e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\fee_bump_transaction.js",
    statementMap: {
      "0": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "1": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 59
        }
      },
      "2": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 57
        }
      },
      "3": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 31,
          column: 42
        }
      },
      "4": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      "5": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 35,
          column: 8
        }
      },
      "6": {
        start: {
          line: 38,
          column: 23
        },
        end: {
          line: 38,
          column: 39
        }
      },
      "7": {
        start: {
          line: 39,
          column: 15
        },
        end: {
          line: 39,
          column: 30
        }
      },
      "8": {
        start: {
          line: 40,
          column: 16
        },
        end: {
          line: 40,
          column: 35
        }
      },
      "9": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 42,
          column: 62
        }
      },
      "10": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 50
        }
      },
      "11": {
        start: {
          line: 46,
          column: 28
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "12": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 71
        }
      },
      "13": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 53,
          column: 6
        }
      },
      "14": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 34
        }
      },
      "15": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 27
        }
      },
      "16": {
        start: {
          line: 83,
          column: 6
        },
        end: {
          line: 85,
          column: 7
        }
      },
      "17": {
        start: {
          line: 87,
          column: 24
        },
        end: {
          line: 90,
          column: 6
        }
      },
      "18": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 31
        }
      },
      "19": {
        start: {
          line: 100,
          column: 21
        },
        end: {
          line: 103,
          column: 6
        }
      },
      "20": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 105,
          column: 71
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 3
          }
        },
        loc: {
          start: {
            line: 25,
            column: 43
          },
          end: {
            line: 54,
            column: 3
          }
        },
        line: 25
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 60,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        },
        loc: {
          start: {
            line: 60,
            column: 25
          },
          end: {
            line: 62,
            column: 3
          }
        },
        line: 60
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 2
          },
          end: {
            line: 68,
            column: 3
          }
        },
        loc: {
          start: {
            line: 68,
            column: 18
          },
          end: {
            line: 70,
            column: 3
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 81,
            column: 2
          },
          end: {
            line: 81,
            column: 3
          }
        },
        loc: {
          start: {
            line: 81,
            column: 18
          },
          end: {
            line: 93,
            column: 3
          }
        },
        line: 81
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 99,
            column: 2
          },
          end: {
            line: 99,
            column: 3
          }
        },
        loc: {
          start: {
            line: 99,
            column: 15
          },
          end: {
            line: 106,
            column: 3
          }
        },
        line: 99
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 29,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 42,
            column: 24
          },
          end: {
            line: 42,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 42,
            column: 24
          },
          end: {
            line: 42,
            column: 47
          }
        }, {
          start: {
            line: 42,
            column: 51
          },
          end: {
            line: 42,
            column: 53
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2a47c9df27da58e670a29375bd79cac82455a47e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hg7bjtz9p = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hg7bjtz9p();
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }







/**
 * Use {@link TransactionBuilder.buildFeeBumpTransaction} to build a
 * FeeBumpTransaction object. If you have an object or base64-encoded string of
 * the transaction envelope XDR use {@link TransactionBuilder.fromXDR}.
 *
 * Once a {@link FeeBumpTransaction} has been created, its attributes and operations
 * should not be changed. You should only add signatures (using {@link FeeBumpTransaction#sign}) before
 * submitting to the network or forwarding on to additional signers.
 *
 * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope
 *     object or base64 encoded string.
 * @param {string} networkPassphrase - passphrase of the target Stellar network
 *     (e.g. "Public Global Stellar Network ; September 2015").
 *
 * @extends TransactionBase
 */
var FeeBumpTransaction = /*#__PURE__*/function (_TransactionBase) {
  _inherits(FeeBumpTransaction, _TransactionBase);
  var _super = _createSuper(FeeBumpTransaction);
  function FeeBumpTransaction(envelope, networkPassphrase) {
    var _this;
    _classCallCheck(this, FeeBumpTransaction);
    cov_2hg7bjtz9p().f[0]++;
    cov_2hg7bjtz9p().s[0]++;
    if (typeof envelope === 'string') {
      cov_2hg7bjtz9p().b[0][0]++;
      var buffer = (cov_2hg7bjtz9p().s[1]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_5__["default"].from(envelope, 'base64'));
      cov_2hg7bjtz9p().s[2]++;
      envelope = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TransactionEnvelope.fromXDR(buffer);
    } else {
      cov_2hg7bjtz9p().b[0][1]++;
    }
    var envelopeType = (cov_2hg7bjtz9p().s[3]++, envelope["switch"]());
    cov_2hg7bjtz9p().s[4]++;
    if (envelopeType !== _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].EnvelopeType.envelopeTypeTxFeeBump()) {
      cov_2hg7bjtz9p().b[1][0]++;
      cov_2hg7bjtz9p().s[5]++;
      throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxFeeBump but received an ".concat(envelopeType.name, "."));
    } else {
      cov_2hg7bjtz9p().b[1][1]++;
    }
    var txEnvelope = (cov_2hg7bjtz9p().s[6]++, envelope.value());
    var tx = (cov_2hg7bjtz9p().s[7]++, txEnvelope.tx());
    var fee = (cov_2hg7bjtz9p().s[8]++, tx.fee().toString());
    // clone signatures
    var signatures = (cov_2hg7bjtz9p().s[9]++, ((cov_2hg7bjtz9p().b[2][0]++, txEnvelope.signatures()) || (cov_2hg7bjtz9p().b[2][1]++, [])).slice());
    cov_2hg7bjtz9p().s[10]++;
    _this = _super.call(this, tx, signatures, fee, networkPassphrase);
    var innerTxEnvelope = (cov_2hg7bjtz9p().s[11]++, _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TransactionEnvelope.envelopeTypeTx(tx.innerTx().v1()));
    cov_2hg7bjtz9p().s[12]++;
    _this._feeSource = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.encodeMuxedAccountToAddress)(_this.tx.feeSource());
    cov_2hg7bjtz9p().s[13]++;
    _this._innerTransaction = new _transaction__WEBPACK_IMPORTED_MODULE_2__.Transaction(innerTxEnvelope, networkPassphrase);
    return _this;
  }

  /**
   * @type {Transaction}
   * @readonly
   */
  _createClass(FeeBumpTransaction, [{
    key: "innerTransaction",
    get: function get() {
      cov_2hg7bjtz9p().f[1]++;
      cov_2hg7bjtz9p().s[14]++;
      return this._innerTransaction;
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "feeSource",
    get: function get() {
      cov_2hg7bjtz9p().f[2]++;
      cov_2hg7bjtz9p().s[15]++;
      return this._feeSource;
    }

    /**
     * Returns the "signature base" of this transaction, which is the value
     * that, when hashed, should be signed to create a signature that
     * validators on the Stellar Network will accept.
     *
     * It is composed of a 4 prefix bytes followed by the xdr-encoded form
     * of this transaction.
     * @returns {Uint8Array}
     */
  }, {
    key: "signatureBase",
    value: function signatureBase() {
      cov_2hg7bjtz9p().f[3]++;
      var taggedTransaction = (cov_2hg7bjtz9p().s[16]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTxFeeBump(this.tx));
      var txSignature = (cov_2hg7bjtz9p().s[17]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TransactionSignaturePayload({
        networkId: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Hash.fromXDR((0,_hashing__WEBPACK_IMPORTED_MODULE_1__.hash)(this.networkPassphrase)),
        taggedTransaction: taggedTransaction
      }));
      cov_2hg7bjtz9p().s[18]++;
      return txSignature.toXDR();
    }

    /**
     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.
     * @returns {xdr.TransactionEnvelope}
     */
  }, {
    key: "toEnvelope",
    value: function toEnvelope() {
      cov_2hg7bjtz9p().f[4]++;
      var envelope = (cov_2hg7bjtz9p().s[19]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].FeeBumpTransactionEnvelope({
        tx: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].FeeBumpTransaction.fromXDR(this.tx.toXDR()),
        // make a copy of the tx
        signatures: this.signatures.slice() // make a copy of the signatures
      }));
      cov_2hg7bjtz9p().s[20]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TransactionEnvelope.envelopeTypeTxFeeBump(envelope);
    }
  }]);
  return FeeBumpTransaction;
}(_transaction_base__WEBPACK_IMPORTED_MODULE_3__.TransactionBase);

/***/ }),

/***/ "./src/generated/curr_generated.js":
/*!*****************************************!*\
  !*** ./src/generated/curr_generated.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_0__);
function cov_1racd7g41m() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\generated\\curr_generated.js";
  var hash = "4e397c9ffe4d7befff8643d393e6bf7fb00b0357";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\generated\\curr_generated.js",
    statementMap: {
      "0": {
        start: {
          line: 10,
          column: 12
        },
        end: {
          line: 7156,
          column: 2
        }
      },
      "1": {
        start: {
          line: 17,
          column: 0
        },
        end: {
          line: 17,
          column: 38
        }
      },
      "2": {
        start: {
          line: 28,
          column: 0
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "3": {
        start: {
          line: 44,
          column: 0
        },
        end: {
          line: 49,
          column: 3
        }
      },
      "4": {
        start: {
          line: 61,
          column: 0
        },
        end: {
          line: 65,
          column: 3
        }
      },
      "5": {
        start: {
          line: 80,
          column: 0
        },
        end: {
          line: 87,
          column: 3
        }
      },
      "6": {
        start: {
          line: 101,
          column: 0
        },
        end: {
          line: 107,
          column: 3
        }
      },
      "7": {
        start: {
          line: 119,
          column: 0
        },
        end: {
          line: 123,
          column: 3
        }
      },
      "8": {
        start: {
          line: 160,
          column: 0
        },
        end: {
          line: 175,
          column: 3
        }
      },
      "9": {
        start: {
          line: 219,
          column: 0
        },
        end: {
          line: 223,
          column: 3
        }
      },
      "10": {
        start: {
          line: 234,
          column: 0
        },
        end: {
          line: 237,
          column: 3
        }
      },
      "11": {
        start: {
          line: 249,
          column: 0
        },
        end: {
          line: 253,
          column: 3
        }
      },
      "12": {
        start: {
          line: 260,
          column: 0
        },
        end: {
          line: 260,
          column: 50
        }
      },
      "13": {
        start: {
          line: 267,
          column: 0
        },
        end: {
          line: 267,
          column: 41
        }
      },
      "14": {
        start: {
          line: 274,
          column: 0
        },
        end: {
          line: 274,
          column: 40
        }
      },
      "15": {
        start: {
          line: 281,
          column: 0
        },
        end: {
          line: 281,
          column: 40
        }
      },
      "16": {
        start: {
          line: 288,
          column: 0
        },
        end: {
          line: 288,
          column: 51
        }
      },
      "17": {
        start: {
          line: 295,
          column: 0
        },
        end: {
          line: 295,
          column: 47
        }
      },
      "18": {
        start: {
          line: 302,
          column: 0
        },
        end: {
          line: 302,
          column: 46
        }
      },
      "19": {
        start: {
          line: 309,
          column: 0
        },
        end: {
          line: 309,
          column: 44
        }
      },
      "20": {
        start: {
          line: 316,
          column: 0
        },
        end: {
          line: 316,
          column: 42
        }
      },
      "21": {
        start: {
          line: 323,
          column: 0
        },
        end: {
          line: 323,
          column: 41
        }
      },
      "22": {
        start: {
          line: 330,
          column: 0
        },
        end: {
          line: 330,
          column: 43
        }
      },
      "23": {
        start: {
          line: 343,
          column: 0
        },
        end: {
          line: 348,
          column: 3
        }
      },
      "24": {
        start: {
          line: 364,
          column: 0
        },
        end: {
          line: 375,
          column: 3
        }
      },
      "25": {
        start: {
          line: 386,
          column: 0
        },
        end: {
          line: 389,
          column: 3
        }
      },
      "26": {
        start: {
          line: 400,
          column: 0
        },
        end: {
          line: 403,
          column: 3
        }
      },
      "27": {
        start: {
          line: 422,
          column: 0
        },
        end: {
          line: 434,
          column: 3
        }
      },
      "28": {
        start: {
          line: 445,
          column: 0
        },
        end: {
          line: 448,
          column: 3
        }
      },
      "29": {
        start: {
          line: 459,
          column: 0
        },
        end: {
          line: 462,
          column: 3
        }
      },
      "30": {
        start: {
          line: 475,
          column: 0
        },
        end: {
          line: 480,
          column: 3
        }
      },
      "31": {
        start: {
          line: 495,
          column: 0
        },
        end: {
          line: 502,
          column: 3
        }
      },
      "32": {
        start: {
          line: 513,
          column: 0
        },
        end: {
          line: 516,
          column: 3
        }
      },
      "33": {
        start: {
          line: 539,
          column: 0
        },
        end: {
          line: 544,
          column: 3
        }
      },
      "34": {
        start: {
          line: 551,
          column: 0
        },
        end: {
          line: 551,
          column: 37
        }
      },
      "35": {
        start: {
          line: 558,
          column: 0
        },
        end: {
          line: 558,
          column: 41
        }
      },
      "36": {
        start: {
          line: 565,
          column: 0
        },
        end: {
          line: 565,
          column: 29
        }
      },
      "37": {
        start: {
          line: 572,
          column: 0
        },
        end: {
          line: 572,
          column: 74
        }
      },
      "38": {
        start: {
          line: 590,
          column: 0
        },
        end: {
          line: 594,
          column: 3
        }
      },
      "39": {
        start: {
          line: 607,
          column: 0
        },
        end: {
          line: 617,
          column: 3
        }
      },
      "40": {
        start: {
          line: 638,
          column: 0
        },
        end: {
          line: 643,
          column: 3
        }
      },
      "41": {
        start: {
          line: 656,
          column: 0
        },
        end: {
          line: 666,
          column: 3
        }
      },
      "42": {
        start: {
          line: 685,
          column: 0
        },
        end: {
          line: 688,
          column: 3
        }
      },
      "43": {
        start: {
          line: 701,
          column: 0
        },
        end: {
          line: 711,
          column: 3
        }
      },
      "44": {
        start: {
          line: 745,
          column: 0
        },
        end: {
          line: 756,
          column: 3
        }
      },
      "45": {
        start: {
          line: 773,
          column: 0
        },
        end: {
          line: 777,
          column: 3
        }
      },
      "46": {
        start: {
          line: 784,
          column: 0
        },
        end: {
          line: 784,
          column: 37
        }
      },
      "47": {
        start: {
          line: 791,
          column: 0
        },
        end: {
          line: 791,
          column: 41
        }
      },
      "48": {
        start: {
          line: 798,
          column: 0
        },
        end: {
          line: 798,
          column: 41
        }
      },
      "49": {
        start: {
          line: 808,
          column: 0
        },
        end: {
          line: 810,
          column: 3
        }
      },
      "50": {
        start: {
          line: 832,
          column: 0
        },
        end: {
          line: 846,
          column: 3
        }
      },
      "51": {
        start: {
          line: 857,
          column: 0
        },
        end: {
          line: 865,
          column: 3
        }
      },
      "52": {
        start: {
          line: 882,
          column: 0
        },
        end: {
          line: 885,
          column: 3
        }
      },
      "53": {
        start: {
          line: 898,
          column: 0
        },
        end: {
          line: 908,
          column: 3
        }
      },
      "54": {
        start: {
          line: 927,
          column: 0
        },
        end: {
          line: 930,
          column: 3
        }
      },
      "55": {
        start: {
          line: 955,
          column: 0
        },
        end: {
          line: 965,
          column: 3
        }
      },
      "56": {
        start: {
          line: 1003,
          column: 0
        },
        end: {
          line: 1010,
          column: 3
        }
      },
      "57": {
        start: {
          line: 1022,
          column: 0
        },
        end: {
          line: 1024,
          column: 3
        }
      },
      "58": {
        start: {
          line: 1031,
          column: 0
        },
        end: {
          line: 1031,
          column: 38
        }
      },
      "59": {
        start: {
          line: 1042,
          column: 0
        },
        end: {
          line: 1050,
          column: 3
        }
      },
      "60": {
        start: {
          line: 1080,
          column: 0
        },
        end: {
          line: 1089,
          column: 3
        }
      },
      "61": {
        start: {
          line: 1100,
          column: 0
        },
        end: {
          line: 1108,
          column: 3
        }
      },
      "62": {
        start: {
          line: 1128,
          column: 0
        },
        end: {
          line: 1133,
          column: 3
        }
      },
      "63": {
        start: {
          line: 1148,
          column: 0
        },
        end: {
          line: 1155,
          column: 3
        }
      },
      "64": {
        start: {
          line: 1177,
          column: 0
        },
        end: {
          line: 1195,
          column: 3
        }
      },
      "65": {
        start: {
          line: 1205,
          column: 0
        },
        end: {
          line: 1207,
          column: 3
        }
      },
      "66": {
        start: {
          line: 1218,
          column: 0
        },
        end: {
          line: 1221,
          column: 3
        }
      },
      "67": {
        start: {
          line: 1236,
          column: 0
        },
        end: {
          line: 1245,
          column: 3
        }
      },
      "68": {
        start: {
          line: 1255,
          column: 0
        },
        end: {
          line: 1257,
          column: 3
        }
      },
      "69": {
        start: {
          line: 1268,
          column: 0
        },
        end: {
          line: 1277,
          column: 3
        }
      },
      "70": {
        start: {
          line: 1289,
          column: 0
        },
        end: {
          line: 1291,
          column: 3
        }
      },
      "71": {
        start: {
          line: 1298,
          column: 0
        },
        end: {
          line: 1298,
          column: 47
        }
      },
      "72": {
        start: {
          line: 1309,
          column: 0
        },
        end: {
          line: 1317,
          column: 3
        }
      },
      "73": {
        start: {
          line: 1334,
          column: 0
        },
        end: {
          line: 1337,
          column: 3
        }
      },
      "74": {
        start: {
          line: 1350,
          column: 0
        },
        end: {
          line: 1360,
          column: 3
        }
      },
      "75": {
        start: {
          line: 1390,
          column: 0
        },
        end: {
          line: 1396,
          column: 3
        }
      },
      "76": {
        start: {
          line: 1408,
          column: 0
        },
        end: {
          line: 1412,
          column: 3
        }
      },
      "77": {
        start: {
          line: 1428,
          column: 0
        },
        end: {
          line: 1434,
          column: 3
        }
      },
      "78": {
        start: {
          line: 1454,
          column: 0
        },
        end: {
          line: 1463,
          column: 3
        }
      },
      "79": {
        start: {
          line: 1489,
          column: 0
        },
        end: {
          line: 1492,
          column: 3
        }
      },
      "80": {
        start: {
          line: 1503,
          column: 0
        },
        end: {
          line: 1511,
          column: 3
        }
      },
      "81": {
        start: {
          line: 1528,
          column: 0
        },
        end: {
          line: 1531,
          column: 3
        }
      },
      "82": {
        start: {
          line: 1552,
          column: 0
        },
        end: {
          line: 1571,
          column: 3
        }
      },
      "83": {
        start: {
          line: 1584,
          column: 0
        },
        end: {
          line: 1594,
          column: 3
        }
      },
      "84": {
        start: {
          line: 1631,
          column: 0
        },
        end: {
          line: 1635,
          column: 3
        }
      },
      "85": {
        start: {
          line: 1645,
          column: 0
        },
        end: {
          line: 1647,
          column: 3
        }
      },
      "86": {
        start: {
          line: 1658,
          column: 0
        },
        end: {
          line: 1661,
          column: 3
        }
      },
      "87": {
        start: {
          line: 1672,
          column: 0
        },
        end: {
          line: 1675,
          column: 3
        }
      },
      "88": {
        start: {
          line: 1686,
          column: 0
        },
        end: {
          line: 1689,
          column: 3
        }
      },
      "89": {
        start: {
          line: 1699,
          column: 0
        },
        end: {
          line: 1701,
          column: 3
        }
      },
      "90": {
        start: {
          line: 1711,
          column: 0
        },
        end: {
          line: 1713,
          column: 3
        }
      },
      "91": {
        start: {
          line: 1760,
          column: 0
        },
        end: {
          line: 1779,
          column: 3
        }
      },
      "92": {
        start: {
          line: 1796,
          column: 0
        },
        end: {
          line: 1805,
          column: 3
        }
      },
      "93": {
        start: {
          line: 1812,
          column: 0
        },
        end: {
          line: 1812,
          column: 47
        }
      },
      "94": {
        start: {
          line: 1823,
          column: 0
        },
        end: {
          line: 1826,
          column: 3
        }
      },
      "95": {
        start: {
          line: 1837,
          column: 0
        },
        end: {
          line: 1840,
          column: 3
        }
      },
      "96": {
        start: {
          line: 1853,
          column: 0
        },
        end: {
          line: 1863,
          column: 3
        }
      },
      "97": {
        start: {
          line: 1891,
          column: 0
        },
        end: {
          line: 1896,
          column: 3
        }
      },
      "98": {
        start: {
          line: 1903,
          column: 0
        },
        end: {
          line: 1903,
          column: 43
        }
      },
      "99": {
        start: {
          line: 1915,
          column: 0
        },
        end: {
          line: 1919,
          column: 3
        }
      },
      "100": {
        start: {
          line: 1930,
          column: 0
        },
        end: {
          line: 1938,
          column: 3
        }
      },
      "101": {
        start: {
          line: 1955,
          column: 0
        },
        end: {
          line: 1958,
          column: 3
        }
      },
      "102": {
        start: {
          line: 1971,
          column: 0
        },
        end: {
          line: 1981,
          column: 3
        }
      },
      "103": {
        start: {
          line: 2026,
          column: 0
        },
        end: {
          line: 2042,
          column: 3
        }
      },
      "104": {
        start: {
          line: 2056,
          column: 0
        },
        end: {
          line: 2062,
          column: 3
        }
      },
      "105": {
        start: {
          line: 2081,
          column: 0
        },
        end: {
          line: 2098,
          column: 3
        }
      },
      "106": {
        start: {
          line: 2113,
          column: 0
        },
        end: {
          line: 2118,
          column: 3
        }
      },
      "107": {
        start: {
          line: 2129,
          column: 0
        },
        end: {
          line: 2137,
          column: 3
        }
      },
      "108": {
        start: {
          line: 2156,
          column: 0
        },
        end: {
          line: 2159,
          column: 3
        }
      },
      "109": {
        start: {
          line: 2176,
          column: 0
        },
        end: {
          line: 2190,
          column: 3
        }
      },
      "110": {
        start: {
          line: 2202,
          column: 0
        },
        end: {
          line: 2204,
          column: 3
        }
      },
      "111": {
        start: {
          line: 2215,
          column: 0
        },
        end: {
          line: 2218,
          column: 3
        }
      },
      "112": {
        start: {
          line: 2233,
          column: 0
        },
        end: {
          line: 2242,
          column: 3
        }
      },
      "113": {
        start: {
          line: 2253,
          column: 0
        },
        end: {
          line: 2262,
          column: 3
        }
      },
      "114": {
        start: {
          line: 2273,
          column: 0
        },
        end: {
          line: 2276,
          column: 3
        }
      },
      "115": {
        start: {
          line: 2287,
          column: 0
        },
        end: {
          line: 2290,
          column: 3
        }
      },
      "116": {
        start: {
          line: 2302,
          column: 0
        },
        end: {
          line: 2311,
          column: 3
        }
      },
      "117": {
        start: {
          line: 2322,
          column: 0
        },
        end: {
          line: 2325,
          column: 3
        }
      },
      "118": {
        start: {
          line: 2335,
          column: 0
        },
        end: {
          line: 2337,
          column: 3
        }
      },
      "119": {
        start: {
          line: 2350,
          column: 0
        },
        end: {
          line: 2360,
          column: 3
        }
      },
      "120": {
        start: {
          line: 2381,
          column: 0
        },
        end: {
          line: 2385,
          column: 3
        }
      },
      "121": {
        start: {
          line: 2396,
          column: 0
        },
        end: {
          line: 2404,
          column: 3
        }
      },
      "122": {
        start: {
          line: 2423,
          column: 0
        },
        end: {
          line: 2427,
          column: 3
        }
      },
      "123": {
        start: {
          line: 2438,
          column: 0
        },
        end: {
          line: 2446,
          column: 3
        }
      },
      "124": {
        start: {
          line: 2465,
          column: 0
        },
        end: {
          line: 2469,
          column: 3
        }
      },
      "125": {
        start: {
          line: 2480,
          column: 0
        },
        end: {
          line: 2483,
          column: 3
        }
      },
      "126": {
        start: {
          line: 2494,
          column: 0
        },
        end: {
          line: 2497,
          column: 3
        }
      },
      "127": {
        start: {
          line: 2508,
          column: 0
        },
        end: {
          line: 2517,
          column: 3
        }
      },
      "128": {
        start: {
          line: 2530,
          column: 0
        },
        end: {
          line: 2535,
          column: 3
        }
      },
      "129": {
        start: {
          line: 2552,
          column: 0
        },
        end: {
          line: 2567,
          column: 3
        }
      },
      "130": {
        start: {
          line: 2574,
          column: 0
        },
        end: {
          line: 2574,
          column: 93
        }
      },
      "131": {
        start: {
          line: 2584,
          column: 0
        },
        end: {
          line: 2586,
          column: 3
        }
      },
      "132": {
        start: {
          line: 2597,
          column: 0
        },
        end: {
          line: 2600,
          column: 3
        }
      },
      "133": {
        start: {
          line: 2614,
          column: 0
        },
        end: {
          line: 2618,
          column: 3
        }
      },
      "134": {
        start: {
          line: 2633,
          column: 0
        },
        end: {
          line: 2646,
          column: 3
        }
      },
      "135": {
        start: {
          line: 2658,
          column: 0
        },
        end: {
          line: 2662,
          column: 3
        }
      },
      "136": {
        start: {
          line: 2673,
          column: 0
        },
        end: {
          line: 2676,
          column: 3
        }
      },
      "137": {
        start: {
          line: 2699,
          column: 0
        },
        end: {
          line: 2705,
          column: 3
        }
      },
      "138": {
        start: {
          line: 2728,
          column: 0
        },
        end: {
          line: 2734,
          column: 3
        }
      },
      "139": {
        start: {
          line: 2747,
          column: 0
        },
        end: {
          line: 2758,
          column: 3
        }
      },
      "140": {
        start: {
          line: 2772,
          column: 0
        },
        end: {
          line: 2778,
          column: 3
        }
      },
      "141": {
        start: {
          line: 2789,
          column: 0
        },
        end: {
          line: 2792,
          column: 3
        }
      },
      "142": {
        start: {
          line: 2802,
          column: 0
        },
        end: {
          line: 2804,
          column: 3
        }
      },
      "143": {
        start: {
          line: 2816,
          column: 0
        },
        end: {
          line: 2820,
          column: 3
        }
      },
      "144": {
        start: {
          line: 2838,
          column: 0
        },
        end: {
          line: 2848,
          column: 3
        }
      },
      "145": {
        start: {
          line: 2855,
          column: 0
        },
        end: {
          line: 2855,
          column: 52
        }
      },
      "146": {
        start: {
          line: 2865,
          column: 0
        },
        end: {
          line: 2867,
          column: 3
        }
      },
      "147": {
        start: {
          line: 2878,
          column: 0
        },
        end: {
          line: 2881,
          column: 3
        }
      },
      "148": {
        start: {
          line: 2894,
          column: 0
        },
        end: {
          line: 2905,
          column: 3
        }
      },
      "149": {
        start: {
          line: 2924,
          column: 0
        },
        end: {
          line: 2928,
          column: 3
        }
      },
      "150": {
        start: {
          line: 2965,
          column: 0
        },
        end: {
          line: 2985,
          column: 3
        }
      },
      "151": {
        start: {
          line: 2996,
          column: 0
        },
        end: {
          line: 2999,
          column: 3
        }
      },
      "152": {
        start: {
          line: 3009,
          column: 0
        },
        end: {
          line: 3011,
          column: 3
        }
      },
      "153": {
        start: {
          line: 3025,
          column: 0
        },
        end: {
          line: 3031,
          column: 3
        }
      },
      "154": {
        start: {
          line: 3042,
          column: 0
        },
        end: {
          line: 3045,
          column: 3
        }
      },
      "155": {
        start: {
          line: 3052,
          column: 0
        },
        end: {
          line: 3052,
          column: 51
        }
      },
      "156": {
        start: {
          line: 3066,
          column: 0
        },
        end: {
          line: 3072,
          column: 3
        }
      },
      "157": {
        start: {
          line: 3083,
          column: 0
        },
        end: {
          line: 3086,
          column: 3
        }
      },
      "158": {
        start: {
          line: 3112,
          column: 0
        },
        end: {
          line: 3128,
          column: 3
        }
      },
      "159": {
        start: {
          line: 3135,
          column: 0
        },
        end: {
          line: 3135,
          column: 71
        }
      },
      "160": {
        start: {
          line: 3149,
          column: 0
        },
        end: {
          line: 3154,
          column: 3
        }
      },
      "161": {
        start: {
          line: 3165,
          column: 0
        },
        end: {
          line: 3174,
          column: 3
        }
      },
      "162": {
        start: {
          line: 3181,
          column: 0
        },
        end: {
          line: 3181,
          column: 45
        }
      },
      "163": {
        start: {
          line: 3188,
          column: 0
        },
        end: {
          line: 3188,
          column: 105
        }
      },
      "164": {
        start: {
          line: 3198,
          column: 0
        },
        end: {
          line: 3200,
          column: 3
        }
      },
      "165": {
        start: {
          line: 3207,
          column: 0
        },
        end: {
          line: 3207,
          column: 45
        }
      },
      "166": {
        start: {
          line: 3214,
          column: 0
        },
        end: {
          line: 3214,
          column: 105
        }
      },
      "167": {
        start: {
          line: 3224,
          column: 0
        },
        end: {
          line: 3226,
          column: 3
        }
      },
      "168": {
        start: {
          line: 3281,
          column: 0
        },
        end: {
          line: 3325,
          column: 3
        }
      },
      "169": {
        start: {
          line: 3337,
          column: 0
        },
        end: {
          line: 3341,
          column: 3
        }
      },
      "170": {
        start: {
          line: 3357,
          column: 0
        },
        end: {
          line: 3366,
          column: 3
        }
      },
      "171": {
        start: {
          line: 3377,
          column: 0
        },
        end: {
          line: 3386,
          column: 3
        }
      },
      "172": {
        start: {
          line: 3397,
          column: 0
        },
        end: {
          line: 3400,
          column: 3
        }
      },
      "173": {
        start: {
          line: 3417,
          column: 0
        },
        end: {
          line: 3428,
          column: 3
        }
      },
      "174": {
        start: {
          line: 3439,
          column: 0
        },
        end: {
          line: 3442,
          column: 3
        }
      },
      "175": {
        start: {
          line: 3475,
          column: 0
        },
        end: {
          line: 3500,
          column: 3
        }
      },
      "176": {
        start: {
          line: 3511,
          column: 0
        },
        end: {
          line: 3514,
          column: 3
        }
      },
      "177": {
        start: {
          line: 3526,
          column: 0
        },
        end: {
          line: 3530,
          column: 3
        }
      },
      "178": {
        start: {
          line: 3549,
          column: 0
        },
        end: {
          line: 3556,
          column: 3
        }
      },
      "179": {
        start: {
          line: 3575,
          column: 0
        },
        end: {
          line: 3582,
          column: 3
        }
      },
      "180": {
        start: {
          line: 3598,
          column: 0
        },
        end: {
          line: 3604,
          column: 3
        }
      },
      "181": {
        start: {
          line: 3621,
          column: 0
        },
        end: {
          line: 3627,
          column: 3
        }
      },
      "182": {
        start: {
          line: 3640,
          column: 0
        },
        end: {
          line: 3645,
          column: 3
        }
      },
      "183": {
        start: {
          line: 3670,
          column: 0
        },
        end: {
          line: 3680,
          column: 3
        }
      },
      "184": {
        start: {
          line: 3702,
          column: 0
        },
        end: {
          line: 3716,
          column: 3
        }
      },
      "185": {
        start: {
          line: 3729,
          column: 0
        },
        end: {
          line: 3732,
          column: 3
        }
      },
      "186": {
        start: {
          line: 3746,
          column: 0
        },
        end: {
          line: 3750,
          column: 3
        }
      },
      "187": {
        start: {
          line: 3761,
          column: 0
        },
        end: {
          line: 3764,
          column: 3
        }
      },
      "188": {
        start: {
          line: 3774,
          column: 0
        },
        end: {
          line: 3776,
          column: 3
        }
      },
      "189": {
        start: {
          line: 3788,
          column: 0
        },
        end: {
          line: 3792,
          column: 3
        }
      },
      "190": {
        start: {
          line: 3802,
          column: 0
        },
        end: {
          line: 3804,
          column: 3
        }
      },
      "191": {
        start: {
          line: 3814,
          column: 0
        },
        end: {
          line: 3816,
          column: 3
        }
      },
      "192": {
        start: {
          line: 3827,
          column: 0
        },
        end: {
          line: 3830,
          column: 3
        }
      },
      "193": {
        start: {
          line: 3841,
          column: 0
        },
        end: {
          line: 3844,
          column: 3
        }
      },
      "194": {
        start: {
          line: 3861,
          column: 0
        },
        end: {
          line: 3872,
          column: 3
        }
      },
      "195": {
        start: {
          line: 3884,
          column: 0
        },
        end: {
          line: 3888,
          column: 3
        }
      },
      "196": {
        start: {
          line: 3898,
          column: 0
        },
        end: {
          line: 3900,
          column: 3
        }
      },
      "197": {
        start: {
          line: 3914,
          column: 0
        },
        end: {
          line: 3919,
          column: 3
        }
      },
      "198": {
        start: {
          line: 3926,
          column: 0
        },
        end: {
          line: 3926,
          column: 40
        }
      },
      "199": {
        start: {
          line: 3940,
          column: 0
        },
        end: {
          line: 3946,
          column: 3
        }
      },
      "200": {
        start: {
          line: 3959,
          column: 0
        },
        end: {
          line: 3964,
          column: 3
        }
      },
      "201": {
        start: {
          line: 4021,
          column: 0
        },
        end: {
          line: 4074,
          column: 3
        }
      },
      "202": {
        start: {
          line: 4140,
          column: 0
        },
        end: {
          line: 4143,
          column: 3
        }
      },
      "203": {
        start: {
          line: 4155,
          column: 0
        },
        end: {
          line: 4159,
          column: 3
        }
      },
      "204": {
        start: {
          line: 4173,
          column: 0
        },
        end: {
          line: 4179,
          column: 3
        }
      },
      "205": {
        start: {
          line: 4204,
          column: 0
        },
        end: {
          line: 4215,
          column: 3
        }
      },
      "206": {
        start: {
          line: 4229,
          column: 0
        },
        end: {
          line: 4235,
          column: 3
        }
      },
      "207": {
        start: {
          line: 4254,
          column: 0
        },
        end: {
          line: 4270,
          column: 3
        }
      },
      "208": {
        start: {
          line: 4281,
          column: 0
        },
        end: {
          line: 4284,
          column: 3
        }
      },
      "209": {
        start: {
          line: 4295,
          column: 0
        },
        end: {
          line: 4298,
          column: 3
        }
      },
      "210": {
        start: {
          line: 4336,
          column: 0
        },
        end: {
          line: 4343,
          column: 3
        }
      },
      "211": {
        start: {
          line: 4355,
          column: 0
        },
        end: {
          line: 4359,
          column: 3
        }
      },
      "212": {
        start: {
          line: 4374,
          column: 0
        },
        end: {
          line: 4386,
          column: 3
        }
      },
      "213": {
        start: {
          line: 4393,
          column: 0
        },
        end: {
          line: 4393,
          column: 33
        }
      },
      "214": {
        start: {
          line: 4404,
          column: 0
        },
        end: {
          line: 4412,
          column: 3
        }
      },
      "215": {
        start: {
          line: 4433,
          column: 0
        },
        end: {
          line: 4441,
          column: 3
        }
      },
      "216": {
        start: {
          line: 4454,
          column: 0
        },
        end: {
          line: 4457,
          column: 3
        }
      },
      "217": {
        start: {
          line: 4468,
          column: 0
        },
        end: {
          line: 4476,
          column: 3
        }
      },
      "218": {
        start: {
          line: 4508,
          column: 0
        },
        end: {
          line: 4516,
          column: 3
        }
      },
      "219": {
        start: {
          line: 4529,
          column: 0
        },
        end: {
          line: 4532,
          column: 3
        }
      },
      "220": {
        start: {
          line: 4543,
          column: 0
        },
        end: {
          line: 4552,
          column: 3
        }
      },
      "221": {
        start: {
          line: 4563,
          column: 0
        },
        end: {
          line: 4571,
          column: 3
        }
      },
      "222": {
        start: {
          line: 4594,
          column: 0
        },
        end: {
          line: 4599,
          column: 3
        }
      },
      "223": {
        start: {
          line: 4612,
          column: 0
        },
        end: {
          line: 4615,
          column: 3
        }
      },
      "224": {
        start: {
          line: 4630,
          column: 0
        },
        end: {
          line: 4643,
          column: 3
        }
      },
      "225": {
        start: {
          line: 4657,
          column: 0
        },
        end: {
          line: 4668,
          column: 3
        }
      },
      "226": {
        start: {
          line: 4687,
          column: 0
        },
        end: {
          line: 4690,
          column: 3
        }
      },
      "227": {
        start: {
          line: 4702,
          column: 0
        },
        end: {
          line: 4706,
          column: 3
        }
      },
      "228": {
        start: {
          line: 4726,
          column: 0
        },
        end: {
          line: 4733,
          column: 3
        }
      },
      "229": {
        start: {
          line: 4753,
          column: 0
        },
        end: {
          line: 4760,
          column: 3
        }
      },
      "230": {
        start: {
          line: 4778,
          column: 0
        },
        end: {
          line: 4784,
          column: 3
        }
      },
      "231": {
        start: {
          line: 4799,
          column: 0
        },
        end: {
          line: 4812,
          column: 3
        }
      },
      "232": {
        start: {
          line: 4830,
          column: 0
        },
        end: {
          line: 4836,
          column: 3
        }
      },
      "233": {
        start: {
          line: 4852,
          column: 0
        },
        end: {
          line: 4864,
          column: 3
        }
      },
      "234": {
        start: {
          line: 4886,
          column: 0
        },
        end: {
          line: 4897,
          column: 3
        }
      },
      "235": {
        start: {
          line: 4918,
          column: 0
        },
        end: {
          line: 4935,
          column: 3
        }
      },
      "236": {
        start: {
          line: 4969,
          column: 0
        },
        end: {
          line: 4983,
          column: 3
        }
      },
      "237": {
        start: {
          line: 4995,
          column: 0
        },
        end: {
          line: 4999,
          column: 3
        }
      },
      "238": {
        start: {
          line: 5010,
          column: 0
        },
        end: {
          line: 5013,
          column: 3
        }
      },
      "239": {
        start: {
          line: 5044,
          column: 0
        },
        end: {
          line: 5066,
          column: 3
        }
      },
      "240": {
        start: {
          line: 5099,
          column: 0
        },
        end: {
          line: 5113,
          column: 3
        }
      },
      "241": {
        start: {
          line: 5124,
          column: 0
        },
        end: {
          line: 5127,
          column: 3
        }
      },
      "242": {
        start: {
          line: 5157,
          column: 0
        },
        end: {
          line: 5179,
          column: 3
        }
      },
      "243": {
        start: {
          line: 5211,
          column: 0
        },
        end: {
          line: 5225,
          column: 3
        }
      },
      "244": {
        start: {
          line: 5237,
          column: 0
        },
        end: {
          line: 5241,
          column: 3
        }
      },
      "245": {
        start: {
          line: 5255,
          column: 0
        },
        end: {
          line: 5266,
          column: 3
        }
      },
      "246": {
        start: {
          line: 5287,
          column: 0
        },
        end: {
          line: 5290,
          column: 3
        }
      },
      "247": {
        start: {
          line: 5314,
          column: 0
        },
        end: {
          line: 5335,
          column: 3
        }
      },
      "248": {
        start: {
          line: 5364,
          column: 0
        },
        end: {
          line: 5378,
          column: 3
        }
      },
      "249": {
        start: {
          line: 5402,
          column: 0
        },
        end: {
          line: 5423,
          column: 3
        }
      },
      "250": {
        start: {
          line: 5446,
          column: 0
        },
        end: {
          line: 5458,
          column: 3
        }
      },
      "251": {
        start: {
          line: 5480,
          column: 0
        },
        end: {
          line: 5498,
          column: 3
        }
      },
      "252": {
        start: {
          line: 5522,
          column: 0
        },
        end: {
          line: 5532,
          column: 3
        }
      },
      "253": {
        start: {
          line: 5552,
          column: 0
        },
        end: {
          line: 5568,
          column: 3
        }
      },
      "254": {
        start: {
          line: 5588,
          column: 0
        },
        end: {
          line: 5596,
          column: 3
        }
      },
      "255": {
        start: {
          line: 5614,
          column: 0
        },
        end: {
          line: 5628,
          column: 3
        }
      },
      "256": {
        start: {
          line: 5648,
          column: 0
        },
        end: {
          line: 5657,
          column: 3
        }
      },
      "257": {
        start: {
          line: 5676,
          column: 0
        },
        end: {
          line: 5692,
          column: 3
        }
      },
      "258": {
        start: {
          line: 5705,
          column: 0
        },
        end: {
          line: 5708,
          column: 3
        }
      },
      "259": {
        start: {
          line: 5719,
          column: 0
        },
        end: {
          line: 5722,
          column: 3
        }
      },
      "260": {
        start: {
          line: 5735,
          column: 0
        },
        end: {
          line: 5745,
          column: 3
        }
      },
      "261": {
        start: {
          line: 5763,
          column: 0
        },
        end: {
          line: 5769,
          column: 3
        }
      },
      "262": {
        start: {
          line: 5785,
          column: 0
        },
        end: {
          line: 5797,
          column: 3
        }
      },
      "263": {
        start: {
          line: 5810,
          column: 0
        },
        end: {
          line: 5813,
          column: 3
        }
      },
      "264": {
        start: {
          line: 5826,
          column: 0
        },
        end: {
          line: 5835,
          column: 3
        }
      },
      "265": {
        start: {
          line: 5850,
          column: 0
        },
        end: {
          line: 5857,
          column: 3
        }
      },
      "266": {
        start: {
          line: 5875,
          column: 0
        },
        end: {
          line: 5889,
          column: 3
        }
      },
      "267": {
        start: {
          line: 5904,
          column: 0
        },
        end: {
          line: 5911,
          column: 3
        }
      },
      "268": {
        start: {
          line: 5928,
          column: 0
        },
        end: {
          line: 5941,
          column: 3
        }
      },
      "269": {
        start: {
          line: 5957,
          column: 0
        },
        end: {
          line: 5962,
          column: 3
        }
      },
      "270": {
        start: {
          line: 5978,
          column: 0
        },
        end: {
          line: 5989,
          column: 3
        }
      },
      "271": {
        start: {
          line: 6003,
          column: 0
        },
        end: {
          line: 6006,
          column: 3
        }
      },
      "272": {
        start: {
          line: 6020,
          column: 0
        },
        end: {
          line: 6029,
          column: 3
        }
      },
      "273": {
        start: {
          line: 6047,
          column: 0
        },
        end: {
          line: 6054,
          column: 3
        }
      },
      "274": {
        start: {
          line: 6071,
          column: 0
        },
        end: {
          line: 6084,
          column: 3
        }
      },
      "275": {
        start: {
          line: 6101,
          column: 0
        },
        end: {
          line: 6107,
          column: 3
        }
      },
      "276": {
        start: {
          line: 6123,
          column: 0
        },
        end: {
          line: 6135,
          column: 3
        }
      },
      "277": {
        start: {
          line: 6151,
          column: 0
        },
        end: {
          line: 6156,
          column: 3
        }
      },
      "278": {
        start: {
          line: 6172,
          column: 0
        },
        end: {
          line: 6183,
          column: 3
        }
      },
      "279": {
        start: {
          line: 6202,
          column: 0
        },
        end: {
          line: 6209,
          column: 3
        }
      },
      "280": {
        start: {
          line: 6226,
          column: 0
        },
        end: {
          line: 6239,
          column: 3
        }
      },
      "281": {
        start: {
          line: 6263,
          column: 0
        },
        end: {
          line: 6272,
          column: 3
        }
      },
      "282": {
        start: {
          line: 6291,
          column: 0
        },
        end: {
          line: 6306,
          column: 3
        }
      },
      "283": {
        start: {
          line: 6327,
          column: 0
        },
        end: {
          line: 6334,
          column: 3
        }
      },
      "284": {
        start: {
          line: 6351,
          column: 0
        },
        end: {
          line: 6364,
          column: 3
        }
      },
      "285": {
        start: {
          line: 6381,
          column: 0
        },
        end: {
          line: 6389,
          column: 3
        }
      },
      "286": {
        start: {
          line: 6446,
          column: 0
        },
        end: {
          line: 6501,
          column: 3
        }
      },
      "287": {
        start: {
          line: 6570,
          column: 0
        },
        end: {
          line: 6585,
          column: 3
        }
      },
      "288": {
        start: {
          line: 6617,
          column: 0
        },
        end: {
          line: 6636,
          column: 3
        }
      },
      "289": {
        start: {
          line: 6665,
          column: 0
        },
        end: {
          line: 6689,
          column: 3
        }
      },
      "290": {
        start: {
          line: 6700,
          column: 0
        },
        end: {
          line: 6708,
          column: 3
        }
      },
      "291": {
        start: {
          line: 6752,
          column: 0
        },
        end: {
          line: 6756,
          column: 3
        }
      },
      "292": {
        start: {
          line: 6767,
          column: 0
        },
        end: {
          line: 6770,
          column: 3
        }
      },
      "293": {
        start: {
          line: 6801,
          column: 0
        },
        end: {
          line: 6828,
          column: 3
        }
      },
      "294": {
        start: {
          line: 6839,
          column: 0
        },
        end: {
          line: 6847,
          column: 3
        }
      },
      "295": {
        start: {
          line: 6892,
          column: 0
        },
        end: {
          line: 6896,
          column: 3
        }
      },
      "296": {
        start: {
          line: 6903,
          column: 0
        },
        end: {
          line: 6903,
          column: 36
        }
      },
      "297": {
        start: {
          line: 6910,
          column: 0
        },
        end: {
          line: 6910,
          column: 39
        }
      },
      "298": {
        start: {
          line: 6917,
          column: 0
        },
        end: {
          line: 6917,
          column: 34
        }
      },
      "299": {
        start: {
          line: 6924,
          column: 0
        },
        end: {
          line: 6924,
          column: 32
        }
      },
      "300": {
        start: {
          line: 6931,
          column: 0
        },
        end: {
          line: 6931,
          column: 36
        }
      },
      "301": {
        start: {
          line: 6938,
          column: 0
        },
        end: {
          line: 6938,
          column: 34
        }
      },
      "302": {
        start: {
          line: 6949,
          column: 0
        },
        end: {
          line: 6957,
          column: 3
        }
      },
      "303": {
        start: {
          line: 6973,
          column: 0
        },
        end: {
          line: 6979,
          column: 3
        }
      },
      "304": {
        start: {
          line: 6989,
          column: 0
        },
        end: {
          line: 6991,
          column: 3
        }
      },
      "305": {
        start: {
          line: 7004,
          column: 0
        },
        end: {
          line: 7009,
          column: 3
        }
      },
      "306": {
        start: {
          line: 7020,
          column: 0
        },
        end: {
          line: 7029,
          column: 3
        }
      },
      "307": {
        start: {
          line: 7042,
          column: 0
        },
        end: {
          line: 7045,
          column: 3
        }
      },
      "308": {
        start: {
          line: 7070,
          column: 0
        },
        end: {
          line: 7085,
          column: 3
        }
      },
      "309": {
        start: {
          line: 7092,
          column: 0
        },
        end: {
          line: 7092,
          column: 44
        }
      },
      "310": {
        start: {
          line: 7099,
          column: 0
        },
        end: {
          line: 7099,
          column: 44
        }
      },
      "311": {
        start: {
          line: 7106,
          column: 0
        },
        end: {
          line: 7106,
          column: 47
        }
      },
      "312": {
        start: {
          line: 7116,
          column: 0
        },
        end: {
          line: 7118,
          column: 3
        }
      },
      "313": {
        start: {
          line: 7128,
          column: 0
        },
        end: {
          line: 7130,
          column: 3
        }
      },
      "314": {
        start: {
          line: 7140,
          column: 0
        },
        end: {
          line: 7142,
          column: 3
        }
      },
      "315": {
        start: {
          line: 7152,
          column: 0
        },
        end: {
          line: 7154,
          column: 3
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 23
          },
          end: {
            line: 10,
            column: 24
          }
        },
        loc: {
          start: {
            line: 10,
            column: 30
          },
          end: {
            line: 7156,
            column: 1
          }
        },
        line: 10
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0,
      "282": 0,
      "283": 0,
      "284": 0,
      "285": 0,
      "286": 0,
      "287": 0,
      "288": 0,
      "289": 0,
      "290": 0,
      "291": 0,
      "292": 0,
      "293": 0,
      "294": 0,
      "295": 0,
      "296": 0,
      "297": 0,
      "298": 0,
      "299": 0,
      "300": 0,
      "301": 0,
      "302": 0,
      "303": 0,
      "304": 0,
      "305": 0,
      "306": 0,
      "307": 0,
      "308": 0,
      "309": 0,
      "310": 0,
      "311": 0,
      "312": 0,
      "313": 0,
      "314": 0,
      "315": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "4e397c9ffe4d7befff8643d393e6bf7fb00b0357"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1racd7g41m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1racd7g41m();
// Automatically generated by xdrgen
// DO NOT EDIT or your changes may be overwritten

/* jshint maxstatements:2147483647  */
/* jshint esnext:true  */


var types = (cov_1racd7g41m().s[0]++, js_xdr__WEBPACK_IMPORTED_MODULE_0__.config(function (xdr) {
  cov_1racd7g41m().f[0]++;
  cov_1racd7g41m().s[1]++;
  // === xdr source ============================================================
  //
  //   typedef opaque Value<>;
  //
  // ===========================================================================
  xdr.typedef("Value", xdr.varOpaque());

  // === xdr source ============================================================
  //
  //   struct SCPBallot
  //   {
  //       uint32 counter; // n
  //       Value value;    // x
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[2]++;
  xdr.struct("ScpBallot", [["counter", xdr.lookup("Uint32")], ["value", xdr.lookup("Value")]]);

  // === xdr source ============================================================
  //
  //   enum SCPStatementType
  //   {
  //       SCP_ST_PREPARE = 0,
  //       SCP_ST_CONFIRM = 1,
  //       SCP_ST_EXTERNALIZE = 2,
  //       SCP_ST_NOMINATE = 3
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[3]++;
  xdr["enum"]("ScpStatementType", {
    scpStPrepare: 0,
    scpStConfirm: 1,
    scpStExternalize: 2,
    scpStNominate: 3
  });

  // === xdr source ============================================================
  //
  //   struct SCPNomination
  //   {
  //       Hash quorumSetHash; // D
  //       Value votes<>;      // X
  //       Value accepted<>;   // Y
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[4]++;
  xdr.struct("ScpNomination", [["quorumSetHash", xdr.lookup("Hash")], ["votes", xdr.varArray(xdr.lookup("Value"), 2147483647)], ["accepted", xdr.varArray(xdr.lookup("Value"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   struct
  //           {
  //               Hash quorumSetHash;       // D
  //               SCPBallot ballot;         // b
  //               SCPBallot* prepared;      // p
  //               SCPBallot* preparedPrime; // p'
  //               uint32 nC;                // c.n
  //               uint32 nH;                // h.n
  //           }
  //
  // ===========================================================================
  cov_1racd7g41m().s[5]++;
  xdr.struct("ScpStatementPrepare", [["quorumSetHash", xdr.lookup("Hash")], ["ballot", xdr.lookup("ScpBallot")], ["prepared", xdr.option(xdr.lookup("ScpBallot"))], ["preparedPrime", xdr.option(xdr.lookup("ScpBallot"))], ["nC", xdr.lookup("Uint32")], ["nH", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   struct
  //           {
  //               SCPBallot ballot;   // b
  //               uint32 nPrepared;   // p.n
  //               uint32 nCommit;     // c.n
  //               uint32 nH;          // h.n
  //               Hash quorumSetHash; // D
  //           }
  //
  // ===========================================================================
  cov_1racd7g41m().s[6]++;
  xdr.struct("ScpStatementConfirm", [["ballot", xdr.lookup("ScpBallot")], ["nPrepared", xdr.lookup("Uint32")], ["nCommit", xdr.lookup("Uint32")], ["nH", xdr.lookup("Uint32")], ["quorumSetHash", xdr.lookup("Hash")]]);

  // === xdr source ============================================================
  //
  //   struct
  //           {
  //               SCPBallot commit;         // c
  //               uint32 nH;                // h.n
  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
  //           }
  //
  // ===========================================================================
  cov_1racd7g41m().s[7]++;
  xdr.struct("ScpStatementExternalize", [["commit", xdr.lookup("ScpBallot")], ["nH", xdr.lookup("Uint32")], ["commitQuorumSetHash", xdr.lookup("Hash")]]);

  // === xdr source ============================================================
  //
  //   union switch (SCPStatementType type)
  //       {
  //       case SCP_ST_PREPARE:
  //           struct
  //           {
  //               Hash quorumSetHash;       // D
  //               SCPBallot ballot;         // b
  //               SCPBallot* prepared;      // p
  //               SCPBallot* preparedPrime; // p'
  //               uint32 nC;                // c.n
  //               uint32 nH;                // h.n
  //           } prepare;
  //       case SCP_ST_CONFIRM:
  //           struct
  //           {
  //               SCPBallot ballot;   // b
  //               uint32 nPrepared;   // p.n
  //               uint32 nCommit;     // c.n
  //               uint32 nH;          // h.n
  //               Hash quorumSetHash; // D
  //           } confirm;
  //       case SCP_ST_EXTERNALIZE:
  //           struct
  //           {
  //               SCPBallot commit;         // c
  //               uint32 nH;                // h.n
  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
  //           } externalize;
  //       case SCP_ST_NOMINATE:
  //           SCPNomination nominate;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[8]++;
  xdr.union("ScpStatementPledges", {
    switchOn: xdr.lookup("ScpStatementType"),
    switchName: "type",
    switches: [["scpStPrepare", "prepare"], ["scpStConfirm", "confirm"], ["scpStExternalize", "externalize"], ["scpStNominate", "nominate"]],
    arms: {
      prepare: xdr.lookup("ScpStatementPrepare"),
      confirm: xdr.lookup("ScpStatementConfirm"),
      externalize: xdr.lookup("ScpStatementExternalize"),
      nominate: xdr.lookup("ScpNomination")
    }
  });

  // === xdr source ============================================================
  //
  //   struct SCPStatement
  //   {
  //       NodeID nodeID;    // v
  //       uint64 slotIndex; // i
  //   
  //       union switch (SCPStatementType type)
  //       {
  //       case SCP_ST_PREPARE:
  //           struct
  //           {
  //               Hash quorumSetHash;       // D
  //               SCPBallot ballot;         // b
  //               SCPBallot* prepared;      // p
  //               SCPBallot* preparedPrime; // p'
  //               uint32 nC;                // c.n
  //               uint32 nH;                // h.n
  //           } prepare;
  //       case SCP_ST_CONFIRM:
  //           struct
  //           {
  //               SCPBallot ballot;   // b
  //               uint32 nPrepared;   // p.n
  //               uint32 nCommit;     // c.n
  //               uint32 nH;          // h.n
  //               Hash quorumSetHash; // D
  //           } confirm;
  //       case SCP_ST_EXTERNALIZE:
  //           struct
  //           {
  //               SCPBallot commit;         // c
  //               uint32 nH;                // h.n
  //               Hash commitQuorumSetHash; // D used before EXTERNALIZE
  //           } externalize;
  //       case SCP_ST_NOMINATE:
  //           SCPNomination nominate;
  //       }
  //       pledges;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[9]++;
  xdr.struct("ScpStatement", [["nodeId", xdr.lookup("NodeId")], ["slotIndex", xdr.lookup("Uint64")], ["pledges", xdr.lookup("ScpStatementPledges")]]);

  // === xdr source ============================================================
  //
  //   struct SCPEnvelope
  //   {
  //       SCPStatement statement;
  //       Signature signature;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[10]++;
  xdr.struct("ScpEnvelope", [["statement", xdr.lookup("ScpStatement")], ["signature", xdr.lookup("Signature")]]);

  // === xdr source ============================================================
  //
  //   struct SCPQuorumSet
  //   {
  //       uint32 threshold;
  //       NodeID validators<>;
  //       SCPQuorumSet innerSets<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[11]++;
  xdr.struct("ScpQuorumSet", [["threshold", xdr.lookup("Uint32")], ["validators", xdr.varArray(xdr.lookup("NodeId"), 2147483647)], ["innerSets", xdr.varArray(xdr.lookup("ScpQuorumSet"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   typedef PublicKey AccountID;
  //
  // ===========================================================================
  cov_1racd7g41m().s[12]++;
  xdr.typedef("AccountId", xdr.lookup("PublicKey"));

  // === xdr source ============================================================
  //
  //   typedef opaque Thresholds[4];
  //
  // ===========================================================================
  cov_1racd7g41m().s[13]++;
  xdr.typedef("Thresholds", xdr.opaque(4));

  // === xdr source ============================================================
  //
  //   typedef string string32<32>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[14]++;
  xdr.typedef("String32", xdr.string(32));

  // === xdr source ============================================================
  //
  //   typedef string string64<64>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[15]++;
  xdr.typedef("String64", xdr.string(64));

  // === xdr source ============================================================
  //
  //   typedef int64 SequenceNumber;
  //
  // ===========================================================================
  cov_1racd7g41m().s[16]++;
  xdr.typedef("SequenceNumber", xdr.lookup("Int64"));

  // === xdr source ============================================================
  //
  //   typedef uint64 TimePoint;
  //
  // ===========================================================================
  cov_1racd7g41m().s[17]++;
  xdr.typedef("TimePoint", xdr.lookup("Uint64"));

  // === xdr source ============================================================
  //
  //   typedef uint64 Duration;
  //
  // ===========================================================================
  cov_1racd7g41m().s[18]++;
  xdr.typedef("Duration", xdr.lookup("Uint64"));

  // === xdr source ============================================================
  //
  //   typedef opaque DataValue<64>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[19]++;
  xdr.typedef("DataValue", xdr.varOpaque(64));

  // === xdr source ============================================================
  //
  //   typedef Hash PoolID;
  //
  // ===========================================================================
  cov_1racd7g41m().s[20]++;
  xdr.typedef("PoolId", xdr.lookup("Hash"));

  // === xdr source ============================================================
  //
  //   typedef opaque AssetCode4[4];
  //
  // ===========================================================================
  cov_1racd7g41m().s[21]++;
  xdr.typedef("AssetCode4", xdr.opaque(4));

  // === xdr source ============================================================
  //
  //   typedef opaque AssetCode12[12];
  //
  // ===========================================================================
  cov_1racd7g41m().s[22]++;
  xdr.typedef("AssetCode12", xdr.opaque(12));

  // === xdr source ============================================================
  //
  //   enum AssetType
  //   {
  //       ASSET_TYPE_NATIVE = 0,
  //       ASSET_TYPE_CREDIT_ALPHANUM4 = 1,
  //       ASSET_TYPE_CREDIT_ALPHANUM12 = 2,
  //       ASSET_TYPE_POOL_SHARE = 3
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[23]++;
  xdr["enum"]("AssetType", {
    assetTypeNative: 0,
    assetTypeCreditAlphanum4: 1,
    assetTypeCreditAlphanum12: 2,
    assetTypePoolShare: 3
  });

  // === xdr source ============================================================
  //
  //   union AssetCode switch (AssetType type)
  //   {
  //   case ASSET_TYPE_CREDIT_ALPHANUM4:
  //       AssetCode4 assetCode4;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM12:
  //       AssetCode12 assetCode12;
  //   
  //       // add other asset types here in the future
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[24]++;
  xdr.union("AssetCode", {
    switchOn: xdr.lookup("AssetType"),
    switchName: "type",
    switches: [["assetTypeCreditAlphanum4", "assetCode4"], ["assetTypeCreditAlphanum12", "assetCode12"]],
    arms: {
      assetCode4: xdr.lookup("AssetCode4"),
      assetCode12: xdr.lookup("AssetCode12")
    }
  });

  // === xdr source ============================================================
  //
  //   struct AlphaNum4
  //   {
  //       AssetCode4 assetCode;
  //       AccountID issuer;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[25]++;
  xdr.struct("AlphaNum4", [["assetCode", xdr.lookup("AssetCode4")], ["issuer", xdr.lookup("AccountId")]]);

  // === xdr source ============================================================
  //
  //   struct AlphaNum12
  //   {
  //       AssetCode12 assetCode;
  //       AccountID issuer;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[26]++;
  xdr.struct("AlphaNum12", [["assetCode", xdr.lookup("AssetCode12")], ["issuer", xdr.lookup("AccountId")]]);

  // === xdr source ============================================================
  //
  //   union Asset switch (AssetType type)
  //   {
  //   case ASSET_TYPE_NATIVE: // Not credit
  //       void;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM4:
  //       AlphaNum4 alphaNum4;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM12:
  //       AlphaNum12 alphaNum12;
  //   
  //       // add other asset types here in the future
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[27]++;
  xdr.union("Asset", {
    switchOn: xdr.lookup("AssetType"),
    switchName: "type",
    switches: [["assetTypeNative", xdr["void"]()], ["assetTypeCreditAlphanum4", "alphaNum4"], ["assetTypeCreditAlphanum12", "alphaNum12"]],
    arms: {
      alphaNum4: xdr.lookup("AlphaNum4"),
      alphaNum12: xdr.lookup("AlphaNum12")
    }
  });

  // === xdr source ============================================================
  //
  //   struct Price
  //   {
  //       int32 n; // numerator
  //       int32 d; // denominator
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[28]++;
  xdr.struct("Price", [["n", xdr.lookup("Int32")], ["d", xdr.lookup("Int32")]]);

  // === xdr source ============================================================
  //
  //   struct Liabilities
  //   {
  //       int64 buying;
  //       int64 selling;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[29]++;
  xdr.struct("Liabilities", [["buying", xdr.lookup("Int64")], ["selling", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   enum ThresholdIndexes
  //   {
  //       THRESHOLD_MASTER_WEIGHT = 0,
  //       THRESHOLD_LOW = 1,
  //       THRESHOLD_MED = 2,
  //       THRESHOLD_HIGH = 3
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[30]++;
  xdr["enum"]("ThresholdIndices", {
    thresholdMasterWeight: 0,
    thresholdLow: 1,
    thresholdMed: 2,
    thresholdHigh: 3
  });

  // === xdr source ============================================================
  //
  //   enum LedgerEntryType
  //   {
  //       ACCOUNT = 0,
  //       TRUSTLINE = 1,
  //       OFFER = 2,
  //       DATA = 3,
  //       CLAIMABLE_BALANCE = 4,
  //       LIQUIDITY_POOL = 5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[31]++;
  xdr["enum"]("LedgerEntryType", {
    account: 0,
    trustline: 1,
    offer: 2,
    data: 3,
    claimableBalance: 4,
    liquidityPool: 5
  });

  // === xdr source ============================================================
  //
  //   struct Signer
  //   {
  //       SignerKey key;
  //       uint32 weight; // really only need 1 byte
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[32]++;
  xdr.struct("Signer", [["key", xdr.lookup("SignerKey")], ["weight", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   enum AccountFlags
  //   { // masks for each flag
  //   
  //       // Flags set on issuer accounts
  //       // TrustLines are created with authorized set to "false" requiring
  //       // the issuer to set it for each TrustLine
  //       AUTH_REQUIRED_FLAG = 0x1,
  //       // If set, the authorized flag in TrustLines can be cleared
  //       // otherwise, authorization cannot be revoked
  //       AUTH_REVOCABLE_FLAG = 0x2,
  //       // Once set, causes all AUTH_* flags to be read-only
  //       AUTH_IMMUTABLE_FLAG = 0x4,
  //       // Trustlines are created with clawback enabled set to "true",
  //       // and claimable balances created from those trustlines are created
  //       // with clawback enabled set to "true"
  //       AUTH_CLAWBACK_ENABLED_FLAG = 0x8
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[33]++;
  xdr["enum"]("AccountFlags", {
    authRequiredFlag: 1,
    authRevocableFlag: 2,
    authImmutableFlag: 4,
    authClawbackEnabledFlag: 8
  });

  // === xdr source ============================================================
  //
  //   const MASK_ACCOUNT_FLAGS = 0x7;
  //
  // ===========================================================================
  cov_1racd7g41m().s[34]++;
  xdr["const"]("MASK_ACCOUNT_FLAGS", 0x7);

  // === xdr source ============================================================
  //
  //   const MASK_ACCOUNT_FLAGS_V17 = 0xF;
  //
  // ===========================================================================
  cov_1racd7g41m().s[35]++;
  xdr["const"]("MASK_ACCOUNT_FLAGS_V17", 0xF);

  // === xdr source ============================================================
  //
  //   const MAX_SIGNERS = 20;
  //
  // ===========================================================================
  cov_1racd7g41m().s[36]++;
  xdr["const"]("MAX_SIGNERS", 20);

  // === xdr source ============================================================
  //
  //   typedef AccountID* SponsorshipDescriptor;
  //
  // ===========================================================================
  cov_1racd7g41m().s[37]++;
  xdr.typedef("SponsorshipDescriptor", xdr.option(xdr.lookup("AccountId")));

  // === xdr source ============================================================
  //
  //   struct AccountEntryExtensionV3
  //   {
  //       // We can use this to add more fields, or because it is first, to
  //       // change AccountEntryExtensionV3 into a union.
  //       ExtensionPoint ext;
  //   
  //       // Ledger number at which `seqNum` took on its present value.
  //       uint32 seqLedger;
  //   
  //       // Time at which `seqNum` took on its present value.
  //       TimePoint seqTime;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[38]++;
  xdr.struct("AccountEntryExtensionV3", [["ext", xdr.lookup("ExtensionPoint")], ["seqLedger", xdr.lookup("Uint32")], ["seqTime", xdr.lookup("TimePoint")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 3:
  //           AccountEntryExtensionV3 v3;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[39]++;
  xdr.union("AccountEntryExtensionV2Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [3, "v3"]],
    arms: {
      v3: xdr.lookup("AccountEntryExtensionV3")
    }
  });

  // === xdr source ============================================================
  //
  //   struct AccountEntryExtensionV2
  //   {
  //       uint32 numSponsored;
  //       uint32 numSponsoring;
  //       SponsorshipDescriptor signerSponsoringIDs<MAX_SIGNERS>;
  //   
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 3:
  //           AccountEntryExtensionV3 v3;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[40]++;
  xdr.struct("AccountEntryExtensionV2", [["numSponsored", xdr.lookup("Uint32")], ["numSponsoring", xdr.lookup("Uint32")], ["signerSponsoringIDs", xdr.varArray(xdr.lookup("SponsorshipDescriptor"), xdr.lookup("MAX_SIGNERS"))], ["ext", xdr.lookup("AccountEntryExtensionV2Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 2:
  //           AccountEntryExtensionV2 v2;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[41]++;
  xdr.union("AccountEntryExtensionV1Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [2, "v2"]],
    arms: {
      v2: xdr.lookup("AccountEntryExtensionV2")
    }
  });

  // === xdr source ============================================================
  //
  //   struct AccountEntryExtensionV1
  //   {
  //       Liabilities liabilities;
  //   
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 2:
  //           AccountEntryExtensionV2 v2;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[42]++;
  xdr.struct("AccountEntryExtensionV1", [["liabilities", xdr.lookup("Liabilities")], ["ext", xdr.lookup("AccountEntryExtensionV1Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           AccountEntryExtensionV1 v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[43]++;
  xdr.union("AccountEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "v1"]],
    arms: {
      v1: xdr.lookup("AccountEntryExtensionV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct AccountEntry
  //   {
  //       AccountID accountID;      // master public key for this account
  //       int64 balance;            // in stroops
  //       SequenceNumber seqNum;    // last sequence number used for this account
  //       uint32 numSubEntries;     // number of sub-entries this account has
  //                                 // drives the reserve
  //       AccountID* inflationDest; // Account to vote for during inflation
  //       uint32 flags;             // see AccountFlags
  //   
  //       string32 homeDomain; // can be used for reverse federation and memo lookup
  //   
  //       // fields used for signatures
  //       // thresholds stores unsigned bytes: [weight of master|low|medium|high]
  //       Thresholds thresholds;
  //   
  //       Signer signers<MAX_SIGNERS>; // possible signers for this account
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           AccountEntryExtensionV1 v1;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[44]++;
  xdr.struct("AccountEntry", [["accountId", xdr.lookup("AccountId")], ["balance", xdr.lookup("Int64")], ["seqNum", xdr.lookup("SequenceNumber")], ["numSubEntries", xdr.lookup("Uint32")], ["inflationDest", xdr.option(xdr.lookup("AccountId"))], ["flags", xdr.lookup("Uint32")], ["homeDomain", xdr.lookup("String32")], ["thresholds", xdr.lookup("Thresholds")], ["signers", xdr.varArray(xdr.lookup("Signer"), xdr.lookup("MAX_SIGNERS"))], ["ext", xdr.lookup("AccountEntryExt")]]);

  // === xdr source ============================================================
  //
  //   enum TrustLineFlags
  //   {
  //       // issuer has authorized account to perform transactions with its credit
  //       AUTHORIZED_FLAG = 1,
  //       // issuer has authorized account to maintain and reduce liabilities for its
  //       // credit
  //       AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG = 2,
  //       // issuer has specified that it may clawback its credit, and that claimable
  //       // balances created with its credit may also be clawed back
  //       TRUSTLINE_CLAWBACK_ENABLED_FLAG = 4
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[45]++;
  xdr["enum"]("TrustLineFlags", {
    authorizedFlag: 1,
    authorizedToMaintainLiabilitiesFlag: 2,
    trustlineClawbackEnabledFlag: 4
  });

  // === xdr source ============================================================
  //
  //   const MASK_TRUSTLINE_FLAGS = 1;
  //
  // ===========================================================================
  cov_1racd7g41m().s[46]++;
  xdr["const"]("MASK_TRUSTLINE_FLAGS", 1);

  // === xdr source ============================================================
  //
  //   const MASK_TRUSTLINE_FLAGS_V13 = 3;
  //
  // ===========================================================================
  cov_1racd7g41m().s[47]++;
  xdr["const"]("MASK_TRUSTLINE_FLAGS_V13", 3);

  // === xdr source ============================================================
  //
  //   const MASK_TRUSTLINE_FLAGS_V17 = 7;
  //
  // ===========================================================================
  cov_1racd7g41m().s[48]++;
  xdr["const"]("MASK_TRUSTLINE_FLAGS_V17", 7);

  // === xdr source ============================================================
  //
  //   enum LiquidityPoolType
  //   {
  //       LIQUIDITY_POOL_CONSTANT_PRODUCT = 0
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[49]++;
  xdr["enum"]("LiquidityPoolType", {
    liquidityPoolConstantProduct: 0
  });

  // === xdr source ============================================================
  //
  //   union TrustLineAsset switch (AssetType type)
  //   {
  //   case ASSET_TYPE_NATIVE: // Not credit
  //       void;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM4:
  //       AlphaNum4 alphaNum4;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM12:
  //       AlphaNum12 alphaNum12;
  //   
  //   case ASSET_TYPE_POOL_SHARE:
  //       PoolID liquidityPoolID;
  //   
  //       // add other asset types here in the future
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[50]++;
  xdr.union("TrustLineAsset", {
    switchOn: xdr.lookup("AssetType"),
    switchName: "type",
    switches: [["assetTypeNative", xdr["void"]()], ["assetTypeCreditAlphanum4", "alphaNum4"], ["assetTypeCreditAlphanum12", "alphaNum12"], ["assetTypePoolShare", "liquidityPoolId"]],
    arms: {
      alphaNum4: xdr.lookup("AlphaNum4"),
      alphaNum12: xdr.lookup("AlphaNum12"),
      liquidityPoolId: xdr.lookup("PoolId")
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[51]++;
  xdr.union("TrustLineEntryExtensionV2Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct TrustLineEntryExtensionV2
  //   {
  //       int32 liquidityPoolUseCount;
  //   
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[52]++;
  xdr.struct("TrustLineEntryExtensionV2", [["liquidityPoolUseCount", xdr.lookup("Int32")], ["ext", xdr.lookup("TrustLineEntryExtensionV2Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //               {
  //               case 0:
  //                   void;
  //               case 2:
  //                   TrustLineEntryExtensionV2 v2;
  //               }
  //
  // ===========================================================================
  cov_1racd7g41m().s[53]++;
  xdr.union("TrustLineEntryV1Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [2, "v2"]],
    arms: {
      v2: xdr.lookup("TrustLineEntryExtensionV2")
    }
  });

  // === xdr source ============================================================
  //
  //   struct
  //           {
  //               Liabilities liabilities;
  //   
  //               union switch (int v)
  //               {
  //               case 0:
  //                   void;
  //               case 2:
  //                   TrustLineEntryExtensionV2 v2;
  //               }
  //               ext;
  //           }
  //
  // ===========================================================================
  cov_1racd7g41m().s[54]++;
  xdr.struct("TrustLineEntryV1", [["liabilities", xdr.lookup("Liabilities")], ["ext", xdr.lookup("TrustLineEntryV1Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           struct
  //           {
  //               Liabilities liabilities;
  //   
  //               union switch (int v)
  //               {
  //               case 0:
  //                   void;
  //               case 2:
  //                   TrustLineEntryExtensionV2 v2;
  //               }
  //               ext;
  //           } v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[55]++;
  xdr.union("TrustLineEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "v1"]],
    arms: {
      v1: xdr.lookup("TrustLineEntryV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TrustLineEntry
  //   {
  //       AccountID accountID;  // account this trustline belongs to
  //       TrustLineAsset asset; // type of asset (with issuer)
  //       int64 balance;        // how much of this asset the user has.
  //                             // Asset defines the unit for this;
  //   
  //       int64 limit;  // balance cannot be above this
  //       uint32 flags; // see TrustLineFlags
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           struct
  //           {
  //               Liabilities liabilities;
  //   
  //               union switch (int v)
  //               {
  //               case 0:
  //                   void;
  //               case 2:
  //                   TrustLineEntryExtensionV2 v2;
  //               }
  //               ext;
  //           } v1;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[56]++;
  xdr.struct("TrustLineEntry", [["accountId", xdr.lookup("AccountId")], ["asset", xdr.lookup("TrustLineAsset")], ["balance", xdr.lookup("Int64")], ["limit", xdr.lookup("Int64")], ["flags", xdr.lookup("Uint32")], ["ext", xdr.lookup("TrustLineEntryExt")]]);

  // === xdr source ============================================================
  //
  //   enum OfferEntryFlags
  //   {
  //       // an offer with this flag will not act on and take a reverse offer of equal
  //       // price
  //       PASSIVE_FLAG = 1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[57]++;
  xdr["enum"]("OfferEntryFlags", {
    passiveFlag: 1
  });

  // === xdr source ============================================================
  //
  //   const MASK_OFFERENTRY_FLAGS = 1;
  //
  // ===========================================================================
  cov_1racd7g41m().s[58]++;
  xdr["const"]("MASK_OFFERENTRY_FLAGS", 1);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[59]++;
  xdr.union("OfferEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct OfferEntry
  //   {
  //       AccountID sellerID;
  //       int64 offerID;
  //       Asset selling; // A
  //       Asset buying;  // B
  //       int64 amount;  // amount of A
  //   
  //       /* price for this offer:
  //           price of A in terms of B
  //           price=AmountB/AmountA=priceNumerator/priceDenominator
  //           price is after fees
  //       */
  //       Price price;
  //       uint32 flags; // see OfferEntryFlags
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[60]++;
  xdr.struct("OfferEntry", [["sellerId", xdr.lookup("AccountId")], ["offerId", xdr.lookup("Int64")], ["selling", xdr.lookup("Asset")], ["buying", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")], ["price", xdr.lookup("Price")], ["flags", xdr.lookup("Uint32")], ["ext", xdr.lookup("OfferEntryExt")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[61]++;
  xdr.union("DataEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct DataEntry
  //   {
  //       AccountID accountID; // account this data belongs to
  //       string64 dataName;
  //       DataValue dataValue;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[62]++;
  xdr.struct("DataEntry", [["accountId", xdr.lookup("AccountId")], ["dataName", xdr.lookup("String64")], ["dataValue", xdr.lookup("DataValue")], ["ext", xdr.lookup("DataEntryExt")]]);

  // === xdr source ============================================================
  //
  //   enum ClaimPredicateType
  //   {
  //       CLAIM_PREDICATE_UNCONDITIONAL = 0,
  //       CLAIM_PREDICATE_AND = 1,
  //       CLAIM_PREDICATE_OR = 2,
  //       CLAIM_PREDICATE_NOT = 3,
  //       CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME = 4,
  //       CLAIM_PREDICATE_BEFORE_RELATIVE_TIME = 5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[63]++;
  xdr["enum"]("ClaimPredicateType", {
    claimPredicateUnconditional: 0,
    claimPredicateAnd: 1,
    claimPredicateOr: 2,
    claimPredicateNot: 3,
    claimPredicateBeforeAbsoluteTime: 4,
    claimPredicateBeforeRelativeTime: 5
  });

  // === xdr source ============================================================
  //
  //   union ClaimPredicate switch (ClaimPredicateType type)
  //   {
  //   case CLAIM_PREDICATE_UNCONDITIONAL:
  //       void;
  //   case CLAIM_PREDICATE_AND:
  //       ClaimPredicate andPredicates<2>;
  //   case CLAIM_PREDICATE_OR:
  //       ClaimPredicate orPredicates<2>;
  //   case CLAIM_PREDICATE_NOT:
  //       ClaimPredicate* notPredicate;
  //   case CLAIM_PREDICATE_BEFORE_ABSOLUTE_TIME:
  //       int64 absBefore; // Predicate will be true if closeTime < absBefore
  //   case CLAIM_PREDICATE_BEFORE_RELATIVE_TIME:
  //       int64 relBefore; // Seconds since closeTime of the ledger in which the
  //                        // ClaimableBalanceEntry was created
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[64]++;
  xdr.union("ClaimPredicate", {
    switchOn: xdr.lookup("ClaimPredicateType"),
    switchName: "type",
    switches: [["claimPredicateUnconditional", xdr["void"]()], ["claimPredicateAnd", "andPredicates"], ["claimPredicateOr", "orPredicates"], ["claimPredicateNot", "notPredicate"], ["claimPredicateBeforeAbsoluteTime", "absBefore"], ["claimPredicateBeforeRelativeTime", "relBefore"]],
    arms: {
      andPredicates: xdr.varArray(xdr.lookup("ClaimPredicate"), 2),
      orPredicates: xdr.varArray(xdr.lookup("ClaimPredicate"), 2),
      notPredicate: xdr.option(xdr.lookup("ClaimPredicate")),
      absBefore: xdr.lookup("Int64"),
      relBefore: xdr.lookup("Int64")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ClaimantType
  //   {
  //       CLAIMANT_TYPE_V0 = 0
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[65]++;
  xdr["enum"]("ClaimantType", {
    claimantTypeV0: 0
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID destination;    // The account that can use this condition
  //           ClaimPredicate predicate; // Claimable if predicate is true
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[66]++;
  xdr.struct("ClaimantV0", [["destination", xdr.lookup("AccountId")], ["predicate", xdr.lookup("ClaimPredicate")]]);

  // === xdr source ============================================================
  //
  //   union Claimant switch (ClaimantType type)
  //   {
  //   case CLAIMANT_TYPE_V0:
  //       struct
  //       {
  //           AccountID destination;    // The account that can use this condition
  //           ClaimPredicate predicate; // Claimable if predicate is true
  //       } v0;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[67]++;
  xdr.union("Claimant", {
    switchOn: xdr.lookup("ClaimantType"),
    switchName: "type",
    switches: [["claimantTypeV0", "v0"]],
    arms: {
      v0: xdr.lookup("ClaimantV0")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ClaimableBalanceIDType
  //   {
  //       CLAIMABLE_BALANCE_ID_TYPE_V0 = 0
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[68]++;
  xdr["enum"]("ClaimableBalanceIdType", {
    claimableBalanceIdTypeV0: 0
  });

  // === xdr source ============================================================
  //
  //   union ClaimableBalanceID switch (ClaimableBalanceIDType type)
  //   {
  //   case CLAIMABLE_BALANCE_ID_TYPE_V0:
  //       Hash v0;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[69]++;
  xdr.union("ClaimableBalanceId", {
    switchOn: xdr.lookup("ClaimableBalanceIdType"),
    switchName: "type",
    switches: [["claimableBalanceIdTypeV0", "v0"]],
    arms: {
      v0: xdr.lookup("Hash")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ClaimableBalanceFlags
  //   {
  //       // If set, the issuer account of the asset held by the claimable balance may
  //       // clawback the claimable balance
  //       CLAIMABLE_BALANCE_CLAWBACK_ENABLED_FLAG = 0x1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[70]++;
  xdr["enum"]("ClaimableBalanceFlags", {
    claimableBalanceClawbackEnabledFlag: 1
  });

  // === xdr source ============================================================
  //
  //   const MASK_CLAIMABLE_BALANCE_FLAGS = 0x1;
  //
  // ===========================================================================
  cov_1racd7g41m().s[71]++;
  xdr["const"]("MASK_CLAIMABLE_BALANCE_FLAGS", 0x1);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[72]++;
  xdr.union("ClaimableBalanceEntryExtensionV1Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct ClaimableBalanceEntryExtensionV1
  //   {
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   
  //       uint32 flags; // see ClaimableBalanceFlags
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[73]++;
  xdr.struct("ClaimableBalanceEntryExtensionV1", [["ext", xdr.lookup("ClaimableBalanceEntryExtensionV1Ext")], ["flags", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           ClaimableBalanceEntryExtensionV1 v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[74]++;
  xdr.union("ClaimableBalanceEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "v1"]],
    arms: {
      v1: xdr.lookup("ClaimableBalanceEntryExtensionV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct ClaimableBalanceEntry
  //   {
  //       // Unique identifier for this ClaimableBalanceEntry
  //       ClaimableBalanceID balanceID;
  //   
  //       // List of claimants with associated predicate
  //       Claimant claimants<10>;
  //   
  //       // Any asset including native
  //       Asset asset;
  //   
  //       // Amount of asset
  //       int64 amount;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           ClaimableBalanceEntryExtensionV1 v1;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[75]++;
  xdr.struct("ClaimableBalanceEntry", [["balanceId", xdr.lookup("ClaimableBalanceId")], ["claimants", xdr.varArray(xdr.lookup("Claimant"), 10)], ["asset", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")], ["ext", xdr.lookup("ClaimableBalanceEntryExt")]]);

  // === xdr source ============================================================
  //
  //   struct LiquidityPoolConstantProductParameters
  //   {
  //       Asset assetA; // assetA < assetB
  //       Asset assetB;
  //       int32 fee; // Fee is in basis points, so the actual rate is (fee/100)%
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[76]++;
  xdr.struct("LiquidityPoolConstantProductParameters", [["assetA", xdr.lookup("Asset")], ["assetB", xdr.lookup("Asset")], ["fee", xdr.lookup("Int32")]]);

  // === xdr source ============================================================
  //
  //   struct
  //           {
  //               LiquidityPoolConstantProductParameters params;
  //   
  //               int64 reserveA;        // amount of A in the pool
  //               int64 reserveB;        // amount of B in the pool
  //               int64 totalPoolShares; // total number of pool shares issued
  //               int64 poolSharesTrustLineCount; // number of trust lines for the
  //                                               // associated pool shares
  //           }
  //
  // ===========================================================================
  cov_1racd7g41m().s[77]++;
  xdr.struct("LiquidityPoolEntryConstantProduct", [["params", xdr.lookup("LiquidityPoolConstantProductParameters")], ["reserveA", xdr.lookup("Int64")], ["reserveB", xdr.lookup("Int64")], ["totalPoolShares", xdr.lookup("Int64")], ["poolSharesTrustLineCount", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   union switch (LiquidityPoolType type)
  //       {
  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:
  //           struct
  //           {
  //               LiquidityPoolConstantProductParameters params;
  //   
  //               int64 reserveA;        // amount of A in the pool
  //               int64 reserveB;        // amount of B in the pool
  //               int64 totalPoolShares; // total number of pool shares issued
  //               int64 poolSharesTrustLineCount; // number of trust lines for the
  //                                               // associated pool shares
  //           } constantProduct;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[78]++;
  xdr.union("LiquidityPoolEntryBody", {
    switchOn: xdr.lookup("LiquidityPoolType"),
    switchName: "type",
    switches: [["liquidityPoolConstantProduct", "constantProduct"]],
    arms: {
      constantProduct: xdr.lookup("LiquidityPoolEntryConstantProduct")
    }
  });

  // === xdr source ============================================================
  //
  //   struct LiquidityPoolEntry
  //   {
  //       PoolID liquidityPoolID;
  //   
  //       union switch (LiquidityPoolType type)
  //       {
  //       case LIQUIDITY_POOL_CONSTANT_PRODUCT:
  //           struct
  //           {
  //               LiquidityPoolConstantProductParameters params;
  //   
  //               int64 reserveA;        // amount of A in the pool
  //               int64 reserveB;        // amount of B in the pool
  //               int64 totalPoolShares; // total number of pool shares issued
  //               int64 poolSharesTrustLineCount; // number of trust lines for the
  //                                               // associated pool shares
  //           } constantProduct;
  //       }
  //       body;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[79]++;
  xdr.struct("LiquidityPoolEntry", [["liquidityPoolId", xdr.lookup("PoolId")], ["body", xdr.lookup("LiquidityPoolEntryBody")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[80]++;
  xdr.union("LedgerEntryExtensionV1Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct LedgerEntryExtensionV1
  //   {
  //       SponsorshipDescriptor sponsoringID;
  //   
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[81]++;
  xdr.struct("LedgerEntryExtensionV1", [["sponsoringId", xdr.lookup("SponsorshipDescriptor")], ["ext", xdr.lookup("LedgerEntryExtensionV1Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (LedgerEntryType type)
  //       {
  //       case ACCOUNT:
  //           AccountEntry account;
  //       case TRUSTLINE:
  //           TrustLineEntry trustLine;
  //       case OFFER:
  //           OfferEntry offer;
  //       case DATA:
  //           DataEntry data;
  //       case CLAIMABLE_BALANCE:
  //           ClaimableBalanceEntry claimableBalance;
  //       case LIQUIDITY_POOL:
  //           LiquidityPoolEntry liquidityPool;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[82]++;
  xdr.union("LedgerEntryData", {
    switchOn: xdr.lookup("LedgerEntryType"),
    switchName: "type",
    switches: [["account", "account"], ["trustline", "trustLine"], ["offer", "offer"], ["data", "data"], ["claimableBalance", "claimableBalance"], ["liquidityPool", "liquidityPool"]],
    arms: {
      account: xdr.lookup("AccountEntry"),
      trustLine: xdr.lookup("TrustLineEntry"),
      offer: xdr.lookup("OfferEntry"),
      data: xdr.lookup("DataEntry"),
      claimableBalance: xdr.lookup("ClaimableBalanceEntry"),
      liquidityPool: xdr.lookup("LiquidityPoolEntry")
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           LedgerEntryExtensionV1 v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[83]++;
  xdr.union("LedgerEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "v1"]],
    arms: {
      v1: xdr.lookup("LedgerEntryExtensionV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct LedgerEntry
  //   {
  //       uint32 lastModifiedLedgerSeq; // ledger the LedgerEntry was last changed
  //   
  //       union switch (LedgerEntryType type)
  //       {
  //       case ACCOUNT:
  //           AccountEntry account;
  //       case TRUSTLINE:
  //           TrustLineEntry trustLine;
  //       case OFFER:
  //           OfferEntry offer;
  //       case DATA:
  //           DataEntry data;
  //       case CLAIMABLE_BALANCE:
  //           ClaimableBalanceEntry claimableBalance;
  //       case LIQUIDITY_POOL:
  //           LiquidityPoolEntry liquidityPool;
  //       }
  //       data;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           LedgerEntryExtensionV1 v1;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[84]++;
  xdr.struct("LedgerEntry", [["lastModifiedLedgerSeq", xdr.lookup("Uint32")], ["data", xdr.lookup("LedgerEntryData")], ["ext", xdr.lookup("LedgerEntryExt")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID accountID;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[85]++;
  xdr.struct("LedgerKeyAccount", [["accountId", xdr.lookup("AccountId")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID accountID;
  //           TrustLineAsset asset;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[86]++;
  xdr.struct("LedgerKeyTrustLine", [["accountId", xdr.lookup("AccountId")], ["asset", xdr.lookup("TrustLineAsset")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID sellerID;
  //           int64 offerID;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[87]++;
  xdr.struct("LedgerKeyOffer", [["sellerId", xdr.lookup("AccountId")], ["offerId", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID accountID;
  //           string64 dataName;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[88]++;
  xdr.struct("LedgerKeyData", [["accountId", xdr.lookup("AccountId")], ["dataName", xdr.lookup("String64")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           ClaimableBalanceID balanceID;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[89]++;
  xdr.struct("LedgerKeyClaimableBalance", [["balanceId", xdr.lookup("ClaimableBalanceId")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           PoolID liquidityPoolID;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[90]++;
  xdr.struct("LedgerKeyLiquidityPool", [["liquidityPoolId", xdr.lookup("PoolId")]]);

  // === xdr source ============================================================
  //
  //   union LedgerKey switch (LedgerEntryType type)
  //   {
  //   case ACCOUNT:
  //       struct
  //       {
  //           AccountID accountID;
  //       } account;
  //   
  //   case TRUSTLINE:
  //       struct
  //       {
  //           AccountID accountID;
  //           TrustLineAsset asset;
  //       } trustLine;
  //   
  //   case OFFER:
  //       struct
  //       {
  //           AccountID sellerID;
  //           int64 offerID;
  //       } offer;
  //   
  //   case DATA:
  //       struct
  //       {
  //           AccountID accountID;
  //           string64 dataName;
  //       } data;
  //   
  //   case CLAIMABLE_BALANCE:
  //       struct
  //       {
  //           ClaimableBalanceID balanceID;
  //       } claimableBalance;
  //   
  //   case LIQUIDITY_POOL:
  //       struct
  //       {
  //           PoolID liquidityPoolID;
  //       } liquidityPool;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[91]++;
  xdr.union("LedgerKey", {
    switchOn: xdr.lookup("LedgerEntryType"),
    switchName: "type",
    switches: [["account", "account"], ["trustline", "trustLine"], ["offer", "offer"], ["data", "data"], ["claimableBalance", "claimableBalance"], ["liquidityPool", "liquidityPool"]],
    arms: {
      account: xdr.lookup("LedgerKeyAccount"),
      trustLine: xdr.lookup("LedgerKeyTrustLine"),
      offer: xdr.lookup("LedgerKeyOffer"),
      data: xdr.lookup("LedgerKeyData"),
      claimableBalance: xdr.lookup("LedgerKeyClaimableBalance"),
      liquidityPool: xdr.lookup("LedgerKeyLiquidityPool")
    }
  });

  // === xdr source ============================================================
  //
  //   enum EnvelopeType
  //   {
  //       ENVELOPE_TYPE_TX_V0 = 0,
  //       ENVELOPE_TYPE_SCP = 1,
  //       ENVELOPE_TYPE_TX = 2,
  //       ENVELOPE_TYPE_AUTH = 3,
  //       ENVELOPE_TYPE_SCPVALUE = 4,
  //       ENVELOPE_TYPE_TX_FEE_BUMP = 5,
  //       ENVELOPE_TYPE_OP_ID = 6,
  //       ENVELOPE_TYPE_POOL_REVOKE_OP_ID = 7
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[92]++;
  xdr["enum"]("EnvelopeType", {
    envelopeTypeTxV0: 0,
    envelopeTypeScp: 1,
    envelopeTypeTx: 2,
    envelopeTypeAuth: 3,
    envelopeTypeScpvalue: 4,
    envelopeTypeTxFeeBump: 5,
    envelopeTypeOpId: 6,
    envelopeTypePoolRevokeOpId: 7
  });

  // === xdr source ============================================================
  //
  //   typedef opaque UpgradeType<128>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[93]++;
  xdr.typedef("UpgradeType", xdr.varOpaque(128));

  // === xdr source ============================================================
  //
  //   enum StellarValueType
  //   {
  //       STELLAR_VALUE_BASIC = 0,
  //       STELLAR_VALUE_SIGNED = 1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[94]++;
  xdr["enum"]("StellarValueType", {
    stellarValueBasic: 0,
    stellarValueSigned: 1
  });

  // === xdr source ============================================================
  //
  //   struct LedgerCloseValueSignature
  //   {
  //       NodeID nodeID;       // which node introduced the value
  //       Signature signature; // nodeID's signature
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[95]++;
  xdr.struct("LedgerCloseValueSignature", [["nodeId", xdr.lookup("NodeId")], ["signature", xdr.lookup("Signature")]]);

  // === xdr source ============================================================
  //
  //   union switch (StellarValueType v)
  //       {
  //       case STELLAR_VALUE_BASIC:
  //           void;
  //       case STELLAR_VALUE_SIGNED:
  //           LedgerCloseValueSignature lcValueSignature;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[96]++;
  xdr.union("StellarValueExt", {
    switchOn: xdr.lookup("StellarValueType"),
    switchName: "v",
    switches: [["stellarValueBasic", xdr["void"]()], ["stellarValueSigned", "lcValueSignature"]],
    arms: {
      lcValueSignature: xdr.lookup("LedgerCloseValueSignature")
    }
  });

  // === xdr source ============================================================
  //
  //   struct StellarValue
  //   {
  //       Hash txSetHash;      // transaction set to apply to previous ledger
  //       TimePoint closeTime; // network close time
  //   
  //       // upgrades to apply to the previous ledger (usually empty)
  //       // this is a vector of encoded 'LedgerUpgrade' so that nodes can drop
  //       // unknown steps during consensus if needed.
  //       // see notes below on 'LedgerUpgrade' for more detail
  //       // max size is dictated by number of upgrade types (+ room for future)
  //       UpgradeType upgrades<6>;
  //   
  //       // reserved for future use
  //       union switch (StellarValueType v)
  //       {
  //       case STELLAR_VALUE_BASIC:
  //           void;
  //       case STELLAR_VALUE_SIGNED:
  //           LedgerCloseValueSignature lcValueSignature;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[97]++;
  xdr.struct("StellarValue", [["txSetHash", xdr.lookup("Hash")], ["closeTime", xdr.lookup("TimePoint")], ["upgrades", xdr.varArray(xdr.lookup("UpgradeType"), 6)], ["ext", xdr.lookup("StellarValueExt")]]);

  // === xdr source ============================================================
  //
  //   const MASK_LEDGER_HEADER_FLAGS = 0x7;
  //
  // ===========================================================================
  cov_1racd7g41m().s[98]++;
  xdr["const"]("MASK_LEDGER_HEADER_FLAGS", 0x7);

  // === xdr source ============================================================
  //
  //   enum LedgerHeaderFlags
  //   {
  //       DISABLE_LIQUIDITY_POOL_TRADING_FLAG = 0x1,
  //       DISABLE_LIQUIDITY_POOL_DEPOSIT_FLAG = 0x2,
  //       DISABLE_LIQUIDITY_POOL_WITHDRAWAL_FLAG = 0x4
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[99]++;
  xdr["enum"]("LedgerHeaderFlags", {
    disableLiquidityPoolTradingFlag: 1,
    disableLiquidityPoolDepositFlag: 2,
    disableLiquidityPoolWithdrawalFlag: 4
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[100]++;
  xdr.union("LedgerHeaderExtensionV1Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct LedgerHeaderExtensionV1
  //   {
  //       uint32 flags; // LedgerHeaderFlags
  //   
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[101]++;
  xdr.struct("LedgerHeaderExtensionV1", [["flags", xdr.lookup("Uint32")], ["ext", xdr.lookup("LedgerHeaderExtensionV1Ext")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           LedgerHeaderExtensionV1 v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[102]++;
  xdr.union("LedgerHeaderExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "v1"]],
    arms: {
      v1: xdr.lookup("LedgerHeaderExtensionV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct LedgerHeader
  //   {
  //       uint32 ledgerVersion;    // the protocol version of the ledger
  //       Hash previousLedgerHash; // hash of the previous ledger header
  //       StellarValue scpValue;   // what consensus agreed to
  //       Hash txSetResultHash;    // the TransactionResultSet that led to this ledger
  //       Hash bucketListHash;     // hash of the ledger state
  //   
  //       uint32 ledgerSeq; // sequence number of this ledger
  //   
  //       int64 totalCoins; // total number of stroops in existence.
  //                         // 10,000,000 stroops in 1 XLM
  //   
  //       int64 feePool;       // fees burned since last inflation run
  //       uint32 inflationSeq; // inflation sequence number
  //   
  //       uint64 idPool; // last used global ID, used for generating objects
  //   
  //       uint32 baseFee;     // base fee per operation in stroops
  //       uint32 baseReserve; // account base reserve in stroops
  //   
  //       uint32 maxTxSetSize; // maximum size a transaction set can be
  //   
  //       Hash skipList[4]; // hashes of ledgers in the past. allows you to jump back
  //                         // in time without walking the chain back ledger by ledger
  //                         // each slot contains the oldest ledger that is mod of
  //                         // either 50  5000  50000 or 500000 depending on index
  //                         // skipList[0] mod(50), skipList[1] mod(5000), etc
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           LedgerHeaderExtensionV1 v1;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[103]++;
  xdr.struct("LedgerHeader", [["ledgerVersion", xdr.lookup("Uint32")], ["previousLedgerHash", xdr.lookup("Hash")], ["scpValue", xdr.lookup("StellarValue")], ["txSetResultHash", xdr.lookup("Hash")], ["bucketListHash", xdr.lookup("Hash")], ["ledgerSeq", xdr.lookup("Uint32")], ["totalCoins", xdr.lookup("Int64")], ["feePool", xdr.lookup("Int64")], ["inflationSeq", xdr.lookup("Uint32")], ["idPool", xdr.lookup("Uint64")], ["baseFee", xdr.lookup("Uint32")], ["baseReserve", xdr.lookup("Uint32")], ["maxTxSetSize", xdr.lookup("Uint32")], ["skipList", xdr.array(xdr.lookup("Hash"), 4)], ["ext", xdr.lookup("LedgerHeaderExt")]]);

  // === xdr source ============================================================
  //
  //   enum LedgerUpgradeType
  //   {
  //       LEDGER_UPGRADE_VERSION = 1,
  //       LEDGER_UPGRADE_BASE_FEE = 2,
  //       LEDGER_UPGRADE_MAX_TX_SET_SIZE = 3,
  //       LEDGER_UPGRADE_BASE_RESERVE = 4,
  //       LEDGER_UPGRADE_FLAGS = 5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[104]++;
  xdr["enum"]("LedgerUpgradeType", {
    ledgerUpgradeVersion: 1,
    ledgerUpgradeBaseFee: 2,
    ledgerUpgradeMaxTxSetSize: 3,
    ledgerUpgradeBaseReserve: 4,
    ledgerUpgradeFlags: 5
  });

  // === xdr source ============================================================
  //
  //   union LedgerUpgrade switch (LedgerUpgradeType type)
  //   {
  //   case LEDGER_UPGRADE_VERSION:
  //       uint32 newLedgerVersion; // update ledgerVersion
  //   case LEDGER_UPGRADE_BASE_FEE:
  //       uint32 newBaseFee; // update baseFee
  //   case LEDGER_UPGRADE_MAX_TX_SET_SIZE:
  //       uint32 newMaxTxSetSize; // update maxTxSetSize
  //   case LEDGER_UPGRADE_BASE_RESERVE:
  //       uint32 newBaseReserve; // update baseReserve
  //   case LEDGER_UPGRADE_FLAGS:
  //       uint32 newFlags; // update flags
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[105]++;
  xdr.union("LedgerUpgrade", {
    switchOn: xdr.lookup("LedgerUpgradeType"),
    switchName: "type",
    switches: [["ledgerUpgradeVersion", "newLedgerVersion"], ["ledgerUpgradeBaseFee", "newBaseFee"], ["ledgerUpgradeMaxTxSetSize", "newMaxTxSetSize"], ["ledgerUpgradeBaseReserve", "newBaseReserve"], ["ledgerUpgradeFlags", "newFlags"]],
    arms: {
      newLedgerVersion: xdr.lookup("Uint32"),
      newBaseFee: xdr.lookup("Uint32"),
      newMaxTxSetSize: xdr.lookup("Uint32"),
      newBaseReserve: xdr.lookup("Uint32"),
      newFlags: xdr.lookup("Uint32")
    }
  });

  // === xdr source ============================================================
  //
  //   enum BucketEntryType
  //   {
  //       METAENTRY =
  //           -1, // At-and-after protocol 11: bucket metadata, should come first.
  //       LIVEENTRY = 0, // Before protocol 11: created-or-updated;
  //                      // At-and-after protocol 11: only updated.
  //       DEADENTRY = 1,
  //       INITENTRY = 2 // At-and-after protocol 11: only created.
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[106]++;
  xdr["enum"]("BucketEntryType", {
    metaentry: -1,
    liveentry: 0,
    deadentry: 1,
    initentry: 2
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[107]++;
  xdr.union("BucketMetadataExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct BucketMetadata
  //   {
  //       // Indicates the protocol version used to create / merge this bucket.
  //       uint32 ledgerVersion;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[108]++;
  xdr.struct("BucketMetadata", [["ledgerVersion", xdr.lookup("Uint32")], ["ext", xdr.lookup("BucketMetadataExt")]]);

  // === xdr source ============================================================
  //
  //   union BucketEntry switch (BucketEntryType type)
  //   {
  //   case LIVEENTRY:
  //   case INITENTRY:
  //       LedgerEntry liveEntry;
  //   
  //   case DEADENTRY:
  //       LedgerKey deadEntry;
  //   case METAENTRY:
  //       BucketMetadata metaEntry;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[109]++;
  xdr.union("BucketEntry", {
    switchOn: xdr.lookup("BucketEntryType"),
    switchName: "type",
    switches: [["liveentry", "liveEntry"], ["initentry", "liveEntry"], ["deadentry", "deadEntry"], ["metaentry", "metaEntry"]],
    arms: {
      liveEntry: xdr.lookup("LedgerEntry"),
      deadEntry: xdr.lookup("LedgerKey"),
      metaEntry: xdr.lookup("BucketMetadata")
    }
  });

  // === xdr source ============================================================
  //
  //   enum TxSetComponentType
  //   {
  //     // txs with effective fee <= bid derived from a base fee (if any).
  //     // If base fee is not specified, no discount is applied.
  //     TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE = 0
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[110]++;
  xdr["enum"]("TxSetComponentType", {
    txsetCompTxsMaybeDiscountedFee: 0
  });

  // === xdr source ============================================================
  //
  //   struct
  //     {
  //       int64* baseFee;
  //       TransactionEnvelope txs<>;
  //     }
  //
  // ===========================================================================
  cov_1racd7g41m().s[111]++;
  xdr.struct("TxSetComponentTxsMaybeDiscountedFee", [["baseFee", xdr.option(xdr.lookup("Int64"))], ["txes", xdr.varArray(xdr.lookup("TransactionEnvelope"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   union TxSetComponent switch (TxSetComponentType type)
  //   {
  //   case TXSET_COMP_TXS_MAYBE_DISCOUNTED_FEE:
  //     struct
  //     {
  //       int64* baseFee;
  //       TransactionEnvelope txs<>;
  //     } txsMaybeDiscountedFee;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[112]++;
  xdr.union("TxSetComponent", {
    switchOn: xdr.lookup("TxSetComponentType"),
    switchName: "type",
    switches: [["txsetCompTxsMaybeDiscountedFee", "txsMaybeDiscountedFee"]],
    arms: {
      txsMaybeDiscountedFee: xdr.lookup("TxSetComponentTxsMaybeDiscountedFee")
    }
  });

  // === xdr source ============================================================
  //
  //   union TransactionPhase switch (int v)
  //   {
  //   case 0:
  //       TxSetComponent v0Components<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[113]++;
  xdr.union("TransactionPhase", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, "v0Components"]],
    arms: {
      v0Components: xdr.varArray(xdr.lookup("TxSetComponent"), 2147483647)
    }
  });

  // === xdr source ============================================================
  //
  //   struct TransactionSet
  //   {
  //       Hash previousLedgerHash;
  //       TransactionEnvelope txs<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[114]++;
  xdr.struct("TransactionSet", [["previousLedgerHash", xdr.lookup("Hash")], ["txes", xdr.varArray(xdr.lookup("TransactionEnvelope"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   struct TransactionSetV1
  //   {
  //       Hash previousLedgerHash;
  //       TransactionPhase phases<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[115]++;
  xdr.struct("TransactionSetV1", [["previousLedgerHash", xdr.lookup("Hash")], ["phases", xdr.varArray(xdr.lookup("TransactionPhase"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   union GeneralizedTransactionSet switch (int v)
  //   {
  //   // We consider the legacy TransactionSet to be v0.
  //   case 1:
  //       TransactionSetV1 v1TxSet;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[116]++;
  xdr.union("GeneralizedTransactionSet", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[1, "v1TxSet"]],
    arms: {
      v1TxSet: xdr.lookup("TransactionSetV1")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TransactionResultPair
  //   {
  //       Hash transactionHash;
  //       TransactionResult result; // result for the transaction
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[117]++;
  xdr.struct("TransactionResultPair", [["transactionHash", xdr.lookup("Hash")], ["result", xdr.lookup("TransactionResult")]]);

  // === xdr source ============================================================
  //
  //   struct TransactionResultSet
  //   {
  //       TransactionResultPair results<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[118]++;
  xdr.struct("TransactionResultSet", [["results", xdr.varArray(xdr.lookup("TransactionResultPair"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           GeneralizedTransactionSet generalizedTxSet;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[119]++;
  xdr.union("TransactionHistoryEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()], [1, "generalizedTxSet"]],
    arms: {
      generalizedTxSet: xdr.lookup("GeneralizedTransactionSet")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TransactionHistoryEntry
  //   {
  //       uint32 ledgerSeq;
  //       TransactionSet txSet;
  //   
  //       // when v != 0, txSet must be empty
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       case 1:
  //           GeneralizedTransactionSet generalizedTxSet;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[120]++;
  xdr.struct("TransactionHistoryEntry", [["ledgerSeq", xdr.lookup("Uint32")], ["txSet", xdr.lookup("TransactionSet")], ["ext", xdr.lookup("TransactionHistoryEntryExt")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[121]++;
  xdr.union("TransactionHistoryResultEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct TransactionHistoryResultEntry
  //   {
  //       uint32 ledgerSeq;
  //       TransactionResultSet txResultSet;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[122]++;
  xdr.struct("TransactionHistoryResultEntry", [["ledgerSeq", xdr.lookup("Uint32")], ["txResultSet", xdr.lookup("TransactionResultSet")], ["ext", xdr.lookup("TransactionHistoryResultEntryExt")]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[123]++;
  xdr.union("LedgerHeaderHistoryEntryExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct LedgerHeaderHistoryEntry
  //   {
  //       Hash hash;
  //       LedgerHeader header;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[124]++;
  xdr.struct("LedgerHeaderHistoryEntry", [["hash", xdr.lookup("Hash")], ["header", xdr.lookup("LedgerHeader")], ["ext", xdr.lookup("LedgerHeaderHistoryEntryExt")]]);

  // === xdr source ============================================================
  //
  //   struct LedgerSCPMessages
  //   {
  //       uint32 ledgerSeq;
  //       SCPEnvelope messages<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[125]++;
  xdr.struct("LedgerScpMessages", [["ledgerSeq", xdr.lookup("Uint32")], ["messages", xdr.varArray(xdr.lookup("ScpEnvelope"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   struct SCPHistoryEntryV0
  //   {
  //       SCPQuorumSet quorumSets<>; // additional quorum sets used by ledgerMessages
  //       LedgerSCPMessages ledgerMessages;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[126]++;
  xdr.struct("ScpHistoryEntryV0", [["quorumSets", xdr.varArray(xdr.lookup("ScpQuorumSet"), 2147483647)], ["ledgerMessages", xdr.lookup("LedgerScpMessages")]]);

  // === xdr source ============================================================
  //
  //   union SCPHistoryEntry switch (int v)
  //   {
  //   case 0:
  //       SCPHistoryEntryV0 v0;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[127]++;
  xdr.union("ScpHistoryEntry", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, "v0"]],
    arms: {
      v0: xdr.lookup("ScpHistoryEntryV0")
    }
  });

  // === xdr source ============================================================
  //
  //   enum LedgerEntryChangeType
  //   {
  //       LEDGER_ENTRY_CREATED = 0, // entry was added to the ledger
  //       LEDGER_ENTRY_UPDATED = 1, // entry was modified in the ledger
  //       LEDGER_ENTRY_REMOVED = 2, // entry was removed from the ledger
  //       LEDGER_ENTRY_STATE = 3    // value of the entry
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[128]++;
  xdr["enum"]("LedgerEntryChangeType", {
    ledgerEntryCreated: 0,
    ledgerEntryUpdated: 1,
    ledgerEntryRemoved: 2,
    ledgerEntryState: 3
  });

  // === xdr source ============================================================
  //
  //   union LedgerEntryChange switch (LedgerEntryChangeType type)
  //   {
  //   case LEDGER_ENTRY_CREATED:
  //       LedgerEntry created;
  //   case LEDGER_ENTRY_UPDATED:
  //       LedgerEntry updated;
  //   case LEDGER_ENTRY_REMOVED:
  //       LedgerKey removed;
  //   case LEDGER_ENTRY_STATE:
  //       LedgerEntry state;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[129]++;
  xdr.union("LedgerEntryChange", {
    switchOn: xdr.lookup("LedgerEntryChangeType"),
    switchName: "type",
    switches: [["ledgerEntryCreated", "created"], ["ledgerEntryUpdated", "updated"], ["ledgerEntryRemoved", "removed"], ["ledgerEntryState", "state"]],
    arms: {
      created: xdr.lookup("LedgerEntry"),
      updated: xdr.lookup("LedgerEntry"),
      removed: xdr.lookup("LedgerKey"),
      state: xdr.lookup("LedgerEntry")
    }
  });

  // === xdr source ============================================================
  //
  //   typedef LedgerEntryChange LedgerEntryChanges<>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[130]++;
  xdr.typedef("LedgerEntryChanges", xdr.varArray(xdr.lookup("LedgerEntryChange"), 2147483647));

  // === xdr source ============================================================
  //
  //   struct OperationMeta
  //   {
  //       LedgerEntryChanges changes;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[131]++;
  xdr.struct("OperationMeta", [["changes", xdr.lookup("LedgerEntryChanges")]]);

  // === xdr source ============================================================
  //
  //   struct TransactionMetaV1
  //   {
  //       LedgerEntryChanges txChanges; // tx level changes if any
  //       OperationMeta operations<>;   // meta for each operation
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[132]++;
  xdr.struct("TransactionMetaV1", [["txChanges", xdr.lookup("LedgerEntryChanges")], ["operations", xdr.varArray(xdr.lookup("OperationMeta"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   struct TransactionMetaV2
  //   {
  //       LedgerEntryChanges txChangesBefore; // tx level changes before operations
  //                                           // are applied if any
  //       OperationMeta operations<>;         // meta for each operation
  //       LedgerEntryChanges txChangesAfter;  // tx level changes after operations are
  //                                           // applied if any
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[133]++;
  xdr.struct("TransactionMetaV2", [["txChangesBefore", xdr.lookup("LedgerEntryChanges")], ["operations", xdr.varArray(xdr.lookup("OperationMeta"), 2147483647)], ["txChangesAfter", xdr.lookup("LedgerEntryChanges")]]);

  // === xdr source ============================================================
  //
  //   union TransactionMeta switch (int v)
  //   {
  //   case 0:
  //       OperationMeta operations<>;
  //   case 1:
  //       TransactionMetaV1 v1;
  //   case 2:
  //       TransactionMetaV2 v2;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[134]++;
  xdr.union("TransactionMeta", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, "operations"], [1, "v1"], [2, "v2"]],
    arms: {
      operations: xdr.varArray(xdr.lookup("OperationMeta"), 2147483647),
      v1: xdr.lookup("TransactionMetaV1"),
      v2: xdr.lookup("TransactionMetaV2")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TransactionResultMeta
  //   {
  //       TransactionResultPair result;
  //       LedgerEntryChanges feeProcessing;
  //       TransactionMeta txApplyProcessing;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[135]++;
  xdr.struct("TransactionResultMeta", [["result", xdr.lookup("TransactionResultPair")], ["feeProcessing", xdr.lookup("LedgerEntryChanges")], ["txApplyProcessing", xdr.lookup("TransactionMeta")]]);

  // === xdr source ============================================================
  //
  //   struct UpgradeEntryMeta
  //   {
  //       LedgerUpgrade upgrade;
  //       LedgerEntryChanges changes;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[136]++;
  xdr.struct("UpgradeEntryMeta", [["upgrade", xdr.lookup("LedgerUpgrade")], ["changes", xdr.lookup("LedgerEntryChanges")]]);

  // === xdr source ============================================================
  //
  //   struct LedgerCloseMetaV0
  //   {
  //       LedgerHeaderHistoryEntry ledgerHeader;
  //       // NB: txSet is sorted in "Hash order"
  //       TransactionSet txSet;
  //   
  //       // NB: transactions are sorted in apply order here
  //       // fees for all transactions are processed first
  //       // followed by applying transactions
  //       TransactionResultMeta txProcessing<>;
  //   
  //       // upgrades are applied last
  //       UpgradeEntryMeta upgradesProcessing<>;
  //   
  //       // other misc information attached to the ledger close
  //       SCPHistoryEntry scpInfo<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[137]++;
  xdr.struct("LedgerCloseMetaV0", [["ledgerHeader", xdr.lookup("LedgerHeaderHistoryEntry")], ["txSet", xdr.lookup("TransactionSet")], ["txProcessing", xdr.varArray(xdr.lookup("TransactionResultMeta"), 2147483647)], ["upgradesProcessing", xdr.varArray(xdr.lookup("UpgradeEntryMeta"), 2147483647)], ["scpInfo", xdr.varArray(xdr.lookup("ScpHistoryEntry"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   struct LedgerCloseMetaV1
  //   {
  //       LedgerHeaderHistoryEntry ledgerHeader;
  //   
  //       GeneralizedTransactionSet txSet;
  //   
  //       // NB: transactions are sorted in apply order here
  //       // fees for all transactions are processed first
  //       // followed by applying transactions
  //       TransactionResultMeta txProcessing<>;
  //   
  //       // upgrades are applied last
  //       UpgradeEntryMeta upgradesProcessing<>;
  //   
  //       // other misc information attached to the ledger close
  //       SCPHistoryEntry scpInfo<>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[138]++;
  xdr.struct("LedgerCloseMetaV1", [["ledgerHeader", xdr.lookup("LedgerHeaderHistoryEntry")], ["txSet", xdr.lookup("GeneralizedTransactionSet")], ["txProcessing", xdr.varArray(xdr.lookup("TransactionResultMeta"), 2147483647)], ["upgradesProcessing", xdr.varArray(xdr.lookup("UpgradeEntryMeta"), 2147483647)], ["scpInfo", xdr.varArray(xdr.lookup("ScpHistoryEntry"), 2147483647)]]);

  // === xdr source ============================================================
  //
  //   union LedgerCloseMeta switch (int v)
  //   {
  //   case 0:
  //       LedgerCloseMetaV0 v0;
  //   case 1:
  //       LedgerCloseMetaV1 v1;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[139]++;
  xdr.union("LedgerCloseMeta", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, "v0"], [1, "v1"]],
    arms: {
      v0: xdr.lookup("LedgerCloseMetaV0"),
      v1: xdr.lookup("LedgerCloseMetaV1")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ErrorCode
  //   {
  //       ERR_MISC = 0, // Unspecific error
  //       ERR_DATA = 1, // Malformed data
  //       ERR_CONF = 2, // Misconfiguration error
  //       ERR_AUTH = 3, // Authentication failure
  //       ERR_LOAD = 4  // System overloaded
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[140]++;
  xdr["enum"]("ErrorCode", {
    errMisc: 0,
    errData: 1,
    errConf: 2,
    errAuth: 3,
    errLoad: 4
  });

  // === xdr source ============================================================
  //
  //   struct Error
  //   {
  //       ErrorCode code;
  //       string msg<100>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[141]++;
  xdr.struct("Error", [["code", xdr.lookup("ErrorCode")], ["msg", xdr.string(100)]]);

  // === xdr source ============================================================
  //
  //   struct SendMore
  //   {
  //       uint32 numMessages;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[142]++;
  xdr.struct("SendMore", [["numMessages", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   struct AuthCert
  //   {
  //       Curve25519Public pubkey;
  //       uint64 expiration;
  //       Signature sig;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[143]++;
  xdr.struct("AuthCert", [["pubkey", xdr.lookup("Curve25519Public")], ["expiration", xdr.lookup("Uint64")], ["sig", xdr.lookup("Signature")]]);

  // === xdr source ============================================================
  //
  //   struct Hello
  //   {
  //       uint32 ledgerVersion;
  //       uint32 overlayVersion;
  //       uint32 overlayMinVersion;
  //       Hash networkID;
  //       string versionStr<100>;
  //       int listeningPort;
  //       NodeID peerID;
  //       AuthCert cert;
  //       uint256 nonce;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[144]++;
  xdr.struct("Hello", [["ledgerVersion", xdr.lookup("Uint32")], ["overlayVersion", xdr.lookup("Uint32")], ["overlayMinVersion", xdr.lookup("Uint32")], ["networkId", xdr.lookup("Hash")], ["versionStr", xdr.string(100)], ["listeningPort", xdr["int"]()], ["peerId", xdr.lookup("NodeId")], ["cert", xdr.lookup("AuthCert")], ["nonce", xdr.lookup("Uint256")]]);

  // === xdr source ============================================================
  //
  //   const AUTH_MSG_FLAG_PULL_MODE_REQUESTED = 100;
  //
  // ===========================================================================
  cov_1racd7g41m().s[145]++;
  xdr["const"]("AUTH_MSG_FLAG_PULL_MODE_REQUESTED", 100);

  // === xdr source ============================================================
  //
  //   struct Auth
  //   {
  //       int flags;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[146]++;
  xdr.struct("Auth", [["flags", xdr["int"]()]]);

  // === xdr source ============================================================
  //
  //   enum IPAddrType
  //   {
  //       IPv4 = 0,
  //       IPv6 = 1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[147]++;
  xdr["enum"]("IpAddrType", {
    iPv4: 0,
    iPv6: 1
  });

  // === xdr source ============================================================
  //
  //   union switch (IPAddrType type)
  //       {
  //       case IPv4:
  //           opaque ipv4[4];
  //       case IPv6:
  //           opaque ipv6[16];
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[148]++;
  xdr.union("PeerAddressIp", {
    switchOn: xdr.lookup("IpAddrType"),
    switchName: "type",
    switches: [["iPv4", "ipv4"], ["iPv6", "ipv6"]],
    arms: {
      ipv4: xdr.opaque(4),
      ipv6: xdr.opaque(16)
    }
  });

  // === xdr source ============================================================
  //
  //   struct PeerAddress
  //   {
  //       union switch (IPAddrType type)
  //       {
  //       case IPv4:
  //           opaque ipv4[4];
  //       case IPv6:
  //           opaque ipv6[16];
  //       }
  //       ip;
  //       uint32 port;
  //       uint32 numFailures;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[149]++;
  xdr.struct("PeerAddress", [["ip", xdr.lookup("PeerAddressIp")], ["port", xdr.lookup("Uint32")], ["numFailures", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   enum MessageType
  //   {
  //       ERROR_MSG = 0,
  //       AUTH = 2,
  //       DONT_HAVE = 3,
  //   
  //       GET_PEERS = 4, // gets a list of peers this guy knows about
  //       PEERS = 5,
  //   
  //       GET_TX_SET = 6, // gets a particular txset by hash
  //       TX_SET = 7,
  //       GENERALIZED_TX_SET = 17,
  //   
  //       TRANSACTION = 8, // pass on a tx you have heard about
  //   
  //       // SCP
  //       GET_SCP_QUORUMSET = 9,
  //       SCP_QUORUMSET = 10,
  //       SCP_MESSAGE = 11,
  //       GET_SCP_STATE = 12,
  //   
  //       // new messages
  //       HELLO = 13,
  //   
  //       SURVEY_REQUEST = 14,
  //       SURVEY_RESPONSE = 15,
  //   
  //       SEND_MORE = 16,
  //       FLOOD_ADVERT = 18,
  //       FLOOD_DEMAND = 19
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[150]++;
  xdr["enum"]("MessageType", {
    errorMsg: 0,
    auth: 2,
    dontHave: 3,
    getPeers: 4,
    peers: 5,
    getTxSet: 6,
    txSet: 7,
    generalizedTxSet: 17,
    transaction: 8,
    getScpQuorumset: 9,
    scpQuorumset: 10,
    scpMessage: 11,
    getScpState: 12,
    hello: 13,
    surveyRequest: 14,
    surveyResponse: 15,
    sendMore: 16,
    floodAdvert: 18,
    floodDemand: 19
  });

  // === xdr source ============================================================
  //
  //   struct DontHave
  //   {
  //       MessageType type;
  //       uint256 reqHash;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[151]++;
  xdr.struct("DontHave", [["type", xdr.lookup("MessageType")], ["reqHash", xdr.lookup("Uint256")]]);

  // === xdr source ============================================================
  //
  //   enum SurveyMessageCommandType
  //   {
  //       SURVEY_TOPOLOGY = 0
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[152]++;
  xdr["enum"]("SurveyMessageCommandType", {
    surveyTopology: 0
  });

  // === xdr source ============================================================
  //
  //   struct SurveyRequestMessage
  //   {
  //       NodeID surveyorPeerID;
  //       NodeID surveyedPeerID;
  //       uint32 ledgerNum;
  //       Curve25519Public encryptionKey;
  //       SurveyMessageCommandType commandType;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[153]++;
  xdr.struct("SurveyRequestMessage", [["surveyorPeerId", xdr.lookup("NodeId")], ["surveyedPeerId", xdr.lookup("NodeId")], ["ledgerNum", xdr.lookup("Uint32")], ["encryptionKey", xdr.lookup("Curve25519Public")], ["commandType", xdr.lookup("SurveyMessageCommandType")]]);

  // === xdr source ============================================================
  //
  //   struct SignedSurveyRequestMessage
  //   {
  //       Signature requestSignature;
  //       SurveyRequestMessage request;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[154]++;
  xdr.struct("SignedSurveyRequestMessage", [["requestSignature", xdr.lookup("Signature")], ["request", xdr.lookup("SurveyRequestMessage")]]);

  // === xdr source ============================================================
  //
  //   typedef opaque EncryptedBody<64000>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[155]++;
  xdr.typedef("EncryptedBody", xdr.varOpaque(64000));

  // === xdr source ============================================================
  //
  //   struct SurveyResponseMessage
  //   {
  //       NodeID surveyorPeerID;
  //       NodeID surveyedPeerID;
  //       uint32 ledgerNum;
  //       SurveyMessageCommandType commandType;
  //       EncryptedBody encryptedBody;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[156]++;
  xdr.struct("SurveyResponseMessage", [["surveyorPeerId", xdr.lookup("NodeId")], ["surveyedPeerId", xdr.lookup("NodeId")], ["ledgerNum", xdr.lookup("Uint32")], ["commandType", xdr.lookup("SurveyMessageCommandType")], ["encryptedBody", xdr.lookup("EncryptedBody")]]);

  // === xdr source ============================================================
  //
  //   struct SignedSurveyResponseMessage
  //   {
  //       Signature responseSignature;
  //       SurveyResponseMessage response;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[157]++;
  xdr.struct("SignedSurveyResponseMessage", [["responseSignature", xdr.lookup("Signature")], ["response", xdr.lookup("SurveyResponseMessage")]]);

  // === xdr source ============================================================
  //
  //   struct PeerStats
  //   {
  //       NodeID id;
  //       string versionStr<100>;
  //       uint64 messagesRead;
  //       uint64 messagesWritten;
  //       uint64 bytesRead;
  //       uint64 bytesWritten;
  //       uint64 secondsConnected;
  //   
  //       uint64 uniqueFloodBytesRecv;
  //       uint64 duplicateFloodBytesRecv;
  //       uint64 uniqueFetchBytesRecv;
  //       uint64 duplicateFetchBytesRecv;
  //   
  //       uint64 uniqueFloodMessageRecv;
  //       uint64 duplicateFloodMessageRecv;
  //       uint64 uniqueFetchMessageRecv;
  //       uint64 duplicateFetchMessageRecv;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[158]++;
  xdr.struct("PeerStats", [["id", xdr.lookup("NodeId")], ["versionStr", xdr.string(100)], ["messagesRead", xdr.lookup("Uint64")], ["messagesWritten", xdr.lookup("Uint64")], ["bytesRead", xdr.lookup("Uint64")], ["bytesWritten", xdr.lookup("Uint64")], ["secondsConnected", xdr.lookup("Uint64")], ["uniqueFloodBytesRecv", xdr.lookup("Uint64")], ["duplicateFloodBytesRecv", xdr.lookup("Uint64")], ["uniqueFetchBytesRecv", xdr.lookup("Uint64")], ["duplicateFetchBytesRecv", xdr.lookup("Uint64")], ["uniqueFloodMessageRecv", xdr.lookup("Uint64")], ["duplicateFloodMessageRecv", xdr.lookup("Uint64")], ["uniqueFetchMessageRecv", xdr.lookup("Uint64")], ["duplicateFetchMessageRecv", xdr.lookup("Uint64")]]);

  // === xdr source ============================================================
  //
  //   typedef PeerStats PeerStatList<25>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[159]++;
  xdr.typedef("PeerStatList", xdr.varArray(xdr.lookup("PeerStats"), 25));

  // === xdr source ============================================================
  //
  //   struct TopologyResponseBody
  //   {
  //       PeerStatList inboundPeers;
  //       PeerStatList outboundPeers;
  //   
  //       uint32 totalInboundPeerCount;
  //       uint32 totalOutboundPeerCount;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[160]++;
  xdr.struct("TopologyResponseBody", [["inboundPeers", xdr.lookup("PeerStatList")], ["outboundPeers", xdr.lookup("PeerStatList")], ["totalInboundPeerCount", xdr.lookup("Uint32")], ["totalOutboundPeerCount", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   union SurveyResponseBody switch (SurveyMessageCommandType type)
  //   {
  //   case SURVEY_TOPOLOGY:
  //       TopologyResponseBody topologyResponseBody;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[161]++;
  xdr.union("SurveyResponseBody", {
    switchOn: xdr.lookup("SurveyMessageCommandType"),
    switchName: "type",
    switches: [["surveyTopology", "topologyResponseBody"]],
    arms: {
      topologyResponseBody: xdr.lookup("TopologyResponseBody")
    }
  });

  // === xdr source ============================================================
  //
  //   const TX_ADVERT_VECTOR_MAX_SIZE = 1000;
  //
  // ===========================================================================
  cov_1racd7g41m().s[162]++;
  xdr["const"]("TX_ADVERT_VECTOR_MAX_SIZE", 1000);

  // === xdr source ============================================================
  //
  //   typedef Hash TxAdvertVector<TX_ADVERT_VECTOR_MAX_SIZE>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[163]++;
  xdr.typedef("TxAdvertVector", xdr.varArray(xdr.lookup("Hash"), xdr.lookup("TX_ADVERT_VECTOR_MAX_SIZE")));

  // === xdr source ============================================================
  //
  //   struct FloodAdvert
  //   {
  //       TxAdvertVector txHashes;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[164]++;
  xdr.struct("FloodAdvert", [["txHashes", xdr.lookup("TxAdvertVector")]]);

  // === xdr source ============================================================
  //
  //   const TX_DEMAND_VECTOR_MAX_SIZE = 1000;
  //
  // ===========================================================================
  cov_1racd7g41m().s[165]++;
  xdr["const"]("TX_DEMAND_VECTOR_MAX_SIZE", 1000);

  // === xdr source ============================================================
  //
  //   typedef Hash TxDemandVector<TX_DEMAND_VECTOR_MAX_SIZE>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[166]++;
  xdr.typedef("TxDemandVector", xdr.varArray(xdr.lookup("Hash"), xdr.lookup("TX_DEMAND_VECTOR_MAX_SIZE")));

  // === xdr source ============================================================
  //
  //   struct FloodDemand
  //   {
  //       TxDemandVector txHashes;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[167]++;
  xdr.struct("FloodDemand", [["txHashes", xdr.lookup("TxDemandVector")]]);

  // === xdr source ============================================================
  //
  //   union StellarMessage switch (MessageType type)
  //   {
  //   case ERROR_MSG:
  //       Error error;
  //   case HELLO:
  //       Hello hello;
  //   case AUTH:
  //       Auth auth;
  //   case DONT_HAVE:
  //       DontHave dontHave;
  //   case GET_PEERS:
  //       void;
  //   case PEERS:
  //       PeerAddress peers<100>;
  //   
  //   case GET_TX_SET:
  //       uint256 txSetHash;
  //   case TX_SET:
  //       TransactionSet txSet;
  //   case GENERALIZED_TX_SET:
  //       GeneralizedTransactionSet generalizedTxSet;
  //   
  //   case TRANSACTION:
  //       TransactionEnvelope transaction;
  //   
  //   case SURVEY_REQUEST:
  //       SignedSurveyRequestMessage signedSurveyRequestMessage;
  //   
  //   case SURVEY_RESPONSE:
  //       SignedSurveyResponseMessage signedSurveyResponseMessage;
  //   
  //   // SCP
  //   case GET_SCP_QUORUMSET:
  //       uint256 qSetHash;
  //   case SCP_QUORUMSET:
  //       SCPQuorumSet qSet;
  //   case SCP_MESSAGE:
  //       SCPEnvelope envelope;
  //   case GET_SCP_STATE:
  //       uint32 getSCPLedgerSeq; // ledger seq requested ; if 0, requests the latest
  //   case SEND_MORE:
  //       SendMore sendMoreMessage;
  //   
  //   // Pull mode
  //   case FLOOD_ADVERT:
  //        FloodAdvert floodAdvert;
  //   case FLOOD_DEMAND:
  //        FloodDemand floodDemand;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[168]++;
  xdr.union("StellarMessage", {
    switchOn: xdr.lookup("MessageType"),
    switchName: "type",
    switches: [["errorMsg", "error"], ["hello", "hello"], ["auth", "auth"], ["dontHave", "dontHave"], ["getPeers", xdr["void"]()], ["peers", "peers"], ["getTxSet", "txSetHash"], ["txSet", "txSet"], ["generalizedTxSet", "generalizedTxSet"], ["transaction", "transaction"], ["surveyRequest", "signedSurveyRequestMessage"], ["surveyResponse", "signedSurveyResponseMessage"], ["getScpQuorumset", "qSetHash"], ["scpQuorumset", "qSet"], ["scpMessage", "envelope"], ["getScpState", "getScpLedgerSeq"], ["sendMore", "sendMoreMessage"], ["floodAdvert", "floodAdvert"], ["floodDemand", "floodDemand"]],
    arms: {
      error: xdr.lookup("Error"),
      hello: xdr.lookup("Hello"),
      auth: xdr.lookup("Auth"),
      dontHave: xdr.lookup("DontHave"),
      peers: xdr.varArray(xdr.lookup("PeerAddress"), 100),
      txSetHash: xdr.lookup("Uint256"),
      txSet: xdr.lookup("TransactionSet"),
      generalizedTxSet: xdr.lookup("GeneralizedTransactionSet"),
      transaction: xdr.lookup("TransactionEnvelope"),
      signedSurveyRequestMessage: xdr.lookup("SignedSurveyRequestMessage"),
      signedSurveyResponseMessage: xdr.lookup("SignedSurveyResponseMessage"),
      qSetHash: xdr.lookup("Uint256"),
      qSet: xdr.lookup("ScpQuorumSet"),
      envelope: xdr.lookup("ScpEnvelope"),
      getScpLedgerSeq: xdr.lookup("Uint32"),
      sendMoreMessage: xdr.lookup("SendMore"),
      floodAdvert: xdr.lookup("FloodAdvert"),
      floodDemand: xdr.lookup("FloodDemand")
    }
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           uint64 sequence;
  //           StellarMessage message;
  //           HmacSha256Mac mac;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[169]++;
  xdr.struct("AuthenticatedMessageV0", [["sequence", xdr.lookup("Uint64")], ["message", xdr.lookup("StellarMessage")], ["mac", xdr.lookup("HmacSha256Mac")]]);

  // === xdr source ============================================================
  //
  //   union AuthenticatedMessage switch (uint32 v)
  //   {
  //   case 0:
  //       struct
  //       {
  //           uint64 sequence;
  //           StellarMessage message;
  //           HmacSha256Mac mac;
  //       } v0;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[170]++;
  xdr.union("AuthenticatedMessage", {
    switchOn: xdr.lookup("Uint32"),
    switchName: "v",
    switches: [[0, "v0"]],
    arms: {
      v0: xdr.lookup("AuthenticatedMessageV0")
    }
  });

  // === xdr source ============================================================
  //
  //   union LiquidityPoolParameters switch (LiquidityPoolType type)
  //   {
  //   case LIQUIDITY_POOL_CONSTANT_PRODUCT:
  //       LiquidityPoolConstantProductParameters constantProduct;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[171]++;
  xdr.union("LiquidityPoolParameters", {
    switchOn: xdr.lookup("LiquidityPoolType"),
    switchName: "type",
    switches: [["liquidityPoolConstantProduct", "constantProduct"]],
    arms: {
      constantProduct: xdr.lookup("LiquidityPoolConstantProductParameters")
    }
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           uint64 id;
  //           uint256 ed25519;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[172]++;
  xdr.struct("MuxedAccountMed25519", [["id", xdr.lookup("Uint64")], ["ed25519", xdr.lookup("Uint256")]]);

  // === xdr source ============================================================
  //
  //   union MuxedAccount switch (CryptoKeyType type)
  //   {
  //   case KEY_TYPE_ED25519:
  //       uint256 ed25519;
  //   case KEY_TYPE_MUXED_ED25519:
  //       struct
  //       {
  //           uint64 id;
  //           uint256 ed25519;
  //       } med25519;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[173]++;
  xdr.union("MuxedAccount", {
    switchOn: xdr.lookup("CryptoKeyType"),
    switchName: "type",
    switches: [["keyTypeEd25519", "ed25519"], ["keyTypeMuxedEd25519", "med25519"]],
    arms: {
      ed25519: xdr.lookup("Uint256"),
      med25519: xdr.lookup("MuxedAccountMed25519")
    }
  });

  // === xdr source ============================================================
  //
  //   struct DecoratedSignature
  //   {
  //       SignatureHint hint;  // last 4 bytes of the public key, used as a hint
  //       Signature signature; // actual signature
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[174]++;
  xdr.struct("DecoratedSignature", [["hint", xdr.lookup("SignatureHint")], ["signature", xdr.lookup("Signature")]]);

  // === xdr source ============================================================
  //
  //   enum OperationType
  //   {
  //       CREATE_ACCOUNT = 0,
  //       PAYMENT = 1,
  //       PATH_PAYMENT_STRICT_RECEIVE = 2,
  //       MANAGE_SELL_OFFER = 3,
  //       CREATE_PASSIVE_SELL_OFFER = 4,
  //       SET_OPTIONS = 5,
  //       CHANGE_TRUST = 6,
  //       ALLOW_TRUST = 7,
  //       ACCOUNT_MERGE = 8,
  //       INFLATION = 9,
  //       MANAGE_DATA = 10,
  //       BUMP_SEQUENCE = 11,
  //       MANAGE_BUY_OFFER = 12,
  //       PATH_PAYMENT_STRICT_SEND = 13,
  //       CREATE_CLAIMABLE_BALANCE = 14,
  //       CLAIM_CLAIMABLE_BALANCE = 15,
  //       BEGIN_SPONSORING_FUTURE_RESERVES = 16,
  //       END_SPONSORING_FUTURE_RESERVES = 17,
  //       REVOKE_SPONSORSHIP = 18,
  //       CLAWBACK = 19,
  //       CLAWBACK_CLAIMABLE_BALANCE = 20,
  //       SET_TRUST_LINE_FLAGS = 21,
  //       LIQUIDITY_POOL_DEPOSIT = 22,
  //       LIQUIDITY_POOL_WITHDRAW = 23
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[175]++;
  xdr["enum"]("OperationType", {
    createAccount: 0,
    payment: 1,
    pathPaymentStrictReceive: 2,
    manageSellOffer: 3,
    createPassiveSellOffer: 4,
    setOptions: 5,
    changeTrust: 6,
    allowTrust: 7,
    accountMerge: 8,
    inflation: 9,
    manageData: 10,
    bumpSequence: 11,
    manageBuyOffer: 12,
    pathPaymentStrictSend: 13,
    createClaimableBalance: 14,
    claimClaimableBalance: 15,
    beginSponsoringFutureReserves: 16,
    endSponsoringFutureReserves: 17,
    revokeSponsorship: 18,
    clawback: 19,
    clawbackClaimableBalance: 20,
    setTrustLineFlags: 21,
    liquidityPoolDeposit: 22,
    liquidityPoolWithdraw: 23
  });

  // === xdr source ============================================================
  //
  //   struct CreateAccountOp
  //   {
  //       AccountID destination; // account to create
  //       int64 startingBalance; // amount they end up with
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[176]++;
  xdr.struct("CreateAccountOp", [["destination", xdr.lookup("AccountId")], ["startingBalance", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct PaymentOp
  //   {
  //       MuxedAccount destination; // recipient of the payment
  //       Asset asset;              // what they end up with
  //       int64 amount;             // amount they end up with
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[177]++;
  xdr.struct("PaymentOp", [["destination", xdr.lookup("MuxedAccount")], ["asset", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct PathPaymentStrictReceiveOp
  //   {
  //       Asset sendAsset; // asset we pay with
  //       int64 sendMax;   // the maximum amount of sendAsset to
  //                        // send (excluding fees).
  //                        // The operation will fail if can't be met
  //   
  //       MuxedAccount destination; // recipient of the payment
  //       Asset destAsset;          // what they end up with
  //       int64 destAmount;         // amount they end up with
  //   
  //       Asset path<5>; // additional hops it must go through to get there
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[178]++;
  xdr.struct("PathPaymentStrictReceiveOp", [["sendAsset", xdr.lookup("Asset")], ["sendMax", xdr.lookup("Int64")], ["destination", xdr.lookup("MuxedAccount")], ["destAsset", xdr.lookup("Asset")], ["destAmount", xdr.lookup("Int64")], ["path", xdr.varArray(xdr.lookup("Asset"), 5)]]);

  // === xdr source ============================================================
  //
  //   struct PathPaymentStrictSendOp
  //   {
  //       Asset sendAsset;  // asset we pay with
  //       int64 sendAmount; // amount of sendAsset to send (excluding fees)
  //   
  //       MuxedAccount destination; // recipient of the payment
  //       Asset destAsset;          // what they end up with
  //       int64 destMin;            // the minimum amount of dest asset to
  //                                 // be received
  //                                 // The operation will fail if it can't be met
  //   
  //       Asset path<5>; // additional hops it must go through to get there
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[179]++;
  xdr.struct("PathPaymentStrictSendOp", [["sendAsset", xdr.lookup("Asset")], ["sendAmount", xdr.lookup("Int64")], ["destination", xdr.lookup("MuxedAccount")], ["destAsset", xdr.lookup("Asset")], ["destMin", xdr.lookup("Int64")], ["path", xdr.varArray(xdr.lookup("Asset"), 5)]]);

  // === xdr source ============================================================
  //
  //   struct ManageSellOfferOp
  //   {
  //       Asset selling;
  //       Asset buying;
  //       int64 amount; // amount being sold. if set to 0, delete the offer
  //       Price price;  // price of thing being sold in terms of what you are buying
  //   
  //       // 0=create a new offer, otherwise edit an existing offer
  //       int64 offerID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[180]++;
  xdr.struct("ManageSellOfferOp", [["selling", xdr.lookup("Asset")], ["buying", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")], ["price", xdr.lookup("Price")], ["offerId", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct ManageBuyOfferOp
  //   {
  //       Asset selling;
  //       Asset buying;
  //       int64 buyAmount; // amount being bought. if set to 0, delete the offer
  //       Price price;     // price of thing being bought in terms of what you are
  //                        // selling
  //   
  //       // 0=create a new offer, otherwise edit an existing offer
  //       int64 offerID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[181]++;
  xdr.struct("ManageBuyOfferOp", [["selling", xdr.lookup("Asset")], ["buying", xdr.lookup("Asset")], ["buyAmount", xdr.lookup("Int64")], ["price", xdr.lookup("Price")], ["offerId", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct CreatePassiveSellOfferOp
  //   {
  //       Asset selling; // A
  //       Asset buying;  // B
  //       int64 amount;  // amount taker gets
  //       Price price;   // cost of A in terms of B
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[182]++;
  xdr.struct("CreatePassiveSellOfferOp", [["selling", xdr.lookup("Asset")], ["buying", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")], ["price", xdr.lookup("Price")]]);

  // === xdr source ============================================================
  //
  //   struct SetOptionsOp
  //   {
  //       AccountID* inflationDest; // sets the inflation destination
  //   
  //       uint32* clearFlags; // which flags to clear
  //       uint32* setFlags;   // which flags to set
  //   
  //       // account threshold manipulation
  //       uint32* masterWeight; // weight of the master account
  //       uint32* lowThreshold;
  //       uint32* medThreshold;
  //       uint32* highThreshold;
  //   
  //       string32* homeDomain; // sets the home domain
  //   
  //       // Add, update or remove a signer for the account
  //       // signer is deleted if the weight is 0
  //       Signer* signer;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[183]++;
  xdr.struct("SetOptionsOp", [["inflationDest", xdr.option(xdr.lookup("AccountId"))], ["clearFlags", xdr.option(xdr.lookup("Uint32"))], ["setFlags", xdr.option(xdr.lookup("Uint32"))], ["masterWeight", xdr.option(xdr.lookup("Uint32"))], ["lowThreshold", xdr.option(xdr.lookup("Uint32"))], ["medThreshold", xdr.option(xdr.lookup("Uint32"))], ["highThreshold", xdr.option(xdr.lookup("Uint32"))], ["homeDomain", xdr.option(xdr.lookup("String32"))], ["signer", xdr.option(xdr.lookup("Signer"))]]);

  // === xdr source ============================================================
  //
  //   union ChangeTrustAsset switch (AssetType type)
  //   {
  //   case ASSET_TYPE_NATIVE: // Not credit
  //       void;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM4:
  //       AlphaNum4 alphaNum4;
  //   
  //   case ASSET_TYPE_CREDIT_ALPHANUM12:
  //       AlphaNum12 alphaNum12;
  //   
  //   case ASSET_TYPE_POOL_SHARE:
  //       LiquidityPoolParameters liquidityPool;
  //   
  //       // add other asset types here in the future
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[184]++;
  xdr.union("ChangeTrustAsset", {
    switchOn: xdr.lookup("AssetType"),
    switchName: "type",
    switches: [["assetTypeNative", xdr["void"]()], ["assetTypeCreditAlphanum4", "alphaNum4"], ["assetTypeCreditAlphanum12", "alphaNum12"], ["assetTypePoolShare", "liquidityPool"]],
    arms: {
      alphaNum4: xdr.lookup("AlphaNum4"),
      alphaNum12: xdr.lookup("AlphaNum12"),
      liquidityPool: xdr.lookup("LiquidityPoolParameters")
    }
  });

  // === xdr source ============================================================
  //
  //   struct ChangeTrustOp
  //   {
  //       ChangeTrustAsset line;
  //   
  //       // if limit is set to 0, deletes the trust line
  //       int64 limit;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[185]++;
  xdr.struct("ChangeTrustOp", [["line", xdr.lookup("ChangeTrustAsset")], ["limit", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct AllowTrustOp
  //   {
  //       AccountID trustor;
  //       AssetCode asset;
  //   
  //       // One of 0, AUTHORIZED_FLAG, or AUTHORIZED_TO_MAINTAIN_LIABILITIES_FLAG
  //       uint32 authorize;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[186]++;
  xdr.struct("AllowTrustOp", [["trustor", xdr.lookup("AccountId")], ["asset", xdr.lookup("AssetCode")], ["authorize", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   struct ManageDataOp
  //   {
  //       string64 dataName;
  //       DataValue* dataValue; // set to null to clear
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[187]++;
  xdr.struct("ManageDataOp", [["dataName", xdr.lookup("String64")], ["dataValue", xdr.option(xdr.lookup("DataValue"))]]);

  // === xdr source ============================================================
  //
  //   struct BumpSequenceOp
  //   {
  //       SequenceNumber bumpTo;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[188]++;
  xdr.struct("BumpSequenceOp", [["bumpTo", xdr.lookup("SequenceNumber")]]);

  // === xdr source ============================================================
  //
  //   struct CreateClaimableBalanceOp
  //   {
  //       Asset asset;
  //       int64 amount;
  //       Claimant claimants<10>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[189]++;
  xdr.struct("CreateClaimableBalanceOp", [["asset", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")], ["claimants", xdr.varArray(xdr.lookup("Claimant"), 10)]]);

  // === xdr source ============================================================
  //
  //   struct ClaimClaimableBalanceOp
  //   {
  //       ClaimableBalanceID balanceID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[190]++;
  xdr.struct("ClaimClaimableBalanceOp", [["balanceId", xdr.lookup("ClaimableBalanceId")]]);

  // === xdr source ============================================================
  //
  //   struct BeginSponsoringFutureReservesOp
  //   {
  //       AccountID sponsoredID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[191]++;
  xdr.struct("BeginSponsoringFutureReservesOp", [["sponsoredId", xdr.lookup("AccountId")]]);

  // === xdr source ============================================================
  //
  //   enum RevokeSponsorshipType
  //   {
  //       REVOKE_SPONSORSHIP_LEDGER_ENTRY = 0,
  //       REVOKE_SPONSORSHIP_SIGNER = 1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[192]++;
  xdr["enum"]("RevokeSponsorshipType", {
    revokeSponsorshipLedgerEntry: 0,
    revokeSponsorshipSigner: 1
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID accountID;
  //           SignerKey signerKey;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[193]++;
  xdr.struct("RevokeSponsorshipOpSigner", [["accountId", xdr.lookup("AccountId")], ["signerKey", xdr.lookup("SignerKey")]]);

  // === xdr source ============================================================
  //
  //   union RevokeSponsorshipOp switch (RevokeSponsorshipType type)
  //   {
  //   case REVOKE_SPONSORSHIP_LEDGER_ENTRY:
  //       LedgerKey ledgerKey;
  //   case REVOKE_SPONSORSHIP_SIGNER:
  //       struct
  //       {
  //           AccountID accountID;
  //           SignerKey signerKey;
  //       } signer;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[194]++;
  xdr.union("RevokeSponsorshipOp", {
    switchOn: xdr.lookup("RevokeSponsorshipType"),
    switchName: "type",
    switches: [["revokeSponsorshipLedgerEntry", "ledgerKey"], ["revokeSponsorshipSigner", "signer"]],
    arms: {
      ledgerKey: xdr.lookup("LedgerKey"),
      signer: xdr.lookup("RevokeSponsorshipOpSigner")
    }
  });

  // === xdr source ============================================================
  //
  //   struct ClawbackOp
  //   {
  //       Asset asset;
  //       MuxedAccount from;
  //       int64 amount;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[195]++;
  xdr.struct("ClawbackOp", [["asset", xdr.lookup("Asset")], ["from", xdr.lookup("MuxedAccount")], ["amount", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct ClawbackClaimableBalanceOp
  //   {
  //       ClaimableBalanceID balanceID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[196]++;
  xdr.struct("ClawbackClaimableBalanceOp", [["balanceId", xdr.lookup("ClaimableBalanceId")]]);

  // === xdr source ============================================================
  //
  //   struct SetTrustLineFlagsOp
  //   {
  //       AccountID trustor;
  //       Asset asset;
  //   
  //       uint32 clearFlags; // which flags to clear
  //       uint32 setFlags;   // which flags to set
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[197]++;
  xdr.struct("SetTrustLineFlagsOp", [["trustor", xdr.lookup("AccountId")], ["asset", xdr.lookup("Asset")], ["clearFlags", xdr.lookup("Uint32")], ["setFlags", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   const LIQUIDITY_POOL_FEE_V18 = 30;
  //
  // ===========================================================================
  cov_1racd7g41m().s[198]++;
  xdr["const"]("LIQUIDITY_POOL_FEE_V18", 30);

  // === xdr source ============================================================
  //
  //   struct LiquidityPoolDepositOp
  //   {
  //       PoolID liquidityPoolID;
  //       int64 maxAmountA; // maximum amount of first asset to deposit
  //       int64 maxAmountB; // maximum amount of second asset to deposit
  //       Price minPrice;   // minimum depositA/depositB
  //       Price maxPrice;   // maximum depositA/depositB
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[199]++;
  xdr.struct("LiquidityPoolDepositOp", [["liquidityPoolId", xdr.lookup("PoolId")], ["maxAmountA", xdr.lookup("Int64")], ["maxAmountB", xdr.lookup("Int64")], ["minPrice", xdr.lookup("Price")], ["maxPrice", xdr.lookup("Price")]]);

  // === xdr source ============================================================
  //
  //   struct LiquidityPoolWithdrawOp
  //   {
  //       PoolID liquidityPoolID;
  //       int64 amount;     // amount of pool shares to withdraw
  //       int64 minAmountA; // minimum amount of first asset to withdraw
  //       int64 minAmountB; // minimum amount of second asset to withdraw
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[200]++;
  xdr.struct("LiquidityPoolWithdrawOp", [["liquidityPoolId", xdr.lookup("PoolId")], ["amount", xdr.lookup("Int64")], ["minAmountA", xdr.lookup("Int64")], ["minAmountB", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   union switch (OperationType type)
  //       {
  //       case CREATE_ACCOUNT:
  //           CreateAccountOp createAccountOp;
  //       case PAYMENT:
  //           PaymentOp paymentOp;
  //       case PATH_PAYMENT_STRICT_RECEIVE:
  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
  //       case MANAGE_SELL_OFFER:
  //           ManageSellOfferOp manageSellOfferOp;
  //       case CREATE_PASSIVE_SELL_OFFER:
  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;
  //       case SET_OPTIONS:
  //           SetOptionsOp setOptionsOp;
  //       case CHANGE_TRUST:
  //           ChangeTrustOp changeTrustOp;
  //       case ALLOW_TRUST:
  //           AllowTrustOp allowTrustOp;
  //       case ACCOUNT_MERGE:
  //           MuxedAccount destination;
  //       case INFLATION:
  //           void;
  //       case MANAGE_DATA:
  //           ManageDataOp manageDataOp;
  //       case BUMP_SEQUENCE:
  //           BumpSequenceOp bumpSequenceOp;
  //       case MANAGE_BUY_OFFER:
  //           ManageBuyOfferOp manageBuyOfferOp;
  //       case PATH_PAYMENT_STRICT_SEND:
  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;
  //       case CREATE_CLAIMABLE_BALANCE:
  //           CreateClaimableBalanceOp createClaimableBalanceOp;
  //       case CLAIM_CLAIMABLE_BALANCE:
  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;
  //       case BEGIN_SPONSORING_FUTURE_RESERVES:
  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
  //       case END_SPONSORING_FUTURE_RESERVES:
  //           void;
  //       case REVOKE_SPONSORSHIP:
  //           RevokeSponsorshipOp revokeSponsorshipOp;
  //       case CLAWBACK:
  //           ClawbackOp clawbackOp;
  //       case CLAWBACK_CLAIMABLE_BALANCE:
  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
  //       case SET_TRUST_LINE_FLAGS:
  //           SetTrustLineFlagsOp setTrustLineFlagsOp;
  //       case LIQUIDITY_POOL_DEPOSIT:
  //           LiquidityPoolDepositOp liquidityPoolDepositOp;
  //       case LIQUIDITY_POOL_WITHDRAW:
  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[201]++;
  xdr.union("OperationBody", {
    switchOn: xdr.lookup("OperationType"),
    switchName: "type",
    switches: [["createAccount", "createAccountOp"], ["payment", "paymentOp"], ["pathPaymentStrictReceive", "pathPaymentStrictReceiveOp"], ["manageSellOffer", "manageSellOfferOp"], ["createPassiveSellOffer", "createPassiveSellOfferOp"], ["setOptions", "setOptionsOp"], ["changeTrust", "changeTrustOp"], ["allowTrust", "allowTrustOp"], ["accountMerge", "destination"], ["inflation", xdr["void"]()], ["manageData", "manageDataOp"], ["bumpSequence", "bumpSequenceOp"], ["manageBuyOffer", "manageBuyOfferOp"], ["pathPaymentStrictSend", "pathPaymentStrictSendOp"], ["createClaimableBalance", "createClaimableBalanceOp"], ["claimClaimableBalance", "claimClaimableBalanceOp"], ["beginSponsoringFutureReserves", "beginSponsoringFutureReservesOp"], ["endSponsoringFutureReserves", xdr["void"]()], ["revokeSponsorship", "revokeSponsorshipOp"], ["clawback", "clawbackOp"], ["clawbackClaimableBalance", "clawbackClaimableBalanceOp"], ["setTrustLineFlags", "setTrustLineFlagsOp"], ["liquidityPoolDeposit", "liquidityPoolDepositOp"], ["liquidityPoolWithdraw", "liquidityPoolWithdrawOp"]],
    arms: {
      createAccountOp: xdr.lookup("CreateAccountOp"),
      paymentOp: xdr.lookup("PaymentOp"),
      pathPaymentStrictReceiveOp: xdr.lookup("PathPaymentStrictReceiveOp"),
      manageSellOfferOp: xdr.lookup("ManageSellOfferOp"),
      createPassiveSellOfferOp: xdr.lookup("CreatePassiveSellOfferOp"),
      setOptionsOp: xdr.lookup("SetOptionsOp"),
      changeTrustOp: xdr.lookup("ChangeTrustOp"),
      allowTrustOp: xdr.lookup("AllowTrustOp"),
      destination: xdr.lookup("MuxedAccount"),
      manageDataOp: xdr.lookup("ManageDataOp"),
      bumpSequenceOp: xdr.lookup("BumpSequenceOp"),
      manageBuyOfferOp: xdr.lookup("ManageBuyOfferOp"),
      pathPaymentStrictSendOp: xdr.lookup("PathPaymentStrictSendOp"),
      createClaimableBalanceOp: xdr.lookup("CreateClaimableBalanceOp"),
      claimClaimableBalanceOp: xdr.lookup("ClaimClaimableBalanceOp"),
      beginSponsoringFutureReservesOp: xdr.lookup("BeginSponsoringFutureReservesOp"),
      revokeSponsorshipOp: xdr.lookup("RevokeSponsorshipOp"),
      clawbackOp: xdr.lookup("ClawbackOp"),
      clawbackClaimableBalanceOp: xdr.lookup("ClawbackClaimableBalanceOp"),
      setTrustLineFlagsOp: xdr.lookup("SetTrustLineFlagsOp"),
      liquidityPoolDepositOp: xdr.lookup("LiquidityPoolDepositOp"),
      liquidityPoolWithdrawOp: xdr.lookup("LiquidityPoolWithdrawOp")
    }
  });

  // === xdr source ============================================================
  //
  //   struct Operation
  //   {
  //       // sourceAccount is the account used to run the operation
  //       // if not set, the runtime defaults to "sourceAccount" specified at
  //       // the transaction level
  //       MuxedAccount* sourceAccount;
  //   
  //       union switch (OperationType type)
  //       {
  //       case CREATE_ACCOUNT:
  //           CreateAccountOp createAccountOp;
  //       case PAYMENT:
  //           PaymentOp paymentOp;
  //       case PATH_PAYMENT_STRICT_RECEIVE:
  //           PathPaymentStrictReceiveOp pathPaymentStrictReceiveOp;
  //       case MANAGE_SELL_OFFER:
  //           ManageSellOfferOp manageSellOfferOp;
  //       case CREATE_PASSIVE_SELL_OFFER:
  //           CreatePassiveSellOfferOp createPassiveSellOfferOp;
  //       case SET_OPTIONS:
  //           SetOptionsOp setOptionsOp;
  //       case CHANGE_TRUST:
  //           ChangeTrustOp changeTrustOp;
  //       case ALLOW_TRUST:
  //           AllowTrustOp allowTrustOp;
  //       case ACCOUNT_MERGE:
  //           MuxedAccount destination;
  //       case INFLATION:
  //           void;
  //       case MANAGE_DATA:
  //           ManageDataOp manageDataOp;
  //       case BUMP_SEQUENCE:
  //           BumpSequenceOp bumpSequenceOp;
  //       case MANAGE_BUY_OFFER:
  //           ManageBuyOfferOp manageBuyOfferOp;
  //       case PATH_PAYMENT_STRICT_SEND:
  //           PathPaymentStrictSendOp pathPaymentStrictSendOp;
  //       case CREATE_CLAIMABLE_BALANCE:
  //           CreateClaimableBalanceOp createClaimableBalanceOp;
  //       case CLAIM_CLAIMABLE_BALANCE:
  //           ClaimClaimableBalanceOp claimClaimableBalanceOp;
  //       case BEGIN_SPONSORING_FUTURE_RESERVES:
  //           BeginSponsoringFutureReservesOp beginSponsoringFutureReservesOp;
  //       case END_SPONSORING_FUTURE_RESERVES:
  //           void;
  //       case REVOKE_SPONSORSHIP:
  //           RevokeSponsorshipOp revokeSponsorshipOp;
  //       case CLAWBACK:
  //           ClawbackOp clawbackOp;
  //       case CLAWBACK_CLAIMABLE_BALANCE:
  //           ClawbackClaimableBalanceOp clawbackClaimableBalanceOp;
  //       case SET_TRUST_LINE_FLAGS:
  //           SetTrustLineFlagsOp setTrustLineFlagsOp;
  //       case LIQUIDITY_POOL_DEPOSIT:
  //           LiquidityPoolDepositOp liquidityPoolDepositOp;
  //       case LIQUIDITY_POOL_WITHDRAW:
  //           LiquidityPoolWithdrawOp liquidityPoolWithdrawOp;
  //       }
  //       body;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[202]++;
  xdr.struct("Operation", [["sourceAccount", xdr.option(xdr.lookup("MuxedAccount"))], ["body", xdr.lookup("OperationBody")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID sourceAccount;
  //           SequenceNumber seqNum;
  //           uint32 opNum;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[203]++;
  xdr.struct("HashIdPreimageOperationId", [["sourceAccount", xdr.lookup("AccountId")], ["seqNum", xdr.lookup("SequenceNumber")], ["opNum", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           AccountID sourceAccount;
  //           SequenceNumber seqNum;
  //           uint32 opNum;
  //           PoolID liquidityPoolID;
  //           Asset asset;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[204]++;
  xdr.struct("HashIdPreimageRevokeId", [["sourceAccount", xdr.lookup("AccountId")], ["seqNum", xdr.lookup("SequenceNumber")], ["opNum", xdr.lookup("Uint32")], ["liquidityPoolId", xdr.lookup("PoolId")], ["asset", xdr.lookup("Asset")]]);

  // === xdr source ============================================================
  //
  //   union HashIDPreimage switch (EnvelopeType type)
  //   {
  //   case ENVELOPE_TYPE_OP_ID:
  //       struct
  //       {
  //           AccountID sourceAccount;
  //           SequenceNumber seqNum;
  //           uint32 opNum;
  //       } operationID;
  //   case ENVELOPE_TYPE_POOL_REVOKE_OP_ID:
  //       struct
  //       {
  //           AccountID sourceAccount;
  //           SequenceNumber seqNum;
  //           uint32 opNum;
  //           PoolID liquidityPoolID;
  //           Asset asset;
  //       } revokeID;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[205]++;
  xdr.union("HashIdPreimage", {
    switchOn: xdr.lookup("EnvelopeType"),
    switchName: "type",
    switches: [["envelopeTypeOpId", "operationId"], ["envelopeTypePoolRevokeOpId", "revokeId"]],
    arms: {
      operationId: xdr.lookup("HashIdPreimageOperationId"),
      revokeId: xdr.lookup("HashIdPreimageRevokeId")
    }
  });

  // === xdr source ============================================================
  //
  //   enum MemoType
  //   {
  //       MEMO_NONE = 0,
  //       MEMO_TEXT = 1,
  //       MEMO_ID = 2,
  //       MEMO_HASH = 3,
  //       MEMO_RETURN = 4
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[206]++;
  xdr["enum"]("MemoType", {
    memoNone: 0,
    memoText: 1,
    memoId: 2,
    memoHash: 3,
    memoReturn: 4
  });

  // === xdr source ============================================================
  //
  //   union Memo switch (MemoType type)
  //   {
  //   case MEMO_NONE:
  //       void;
  //   case MEMO_TEXT:
  //       string text<28>;
  //   case MEMO_ID:
  //       uint64 id;
  //   case MEMO_HASH:
  //       Hash hash; // the hash of what to pull from the content server
  //   case MEMO_RETURN:
  //       Hash retHash; // the hash of the tx you are rejecting
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[207]++;
  xdr.union("Memo", {
    switchOn: xdr.lookup("MemoType"),
    switchName: "type",
    switches: [["memoNone", xdr["void"]()], ["memoText", "text"], ["memoId", "id"], ["memoHash", "hash"], ["memoReturn", "retHash"]],
    arms: {
      text: xdr.string(28),
      id: xdr.lookup("Uint64"),
      hash: xdr.lookup("Hash"),
      retHash: xdr.lookup("Hash")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TimeBounds
  //   {
  //       TimePoint minTime;
  //       TimePoint maxTime; // 0 here means no maxTime
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[208]++;
  xdr.struct("TimeBounds", [["minTime", xdr.lookup("TimePoint")], ["maxTime", xdr.lookup("TimePoint")]]);

  // === xdr source ============================================================
  //
  //   struct LedgerBounds
  //   {
  //       uint32 minLedger;
  //       uint32 maxLedger; // 0 here means no maxLedger
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[209]++;
  xdr.struct("LedgerBounds", [["minLedger", xdr.lookup("Uint32")], ["maxLedger", xdr.lookup("Uint32")]]);

  // === xdr source ============================================================
  //
  //   struct PreconditionsV2
  //   {
  //       TimeBounds* timeBounds;
  //   
  //       // Transaction only valid for ledger numbers n such that
  //       // minLedger <= n < maxLedger (if maxLedger == 0, then
  //       // only minLedger is checked)
  //       LedgerBounds* ledgerBounds;
  //   
  //       // If NULL, only valid when sourceAccount's sequence number
  //       // is seqNum - 1.  Otherwise, valid when sourceAccount's
  //       // sequence number n satisfies minSeqNum <= n < tx.seqNum.
  //       // Note that after execution the account's sequence number
  //       // is always raised to tx.seqNum, and a transaction is not
  //       // valid if tx.seqNum is too high to ensure replay protection.
  //       SequenceNumber* minSeqNum;
  //   
  //       // For the transaction to be valid, the current ledger time must
  //       // be at least minSeqAge greater than sourceAccount's seqTime.
  //       Duration minSeqAge;
  //   
  //       // For the transaction to be valid, the current ledger number
  //       // must be at least minSeqLedgerGap greater than sourceAccount's
  //       // seqLedger.
  //       uint32 minSeqLedgerGap;
  //   
  //       // For the transaction to be valid, there must be a signature
  //       // corresponding to every Signer in this array, even if the
  //       // signature is not otherwise required by the sourceAccount or
  //       // operations.
  //       SignerKey extraSigners<2>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[210]++;
  xdr.struct("PreconditionsV2", [["timeBounds", xdr.option(xdr.lookup("TimeBounds"))], ["ledgerBounds", xdr.option(xdr.lookup("LedgerBounds"))], ["minSeqNum", xdr.option(xdr.lookup("SequenceNumber"))], ["minSeqAge", xdr.lookup("Duration")], ["minSeqLedgerGap", xdr.lookup("Uint32")], ["extraSigners", xdr.varArray(xdr.lookup("SignerKey"), 2)]]);

  // === xdr source ============================================================
  //
  //   enum PreconditionType
  //   {
  //       PRECOND_NONE = 0,
  //       PRECOND_TIME = 1,
  //       PRECOND_V2 = 2
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[211]++;
  xdr["enum"]("PreconditionType", {
    precondNone: 0,
    precondTime: 1,
    precondV2: 2
  });

  // === xdr source ============================================================
  //
  //   union Preconditions switch (PreconditionType type)
  //   {
  //   case PRECOND_NONE:
  //       void;
  //   case PRECOND_TIME:
  //       TimeBounds timeBounds;
  //   case PRECOND_V2:
  //       PreconditionsV2 v2;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[212]++;
  xdr.union("Preconditions", {
    switchOn: xdr.lookup("PreconditionType"),
    switchName: "type",
    switches: [["precondNone", xdr["void"]()], ["precondTime", "timeBounds"], ["precondV2", "v2"]],
    arms: {
      timeBounds: xdr.lookup("TimeBounds"),
      v2: xdr.lookup("PreconditionsV2")
    }
  });

  // === xdr source ============================================================
  //
  //   const MAX_OPS_PER_TX = 100;
  //
  // ===========================================================================
  cov_1racd7g41m().s[213]++;
  xdr["const"]("MAX_OPS_PER_TX", 100);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[214]++;
  xdr.union("TransactionV0Ext", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct TransactionV0
  //   {
  //       uint256 sourceAccountEd25519;
  //       uint32 fee;
  //       SequenceNumber seqNum;
  //       TimeBounds* timeBounds;
  //       Memo memo;
  //       Operation operations<MAX_OPS_PER_TX>;
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[215]++;
  xdr.struct("TransactionV0", [["sourceAccountEd25519", xdr.lookup("Uint256")], ["fee", xdr.lookup("Uint32")], ["seqNum", xdr.lookup("SequenceNumber")], ["timeBounds", xdr.option(xdr.lookup("TimeBounds"))], ["memo", xdr.lookup("Memo")], ["operations", xdr.varArray(xdr.lookup("Operation"), xdr.lookup("MAX_OPS_PER_TX"))], ["ext", xdr.lookup("TransactionV0Ext")]]);

  // === xdr source ============================================================
  //
  //   struct TransactionV0Envelope
  //   {
  //       TransactionV0 tx;
  //       /* Each decorated signature is a signature over the SHA256 hash of
  //        * a TransactionSignaturePayload */
  //       DecoratedSignature signatures<20>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[216]++;
  xdr.struct("TransactionV0Envelope", [["tx", xdr.lookup("TransactionV0")], ["signatures", xdr.varArray(xdr.lookup("DecoratedSignature"), 20)]]);

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[217]++;
  xdr.union("TransactionExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct Transaction
  //   {
  //       // account used to run the transaction
  //       MuxedAccount sourceAccount;
  //   
  //       // the fee the sourceAccount will pay
  //       uint32 fee;
  //   
  //       // sequence number to consume in the account
  //       SequenceNumber seqNum;
  //   
  //       // validity conditions
  //       Preconditions cond;
  //   
  //       Memo memo;
  //   
  //       Operation operations<MAX_OPS_PER_TX>;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[218]++;
  xdr.struct("Transaction", [["sourceAccount", xdr.lookup("MuxedAccount")], ["fee", xdr.lookup("Uint32")], ["seqNum", xdr.lookup("SequenceNumber")], ["cond", xdr.lookup("Preconditions")], ["memo", xdr.lookup("Memo")], ["operations", xdr.varArray(xdr.lookup("Operation"), xdr.lookup("MAX_OPS_PER_TX"))], ["ext", xdr.lookup("TransactionExt")]]);

  // === xdr source ============================================================
  //
  //   struct TransactionV1Envelope
  //   {
  //       Transaction tx;
  //       /* Each decorated signature is a signature over the SHA256 hash of
  //        * a TransactionSignaturePayload */
  //       DecoratedSignature signatures<20>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[219]++;
  xdr.struct("TransactionV1Envelope", [["tx", xdr.lookup("Transaction")], ["signatures", xdr.varArray(xdr.lookup("DecoratedSignature"), 20)]]);

  // === xdr source ============================================================
  //
  //   union switch (EnvelopeType type)
  //       {
  //       case ENVELOPE_TYPE_TX:
  //           TransactionV1Envelope v1;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[220]++;
  xdr.union("FeeBumpTransactionInnerTx", {
    switchOn: xdr.lookup("EnvelopeType"),
    switchName: "type",
    switches: [["envelopeTypeTx", "v1"]],
    arms: {
      v1: xdr.lookup("TransactionV1Envelope")
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[221]++;
  xdr.union("FeeBumpTransactionExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct FeeBumpTransaction
  //   {
  //       MuxedAccount feeSource;
  //       int64 fee;
  //       union switch (EnvelopeType type)
  //       {
  //       case ENVELOPE_TYPE_TX:
  //           TransactionV1Envelope v1;
  //       }
  //       innerTx;
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[222]++;
  xdr.struct("FeeBumpTransaction", [["feeSource", xdr.lookup("MuxedAccount")], ["fee", xdr.lookup("Int64")], ["innerTx", xdr.lookup("FeeBumpTransactionInnerTx")], ["ext", xdr.lookup("FeeBumpTransactionExt")]]);

  // === xdr source ============================================================
  //
  //   struct FeeBumpTransactionEnvelope
  //   {
  //       FeeBumpTransaction tx;
  //       /* Each decorated signature is a signature over the SHA256 hash of
  //        * a TransactionSignaturePayload */
  //       DecoratedSignature signatures<20>;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[223]++;
  xdr.struct("FeeBumpTransactionEnvelope", [["tx", xdr.lookup("FeeBumpTransaction")], ["signatures", xdr.varArray(xdr.lookup("DecoratedSignature"), 20)]]);

  // === xdr source ============================================================
  //
  //   union TransactionEnvelope switch (EnvelopeType type)
  //   {
  //   case ENVELOPE_TYPE_TX_V0:
  //       TransactionV0Envelope v0;
  //   case ENVELOPE_TYPE_TX:
  //       TransactionV1Envelope v1;
  //   case ENVELOPE_TYPE_TX_FEE_BUMP:
  //       FeeBumpTransactionEnvelope feeBump;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[224]++;
  xdr.union("TransactionEnvelope", {
    switchOn: xdr.lookup("EnvelopeType"),
    switchName: "type",
    switches: [["envelopeTypeTxV0", "v0"], ["envelopeTypeTx", "v1"], ["envelopeTypeTxFeeBump", "feeBump"]],
    arms: {
      v0: xdr.lookup("TransactionV0Envelope"),
      v1: xdr.lookup("TransactionV1Envelope"),
      feeBump: xdr.lookup("FeeBumpTransactionEnvelope")
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (EnvelopeType type)
  //       {
  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
  //       case ENVELOPE_TYPE_TX:
  //           Transaction tx;
  //       case ENVELOPE_TYPE_TX_FEE_BUMP:
  //           FeeBumpTransaction feeBump;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[225]++;
  xdr.union("TransactionSignaturePayloadTaggedTransaction", {
    switchOn: xdr.lookup("EnvelopeType"),
    switchName: "type",
    switches: [["envelopeTypeTx", "tx"], ["envelopeTypeTxFeeBump", "feeBump"]],
    arms: {
      tx: xdr.lookup("Transaction"),
      feeBump: xdr.lookup("FeeBumpTransaction")
    }
  });

  // === xdr source ============================================================
  //
  //   struct TransactionSignaturePayload
  //   {
  //       Hash networkId;
  //       union switch (EnvelopeType type)
  //       {
  //       // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
  //       case ENVELOPE_TYPE_TX:
  //           Transaction tx;
  //       case ENVELOPE_TYPE_TX_FEE_BUMP:
  //           FeeBumpTransaction feeBump;
  //       }
  //       taggedTransaction;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[226]++;
  xdr.struct("TransactionSignaturePayload", [["networkId", xdr.lookup("Hash")], ["taggedTransaction", xdr.lookup("TransactionSignaturePayloadTaggedTransaction")]]);

  // === xdr source ============================================================
  //
  //   enum ClaimAtomType
  //   {
  //       CLAIM_ATOM_TYPE_V0 = 0,
  //       CLAIM_ATOM_TYPE_ORDER_BOOK = 1,
  //       CLAIM_ATOM_TYPE_LIQUIDITY_POOL = 2
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[227]++;
  xdr["enum"]("ClaimAtomType", {
    claimAtomTypeV0: 0,
    claimAtomTypeOrderBook: 1,
    claimAtomTypeLiquidityPool: 2
  });

  // === xdr source ============================================================
  //
  //   struct ClaimOfferAtomV0
  //   {
  //       // emitted to identify the offer
  //       uint256 sellerEd25519; // Account that owns the offer
  //       int64 offerID;
  //   
  //       // amount and asset taken from the owner
  //       Asset assetSold;
  //       int64 amountSold;
  //   
  //       // amount and asset sent to the owner
  //       Asset assetBought;
  //       int64 amountBought;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[228]++;
  xdr.struct("ClaimOfferAtomV0", [["sellerEd25519", xdr.lookup("Uint256")], ["offerId", xdr.lookup("Int64")], ["assetSold", xdr.lookup("Asset")], ["amountSold", xdr.lookup("Int64")], ["assetBought", xdr.lookup("Asset")], ["amountBought", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct ClaimOfferAtom
  //   {
  //       // emitted to identify the offer
  //       AccountID sellerID; // Account that owns the offer
  //       int64 offerID;
  //   
  //       // amount and asset taken from the owner
  //       Asset assetSold;
  //       int64 amountSold;
  //   
  //       // amount and asset sent to the owner
  //       Asset assetBought;
  //       int64 amountBought;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[229]++;
  xdr.struct("ClaimOfferAtom", [["sellerId", xdr.lookup("AccountId")], ["offerId", xdr.lookup("Int64")], ["assetSold", xdr.lookup("Asset")], ["amountSold", xdr.lookup("Int64")], ["assetBought", xdr.lookup("Asset")], ["amountBought", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct ClaimLiquidityAtom
  //   {
  //       PoolID liquidityPoolID;
  //   
  //       // amount and asset taken from the pool
  //       Asset assetSold;
  //       int64 amountSold;
  //   
  //       // amount and asset sent to the pool
  //       Asset assetBought;
  //       int64 amountBought;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[230]++;
  xdr.struct("ClaimLiquidityAtom", [["liquidityPoolId", xdr.lookup("PoolId")], ["assetSold", xdr.lookup("Asset")], ["amountSold", xdr.lookup("Int64")], ["assetBought", xdr.lookup("Asset")], ["amountBought", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   union ClaimAtom switch (ClaimAtomType type)
  //   {
  //   case CLAIM_ATOM_TYPE_V0:
  //       ClaimOfferAtomV0 v0;
  //   case CLAIM_ATOM_TYPE_ORDER_BOOK:
  //       ClaimOfferAtom orderBook;
  //   case CLAIM_ATOM_TYPE_LIQUIDITY_POOL:
  //       ClaimLiquidityAtom liquidityPool;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[231]++;
  xdr.union("ClaimAtom", {
    switchOn: xdr.lookup("ClaimAtomType"),
    switchName: "type",
    switches: [["claimAtomTypeV0", "v0"], ["claimAtomTypeOrderBook", "orderBook"], ["claimAtomTypeLiquidityPool", "liquidityPool"]],
    arms: {
      v0: xdr.lookup("ClaimOfferAtomV0"),
      orderBook: xdr.lookup("ClaimOfferAtom"),
      liquidityPool: xdr.lookup("ClaimLiquidityAtom")
    }
  });

  // === xdr source ============================================================
  //
  //   enum CreateAccountResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       CREATE_ACCOUNT_SUCCESS = 0, // account was created
  //   
  //       // codes considered as "failure" for the operation
  //       CREATE_ACCOUNT_MALFORMED = -1,   // invalid destination
  //       CREATE_ACCOUNT_UNDERFUNDED = -2, // not enough funds in source account
  //       CREATE_ACCOUNT_LOW_RESERVE =
  //           -3, // would create an account below the min reserve
  //       CREATE_ACCOUNT_ALREADY_EXIST = -4 // account already exists
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[232]++;
  xdr["enum"]("CreateAccountResultCode", {
    createAccountSuccess: 0,
    createAccountMalformed: -1,
    createAccountUnderfunded: -2,
    createAccountLowReserve: -3,
    createAccountAlreadyExist: -4
  });

  // === xdr source ============================================================
  //
  //   union CreateAccountResult switch (CreateAccountResultCode code)
  //   {
  //   case CREATE_ACCOUNT_SUCCESS:
  //       void;
  //   case CREATE_ACCOUNT_MALFORMED:
  //   case CREATE_ACCOUNT_UNDERFUNDED:
  //   case CREATE_ACCOUNT_LOW_RESERVE:
  //   case CREATE_ACCOUNT_ALREADY_EXIST:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[233]++;
  xdr.union("CreateAccountResult", {
    switchOn: xdr.lookup("CreateAccountResultCode"),
    switchName: "code",
    switches: [["createAccountSuccess", xdr["void"]()], ["createAccountMalformed", xdr["void"]()], ["createAccountUnderfunded", xdr["void"]()], ["createAccountLowReserve", xdr["void"]()], ["createAccountAlreadyExist", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum PaymentResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       PAYMENT_SUCCESS = 0, // payment successfully completed
  //   
  //       // codes considered as "failure" for the operation
  //       PAYMENT_MALFORMED = -1,          // bad input
  //       PAYMENT_UNDERFUNDED = -2,        // not enough funds in source account
  //       PAYMENT_SRC_NO_TRUST = -3,       // no trust line on source account
  //       PAYMENT_SRC_NOT_AUTHORIZED = -4, // source not authorized to transfer
  //       PAYMENT_NO_DESTINATION = -5,     // destination account does not exist
  //       PAYMENT_NO_TRUST = -6,       // destination missing a trust line for asset
  //       PAYMENT_NOT_AUTHORIZED = -7, // destination not authorized to hold asset
  //       PAYMENT_LINE_FULL = -8,      // destination would go above their limit
  //       PAYMENT_NO_ISSUER = -9       // missing issuer on asset
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[234]++;
  xdr["enum"]("PaymentResultCode", {
    paymentSuccess: 0,
    paymentMalformed: -1,
    paymentUnderfunded: -2,
    paymentSrcNoTrust: -3,
    paymentSrcNotAuthorized: -4,
    paymentNoDestination: -5,
    paymentNoTrust: -6,
    paymentNotAuthorized: -7,
    paymentLineFull: -8,
    paymentNoIssuer: -9
  });

  // === xdr source ============================================================
  //
  //   union PaymentResult switch (PaymentResultCode code)
  //   {
  //   case PAYMENT_SUCCESS:
  //       void;
  //   case PAYMENT_MALFORMED:
  //   case PAYMENT_UNDERFUNDED:
  //   case PAYMENT_SRC_NO_TRUST:
  //   case PAYMENT_SRC_NOT_AUTHORIZED:
  //   case PAYMENT_NO_DESTINATION:
  //   case PAYMENT_NO_TRUST:
  //   case PAYMENT_NOT_AUTHORIZED:
  //   case PAYMENT_LINE_FULL:
  //   case PAYMENT_NO_ISSUER:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[235]++;
  xdr.union("PaymentResult", {
    switchOn: xdr.lookup("PaymentResultCode"),
    switchName: "code",
    switches: [["paymentSuccess", xdr["void"]()], ["paymentMalformed", xdr["void"]()], ["paymentUnderfunded", xdr["void"]()], ["paymentSrcNoTrust", xdr["void"]()], ["paymentSrcNotAuthorized", xdr["void"]()], ["paymentNoDestination", xdr["void"]()], ["paymentNoTrust", xdr["void"]()], ["paymentNotAuthorized", xdr["void"]()], ["paymentLineFull", xdr["void"]()], ["paymentNoIssuer", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum PathPaymentStrictReceiveResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       PATH_PAYMENT_STRICT_RECEIVE_SUCCESS = 0, // success
  //   
  //       // codes considered as "failure" for the operation
  //       PATH_PAYMENT_STRICT_RECEIVE_MALFORMED = -1, // bad input
  //       PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED =
  //           -2, // not enough funds in source account
  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST =
  //           -3, // no trust line on source account
  //       PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED =
  //           -4, // source not authorized to transfer
  //       PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION =
  //           -5, // destination account does not exist
  //       PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST =
  //           -6, // dest missing a trust line for asset
  //       PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED =
  //           -7, // dest not authorized to hold asset
  //       PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL =
  //           -8, // dest would go above their limit
  //       PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER = -9, // missing issuer on one asset
  //       PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS =
  //           -10, // not enough offers to satisfy path
  //       PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF =
  //           -11, // would cross one of its own offers
  //       PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX = -12 // could not satisfy sendmax
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[236]++;
  xdr["enum"]("PathPaymentStrictReceiveResultCode", {
    pathPaymentStrictReceiveSuccess: 0,
    pathPaymentStrictReceiveMalformed: -1,
    pathPaymentStrictReceiveUnderfunded: -2,
    pathPaymentStrictReceiveSrcNoTrust: -3,
    pathPaymentStrictReceiveSrcNotAuthorized: -4,
    pathPaymentStrictReceiveNoDestination: -5,
    pathPaymentStrictReceiveNoTrust: -6,
    pathPaymentStrictReceiveNotAuthorized: -7,
    pathPaymentStrictReceiveLineFull: -8,
    pathPaymentStrictReceiveNoIssuer: -9,
    pathPaymentStrictReceiveTooFewOffers: -10,
    pathPaymentStrictReceiveOfferCrossSelf: -11,
    pathPaymentStrictReceiveOverSendmax: -12
  });

  // === xdr source ============================================================
  //
  //   struct SimplePaymentResult
  //   {
  //       AccountID destination;
  //       Asset asset;
  //       int64 amount;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[237]++;
  xdr.struct("SimplePaymentResult", [["destination", xdr.lookup("AccountId")], ["asset", xdr.lookup("Asset")], ["amount", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           ClaimAtom offers<>;
  //           SimplePaymentResult last;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[238]++;
  xdr.struct("PathPaymentStrictReceiveResultSuccess", [["offers", xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)], ["last", xdr.lookup("SimplePaymentResult")]]);

  // === xdr source ============================================================
  //
  //   union PathPaymentStrictReceiveResult switch (
  //       PathPaymentStrictReceiveResultCode code)
  //   {
  //   case PATH_PAYMENT_STRICT_RECEIVE_SUCCESS:
  //       struct
  //       {
  //           ClaimAtom offers<>;
  //           SimplePaymentResult last;
  //       } success;
  //   case PATH_PAYMENT_STRICT_RECEIVE_MALFORMED:
  //   case PATH_PAYMENT_STRICT_RECEIVE_UNDERFUNDED:
  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NO_TRUST:
  //   case PATH_PAYMENT_STRICT_RECEIVE_SRC_NOT_AUTHORIZED:
  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_DESTINATION:
  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_TRUST:
  //   case PATH_PAYMENT_STRICT_RECEIVE_NOT_AUTHORIZED:
  //   case PATH_PAYMENT_STRICT_RECEIVE_LINE_FULL:
  //       void;
  //   case PATH_PAYMENT_STRICT_RECEIVE_NO_ISSUER:
  //       Asset noIssuer; // the asset that caused the error
  //   case PATH_PAYMENT_STRICT_RECEIVE_TOO_FEW_OFFERS:
  //   case PATH_PAYMENT_STRICT_RECEIVE_OFFER_CROSS_SELF:
  //   case PATH_PAYMENT_STRICT_RECEIVE_OVER_SENDMAX:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[239]++;
  xdr.union("PathPaymentStrictReceiveResult", {
    switchOn: xdr.lookup("PathPaymentStrictReceiveResultCode"),
    switchName: "code",
    switches: [["pathPaymentStrictReceiveSuccess", "success"], ["pathPaymentStrictReceiveMalformed", xdr["void"]()], ["pathPaymentStrictReceiveUnderfunded", xdr["void"]()], ["pathPaymentStrictReceiveSrcNoTrust", xdr["void"]()], ["pathPaymentStrictReceiveSrcNotAuthorized", xdr["void"]()], ["pathPaymentStrictReceiveNoDestination", xdr["void"]()], ["pathPaymentStrictReceiveNoTrust", xdr["void"]()], ["pathPaymentStrictReceiveNotAuthorized", xdr["void"]()], ["pathPaymentStrictReceiveLineFull", xdr["void"]()], ["pathPaymentStrictReceiveNoIssuer", "noIssuer"], ["pathPaymentStrictReceiveTooFewOffers", xdr["void"]()], ["pathPaymentStrictReceiveOfferCrossSelf", xdr["void"]()], ["pathPaymentStrictReceiveOverSendmax", xdr["void"]()]],
    arms: {
      success: xdr.lookup("PathPaymentStrictReceiveResultSuccess"),
      noIssuer: xdr.lookup("Asset")
    }
  });

  // === xdr source ============================================================
  //
  //   enum PathPaymentStrictSendResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       PATH_PAYMENT_STRICT_SEND_SUCCESS = 0, // success
  //   
  //       // codes considered as "failure" for the operation
  //       PATH_PAYMENT_STRICT_SEND_MALFORMED = -1, // bad input
  //       PATH_PAYMENT_STRICT_SEND_UNDERFUNDED =
  //           -2, // not enough funds in source account
  //       PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST =
  //           -3, // no trust line on source account
  //       PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED =
  //           -4, // source not authorized to transfer
  //       PATH_PAYMENT_STRICT_SEND_NO_DESTINATION =
  //           -5, // destination account does not exist
  //       PATH_PAYMENT_STRICT_SEND_NO_TRUST =
  //           -6, // dest missing a trust line for asset
  //       PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED =
  //           -7, // dest not authorized to hold asset
  //       PATH_PAYMENT_STRICT_SEND_LINE_FULL = -8, // dest would go above their limit
  //       PATH_PAYMENT_STRICT_SEND_NO_ISSUER = -9, // missing issuer on one asset
  //       PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS =
  //           -10, // not enough offers to satisfy path
  //       PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF =
  //           -11, // would cross one of its own offers
  //       PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN = -12 // could not satisfy destMin
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[240]++;
  xdr["enum"]("PathPaymentStrictSendResultCode", {
    pathPaymentStrictSendSuccess: 0,
    pathPaymentStrictSendMalformed: -1,
    pathPaymentStrictSendUnderfunded: -2,
    pathPaymentStrictSendSrcNoTrust: -3,
    pathPaymentStrictSendSrcNotAuthorized: -4,
    pathPaymentStrictSendNoDestination: -5,
    pathPaymentStrictSendNoTrust: -6,
    pathPaymentStrictSendNotAuthorized: -7,
    pathPaymentStrictSendLineFull: -8,
    pathPaymentStrictSendNoIssuer: -9,
    pathPaymentStrictSendTooFewOffers: -10,
    pathPaymentStrictSendOfferCrossSelf: -11,
    pathPaymentStrictSendUnderDestmin: -12
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           ClaimAtom offers<>;
  //           SimplePaymentResult last;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[241]++;
  xdr.struct("PathPaymentStrictSendResultSuccess", [["offers", xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)], ["last", xdr.lookup("SimplePaymentResult")]]);

  // === xdr source ============================================================
  //
  //   union PathPaymentStrictSendResult switch (PathPaymentStrictSendResultCode code)
  //   {
  //   case PATH_PAYMENT_STRICT_SEND_SUCCESS:
  //       struct
  //       {
  //           ClaimAtom offers<>;
  //           SimplePaymentResult last;
  //       } success;
  //   case PATH_PAYMENT_STRICT_SEND_MALFORMED:
  //   case PATH_PAYMENT_STRICT_SEND_UNDERFUNDED:
  //   case PATH_PAYMENT_STRICT_SEND_SRC_NO_TRUST:
  //   case PATH_PAYMENT_STRICT_SEND_SRC_NOT_AUTHORIZED:
  //   case PATH_PAYMENT_STRICT_SEND_NO_DESTINATION:
  //   case PATH_PAYMENT_STRICT_SEND_NO_TRUST:
  //   case PATH_PAYMENT_STRICT_SEND_NOT_AUTHORIZED:
  //   case PATH_PAYMENT_STRICT_SEND_LINE_FULL:
  //       void;
  //   case PATH_PAYMENT_STRICT_SEND_NO_ISSUER:
  //       Asset noIssuer; // the asset that caused the error
  //   case PATH_PAYMENT_STRICT_SEND_TOO_FEW_OFFERS:
  //   case PATH_PAYMENT_STRICT_SEND_OFFER_CROSS_SELF:
  //   case PATH_PAYMENT_STRICT_SEND_UNDER_DESTMIN:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[242]++;
  xdr.union("PathPaymentStrictSendResult", {
    switchOn: xdr.lookup("PathPaymentStrictSendResultCode"),
    switchName: "code",
    switches: [["pathPaymentStrictSendSuccess", "success"], ["pathPaymentStrictSendMalformed", xdr["void"]()], ["pathPaymentStrictSendUnderfunded", xdr["void"]()], ["pathPaymentStrictSendSrcNoTrust", xdr["void"]()], ["pathPaymentStrictSendSrcNotAuthorized", xdr["void"]()], ["pathPaymentStrictSendNoDestination", xdr["void"]()], ["pathPaymentStrictSendNoTrust", xdr["void"]()], ["pathPaymentStrictSendNotAuthorized", xdr["void"]()], ["pathPaymentStrictSendLineFull", xdr["void"]()], ["pathPaymentStrictSendNoIssuer", "noIssuer"], ["pathPaymentStrictSendTooFewOffers", xdr["void"]()], ["pathPaymentStrictSendOfferCrossSelf", xdr["void"]()], ["pathPaymentStrictSendUnderDestmin", xdr["void"]()]],
    arms: {
      success: xdr.lookup("PathPaymentStrictSendResultSuccess"),
      noIssuer: xdr.lookup("Asset")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ManageSellOfferResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       MANAGE_SELL_OFFER_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       MANAGE_SELL_OFFER_MALFORMED = -1, // generated offer would be invalid
  //       MANAGE_SELL_OFFER_SELL_NO_TRUST =
  //           -2,                              // no trust line for what we're selling
  //       MANAGE_SELL_OFFER_BUY_NO_TRUST = -3, // no trust line for what we're buying
  //       MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell
  //       MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy
  //       MANAGE_SELL_OFFER_LINE_FULL = -6, // can't receive more of what it's buying
  //       MANAGE_SELL_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell
  //       MANAGE_SELL_OFFER_CROSS_SELF =
  //           -8, // would cross an offer from the same user
  //       MANAGE_SELL_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling
  //       MANAGE_SELL_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying
  //   
  //       // update errors
  //       MANAGE_SELL_OFFER_NOT_FOUND =
  //           -11, // offerID does not match an existing offer
  //   
  //       MANAGE_SELL_OFFER_LOW_RESERVE =
  //           -12 // not enough funds to create a new Offer
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[243]++;
  xdr["enum"]("ManageSellOfferResultCode", {
    manageSellOfferSuccess: 0,
    manageSellOfferMalformed: -1,
    manageSellOfferSellNoTrust: -2,
    manageSellOfferBuyNoTrust: -3,
    manageSellOfferSellNotAuthorized: -4,
    manageSellOfferBuyNotAuthorized: -5,
    manageSellOfferLineFull: -6,
    manageSellOfferUnderfunded: -7,
    manageSellOfferCrossSelf: -8,
    manageSellOfferSellNoIssuer: -9,
    manageSellOfferBuyNoIssuer: -10,
    manageSellOfferNotFound: -11,
    manageSellOfferLowReserve: -12
  });

  // === xdr source ============================================================
  //
  //   enum ManageOfferEffect
  //   {
  //       MANAGE_OFFER_CREATED = 0,
  //       MANAGE_OFFER_UPDATED = 1,
  //       MANAGE_OFFER_DELETED = 2
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[244]++;
  xdr["enum"]("ManageOfferEffect", {
    manageOfferCreated: 0,
    manageOfferUpdated: 1,
    manageOfferDeleted: 2
  });

  // === xdr source ============================================================
  //
  //   union switch (ManageOfferEffect effect)
  //       {
  //       case MANAGE_OFFER_CREATED:
  //       case MANAGE_OFFER_UPDATED:
  //           OfferEntry offer;
  //       case MANAGE_OFFER_DELETED:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[245]++;
  xdr.union("ManageOfferSuccessResultOffer", {
    switchOn: xdr.lookup("ManageOfferEffect"),
    switchName: "effect",
    switches: [["manageOfferCreated", "offer"], ["manageOfferUpdated", "offer"], ["manageOfferDeleted", xdr["void"]()]],
    arms: {
      offer: xdr.lookup("OfferEntry")
    }
  });

  // === xdr source ============================================================
  //
  //   struct ManageOfferSuccessResult
  //   {
  //       // offers that got claimed while creating this offer
  //       ClaimAtom offersClaimed<>;
  //   
  //       union switch (ManageOfferEffect effect)
  //       {
  //       case MANAGE_OFFER_CREATED:
  //       case MANAGE_OFFER_UPDATED:
  //           OfferEntry offer;
  //       case MANAGE_OFFER_DELETED:
  //           void;
  //       }
  //       offer;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[246]++;
  xdr.struct("ManageOfferSuccessResult", [["offersClaimed", xdr.varArray(xdr.lookup("ClaimAtom"), 2147483647)], ["offer", xdr.lookup("ManageOfferSuccessResultOffer")]]);

  // === xdr source ============================================================
  //
  //   union ManageSellOfferResult switch (ManageSellOfferResultCode code)
  //   {
  //   case MANAGE_SELL_OFFER_SUCCESS:
  //       ManageOfferSuccessResult success;
  //   case MANAGE_SELL_OFFER_MALFORMED:
  //   case MANAGE_SELL_OFFER_SELL_NO_TRUST:
  //   case MANAGE_SELL_OFFER_BUY_NO_TRUST:
  //   case MANAGE_SELL_OFFER_SELL_NOT_AUTHORIZED:
  //   case MANAGE_SELL_OFFER_BUY_NOT_AUTHORIZED:
  //   case MANAGE_SELL_OFFER_LINE_FULL:
  //   case MANAGE_SELL_OFFER_UNDERFUNDED:
  //   case MANAGE_SELL_OFFER_CROSS_SELF:
  //   case MANAGE_SELL_OFFER_SELL_NO_ISSUER:
  //   case MANAGE_SELL_OFFER_BUY_NO_ISSUER:
  //   case MANAGE_SELL_OFFER_NOT_FOUND:
  //   case MANAGE_SELL_OFFER_LOW_RESERVE:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[247]++;
  xdr.union("ManageSellOfferResult", {
    switchOn: xdr.lookup("ManageSellOfferResultCode"),
    switchName: "code",
    switches: [["manageSellOfferSuccess", "success"], ["manageSellOfferMalformed", xdr["void"]()], ["manageSellOfferSellNoTrust", xdr["void"]()], ["manageSellOfferBuyNoTrust", xdr["void"]()], ["manageSellOfferSellNotAuthorized", xdr["void"]()], ["manageSellOfferBuyNotAuthorized", xdr["void"]()], ["manageSellOfferLineFull", xdr["void"]()], ["manageSellOfferUnderfunded", xdr["void"]()], ["manageSellOfferCrossSelf", xdr["void"]()], ["manageSellOfferSellNoIssuer", xdr["void"]()], ["manageSellOfferBuyNoIssuer", xdr["void"]()], ["manageSellOfferNotFound", xdr["void"]()], ["manageSellOfferLowReserve", xdr["void"]()]],
    arms: {
      success: xdr.lookup("ManageOfferSuccessResult")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ManageBuyOfferResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       MANAGE_BUY_OFFER_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       MANAGE_BUY_OFFER_MALFORMED = -1,     // generated offer would be invalid
  //       MANAGE_BUY_OFFER_SELL_NO_TRUST = -2, // no trust line for what we're selling
  //       MANAGE_BUY_OFFER_BUY_NO_TRUST = -3,  // no trust line for what we're buying
  //       MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED = -4, // not authorized to sell
  //       MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED = -5,  // not authorized to buy
  //       MANAGE_BUY_OFFER_LINE_FULL = -6,   // can't receive more of what it's buying
  //       MANAGE_BUY_OFFER_UNDERFUNDED = -7, // doesn't hold what it's trying to sell
  //       MANAGE_BUY_OFFER_CROSS_SELF = -8, // would cross an offer from the same user
  //       MANAGE_BUY_OFFER_SELL_NO_ISSUER = -9, // no issuer for what we're selling
  //       MANAGE_BUY_OFFER_BUY_NO_ISSUER = -10, // no issuer for what we're buying
  //   
  //       // update errors
  //       MANAGE_BUY_OFFER_NOT_FOUND =
  //           -11, // offerID does not match an existing offer
  //   
  //       MANAGE_BUY_OFFER_LOW_RESERVE = -12 // not enough funds to create a new Offer
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[248]++;
  xdr["enum"]("ManageBuyOfferResultCode", {
    manageBuyOfferSuccess: 0,
    manageBuyOfferMalformed: -1,
    manageBuyOfferSellNoTrust: -2,
    manageBuyOfferBuyNoTrust: -3,
    manageBuyOfferSellNotAuthorized: -4,
    manageBuyOfferBuyNotAuthorized: -5,
    manageBuyOfferLineFull: -6,
    manageBuyOfferUnderfunded: -7,
    manageBuyOfferCrossSelf: -8,
    manageBuyOfferSellNoIssuer: -9,
    manageBuyOfferBuyNoIssuer: -10,
    manageBuyOfferNotFound: -11,
    manageBuyOfferLowReserve: -12
  });

  // === xdr source ============================================================
  //
  //   union ManageBuyOfferResult switch (ManageBuyOfferResultCode code)
  //   {
  //   case MANAGE_BUY_OFFER_SUCCESS:
  //       ManageOfferSuccessResult success;
  //   case MANAGE_BUY_OFFER_MALFORMED:
  //   case MANAGE_BUY_OFFER_SELL_NO_TRUST:
  //   case MANAGE_BUY_OFFER_BUY_NO_TRUST:
  //   case MANAGE_BUY_OFFER_SELL_NOT_AUTHORIZED:
  //   case MANAGE_BUY_OFFER_BUY_NOT_AUTHORIZED:
  //   case MANAGE_BUY_OFFER_LINE_FULL:
  //   case MANAGE_BUY_OFFER_UNDERFUNDED:
  //   case MANAGE_BUY_OFFER_CROSS_SELF:
  //   case MANAGE_BUY_OFFER_SELL_NO_ISSUER:
  //   case MANAGE_BUY_OFFER_BUY_NO_ISSUER:
  //   case MANAGE_BUY_OFFER_NOT_FOUND:
  //   case MANAGE_BUY_OFFER_LOW_RESERVE:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[249]++;
  xdr.union("ManageBuyOfferResult", {
    switchOn: xdr.lookup("ManageBuyOfferResultCode"),
    switchName: "code",
    switches: [["manageBuyOfferSuccess", "success"], ["manageBuyOfferMalformed", xdr["void"]()], ["manageBuyOfferSellNoTrust", xdr["void"]()], ["manageBuyOfferBuyNoTrust", xdr["void"]()], ["manageBuyOfferSellNotAuthorized", xdr["void"]()], ["manageBuyOfferBuyNotAuthorized", xdr["void"]()], ["manageBuyOfferLineFull", xdr["void"]()], ["manageBuyOfferUnderfunded", xdr["void"]()], ["manageBuyOfferCrossSelf", xdr["void"]()], ["manageBuyOfferSellNoIssuer", xdr["void"]()], ["manageBuyOfferBuyNoIssuer", xdr["void"]()], ["manageBuyOfferNotFound", xdr["void"]()], ["manageBuyOfferLowReserve", xdr["void"]()]],
    arms: {
      success: xdr.lookup("ManageOfferSuccessResult")
    }
  });

  // === xdr source ============================================================
  //
  //   enum SetOptionsResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       SET_OPTIONS_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       SET_OPTIONS_LOW_RESERVE = -1,      // not enough funds to add a signer
  //       SET_OPTIONS_TOO_MANY_SIGNERS = -2, // max number of signers already reached
  //       SET_OPTIONS_BAD_FLAGS = -3,        // invalid combination of clear/set flags
  //       SET_OPTIONS_INVALID_INFLATION = -4,      // inflation account does not exist
  //       SET_OPTIONS_CANT_CHANGE = -5,            // can no longer change this option
  //       SET_OPTIONS_UNKNOWN_FLAG = -6,           // can't set an unknown flag
  //       SET_OPTIONS_THRESHOLD_OUT_OF_RANGE = -7, // bad value for weight/threshold
  //       SET_OPTIONS_BAD_SIGNER = -8,             // signer cannot be masterkey
  //       SET_OPTIONS_INVALID_HOME_DOMAIN = -9,    // malformed home domain
  //       SET_OPTIONS_AUTH_REVOCABLE_REQUIRED =
  //           -10 // auth revocable is required for clawback
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[250]++;
  xdr["enum"]("SetOptionsResultCode", {
    setOptionsSuccess: 0,
    setOptionsLowReserve: -1,
    setOptionsTooManySigners: -2,
    setOptionsBadFlags: -3,
    setOptionsInvalidInflation: -4,
    setOptionsCantChange: -5,
    setOptionsUnknownFlag: -6,
    setOptionsThresholdOutOfRange: -7,
    setOptionsBadSigner: -8,
    setOptionsInvalidHomeDomain: -9,
    setOptionsAuthRevocableRequired: -10
  });

  // === xdr source ============================================================
  //
  //   union SetOptionsResult switch (SetOptionsResultCode code)
  //   {
  //   case SET_OPTIONS_SUCCESS:
  //       void;
  //   case SET_OPTIONS_LOW_RESERVE:
  //   case SET_OPTIONS_TOO_MANY_SIGNERS:
  //   case SET_OPTIONS_BAD_FLAGS:
  //   case SET_OPTIONS_INVALID_INFLATION:
  //   case SET_OPTIONS_CANT_CHANGE:
  //   case SET_OPTIONS_UNKNOWN_FLAG:
  //   case SET_OPTIONS_THRESHOLD_OUT_OF_RANGE:
  //   case SET_OPTIONS_BAD_SIGNER:
  //   case SET_OPTIONS_INVALID_HOME_DOMAIN:
  //   case SET_OPTIONS_AUTH_REVOCABLE_REQUIRED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[251]++;
  xdr.union("SetOptionsResult", {
    switchOn: xdr.lookup("SetOptionsResultCode"),
    switchName: "code",
    switches: [["setOptionsSuccess", xdr["void"]()], ["setOptionsLowReserve", xdr["void"]()], ["setOptionsTooManySigners", xdr["void"]()], ["setOptionsBadFlags", xdr["void"]()], ["setOptionsInvalidInflation", xdr["void"]()], ["setOptionsCantChange", xdr["void"]()], ["setOptionsUnknownFlag", xdr["void"]()], ["setOptionsThresholdOutOfRange", xdr["void"]()], ["setOptionsBadSigner", xdr["void"]()], ["setOptionsInvalidHomeDomain", xdr["void"]()], ["setOptionsAuthRevocableRequired", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum ChangeTrustResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       CHANGE_TRUST_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       CHANGE_TRUST_MALFORMED = -1,     // bad input
  //       CHANGE_TRUST_NO_ISSUER = -2,     // could not find issuer
  //       CHANGE_TRUST_INVALID_LIMIT = -3, // cannot drop limit below balance
  //                                        // cannot create with a limit of 0
  //       CHANGE_TRUST_LOW_RESERVE =
  //           -4, // not enough funds to create a new trust line,
  //       CHANGE_TRUST_SELF_NOT_ALLOWED = -5,   // trusting self is not allowed
  //       CHANGE_TRUST_TRUST_LINE_MISSING = -6, // Asset trustline is missing for pool
  //       CHANGE_TRUST_CANNOT_DELETE =
  //           -7, // Asset trustline is still referenced in a pool
  //       CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES =
  //           -8 // Asset trustline is deauthorized
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[252]++;
  xdr["enum"]("ChangeTrustResultCode", {
    changeTrustSuccess: 0,
    changeTrustMalformed: -1,
    changeTrustNoIssuer: -2,
    changeTrustInvalidLimit: -3,
    changeTrustLowReserve: -4,
    changeTrustSelfNotAllowed: -5,
    changeTrustTrustLineMissing: -6,
    changeTrustCannotDelete: -7,
    changeTrustNotAuthMaintainLiabilities: -8
  });

  // === xdr source ============================================================
  //
  //   union ChangeTrustResult switch (ChangeTrustResultCode code)
  //   {
  //   case CHANGE_TRUST_SUCCESS:
  //       void;
  //   case CHANGE_TRUST_MALFORMED:
  //   case CHANGE_TRUST_NO_ISSUER:
  //   case CHANGE_TRUST_INVALID_LIMIT:
  //   case CHANGE_TRUST_LOW_RESERVE:
  //   case CHANGE_TRUST_SELF_NOT_ALLOWED:
  //   case CHANGE_TRUST_TRUST_LINE_MISSING:
  //   case CHANGE_TRUST_CANNOT_DELETE:
  //   case CHANGE_TRUST_NOT_AUTH_MAINTAIN_LIABILITIES:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[253]++;
  xdr.union("ChangeTrustResult", {
    switchOn: xdr.lookup("ChangeTrustResultCode"),
    switchName: "code",
    switches: [["changeTrustSuccess", xdr["void"]()], ["changeTrustMalformed", xdr["void"]()], ["changeTrustNoIssuer", xdr["void"]()], ["changeTrustInvalidLimit", xdr["void"]()], ["changeTrustLowReserve", xdr["void"]()], ["changeTrustSelfNotAllowed", xdr["void"]()], ["changeTrustTrustLineMissing", xdr["void"]()], ["changeTrustCannotDelete", xdr["void"]()], ["changeTrustNotAuthMaintainLiabilities", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum AllowTrustResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       ALLOW_TRUST_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       ALLOW_TRUST_MALFORMED = -1,     // asset is not ASSET_TYPE_ALPHANUM
  //       ALLOW_TRUST_NO_TRUST_LINE = -2, // trustor does not have a trustline
  //                                       // source account does not require trust
  //       ALLOW_TRUST_TRUST_NOT_REQUIRED = -3,
  //       ALLOW_TRUST_CANT_REVOKE = -4,      // source account can't revoke trust,
  //       ALLOW_TRUST_SELF_NOT_ALLOWED = -5, // trusting self is not allowed
  //       ALLOW_TRUST_LOW_RESERVE = -6       // claimable balances can't be created
  //                                          // on revoke due to low reserves
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[254]++;
  xdr["enum"]("AllowTrustResultCode", {
    allowTrustSuccess: 0,
    allowTrustMalformed: -1,
    allowTrustNoTrustLine: -2,
    allowTrustTrustNotRequired: -3,
    allowTrustCantRevoke: -4,
    allowTrustSelfNotAllowed: -5,
    allowTrustLowReserve: -6
  });

  // === xdr source ============================================================
  //
  //   union AllowTrustResult switch (AllowTrustResultCode code)
  //   {
  //   case ALLOW_TRUST_SUCCESS:
  //       void;
  //   case ALLOW_TRUST_MALFORMED:
  //   case ALLOW_TRUST_NO_TRUST_LINE:
  //   case ALLOW_TRUST_TRUST_NOT_REQUIRED:
  //   case ALLOW_TRUST_CANT_REVOKE:
  //   case ALLOW_TRUST_SELF_NOT_ALLOWED:
  //   case ALLOW_TRUST_LOW_RESERVE:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[255]++;
  xdr.union("AllowTrustResult", {
    switchOn: xdr.lookup("AllowTrustResultCode"),
    switchName: "code",
    switches: [["allowTrustSuccess", xdr["void"]()], ["allowTrustMalformed", xdr["void"]()], ["allowTrustNoTrustLine", xdr["void"]()], ["allowTrustTrustNotRequired", xdr["void"]()], ["allowTrustCantRevoke", xdr["void"]()], ["allowTrustSelfNotAllowed", xdr["void"]()], ["allowTrustLowReserve", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum AccountMergeResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       ACCOUNT_MERGE_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       ACCOUNT_MERGE_MALFORMED = -1,       // can't merge onto itself
  //       ACCOUNT_MERGE_NO_ACCOUNT = -2,      // destination does not exist
  //       ACCOUNT_MERGE_IMMUTABLE_SET = -3,   // source account has AUTH_IMMUTABLE set
  //       ACCOUNT_MERGE_HAS_SUB_ENTRIES = -4, // account has trust lines/offers
  //       ACCOUNT_MERGE_SEQNUM_TOO_FAR = -5,  // sequence number is over max allowed
  //       ACCOUNT_MERGE_DEST_FULL = -6,       // can't add source balance to
  //                                           // destination balance
  //       ACCOUNT_MERGE_IS_SPONSOR = -7       // can't merge account that is a sponsor
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[256]++;
  xdr["enum"]("AccountMergeResultCode", {
    accountMergeSuccess: 0,
    accountMergeMalformed: -1,
    accountMergeNoAccount: -2,
    accountMergeImmutableSet: -3,
    accountMergeHasSubEntries: -4,
    accountMergeSeqnumTooFar: -5,
    accountMergeDestFull: -6,
    accountMergeIsSponsor: -7
  });

  // === xdr source ============================================================
  //
  //   union AccountMergeResult switch (AccountMergeResultCode code)
  //   {
  //   case ACCOUNT_MERGE_SUCCESS:
  //       int64 sourceAccountBalance; // how much got transferred from source account
  //   case ACCOUNT_MERGE_MALFORMED:
  //   case ACCOUNT_MERGE_NO_ACCOUNT:
  //   case ACCOUNT_MERGE_IMMUTABLE_SET:
  //   case ACCOUNT_MERGE_HAS_SUB_ENTRIES:
  //   case ACCOUNT_MERGE_SEQNUM_TOO_FAR:
  //   case ACCOUNT_MERGE_DEST_FULL:
  //   case ACCOUNT_MERGE_IS_SPONSOR:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[257]++;
  xdr.union("AccountMergeResult", {
    switchOn: xdr.lookup("AccountMergeResultCode"),
    switchName: "code",
    switches: [["accountMergeSuccess", "sourceAccountBalance"], ["accountMergeMalformed", xdr["void"]()], ["accountMergeNoAccount", xdr["void"]()], ["accountMergeImmutableSet", xdr["void"]()], ["accountMergeHasSubEntries", xdr["void"]()], ["accountMergeSeqnumTooFar", xdr["void"]()], ["accountMergeDestFull", xdr["void"]()], ["accountMergeIsSponsor", xdr["void"]()]],
    arms: {
      sourceAccountBalance: xdr.lookup("Int64")
    }
  });

  // === xdr source ============================================================
  //
  //   enum InflationResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       INFLATION_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       INFLATION_NOT_TIME = -1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[258]++;
  xdr["enum"]("InflationResultCode", {
    inflationSuccess: 0,
    inflationNotTime: -1
  });

  // === xdr source ============================================================
  //
  //   struct InflationPayout // or use PaymentResultAtom to limit types?
  //   {
  //       AccountID destination;
  //       int64 amount;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[259]++;
  xdr.struct("InflationPayout", [["destination", xdr.lookup("AccountId")], ["amount", xdr.lookup("Int64")]]);

  // === xdr source ============================================================
  //
  //   union InflationResult switch (InflationResultCode code)
  //   {
  //   case INFLATION_SUCCESS:
  //       InflationPayout payouts<>;
  //   case INFLATION_NOT_TIME:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[260]++;
  xdr.union("InflationResult", {
    switchOn: xdr.lookup("InflationResultCode"),
    switchName: "code",
    switches: [["inflationSuccess", "payouts"], ["inflationNotTime", xdr["void"]()]],
    arms: {
      payouts: xdr.varArray(xdr.lookup("InflationPayout"), 2147483647)
    }
  });

  // === xdr source ============================================================
  //
  //   enum ManageDataResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       MANAGE_DATA_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       MANAGE_DATA_NOT_SUPPORTED_YET =
  //           -1, // The network hasn't moved to this protocol change yet
  //       MANAGE_DATA_NAME_NOT_FOUND =
  //           -2, // Trying to remove a Data Entry that isn't there
  //       MANAGE_DATA_LOW_RESERVE = -3, // not enough funds to create a new Data Entry
  //       MANAGE_DATA_INVALID_NAME = -4 // Name not a valid string
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[261]++;
  xdr["enum"]("ManageDataResultCode", {
    manageDataSuccess: 0,
    manageDataNotSupportedYet: -1,
    manageDataNameNotFound: -2,
    manageDataLowReserve: -3,
    manageDataInvalidName: -4
  });

  // === xdr source ============================================================
  //
  //   union ManageDataResult switch (ManageDataResultCode code)
  //   {
  //   case MANAGE_DATA_SUCCESS:
  //       void;
  //   case MANAGE_DATA_NOT_SUPPORTED_YET:
  //   case MANAGE_DATA_NAME_NOT_FOUND:
  //   case MANAGE_DATA_LOW_RESERVE:
  //   case MANAGE_DATA_INVALID_NAME:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[262]++;
  xdr.union("ManageDataResult", {
    switchOn: xdr.lookup("ManageDataResultCode"),
    switchName: "code",
    switches: [["manageDataSuccess", xdr["void"]()], ["manageDataNotSupportedYet", xdr["void"]()], ["manageDataNameNotFound", xdr["void"]()], ["manageDataLowReserve", xdr["void"]()], ["manageDataInvalidName", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum BumpSequenceResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       BUMP_SEQUENCE_SUCCESS = 0,
  //       // codes considered as "failure" for the operation
  //       BUMP_SEQUENCE_BAD_SEQ = -1 // `bumpTo` is not within bounds
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[263]++;
  xdr["enum"]("BumpSequenceResultCode", {
    bumpSequenceSuccess: 0,
    bumpSequenceBadSeq: -1
  });

  // === xdr source ============================================================
  //
  //   union BumpSequenceResult switch (BumpSequenceResultCode code)
  //   {
  //   case BUMP_SEQUENCE_SUCCESS:
  //       void;
  //   case BUMP_SEQUENCE_BAD_SEQ:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[264]++;
  xdr.union("BumpSequenceResult", {
    switchOn: xdr.lookup("BumpSequenceResultCode"),
    switchName: "code",
    switches: [["bumpSequenceSuccess", xdr["void"]()], ["bumpSequenceBadSeq", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum CreateClaimableBalanceResultCode
  //   {
  //       CREATE_CLAIMABLE_BALANCE_SUCCESS = 0,
  //       CREATE_CLAIMABLE_BALANCE_MALFORMED = -1,
  //       CREATE_CLAIMABLE_BALANCE_LOW_RESERVE = -2,
  //       CREATE_CLAIMABLE_BALANCE_NO_TRUST = -3,
  //       CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -4,
  //       CREATE_CLAIMABLE_BALANCE_UNDERFUNDED = -5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[265]++;
  xdr["enum"]("CreateClaimableBalanceResultCode", {
    createClaimableBalanceSuccess: 0,
    createClaimableBalanceMalformed: -1,
    createClaimableBalanceLowReserve: -2,
    createClaimableBalanceNoTrust: -3,
    createClaimableBalanceNotAuthorized: -4,
    createClaimableBalanceUnderfunded: -5
  });

  // === xdr source ============================================================
  //
  //   union CreateClaimableBalanceResult switch (
  //       CreateClaimableBalanceResultCode code)
  //   {
  //   case CREATE_CLAIMABLE_BALANCE_SUCCESS:
  //       ClaimableBalanceID balanceID;
  //   case CREATE_CLAIMABLE_BALANCE_MALFORMED:
  //   case CREATE_CLAIMABLE_BALANCE_LOW_RESERVE:
  //   case CREATE_CLAIMABLE_BALANCE_NO_TRUST:
  //   case CREATE_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
  //   case CREATE_CLAIMABLE_BALANCE_UNDERFUNDED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[266]++;
  xdr.union("CreateClaimableBalanceResult", {
    switchOn: xdr.lookup("CreateClaimableBalanceResultCode"),
    switchName: "code",
    switches: [["createClaimableBalanceSuccess", "balanceId"], ["createClaimableBalanceMalformed", xdr["void"]()], ["createClaimableBalanceLowReserve", xdr["void"]()], ["createClaimableBalanceNoTrust", xdr["void"]()], ["createClaimableBalanceNotAuthorized", xdr["void"]()], ["createClaimableBalanceUnderfunded", xdr["void"]()]],
    arms: {
      balanceId: xdr.lookup("ClaimableBalanceId")
    }
  });

  // === xdr source ============================================================
  //
  //   enum ClaimClaimableBalanceResultCode
  //   {
  //       CLAIM_CLAIMABLE_BALANCE_SUCCESS = 0,
  //       CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,
  //       CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM = -2,
  //       CLAIM_CLAIMABLE_BALANCE_LINE_FULL = -3,
  //       CLAIM_CLAIMABLE_BALANCE_NO_TRUST = -4,
  //       CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED = -5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[267]++;
  xdr["enum"]("ClaimClaimableBalanceResultCode", {
    claimClaimableBalanceSuccess: 0,
    claimClaimableBalanceDoesNotExist: -1,
    claimClaimableBalanceCannotClaim: -2,
    claimClaimableBalanceLineFull: -3,
    claimClaimableBalanceNoTrust: -4,
    claimClaimableBalanceNotAuthorized: -5
  });

  // === xdr source ============================================================
  //
  //   union ClaimClaimableBalanceResult switch (ClaimClaimableBalanceResultCode code)
  //   {
  //   case CLAIM_CLAIMABLE_BALANCE_SUCCESS:
  //       void;
  //   case CLAIM_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
  //   case CLAIM_CLAIMABLE_BALANCE_CANNOT_CLAIM:
  //   case CLAIM_CLAIMABLE_BALANCE_LINE_FULL:
  //   case CLAIM_CLAIMABLE_BALANCE_NO_TRUST:
  //   case CLAIM_CLAIMABLE_BALANCE_NOT_AUTHORIZED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[268]++;
  xdr.union("ClaimClaimableBalanceResult", {
    switchOn: xdr.lookup("ClaimClaimableBalanceResultCode"),
    switchName: "code",
    switches: [["claimClaimableBalanceSuccess", xdr["void"]()], ["claimClaimableBalanceDoesNotExist", xdr["void"]()], ["claimClaimableBalanceCannotClaim", xdr["void"]()], ["claimClaimableBalanceLineFull", xdr["void"]()], ["claimClaimableBalanceNoTrust", xdr["void"]()], ["claimClaimableBalanceNotAuthorized", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum BeginSponsoringFutureReservesResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED = -1,
  //       BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED = -2,
  //       BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE = -3
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[269]++;
  xdr["enum"]("BeginSponsoringFutureReservesResultCode", {
    beginSponsoringFutureReservesSuccess: 0,
    beginSponsoringFutureReservesMalformed: -1,
    beginSponsoringFutureReservesAlreadySponsored: -2,
    beginSponsoringFutureReservesRecursive: -3
  });

  // === xdr source ============================================================
  //
  //   union BeginSponsoringFutureReservesResult switch (
  //       BeginSponsoringFutureReservesResultCode code)
  //   {
  //   case BEGIN_SPONSORING_FUTURE_RESERVES_SUCCESS:
  //       void;
  //   case BEGIN_SPONSORING_FUTURE_RESERVES_MALFORMED:
  //   case BEGIN_SPONSORING_FUTURE_RESERVES_ALREADY_SPONSORED:
  //   case BEGIN_SPONSORING_FUTURE_RESERVES_RECURSIVE:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[270]++;
  xdr.union("BeginSponsoringFutureReservesResult", {
    switchOn: xdr.lookup("BeginSponsoringFutureReservesResultCode"),
    switchName: "code",
    switches: [["beginSponsoringFutureReservesSuccess", xdr["void"]()], ["beginSponsoringFutureReservesMalformed", xdr["void"]()], ["beginSponsoringFutureReservesAlreadySponsored", xdr["void"]()], ["beginSponsoringFutureReservesRecursive", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum EndSponsoringFutureReservesResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       END_SPONSORING_FUTURE_RESERVES_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED = -1
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[271]++;
  xdr["enum"]("EndSponsoringFutureReservesResultCode", {
    endSponsoringFutureReservesSuccess: 0,
    endSponsoringFutureReservesNotSponsored: -1
  });

  // === xdr source ============================================================
  //
  //   union EndSponsoringFutureReservesResult switch (
  //       EndSponsoringFutureReservesResultCode code)
  //   {
  //   case END_SPONSORING_FUTURE_RESERVES_SUCCESS:
  //       void;
  //   case END_SPONSORING_FUTURE_RESERVES_NOT_SPONSORED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[272]++;
  xdr.union("EndSponsoringFutureReservesResult", {
    switchOn: xdr.lookup("EndSponsoringFutureReservesResultCode"),
    switchName: "code",
    switches: [["endSponsoringFutureReservesSuccess", xdr["void"]()], ["endSponsoringFutureReservesNotSponsored", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum RevokeSponsorshipResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       REVOKE_SPONSORSHIP_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       REVOKE_SPONSORSHIP_DOES_NOT_EXIST = -1,
  //       REVOKE_SPONSORSHIP_NOT_SPONSOR = -2,
  //       REVOKE_SPONSORSHIP_LOW_RESERVE = -3,
  //       REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE = -4,
  //       REVOKE_SPONSORSHIP_MALFORMED = -5
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[273]++;
  xdr["enum"]("RevokeSponsorshipResultCode", {
    revokeSponsorshipSuccess: 0,
    revokeSponsorshipDoesNotExist: -1,
    revokeSponsorshipNotSponsor: -2,
    revokeSponsorshipLowReserve: -3,
    revokeSponsorshipOnlyTransferable: -4,
    revokeSponsorshipMalformed: -5
  });

  // === xdr source ============================================================
  //
  //   union RevokeSponsorshipResult switch (RevokeSponsorshipResultCode code)
  //   {
  //   case REVOKE_SPONSORSHIP_SUCCESS:
  //       void;
  //   case REVOKE_SPONSORSHIP_DOES_NOT_EXIST:
  //   case REVOKE_SPONSORSHIP_NOT_SPONSOR:
  //   case REVOKE_SPONSORSHIP_LOW_RESERVE:
  //   case REVOKE_SPONSORSHIP_ONLY_TRANSFERABLE:
  //   case REVOKE_SPONSORSHIP_MALFORMED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[274]++;
  xdr.union("RevokeSponsorshipResult", {
    switchOn: xdr.lookup("RevokeSponsorshipResultCode"),
    switchName: "code",
    switches: [["revokeSponsorshipSuccess", xdr["void"]()], ["revokeSponsorshipDoesNotExist", xdr["void"]()], ["revokeSponsorshipNotSponsor", xdr["void"]()], ["revokeSponsorshipLowReserve", xdr["void"]()], ["revokeSponsorshipOnlyTransferable", xdr["void"]()], ["revokeSponsorshipMalformed", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum ClawbackResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       CLAWBACK_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       CLAWBACK_MALFORMED = -1,
  //       CLAWBACK_NOT_CLAWBACK_ENABLED = -2,
  //       CLAWBACK_NO_TRUST = -3,
  //       CLAWBACK_UNDERFUNDED = -4
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[275]++;
  xdr["enum"]("ClawbackResultCode", {
    clawbackSuccess: 0,
    clawbackMalformed: -1,
    clawbackNotClawbackEnabled: -2,
    clawbackNoTrust: -3,
    clawbackUnderfunded: -4
  });

  // === xdr source ============================================================
  //
  //   union ClawbackResult switch (ClawbackResultCode code)
  //   {
  //   case CLAWBACK_SUCCESS:
  //       void;
  //   case CLAWBACK_MALFORMED:
  //   case CLAWBACK_NOT_CLAWBACK_ENABLED:
  //   case CLAWBACK_NO_TRUST:
  //   case CLAWBACK_UNDERFUNDED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[276]++;
  xdr.union("ClawbackResult", {
    switchOn: xdr.lookup("ClawbackResultCode"),
    switchName: "code",
    switches: [["clawbackSuccess", xdr["void"]()], ["clawbackMalformed", xdr["void"]()], ["clawbackNotClawbackEnabled", xdr["void"]()], ["clawbackNoTrust", xdr["void"]()], ["clawbackUnderfunded", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum ClawbackClaimableBalanceResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       CLAWBACK_CLAIMABLE_BALANCE_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST = -1,
  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER = -2,
  //       CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED = -3
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[277]++;
  xdr["enum"]("ClawbackClaimableBalanceResultCode", {
    clawbackClaimableBalanceSuccess: 0,
    clawbackClaimableBalanceDoesNotExist: -1,
    clawbackClaimableBalanceNotIssuer: -2,
    clawbackClaimableBalanceNotClawbackEnabled: -3
  });

  // === xdr source ============================================================
  //
  //   union ClawbackClaimableBalanceResult switch (
  //       ClawbackClaimableBalanceResultCode code)
  //   {
  //   case CLAWBACK_CLAIMABLE_BALANCE_SUCCESS:
  //       void;
  //   case CLAWBACK_CLAIMABLE_BALANCE_DOES_NOT_EXIST:
  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_ISSUER:
  //   case CLAWBACK_CLAIMABLE_BALANCE_NOT_CLAWBACK_ENABLED:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[278]++;
  xdr.union("ClawbackClaimableBalanceResult", {
    switchOn: xdr.lookup("ClawbackClaimableBalanceResultCode"),
    switchName: "code",
    switches: [["clawbackClaimableBalanceSuccess", xdr["void"]()], ["clawbackClaimableBalanceDoesNotExist", xdr["void"]()], ["clawbackClaimableBalanceNotIssuer", xdr["void"]()], ["clawbackClaimableBalanceNotClawbackEnabled", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum SetTrustLineFlagsResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       SET_TRUST_LINE_FLAGS_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       SET_TRUST_LINE_FLAGS_MALFORMED = -1,
  //       SET_TRUST_LINE_FLAGS_NO_TRUST_LINE = -2,
  //       SET_TRUST_LINE_FLAGS_CANT_REVOKE = -3,
  //       SET_TRUST_LINE_FLAGS_INVALID_STATE = -4,
  //       SET_TRUST_LINE_FLAGS_LOW_RESERVE = -5 // claimable balances can't be created
  //                                             // on revoke due to low reserves
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[279]++;
  xdr["enum"]("SetTrustLineFlagsResultCode", {
    setTrustLineFlagsSuccess: 0,
    setTrustLineFlagsMalformed: -1,
    setTrustLineFlagsNoTrustLine: -2,
    setTrustLineFlagsCantRevoke: -3,
    setTrustLineFlagsInvalidState: -4,
    setTrustLineFlagsLowReserve: -5
  });

  // === xdr source ============================================================
  //
  //   union SetTrustLineFlagsResult switch (SetTrustLineFlagsResultCode code)
  //   {
  //   case SET_TRUST_LINE_FLAGS_SUCCESS:
  //       void;
  //   case SET_TRUST_LINE_FLAGS_MALFORMED:
  //   case SET_TRUST_LINE_FLAGS_NO_TRUST_LINE:
  //   case SET_TRUST_LINE_FLAGS_CANT_REVOKE:
  //   case SET_TRUST_LINE_FLAGS_INVALID_STATE:
  //   case SET_TRUST_LINE_FLAGS_LOW_RESERVE:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[280]++;
  xdr.union("SetTrustLineFlagsResult", {
    switchOn: xdr.lookup("SetTrustLineFlagsResultCode"),
    switchName: "code",
    switches: [["setTrustLineFlagsSuccess", xdr["void"]()], ["setTrustLineFlagsMalformed", xdr["void"]()], ["setTrustLineFlagsNoTrustLine", xdr["void"]()], ["setTrustLineFlagsCantRevoke", xdr["void"]()], ["setTrustLineFlagsInvalidState", xdr["void"]()], ["setTrustLineFlagsLowReserve", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum LiquidityPoolDepositResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       LIQUIDITY_POOL_DEPOSIT_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       LIQUIDITY_POOL_DEPOSIT_MALFORMED = -1,      // bad input
  //       LIQUIDITY_POOL_DEPOSIT_NO_TRUST = -2,       // no trust line for one of the
  //                                                   // assets
  //       LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED = -3, // not authorized for one of the
  //                                                   // assets
  //       LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED = -4,    // not enough balance for one of
  //                                                   // the assets
  //       LIQUIDITY_POOL_DEPOSIT_LINE_FULL = -5,      // pool share trust line doesn't
  //                                                   // have sufficient limit
  //       LIQUIDITY_POOL_DEPOSIT_BAD_PRICE = -6,      // deposit price outside bounds
  //       LIQUIDITY_POOL_DEPOSIT_POOL_FULL = -7       // pool reserves are full
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[281]++;
  xdr["enum"]("LiquidityPoolDepositResultCode", {
    liquidityPoolDepositSuccess: 0,
    liquidityPoolDepositMalformed: -1,
    liquidityPoolDepositNoTrust: -2,
    liquidityPoolDepositNotAuthorized: -3,
    liquidityPoolDepositUnderfunded: -4,
    liquidityPoolDepositLineFull: -5,
    liquidityPoolDepositBadPrice: -6,
    liquidityPoolDepositPoolFull: -7
  });

  // === xdr source ============================================================
  //
  //   union LiquidityPoolDepositResult switch (LiquidityPoolDepositResultCode code)
  //   {
  //   case LIQUIDITY_POOL_DEPOSIT_SUCCESS:
  //       void;
  //   case LIQUIDITY_POOL_DEPOSIT_MALFORMED:
  //   case LIQUIDITY_POOL_DEPOSIT_NO_TRUST:
  //   case LIQUIDITY_POOL_DEPOSIT_NOT_AUTHORIZED:
  //   case LIQUIDITY_POOL_DEPOSIT_UNDERFUNDED:
  //   case LIQUIDITY_POOL_DEPOSIT_LINE_FULL:
  //   case LIQUIDITY_POOL_DEPOSIT_BAD_PRICE:
  //   case LIQUIDITY_POOL_DEPOSIT_POOL_FULL:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[282]++;
  xdr.union("LiquidityPoolDepositResult", {
    switchOn: xdr.lookup("LiquidityPoolDepositResultCode"),
    switchName: "code",
    switches: [["liquidityPoolDepositSuccess", xdr["void"]()], ["liquidityPoolDepositMalformed", xdr["void"]()], ["liquidityPoolDepositNoTrust", xdr["void"]()], ["liquidityPoolDepositNotAuthorized", xdr["void"]()], ["liquidityPoolDepositUnderfunded", xdr["void"]()], ["liquidityPoolDepositLineFull", xdr["void"]()], ["liquidityPoolDepositBadPrice", xdr["void"]()], ["liquidityPoolDepositPoolFull", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum LiquidityPoolWithdrawResultCode
  //   {
  //       // codes considered as "success" for the operation
  //       LIQUIDITY_POOL_WITHDRAW_SUCCESS = 0,
  //   
  //       // codes considered as "failure" for the operation
  //       LIQUIDITY_POOL_WITHDRAW_MALFORMED = -1,    // bad input
  //       LIQUIDITY_POOL_WITHDRAW_NO_TRUST = -2,     // no trust line for one of the
  //                                                  // assets
  //       LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED = -3,  // not enough balance of the
  //                                                  // pool share
  //       LIQUIDITY_POOL_WITHDRAW_LINE_FULL = -4,    // would go above limit for one
  //                                                  // of the assets
  //       LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM = -5 // didn't withdraw enough
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[283]++;
  xdr["enum"]("LiquidityPoolWithdrawResultCode", {
    liquidityPoolWithdrawSuccess: 0,
    liquidityPoolWithdrawMalformed: -1,
    liquidityPoolWithdrawNoTrust: -2,
    liquidityPoolWithdrawUnderfunded: -3,
    liquidityPoolWithdrawLineFull: -4,
    liquidityPoolWithdrawUnderMinimum: -5
  });

  // === xdr source ============================================================
  //
  //   union LiquidityPoolWithdrawResult switch (LiquidityPoolWithdrawResultCode code)
  //   {
  //   case LIQUIDITY_POOL_WITHDRAW_SUCCESS:
  //       void;
  //   case LIQUIDITY_POOL_WITHDRAW_MALFORMED:
  //   case LIQUIDITY_POOL_WITHDRAW_NO_TRUST:
  //   case LIQUIDITY_POOL_WITHDRAW_UNDERFUNDED:
  //   case LIQUIDITY_POOL_WITHDRAW_LINE_FULL:
  //   case LIQUIDITY_POOL_WITHDRAW_UNDER_MINIMUM:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[284]++;
  xdr.union("LiquidityPoolWithdrawResult", {
    switchOn: xdr.lookup("LiquidityPoolWithdrawResultCode"),
    switchName: "code",
    switches: [["liquidityPoolWithdrawSuccess", xdr["void"]()], ["liquidityPoolWithdrawMalformed", xdr["void"]()], ["liquidityPoolWithdrawNoTrust", xdr["void"]()], ["liquidityPoolWithdrawUnderfunded", xdr["void"]()], ["liquidityPoolWithdrawLineFull", xdr["void"]()], ["liquidityPoolWithdrawUnderMinimum", xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum OperationResultCode
  //   {
  //       opINNER = 0, // inner object result is valid
  //   
  //       opBAD_AUTH = -1,            // too few valid signatures / wrong network
  //       opNO_ACCOUNT = -2,          // source account was not found
  //       opNOT_SUPPORTED = -3,       // operation not supported at this time
  //       opTOO_MANY_SUBENTRIES = -4, // max number of subentries already reached
  //       opEXCEEDED_WORK_LIMIT = -5, // operation did too much work
  //       opTOO_MANY_SPONSORING = -6  // account is sponsoring too many entries
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[285]++;
  xdr["enum"]("OperationResultCode", {
    opInner: 0,
    opBadAuth: -1,
    opNoAccount: -2,
    opNotSupported: -3,
    opTooManySubentries: -4,
    opExceededWorkLimit: -5,
    opTooManySponsoring: -6
  });

  // === xdr source ============================================================
  //
  //   union switch (OperationType type)
  //       {
  //       case CREATE_ACCOUNT:
  //           CreateAccountResult createAccountResult;
  //       case PAYMENT:
  //           PaymentResult paymentResult;
  //       case PATH_PAYMENT_STRICT_RECEIVE:
  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
  //       case MANAGE_SELL_OFFER:
  //           ManageSellOfferResult manageSellOfferResult;
  //       case CREATE_PASSIVE_SELL_OFFER:
  //           ManageSellOfferResult createPassiveSellOfferResult;
  //       case SET_OPTIONS:
  //           SetOptionsResult setOptionsResult;
  //       case CHANGE_TRUST:
  //           ChangeTrustResult changeTrustResult;
  //       case ALLOW_TRUST:
  //           AllowTrustResult allowTrustResult;
  //       case ACCOUNT_MERGE:
  //           AccountMergeResult accountMergeResult;
  //       case INFLATION:
  //           InflationResult inflationResult;
  //       case MANAGE_DATA:
  //           ManageDataResult manageDataResult;
  //       case BUMP_SEQUENCE:
  //           BumpSequenceResult bumpSeqResult;
  //       case MANAGE_BUY_OFFER:
  //           ManageBuyOfferResult manageBuyOfferResult;
  //       case PATH_PAYMENT_STRICT_SEND:
  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;
  //       case CREATE_CLAIMABLE_BALANCE:
  //           CreateClaimableBalanceResult createClaimableBalanceResult;
  //       case CLAIM_CLAIMABLE_BALANCE:
  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;
  //       case BEGIN_SPONSORING_FUTURE_RESERVES:
  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
  //       case END_SPONSORING_FUTURE_RESERVES:
  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
  //       case REVOKE_SPONSORSHIP:
  //           RevokeSponsorshipResult revokeSponsorshipResult;
  //       case CLAWBACK:
  //           ClawbackResult clawbackResult;
  //       case CLAWBACK_CLAIMABLE_BALANCE:
  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
  //       case SET_TRUST_LINE_FLAGS:
  //           SetTrustLineFlagsResult setTrustLineFlagsResult;
  //       case LIQUIDITY_POOL_DEPOSIT:
  //           LiquidityPoolDepositResult liquidityPoolDepositResult;
  //       case LIQUIDITY_POOL_WITHDRAW:
  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[286]++;
  xdr.union("OperationResultTr", {
    switchOn: xdr.lookup("OperationType"),
    switchName: "type",
    switches: [["createAccount", "createAccountResult"], ["payment", "paymentResult"], ["pathPaymentStrictReceive", "pathPaymentStrictReceiveResult"], ["manageSellOffer", "manageSellOfferResult"], ["createPassiveSellOffer", "createPassiveSellOfferResult"], ["setOptions", "setOptionsResult"], ["changeTrust", "changeTrustResult"], ["allowTrust", "allowTrustResult"], ["accountMerge", "accountMergeResult"], ["inflation", "inflationResult"], ["manageData", "manageDataResult"], ["bumpSequence", "bumpSeqResult"], ["manageBuyOffer", "manageBuyOfferResult"], ["pathPaymentStrictSend", "pathPaymentStrictSendResult"], ["createClaimableBalance", "createClaimableBalanceResult"], ["claimClaimableBalance", "claimClaimableBalanceResult"], ["beginSponsoringFutureReserves", "beginSponsoringFutureReservesResult"], ["endSponsoringFutureReserves", "endSponsoringFutureReservesResult"], ["revokeSponsorship", "revokeSponsorshipResult"], ["clawback", "clawbackResult"], ["clawbackClaimableBalance", "clawbackClaimableBalanceResult"], ["setTrustLineFlags", "setTrustLineFlagsResult"], ["liquidityPoolDeposit", "liquidityPoolDepositResult"], ["liquidityPoolWithdraw", "liquidityPoolWithdrawResult"]],
    arms: {
      createAccountResult: xdr.lookup("CreateAccountResult"),
      paymentResult: xdr.lookup("PaymentResult"),
      pathPaymentStrictReceiveResult: xdr.lookup("PathPaymentStrictReceiveResult"),
      manageSellOfferResult: xdr.lookup("ManageSellOfferResult"),
      createPassiveSellOfferResult: xdr.lookup("ManageSellOfferResult"),
      setOptionsResult: xdr.lookup("SetOptionsResult"),
      changeTrustResult: xdr.lookup("ChangeTrustResult"),
      allowTrustResult: xdr.lookup("AllowTrustResult"),
      accountMergeResult: xdr.lookup("AccountMergeResult"),
      inflationResult: xdr.lookup("InflationResult"),
      manageDataResult: xdr.lookup("ManageDataResult"),
      bumpSeqResult: xdr.lookup("BumpSequenceResult"),
      manageBuyOfferResult: xdr.lookup("ManageBuyOfferResult"),
      pathPaymentStrictSendResult: xdr.lookup("PathPaymentStrictSendResult"),
      createClaimableBalanceResult: xdr.lookup("CreateClaimableBalanceResult"),
      claimClaimableBalanceResult: xdr.lookup("ClaimClaimableBalanceResult"),
      beginSponsoringFutureReservesResult: xdr.lookup("BeginSponsoringFutureReservesResult"),
      endSponsoringFutureReservesResult: xdr.lookup("EndSponsoringFutureReservesResult"),
      revokeSponsorshipResult: xdr.lookup("RevokeSponsorshipResult"),
      clawbackResult: xdr.lookup("ClawbackResult"),
      clawbackClaimableBalanceResult: xdr.lookup("ClawbackClaimableBalanceResult"),
      setTrustLineFlagsResult: xdr.lookup("SetTrustLineFlagsResult"),
      liquidityPoolDepositResult: xdr.lookup("LiquidityPoolDepositResult"),
      liquidityPoolWithdrawResult: xdr.lookup("LiquidityPoolWithdrawResult")
    }
  });

  // === xdr source ============================================================
  //
  //   union OperationResult switch (OperationResultCode code)
  //   {
  //   case opINNER:
  //       union switch (OperationType type)
  //       {
  //       case CREATE_ACCOUNT:
  //           CreateAccountResult createAccountResult;
  //       case PAYMENT:
  //           PaymentResult paymentResult;
  //       case PATH_PAYMENT_STRICT_RECEIVE:
  //           PathPaymentStrictReceiveResult pathPaymentStrictReceiveResult;
  //       case MANAGE_SELL_OFFER:
  //           ManageSellOfferResult manageSellOfferResult;
  //       case CREATE_PASSIVE_SELL_OFFER:
  //           ManageSellOfferResult createPassiveSellOfferResult;
  //       case SET_OPTIONS:
  //           SetOptionsResult setOptionsResult;
  //       case CHANGE_TRUST:
  //           ChangeTrustResult changeTrustResult;
  //       case ALLOW_TRUST:
  //           AllowTrustResult allowTrustResult;
  //       case ACCOUNT_MERGE:
  //           AccountMergeResult accountMergeResult;
  //       case INFLATION:
  //           InflationResult inflationResult;
  //       case MANAGE_DATA:
  //           ManageDataResult manageDataResult;
  //       case BUMP_SEQUENCE:
  //           BumpSequenceResult bumpSeqResult;
  //       case MANAGE_BUY_OFFER:
  //           ManageBuyOfferResult manageBuyOfferResult;
  //       case PATH_PAYMENT_STRICT_SEND:
  //           PathPaymentStrictSendResult pathPaymentStrictSendResult;
  //       case CREATE_CLAIMABLE_BALANCE:
  //           CreateClaimableBalanceResult createClaimableBalanceResult;
  //       case CLAIM_CLAIMABLE_BALANCE:
  //           ClaimClaimableBalanceResult claimClaimableBalanceResult;
  //       case BEGIN_SPONSORING_FUTURE_RESERVES:
  //           BeginSponsoringFutureReservesResult beginSponsoringFutureReservesResult;
  //       case END_SPONSORING_FUTURE_RESERVES:
  //           EndSponsoringFutureReservesResult endSponsoringFutureReservesResult;
  //       case REVOKE_SPONSORSHIP:
  //           RevokeSponsorshipResult revokeSponsorshipResult;
  //       case CLAWBACK:
  //           ClawbackResult clawbackResult;
  //       case CLAWBACK_CLAIMABLE_BALANCE:
  //           ClawbackClaimableBalanceResult clawbackClaimableBalanceResult;
  //       case SET_TRUST_LINE_FLAGS:
  //           SetTrustLineFlagsResult setTrustLineFlagsResult;
  //       case LIQUIDITY_POOL_DEPOSIT:
  //           LiquidityPoolDepositResult liquidityPoolDepositResult;
  //       case LIQUIDITY_POOL_WITHDRAW:
  //           LiquidityPoolWithdrawResult liquidityPoolWithdrawResult;
  //       }
  //       tr;
  //   case opBAD_AUTH:
  //   case opNO_ACCOUNT:
  //   case opNOT_SUPPORTED:
  //   case opTOO_MANY_SUBENTRIES:
  //   case opEXCEEDED_WORK_LIMIT:
  //   case opTOO_MANY_SPONSORING:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[287]++;
  xdr.union("OperationResult", {
    switchOn: xdr.lookup("OperationResultCode"),
    switchName: "code",
    switches: [["opInner", "tr"], ["opBadAuth", xdr["void"]()], ["opNoAccount", xdr["void"]()], ["opNotSupported", xdr["void"]()], ["opTooManySubentries", xdr["void"]()], ["opExceededWorkLimit", xdr["void"]()], ["opTooManySponsoring", xdr["void"]()]],
    arms: {
      tr: xdr.lookup("OperationResultTr")
    }
  });

  // === xdr source ============================================================
  //
  //   enum TransactionResultCode
  //   {
  //       txFEE_BUMP_INNER_SUCCESS = 1, // fee bump inner transaction succeeded
  //       txSUCCESS = 0,                // all operations succeeded
  //   
  //       txFAILED = -1, // one of the operations failed (none were applied)
  //   
  //       txTOO_EARLY = -2,         // ledger closeTime before minTime
  //       txTOO_LATE = -3,          // ledger closeTime after maxTime
  //       txMISSING_OPERATION = -4, // no operation was specified
  //       txBAD_SEQ = -5,           // sequence number does not match source account
  //   
  //       txBAD_AUTH = -6,             // too few valid signatures / wrong network
  //       txINSUFFICIENT_BALANCE = -7, // fee would bring account below reserve
  //       txNO_ACCOUNT = -8,           // source account not found
  //       txINSUFFICIENT_FEE = -9,     // fee is too small
  //       txBAD_AUTH_EXTRA = -10,      // unused signatures attached to transaction
  //       txINTERNAL_ERROR = -11,      // an unknown error occurred
  //   
  //       txNOT_SUPPORTED = -12,         // transaction type not supported
  //       txFEE_BUMP_INNER_FAILED = -13, // fee bump inner transaction failed
  //       txBAD_SPONSORSHIP = -14,       // sponsorship not confirmed
  //       txBAD_MIN_SEQ_AGE_OR_GAP =
  //           -15, // minSeqAge or minSeqLedgerGap conditions not met
  //       txMALFORMED = -16 // precondition is invalid
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[288]++;
  xdr["enum"]("TransactionResultCode", {
    txFeeBumpInnerSuccess: 1,
    txSuccess: 0,
    txFailed: -1,
    txTooEarly: -2,
    txTooLate: -3,
    txMissingOperation: -4,
    txBadSeq: -5,
    txBadAuth: -6,
    txInsufficientBalance: -7,
    txNoAccount: -8,
    txInsufficientFee: -9,
    txBadAuthExtra: -10,
    txInternalError: -11,
    txNotSupported: -12,
    txFeeBumpInnerFailed: -13,
    txBadSponsorship: -14,
    txBadMinSeqAgeOrGap: -15,
    txMalformed: -16
  });

  // === xdr source ============================================================
  //
  //   union switch (TransactionResultCode code)
  //       {
  //       // txFEE_BUMP_INNER_SUCCESS is not included
  //       case txSUCCESS:
  //       case txFAILED:
  //           OperationResult results<>;
  //       case txTOO_EARLY:
  //       case txTOO_LATE:
  //       case txMISSING_OPERATION:
  //       case txBAD_SEQ:
  //       case txBAD_AUTH:
  //       case txINSUFFICIENT_BALANCE:
  //       case txNO_ACCOUNT:
  //       case txINSUFFICIENT_FEE:
  //       case txBAD_AUTH_EXTRA:
  //       case txINTERNAL_ERROR:
  //       case txNOT_SUPPORTED:
  //       // txFEE_BUMP_INNER_FAILED is not included
  //       case txBAD_SPONSORSHIP:
  //       case txBAD_MIN_SEQ_AGE_OR_GAP:
  //       case txMALFORMED:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[289]++;
  xdr.union("InnerTransactionResultResult", {
    switchOn: xdr.lookup("TransactionResultCode"),
    switchName: "code",
    switches: [["txSuccess", "results"], ["txFailed", "results"], ["txTooEarly", xdr["void"]()], ["txTooLate", xdr["void"]()], ["txMissingOperation", xdr["void"]()], ["txBadSeq", xdr["void"]()], ["txBadAuth", xdr["void"]()], ["txInsufficientBalance", xdr["void"]()], ["txNoAccount", xdr["void"]()], ["txInsufficientFee", xdr["void"]()], ["txBadAuthExtra", xdr["void"]()], ["txInternalError", xdr["void"]()], ["txNotSupported", xdr["void"]()], ["txBadSponsorship", xdr["void"]()], ["txBadMinSeqAgeOrGap", xdr["void"]()], ["txMalformed", xdr["void"]()]],
    arms: {
      results: xdr.varArray(xdr.lookup("OperationResult"), 2147483647)
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[290]++;
  xdr.union("InnerTransactionResultExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct InnerTransactionResult
  //   {
  //       // Always 0. Here for binary compatibility.
  //       int64 feeCharged;
  //   
  //       union switch (TransactionResultCode code)
  //       {
  //       // txFEE_BUMP_INNER_SUCCESS is not included
  //       case txSUCCESS:
  //       case txFAILED:
  //           OperationResult results<>;
  //       case txTOO_EARLY:
  //       case txTOO_LATE:
  //       case txMISSING_OPERATION:
  //       case txBAD_SEQ:
  //       case txBAD_AUTH:
  //       case txINSUFFICIENT_BALANCE:
  //       case txNO_ACCOUNT:
  //       case txINSUFFICIENT_FEE:
  //       case txBAD_AUTH_EXTRA:
  //       case txINTERNAL_ERROR:
  //       case txNOT_SUPPORTED:
  //       // txFEE_BUMP_INNER_FAILED is not included
  //       case txBAD_SPONSORSHIP:
  //       case txBAD_MIN_SEQ_AGE_OR_GAP:
  //       case txMALFORMED:
  //           void;
  //       }
  //       result;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[291]++;
  xdr.struct("InnerTransactionResult", [["feeCharged", xdr.lookup("Int64")], ["result", xdr.lookup("InnerTransactionResultResult")], ["ext", xdr.lookup("InnerTransactionResultExt")]]);

  // === xdr source ============================================================
  //
  //   struct InnerTransactionResultPair
  //   {
  //       Hash transactionHash;          // hash of the inner transaction
  //       InnerTransactionResult result; // result for the inner transaction
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[292]++;
  xdr.struct("InnerTransactionResultPair", [["transactionHash", xdr.lookup("Hash")], ["result", xdr.lookup("InnerTransactionResult")]]);

  // === xdr source ============================================================
  //
  //   union switch (TransactionResultCode code)
  //       {
  //       case txFEE_BUMP_INNER_SUCCESS:
  //       case txFEE_BUMP_INNER_FAILED:
  //           InnerTransactionResultPair innerResultPair;
  //       case txSUCCESS:
  //       case txFAILED:
  //           OperationResult results<>;
  //       case txTOO_EARLY:
  //       case txTOO_LATE:
  //       case txMISSING_OPERATION:
  //       case txBAD_SEQ:
  //       case txBAD_AUTH:
  //       case txINSUFFICIENT_BALANCE:
  //       case txNO_ACCOUNT:
  //       case txINSUFFICIENT_FEE:
  //       case txBAD_AUTH_EXTRA:
  //       case txINTERNAL_ERROR:
  //       case txNOT_SUPPORTED:
  //       // case txFEE_BUMP_INNER_FAILED: handled above
  //       case txBAD_SPONSORSHIP:
  //       case txBAD_MIN_SEQ_AGE_OR_GAP:
  //       case txMALFORMED:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[293]++;
  xdr.union("TransactionResultResult", {
    switchOn: xdr.lookup("TransactionResultCode"),
    switchName: "code",
    switches: [["txFeeBumpInnerSuccess", "innerResultPair"], ["txFeeBumpInnerFailed", "innerResultPair"], ["txSuccess", "results"], ["txFailed", "results"], ["txTooEarly", xdr["void"]()], ["txTooLate", xdr["void"]()], ["txMissingOperation", xdr["void"]()], ["txBadSeq", xdr["void"]()], ["txBadAuth", xdr["void"]()], ["txInsufficientBalance", xdr["void"]()], ["txNoAccount", xdr["void"]()], ["txInsufficientFee", xdr["void"]()], ["txBadAuthExtra", xdr["void"]()], ["txInternalError", xdr["void"]()], ["txNotSupported", xdr["void"]()], ["txBadSponsorship", xdr["void"]()], ["txBadMinSeqAgeOrGap", xdr["void"]()], ["txMalformed", xdr["void"]()]],
    arms: {
      innerResultPair: xdr.lookup("InnerTransactionResultPair"),
      results: xdr.varArray(xdr.lookup("OperationResult"), 2147483647)
    }
  });

  // === xdr source ============================================================
  //
  //   union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[294]++;
  xdr.union("TransactionResultExt", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   struct TransactionResult
  //   {
  //       int64 feeCharged; // actual fee charged for the transaction
  //   
  //       union switch (TransactionResultCode code)
  //       {
  //       case txFEE_BUMP_INNER_SUCCESS:
  //       case txFEE_BUMP_INNER_FAILED:
  //           InnerTransactionResultPair innerResultPair;
  //       case txSUCCESS:
  //       case txFAILED:
  //           OperationResult results<>;
  //       case txTOO_EARLY:
  //       case txTOO_LATE:
  //       case txMISSING_OPERATION:
  //       case txBAD_SEQ:
  //       case txBAD_AUTH:
  //       case txINSUFFICIENT_BALANCE:
  //       case txNO_ACCOUNT:
  //       case txINSUFFICIENT_FEE:
  //       case txBAD_AUTH_EXTRA:
  //       case txINTERNAL_ERROR:
  //       case txNOT_SUPPORTED:
  //       // case txFEE_BUMP_INNER_FAILED: handled above
  //       case txBAD_SPONSORSHIP:
  //       case txBAD_MIN_SEQ_AGE_OR_GAP:
  //       case txMALFORMED:
  //           void;
  //       }
  //       result;
  //   
  //       // reserved for future use
  //       union switch (int v)
  //       {
  //       case 0:
  //           void;
  //       }
  //       ext;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[295]++;
  xdr.struct("TransactionResult", [["feeCharged", xdr.lookup("Int64")], ["result", xdr.lookup("TransactionResultResult")], ["ext", xdr.lookup("TransactionResultExt")]]);

  // === xdr source ============================================================
  //
  //   typedef opaque Hash[32];
  //
  // ===========================================================================
  cov_1racd7g41m().s[296]++;
  xdr.typedef("Hash", xdr.opaque(32));

  // === xdr source ============================================================
  //
  //   typedef opaque uint256[32];
  //
  // ===========================================================================
  cov_1racd7g41m().s[297]++;
  xdr.typedef("Uint256", xdr.opaque(32));

  // === xdr source ============================================================
  //
  //   typedef unsigned int uint32;
  //
  // ===========================================================================
  cov_1racd7g41m().s[298]++;
  xdr.typedef("Uint32", xdr.uint());

  // === xdr source ============================================================
  //
  //   typedef int int32;
  //
  // ===========================================================================
  cov_1racd7g41m().s[299]++;
  xdr.typedef("Int32", xdr["int"]());

  // === xdr source ============================================================
  //
  //   typedef unsigned hyper uint64;
  //
  // ===========================================================================
  cov_1racd7g41m().s[300]++;
  xdr.typedef("Uint64", xdr.uhyper());

  // === xdr source ============================================================
  //
  //   typedef hyper int64;
  //
  // ===========================================================================
  cov_1racd7g41m().s[301]++;
  xdr.typedef("Int64", xdr.hyper());

  // === xdr source ============================================================
  //
  //   union ExtensionPoint switch (int v)
  //   {
  //   case 0:
  //       void;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[302]++;
  xdr.union("ExtensionPoint", {
    switchOn: xdr["int"](),
    switchName: "v",
    switches: [[0, xdr["void"]()]],
    arms: {}
  });

  // === xdr source ============================================================
  //
  //   enum CryptoKeyType
  //   {
  //       KEY_TYPE_ED25519 = 0,
  //       KEY_TYPE_PRE_AUTH_TX = 1,
  //       KEY_TYPE_HASH_X = 2,
  //       KEY_TYPE_ED25519_SIGNED_PAYLOAD = 3,
  //       // MUXED enum values for supported type are derived from the enum values
  //       // above by ORing them with 0x100
  //       KEY_TYPE_MUXED_ED25519 = 0x100
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[303]++;
  xdr["enum"]("CryptoKeyType", {
    keyTypeEd25519: 0,
    keyTypePreAuthTx: 1,
    keyTypeHashX: 2,
    keyTypeEd25519SignedPayload: 3,
    keyTypeMuxedEd25519: 256
  });

  // === xdr source ============================================================
  //
  //   enum PublicKeyType
  //   {
  //       PUBLIC_KEY_TYPE_ED25519 = KEY_TYPE_ED25519
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[304]++;
  xdr["enum"]("PublicKeyType", {
    publicKeyTypeEd25519: 0
  });

  // === xdr source ============================================================
  //
  //   enum SignerKeyType
  //   {
  //       SIGNER_KEY_TYPE_ED25519 = KEY_TYPE_ED25519,
  //       SIGNER_KEY_TYPE_PRE_AUTH_TX = KEY_TYPE_PRE_AUTH_TX,
  //       SIGNER_KEY_TYPE_HASH_X = KEY_TYPE_HASH_X,
  //       SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD = KEY_TYPE_ED25519_SIGNED_PAYLOAD
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[305]++;
  xdr["enum"]("SignerKeyType", {
    signerKeyTypeEd25519: 0,
    signerKeyTypePreAuthTx: 1,
    signerKeyTypeHashX: 2,
    signerKeyTypeEd25519SignedPayload: 3
  });

  // === xdr source ============================================================
  //
  //   union PublicKey switch (PublicKeyType type)
  //   {
  //   case PUBLIC_KEY_TYPE_ED25519:
  //       uint256 ed25519;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[306]++;
  xdr.union("PublicKey", {
    switchOn: xdr.lookup("PublicKeyType"),
    switchName: "type",
    switches: [["publicKeyTypeEd25519", "ed25519"]],
    arms: {
      ed25519: xdr.lookup("Uint256")
    }
  });

  // === xdr source ============================================================
  //
  //   struct
  //       {
  //           /* Public key that must sign the payload. */
  //           uint256 ed25519;
  //           /* Payload to be raw signed by ed25519. */
  //           opaque payload<64>;
  //       }
  //
  // ===========================================================================
  cov_1racd7g41m().s[307]++;
  xdr.struct("SignerKeyEd25519SignedPayload", [["ed25519", xdr.lookup("Uint256")], ["payload", xdr.varOpaque(64)]]);

  // === xdr source ============================================================
  //
  //   union SignerKey switch (SignerKeyType type)
  //   {
  //   case SIGNER_KEY_TYPE_ED25519:
  //       uint256 ed25519;
  //   case SIGNER_KEY_TYPE_PRE_AUTH_TX:
  //       /* SHA-256 Hash of TransactionSignaturePayload structure */
  //       uint256 preAuthTx;
  //   case SIGNER_KEY_TYPE_HASH_X:
  //       /* Hash of random 256 bit preimage X */
  //       uint256 hashX;
  //   case SIGNER_KEY_TYPE_ED25519_SIGNED_PAYLOAD:
  //       struct
  //       {
  //           /* Public key that must sign the payload. */
  //           uint256 ed25519;
  //           /* Payload to be raw signed by ed25519. */
  //           opaque payload<64>;
  //       } ed25519SignedPayload;
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[308]++;
  xdr.union("SignerKey", {
    switchOn: xdr.lookup("SignerKeyType"),
    switchName: "type",
    switches: [["signerKeyTypeEd25519", "ed25519"], ["signerKeyTypePreAuthTx", "preAuthTx"], ["signerKeyTypeHashX", "hashX"], ["signerKeyTypeEd25519SignedPayload", "ed25519SignedPayload"]],
    arms: {
      ed25519: xdr.lookup("Uint256"),
      preAuthTx: xdr.lookup("Uint256"),
      hashX: xdr.lookup("Uint256"),
      ed25519SignedPayload: xdr.lookup("SignerKeyEd25519SignedPayload")
    }
  });

  // === xdr source ============================================================
  //
  //   typedef opaque Signature<64>;
  //
  // ===========================================================================
  cov_1racd7g41m().s[309]++;
  xdr.typedef("Signature", xdr.varOpaque(64));

  // === xdr source ============================================================
  //
  //   typedef opaque SignatureHint[4];
  //
  // ===========================================================================
  cov_1racd7g41m().s[310]++;
  xdr.typedef("SignatureHint", xdr.opaque(4));

  // === xdr source ============================================================
  //
  //   typedef PublicKey NodeID;
  //
  // ===========================================================================
  cov_1racd7g41m().s[311]++;
  xdr.typedef("NodeId", xdr.lookup("PublicKey"));

  // === xdr source ============================================================
  //
  //   struct Curve25519Secret
  //   {
  //       opaque key[32];
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[312]++;
  xdr.struct("Curve25519Secret", [["key", xdr.opaque(32)]]);

  // === xdr source ============================================================
  //
  //   struct Curve25519Public
  //   {
  //       opaque key[32];
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[313]++;
  xdr.struct("Curve25519Public", [["key", xdr.opaque(32)]]);

  // === xdr source ============================================================
  //
  //   struct HmacSha256Key
  //   {
  //       opaque key[32];
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[314]++;
  xdr.struct("HmacSha256Key", [["key", xdr.opaque(32)]]);

  // === xdr source ============================================================
  //
  //   struct HmacSha256Mac
  //   {
  //       opaque mac[32];
  //   };
  //
  // ===========================================================================
  cov_1racd7g41m().s[315]++;
  xdr.struct("HmacSha256Mac", [["mac", xdr.opaque(32)]]);
}));
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (types);

/***/ }),

/***/ "./src/get_liquidity_pool_id.js":
/*!**************************************!*\
  !*** ./src/get_liquidity_pool_id.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LiquidityPoolFeeV18": () => (/* binding */ LiquidityPoolFeeV18),
/* harmony export */   "getLiquidityPoolId": () => (/* binding */ getLiquidityPoolId)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./asset */ "./src/asset.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_olekc9ahj() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\get_liquidity_pool_id.js";
  var hash = "f91bab0288232ea1717aad62faa42815dbde37cb";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\get_liquidity_pool_id.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 35
        },
        end: {
          line: 7,
          column: 37
        }
      },
      "1": {
        start: {
          line: 27,
          column: 2
        },
        end: {
          line: 29,
          column: 3
        }
      },
      "2": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 52
        }
      },
      "3": {
        start: {
          line: 31,
          column: 34
        },
        end: {
          line: 31,
          column: 57
        }
      },
      "4": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "5": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 41
        }
      },
      "6": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "7": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 41
        }
      },
      "8": {
        start: {
          line: 38,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "9": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 38
        }
      },
      "10": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "11": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 61
        }
      },
      "12": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 64
        }
      },
      "13": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 52,
          column: 12
        }
      },
      "14": {
        start: {
          line: 53,
          column: 18
        },
        end: {
          line: 53,
          column: 66
        }
      },
      "15": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "getLiquidityPoolId",
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 34
          }
        },
        loc: {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 26
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 25,
            column: 30
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 28
          },
          end: {
            line: 25,
            column: 30
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 13
          }
        }, {
          start: {
            line: 32,
            column: 17
          },
          end: {
            line: 32,
            column: 43
          }
        }],
        line: 32
      },
      "4": {
        loc: {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "5": {
        loc: {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 35,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 35,
            column: 13
          }
        }, {
          start: {
            line: 35,
            column: 17
          },
          end: {
            line: 35,
            column: 43
          }
        }],
        line: 35
      },
      "6": {
        loc: {
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "7": {
        loc: {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 41
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 10
          }
        }, {
          start: {
            line: 38,
            column: 14
          },
          end: {
            line: 38,
            column: 41
          }
        }],
        line: 38
      },
      "8": {
        loc: {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 42
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f91bab0288232ea1717aad62faa42815dbde37cb"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_olekc9ahj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_olekc9ahj();





// LiquidityPoolFeeV18 is the default liquidity pool fee in protocol v18. It defaults to 30 base points (0.3%).
var LiquidityPoolFeeV18 = (cov_olekc9ahj().s[0]++, 30);

/**
 * getLiquidityPoolId computes the Pool ID for the given assets, fee and pool type.
 *
 * @see [stellar-core getPoolID](https://github.com/stellar/stellar-core/blob/9f3a48c6a8f1aa77b6043a055d0638661f718080/src/ledger/test/LedgerTxnTests.cpp#L3746-L3751)
 *
 * @export
 * @param {string} liquidityPoolType – A string representing the liquidity pool type.
 * @param {object} liquidityPoolParameters        – The liquidity pool parameters.
 * @param {Asset}  liquidityPoolParameters.assetA – The first asset in the Pool, it must respect the rule assetA < assetB.
 * @param {Asset}  liquidityPoolParameters.assetB – The second asset in the Pool, it must respect the rule assetA < assetB.
 * @param {number} liquidityPoolParameters.fee    – The liquidity pool fee. For now the only fee supported is `30`.
 *
 * @return {Uint8Array} the raw Pool ID buffer, which can be stringfied with `toString('hex')`
 */
function getLiquidityPoolId(liquidityPoolType) {
  var liquidityPoolParameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_olekc9ahj().b[0][0]++, {});
  cov_olekc9ahj().f[0]++;
  cov_olekc9ahj().s[1]++;
  if (liquidityPoolType !== 'constant_product') {
    cov_olekc9ahj().b[1][0]++;
    cov_olekc9ahj().s[2]++;
    throw new Error('liquidityPoolType is invalid');
  } else {
    cov_olekc9ahj().b[1][1]++;
  }
  var _ref = (cov_olekc9ahj().s[3]++, liquidityPoolParameters),
    assetA = _ref.assetA,
    assetB = _ref.assetB,
    fee = _ref.fee;
  cov_olekc9ahj().s[4]++;
  if ((cov_olekc9ahj().b[3][0]++, !assetA) || (cov_olekc9ahj().b[3][1]++, !(assetA instanceof _asset__WEBPACK_IMPORTED_MODULE_1__.Asset))) {
    cov_olekc9ahj().b[2][0]++;
    cov_olekc9ahj().s[5]++;
    throw new Error('assetA is invalid');
  } else {
    cov_olekc9ahj().b[2][1]++;
  }
  cov_olekc9ahj().s[6]++;
  if ((cov_olekc9ahj().b[5][0]++, !assetB) || (cov_olekc9ahj().b[5][1]++, !(assetB instanceof _asset__WEBPACK_IMPORTED_MODULE_1__.Asset))) {
    cov_olekc9ahj().b[4][0]++;
    cov_olekc9ahj().s[7]++;
    throw new Error('assetB is invalid');
  } else {
    cov_olekc9ahj().b[4][1]++;
  }
  cov_olekc9ahj().s[8]++;
  if ((cov_olekc9ahj().b[7][0]++, !fee) || (cov_olekc9ahj().b[7][1]++, fee !== LiquidityPoolFeeV18)) {
    cov_olekc9ahj().b[6][0]++;
    cov_olekc9ahj().s[9]++;
    throw new Error('fee is invalid');
  } else {
    cov_olekc9ahj().b[6][1]++;
  }
  cov_olekc9ahj().s[10]++;
  if (_asset__WEBPACK_IMPORTED_MODULE_1__.Asset.compare(assetA, assetB) !== -1) {
    cov_olekc9ahj().b[8][0]++;
    cov_olekc9ahj().s[11]++;
    throw new Error('Assets are not in lexicographic order');
  } else {
    cov_olekc9ahj().b[8][1]++;
  }
  var lpTypeData = (cov_olekc9ahj().s[12]++, _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].LiquidityPoolType.liquidityPoolConstantProduct().toXDR());
  var lpParamsData = (cov_olekc9ahj().s[13]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].LiquidityPoolConstantProductParameters({
    assetA: assetA.toXDRObject(),
    assetB: assetB.toXDRObject(),
    fee: fee
  }).toXDR());
  var payload = (cov_olekc9ahj().s[14]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].concat([lpTypeData, lpParamsData]));
  cov_olekc9ahj().s[15]++;
  return (0,_hashing__WEBPACK_IMPORTED_MODULE_2__.hash)(payload);
}

/***/ }),

/***/ "./src/hashing.js":
/*!************************!*\
  !*** ./src/hashing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hash": () => (/* binding */ hash)
/* harmony export */ });
/* harmony import */ var sha_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! sha.js */ "./node_modules/sha.js/index.js");
/* harmony import */ var sha_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(sha_js__WEBPACK_IMPORTED_MODULE_0__);
function cov_3zv50hsoy() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\hashing.js";
  var hash = "a900a381f5140c34e0abe2caed22ff812cb07723";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\hashing.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 4,
          column: 29
        }
      },
      "1": {
        start: {
          line: 5,
          column: 2
        },
        end: {
          line: 5,
          column: 30
        }
      },
      "2": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 6,
          column: 25
        }
      }
    },
    fnMap: {
      "0": {
        name: "hash",
        decl: {
          start: {
            line: 3,
            column: 16
          },
          end: {
            line: 3,
            column: 20
          }
        },
        loc: {
          start: {
            line: 3,
            column: 27
          },
          end: {
            line: 7,
            column: 1
          }
        },
        line: 3
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "a900a381f5140c34e0abe2caed22ff812cb07723"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_3zv50hsoy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_3zv50hsoy();

function hash(data) {
  cov_3zv50hsoy().f[0]++;
  var hasher = (cov_3zv50hsoy().s[0]++, new sha_js__WEBPACK_IMPORTED_MODULE_0__.sha256());
  cov_3zv50hsoy().s[1]++;
  hasher.update(data, 'utf8');
  cov_3zv50hsoy().s[2]++;
  return hasher.digest();
}

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Account": () => (/* reexport safe */ _account__WEBPACK_IMPORTED_MODULE_16__.Account),
/* harmony export */   "Asset": () => (/* reexport safe */ _asset__WEBPACK_IMPORTED_MODULE_11__.Asset),
/* harmony export */   "AuthClawbackEnabledFlag": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_14__.AuthClawbackEnabledFlag),
/* harmony export */   "AuthImmutableFlag": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_14__.AuthImmutableFlag),
/* harmony export */   "AuthRequiredFlag": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_14__.AuthRequiredFlag),
/* harmony export */   "AuthRevocableFlag": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_14__.AuthRevocableFlag),
/* harmony export */   "BASE_FEE": () => (/* reexport safe */ _transaction_builder__WEBPACK_IMPORTED_MODULE_10__.BASE_FEE),
/* harmony export */   "Claimant": () => (/* reexport safe */ _claimant__WEBPACK_IMPORTED_MODULE_18__.Claimant),
/* harmony export */   "FastSigning": () => (/* reexport safe */ _signing__WEBPACK_IMPORTED_MODULE_3__.FastSigning),
/* harmony export */   "FeeBumpTransaction": () => (/* reexport safe */ _fee_bump_transaction__WEBPACK_IMPORTED_MODULE_9__.FeeBumpTransaction),
/* harmony export */   "Hyper": () => (/* reexport safe */ js_xdr__WEBPACK_IMPORTED_MODULE_6__.Hyper),
/* harmony export */   "Keypair": () => (/* reexport safe */ _keypair__WEBPACK_IMPORTED_MODULE_5__.Keypair),
/* harmony export */   "LiquidityPoolAsset": () => (/* reexport safe */ _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_12__.LiquidityPoolAsset),
/* harmony export */   "LiquidityPoolFeeV18": () => (/* reexport safe */ _get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_4__.LiquidityPoolFeeV18),
/* harmony export */   "LiquidityPoolId": () => (/* reexport safe */ _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_13__.LiquidityPoolId),
/* harmony export */   "Memo": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.Memo),
/* harmony export */   "MemoHash": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.MemoHash),
/* harmony export */   "MemoID": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.MemoID),
/* harmony export */   "MemoNone": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.MemoNone),
/* harmony export */   "MemoReturn": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.MemoReturn),
/* harmony export */   "MemoText": () => (/* reexport safe */ _memo__WEBPACK_IMPORTED_MODULE_15__.MemoText),
/* harmony export */   "MuxedAccount": () => (/* reexport safe */ _muxed_account__WEBPACK_IMPORTED_MODULE_17__.MuxedAccount),
/* harmony export */   "Networks": () => (/* reexport safe */ _network__WEBPACK_IMPORTED_MODULE_19__.Networks),
/* harmony export */   "Operation": () => (/* reexport safe */ _operation__WEBPACK_IMPORTED_MODULE_14__.Operation),
/* harmony export */   "SignerKey": () => (/* reexport safe */ _signerkey__WEBPACK_IMPORTED_MODULE_21__.SignerKey),
/* harmony export */   "StrKey": () => (/* reexport safe */ _strkey__WEBPACK_IMPORTED_MODULE_20__.StrKey),
/* harmony export */   "TimeoutInfinite": () => (/* reexport safe */ _transaction_builder__WEBPACK_IMPORTED_MODULE_10__.TimeoutInfinite),
/* harmony export */   "Transaction": () => (/* reexport safe */ _transaction__WEBPACK_IMPORTED_MODULE_8__.Transaction),
/* harmony export */   "TransactionBase": () => (/* reexport safe */ _transaction_base__WEBPACK_IMPORTED_MODULE_7__.TransactionBase),
/* harmony export */   "TransactionBuilder": () => (/* reexport safe */ _transaction_builder__WEBPACK_IMPORTED_MODULE_10__.TransactionBuilder),
/* harmony export */   "UnsignedHyper": () => (/* reexport safe */ js_xdr__WEBPACK_IMPORTED_MODULE_6__.UnsignedHyper),
/* harmony export */   "decodeAddressToMuxedAccount": () => (/* reexport safe */ _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_22__.decodeAddressToMuxedAccount),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "encodeMuxedAccount": () => (/* reexport safe */ _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_22__.encodeMuxedAccount),
/* harmony export */   "encodeMuxedAccountToAddress": () => (/* reexport safe */ _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_22__.encodeMuxedAccountToAddress),
/* harmony export */   "extractBaseAddress": () => (/* reexport safe */ _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_22__.extractBaseAddress),
/* harmony export */   "getLiquidityPoolId": () => (/* reexport safe */ _get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_4__.getLiquidityPoolId),
/* harmony export */   "hash": () => (/* reexport safe */ _hashing__WEBPACK_IMPORTED_MODULE_2__.hash),
/* harmony export */   "sign": () => (/* reexport safe */ _signing__WEBPACK_IMPORTED_MODULE_3__.sign),
/* harmony export */   "verify": () => (/* reexport safe */ _signing__WEBPACK_IMPORTED_MODULE_3__.verify),
/* harmony export */   "xdr": () => (/* reexport safe */ _xdr__WEBPACK_IMPORTED_MODULE_1__["default"])
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _signing__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./signing */ "./src/signing.js");
/* harmony import */ var _get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./get_liquidity_pool_id */ "./src/get_liquidity_pool_id.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./keypair */ "./src/keypair.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _transaction_base__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transaction_base */ "./src/transaction_base.js");
/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transaction */ "./src/transaction.js");
/* harmony import */ var _fee_bump_transaction__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./fee_bump_transaction */ "./src/fee_bump_transaction.js");
/* harmony import */ var _transaction_builder__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./transaction_builder */ "./src/transaction_builder.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./asset */ "./src/asset.js");
/* harmony import */ var _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./liquidity_pool_asset */ "./src/liquidity_pool_asset.js");
/* harmony import */ var _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./liquidity_pool_id */ "./src/liquidity_pool_id.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./operation */ "./src/operation.js");
/* harmony import */ var _memo__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./memo */ "./src/memo.js");
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./account */ "./src/account.js");
/* harmony import */ var _muxed_account__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./muxed_account */ "./src/muxed_account.js");
/* harmony import */ var _claimant__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./claimant */ "./src/claimant.js");
/* harmony import */ var _network__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./network */ "./src/network.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* harmony import */ var _signerkey__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./signerkey */ "./src/signerkey.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
/* module decorator */ module = __webpack_require__.hmd(module);
function cov_1xu86k2uqz() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\index.js";
  var hash = "ddbc42c54b3e6aecba496b1a01f3cb693aa5777b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\index.js",
    statementMap: {
      "0": {
        start: {
          line: 5,
          column: 0
        },
        end: {
          line: 5,
          column: 23
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ddbc42c54b3e6aecba496b1a01f3cb693aa5777b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1xu86k2uqz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1xu86k2uqz();
/* eslint-disable import/no-import-module-exports */


cov_1xu86k2uqz().s[0]++;
bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"].DEBUG = true; // gives us exceptions on bad constructor values























/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (module.exports);

/***/ }),

/***/ "./src/keypair.js":
/*!************************!*\
  !*** ./src/keypair.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Keypair": () => (/* binding */ Keypair)
/* harmony export */ });
/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tweetnacl */ "./node_modules/tweetnacl/nacl-fast.js");
/* harmony import */ var tweetnacl__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(tweetnacl__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
/* harmony import */ var _signing__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./signing */ "./src/signing.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
function cov_20palfju0r() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\keypair.js";
  var hash = "869fee22bbe24c961b2fd4be9d16085c351120c4";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\keypair.js",
    statementMap: {
      "0": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 37,
          column: 5
        }
      },
      "1": {
        start: {
          line: 36,
          column: 6
        },
        end: {
          line: 36,
          column: 43
        }
      },
      "2": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 26
        }
      },
      "3": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 65,
          column: 5
        }
      },
      "4": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 58
        }
      },
      "5": {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 47,
          column: 7
        }
      },
      "6": {
        start: {
          line: 46,
          column: 8
        },
        end: {
          line: 46,
          column: 55
        }
      },
      "7": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 49,
          column: 40
        }
      },
      "8": {
        start: {
          line: 50,
          column: 6
        },
        end: {
          line: 50,
          column: 49
        }
      },
      "9": {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 51,
          column: 80
        }
      },
      "10": {
        start: {
          line: 53,
          column: 6
        },
        end: {
          line: 58,
          column: 7
        }
      },
      "11": {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 62
        }
      },
      "12": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 59
        }
      },
      "13": {
        start: {
          line: 62,
          column: 6
        },
        end: {
          line: 64,
          column: 7
        }
      },
      "14": {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 55
        }
      },
      "15": {
        start: {
          line: 75,
          column: 22
        },
        end: {
          line: 75,
          column: 60
        }
      },
      "16": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 46
        }
      },
      "17": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 61
        }
      },
      "18": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 99,
          column: 5
        }
      },
      "19": {
        start: {
          line: 96,
          column: 6
        },
        end: {
          line: 98,
          column: 8
        }
      },
      "20": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 60
        }
      },
      "21": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 57
        }
      },
      "22": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 113,
          column: 5
        }
      },
      "23": {
        start: {
          line: 112,
          column: 6
        },
        end: {
          line: 112,
          column: 52
        }
      },
      "24": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 52
        }
      },
      "25": {
        start: {
          line: 122,
          column: 19
        },
        end: {
          line: 122,
          column: 39
        }
      },
      "26": {
        start: {
          line: 123,
          column: 4
        },
        end: {
          line: 123,
          column: 43
        }
      },
      "27": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 67
        }
      },
      "28": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 67
        }
      },
      "29": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "30": {
        start: {
          line: 147,
          column: 6
        },
        end: {
          line: 149,
          column: 7
        }
      },
      "31": {
        start: {
          line: 148,
          column: 8
        },
        end: {
          line: 148,
          column: 72
        }
      },
      "32": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 156,
          column: 8
        }
      },
      "33": {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 159,
          column: 64
        }
      },
      "34": {
        start: {
          line: 167,
          column: 4
        },
        end: {
          line: 167,
          column: 27
        }
      },
      "35": {
        start: {
          line: 171,
          column: 14
        },
        end: {
          line: 171,
          column: 41
        }
      },
      "36": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 33
        }
      },
      "37": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 181,
          column: 58
        }
      },
      "38": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 191,
          column: 5
        }
      },
      "39": {
        start: {
          line: 190,
          column: 6
        },
        end: {
          line: 190,
          column: 49
        }
      },
      "40": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "41": {
        start: {
          line: 194,
          column: 6
        },
        end: {
          line: 194,
          column: 62
        }
      },
      "42": {
        start: {
          line: 197,
          column: 4
        },
        end: {
          line: 197,
          column: 44
        }
      },
      "43": {
        start: {
          line: 205,
          column: 4
        },
        end: {
          line: 205,
          column: 28
        }
      },
      "44": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 213,
          column: 29
        }
      },
      "45": {
        start: {
          line: 222,
          column: 4
        },
        end: {
          line: 224,
          column: 5
        }
      },
      "46": {
        start: {
          line: 223,
          column: 6
        },
        end: {
          line: 223,
          column: 62
        }
      },
      "47": {
        start: {
          line: 226,
          column: 4
        },
        end: {
          line: 226,
          column: 39
        }
      },
      "48": {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 52
        }
      },
      "49": {
        start: {
          line: 249,
          column: 22
        },
        end: {
          line: 249,
          column: 37
        }
      },
      "50": {
        start: {
          line: 250,
          column: 17
        },
        end: {
          line: 250,
          column: 37
        }
      },
      "51": {
        start: {
          line: 252,
          column: 4
        },
        end: {
          line: 252,
          column: 59
        }
      },
      "52": {
        start: {
          line: 268,
          column: 22
        },
        end: {
          line: 268,
          column: 37
        }
      },
      "53": {
        start: {
          line: 269,
          column: 20
        },
        end: {
          line: 269,
          column: 40
        }
      },
      "54": {
        start: {
          line: 271,
          column: 15
        },
        end: {
          line: 271,
          column: 49
        }
      },
      "55": {
        start: {
          line: 272,
          column: 4
        },
        end: {
          line: 275,
          column: 5
        }
      },
      "56": {
        start: {
          line: 274,
          column: 6
        },
        end: {
          line: 274,
          column: 83
        }
      },
      "57": {
        start: {
          line: 277,
          column: 4
        },
        end: {
          line: 280,
          column: 7
        }
      },
      "58": {
        start: {
          line: 278,
          column: 34
        },
        end: {
          line: 278,
          column: 51
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 34,
            column: 3
          }
        },
        loc: {
          start: {
            line: 34,
            column: 20
          },
          end: {
            line: 66,
            column: 3
          }
        },
        line: 34
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 74,
            column: 2
          },
          end: {
            line: 74,
            column: 3
          }
        },
        loc: {
          start: {
            line: 74,
            column: 28
          },
          end: {
            line: 77,
            column: 3
          }
        },
        line: 74
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 85,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        },
        loc: {
          start: {
            line: 85,
            column: 37
          },
          end: {
            line: 87,
            column: 3
          }
        },
        line: 85
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 94,
            column: 2
          },
          end: {
            line: 94,
            column: 3
          }
        },
        loc: {
          start: {
            line: 94,
            column: 35
          },
          end: {
            line: 102,
            column: 3
          }
        },
        line: 94
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 109,
            column: 3
          }
        },
        loc: {
          start: {
            line: 109,
            column: 34
          },
          end: {
            line: 115,
            column: 3
          }
        },
        line: 109
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 121,
            column: 2
          },
          end: {
            line: 121,
            column: 3
          }
        },
        loc: {
          start: {
            line: 121,
            column: 18
          },
          end: {
            line: 124,
            column: 3
          }
        },
        line: 121
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 126,
            column: 3
          }
        },
        loc: {
          start: {
            line: 126,
            column: 17
          },
          end: {
            line: 128,
            column: 3
          }
        },
        line: 126
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 130,
            column: 2
          },
          end: {
            line: 130,
            column: 3
          }
        },
        loc: {
          start: {
            line: 130,
            column: 17
          },
          end: {
            line: 132,
            column: 3
          }
        },
        line: 130
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 145,
            column: 2
          },
          end: {
            line: 145,
            column: 3
          }
        },
        loc: {
          start: {
            line: 145,
            column: 22
          },
          end: {
            line: 160,
            column: 3
          }
        },
        line: 145
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 166,
            column: 2
          },
          end: {
            line: 166,
            column: 3
          }
        },
        loc: {
          start: {
            line: 166,
            column: 17
          },
          end: {
            line: 168,
            column: 3
          }
        },
        line: 166
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 170,
            column: 2
          },
          end: {
            line: 170,
            column: 3
          }
        },
        loc: {
          start: {
            line: 170,
            column: 18
          },
          end: {
            line: 174,
            column: 3
          }
        },
        line: 170
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 180,
            column: 2
          },
          end: {
            line: 180,
            column: 3
          }
        },
        loc: {
          start: {
            line: 180,
            column: 14
          },
          end: {
            line: 182,
            column: 3
          }
        },
        line: 180
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 188,
            column: 2
          },
          end: {
            line: 188,
            column: 3
          }
        },
        loc: {
          start: {
            line: 188,
            column: 11
          },
          end: {
            line: 198,
            column: 3
          }
        },
        line: 188
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 204,
            column: 2
          },
          end: {
            line: 204,
            column: 3
          }
        },
        loc: {
          start: {
            line: 204,
            column: 17
          },
          end: {
            line: 206,
            column: 3
          }
        },
        line: 204
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 212,
            column: 2
          },
          end: {
            line: 212,
            column: 3
          }
        },
        loc: {
          start: {
            line: 212,
            column: 12
          },
          end: {
            line: 214,
            column: 3
          }
        },
        line: 212
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 221,
            column: 3
          }
        },
        loc: {
          start: {
            line: 221,
            column: 13
          },
          end: {
            line: 227,
            column: 3
          }
        },
        line: 221
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 235,
            column: 2
          },
          end: {
            line: 235,
            column: 3
          }
        },
        loc: {
          start: {
            line: 235,
            column: 26
          },
          end: {
            line: 237,
            column: 3
          }
        },
        line: 235
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 248,
            column: 2
          },
          end: {
            line: 248,
            column: 3
          }
        },
        loc: {
          start: {
            line: 248,
            column: 22
          },
          end: {
            line: 253,
            column: 3
          }
        },
        line: 248
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 267,
            column: 2
          },
          end: {
            line: 267,
            column: 3
          }
        },
        loc: {
          start: {
            line: 267,
            column: 29
          },
          end: {
            line: 281,
            column: 3
          }
        },
        line: 267
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 278,
            column: 21
          },
          end: {
            line: 278,
            column: 22
          }
        },
        loc: {
          start: {
            line: 278,
            column: 34
          },
          end: {
            line: 278,
            column: 51
          }
        },
        line: 278
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 37,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "1": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 65,
            column: 5
          }
        }, {
          start: {
            line: 59,
            column: 11
          },
          end: {
            line: 65,
            column: 5
          }
        }],
        line: 41
      },
      "2": {
        loc: {
          start: {
            line: 45,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "3": {
        loc: {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "4": {
        loc: {
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 55,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 54,
            column: 8
          },
          end: {
            line: 54,
            column: 22
          }
        }, {
          start: {
            line: 55,
            column: 8
          },
          end: {
            line: 55,
            column: 67
          }
        }],
        line: 54
      },
      "5": {
        loc: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 64,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 62
      },
      "6": {
        loc: {
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 95,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 95
      },
      "7": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 113,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "8": {
        loc: {
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 146,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 146
      },
      "9": {
        loc: {
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 149,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 147,
            column: 6
          },
          end: {
            line: 149,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 147
      },
      "10": {
        loc: {
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 189,
            column: 4
          },
          end: {
            line: 191,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 189
      },
      "11": {
        loc: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 195,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "12": {
        loc: {
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 4
          },
          end: {
            line: 224,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "13": {
        loc: {
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 272,
            column: 4
          },
          end: {
            line: 275,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 272
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "869fee22bbe24c961b2fd4be9d16085c351120c4"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_20palfju0r = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_20palfju0r();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint no-bitwise: ["error", {"allow": ["^"]}] */










/**
 * `Keypair` represents public (and secret) keys of the account.
 *
 * Currently `Keypair` only supports ed25519 but in a future this class can be abstraction layer for other
 * public-key signature systems.
 *
 * Use more convenient methods to create `Keypair` object:
 * * `{@link Keypair.fromPublicKey}`
 * * `{@link Keypair.fromSecret}`
 * * `{@link Keypair.random}`
 *
 * @constructor
 * @param {object} keys At least one of keys must be provided.
 * @param {string} keys.type Public-key signature system name. (currently only `ed25519` keys are supported)
 * @param {Uint8Array} [keys.publicKey] Raw public key
 * @param {Uint8Array} [keys.secretKey] Raw secret key (32-byte secret seed in ed25519`)
 */
var Keypair = /*#__PURE__*/function () {
  function Keypair(keys) {
    _classCallCheck(this, Keypair);
    cov_20palfju0r().f[0]++;
    cov_20palfju0r().s[0]++;
    if (keys.type !== 'ed25519') {
      cov_20palfju0r().b[0][0]++;
      cov_20palfju0r().s[1]++;
      throw new Error('Invalid keys type');
    } else {
      cov_20palfju0r().b[0][1]++;
    }
    cov_20palfju0r().s[2]++;
    this.type = keys.type;
    cov_20palfju0r().s[3]++;
    if (keys.secretKey) {
      cov_20palfju0r().b[1][0]++;
      cov_20palfju0r().s[4]++;
      // Probably should make a copy here...
      keys.secretKey = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(keys.secretKey);
      cov_20palfju0r().s[5]++;
      if (keys.secretKey.length !== 32) {
        cov_20palfju0r().b[2][0]++;
        cov_20palfju0r().s[6]++;
        throw new Error('secretKey length is invalid');
      } else {
        cov_20palfju0r().b[2][1]++;
      }
      cov_20palfju0r().s[7]++;
      this._secretSeed = keys.secretKey;
      cov_20palfju0r().s[8]++;
      this._publicKey = (0,_signing__WEBPACK_IMPORTED_MODULE_4__.generate)(keys.secretKey);
      cov_20palfju0r().s[9]++;
      this._secretKey = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].concat([keys.secretKey, this._publicKey]);
      cov_20palfju0r().s[10]++;
      if ((cov_20palfju0r().b[4][0]++, keys.publicKey) && (cov_20palfju0r().b[4][1]++, !this._publicKey.equals(_util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(keys.publicKey)))) {
        cov_20palfju0r().b[3][0]++;
        cov_20palfju0r().s[11]++;
        throw new Error('secretKey does not match publicKey');
      } else {
        cov_20palfju0r().b[3][1]++;
      }
    } else {
      cov_20palfju0r().b[1][1]++;
      cov_20palfju0r().s[12]++;
      this._publicKey = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(keys.publicKey);
      cov_20palfju0r().s[13]++;
      if (this._publicKey.length !== 32) {
        cov_20palfju0r().b[5][0]++;
        cov_20palfju0r().s[14]++;
        throw new Error('publicKey length is invalid');
      } else {
        cov_20palfju0r().b[5][1]++;
      }
    }
  }

  /**
   * Creates a new `Keypair` instance from secret. This can either be secret key or secret seed depending
   * on underlying public-key signature system. Currently `Keypair` only supports ed25519.
   * @param {string} secret secret key (ex. `SDAKFNYEIAORZKKCYRILFQKLLOCNPL5SWJ3YY5NM3ZH6GJSZGXHZEPQS`)
   * @returns {Keypair}
   */
  _createClass(Keypair, [{
    key: "xdrAccountId",
    value: function xdrAccountId() {
      cov_20palfju0r().f[6]++;
      cov_20palfju0r().s[27]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].AccountId.publicKeyTypeEd25519(this._publicKey);
    }
  }, {
    key: "xdrPublicKey",
    value: function xdrPublicKey() {
      cov_20palfju0r().f[7]++;
      cov_20palfju0r().s[28]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].PublicKey.publicKeyTypeEd25519(this._publicKey);
    }

    /**
     * Creates a {@link xdr.MuxedAccount} object from the public key.
     *
     * You will get a different type of muxed account depending on whether or not
     * you pass an ID.
     *
     * @param  {string} [id] - stringified integer indicating the underlying muxed
     *     ID of the new account object
     *
     * @return {xdr.MuxedAccount}
     */
  }, {
    key: "xdrMuxedAccount",
    value: function xdrMuxedAccount(id) {
      cov_20palfju0r().f[8]++;
      cov_20palfju0r().s[29]++;
      if (!lodash_isUndefined__WEBPACK_IMPORTED_MODULE_1___default()(id)) {
        cov_20palfju0r().b[8][0]++;
        cov_20palfju0r().s[30]++;
        if (!lodash_isString__WEBPACK_IMPORTED_MODULE_2___default()(id)) {
          cov_20palfju0r().b[9][0]++;
          cov_20palfju0r().s[31]++;
          throw new TypeError("expected string for ID, got ".concat(_typeof(id)));
        } else {
          cov_20palfju0r().b[9][1]++;
        }
        cov_20palfju0r().s[32]++;
        return _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].MuxedAccount.keyTypeMuxedEd25519(new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].MuxedAccountMed25519({
          id: _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].Uint64.fromString(id),
          ed25519: this._publicKey
        }));
      } else {
        cov_20palfju0r().b[8][1]++;
      }
      cov_20palfju0r().s[33]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].MuxedAccount.keyTypeEd25519(this._publicKey);
    }

    /**
     * Returns raw public key
     * @returns {Uint8Array}
     */
  }, {
    key: "rawPublicKey",
    value: function rawPublicKey() {
      cov_20palfju0r().f[9]++;
      cov_20palfju0r().s[34]++;
      return this._publicKey;
    }
  }, {
    key: "signatureHint",
    value: function signatureHint() {
      cov_20palfju0r().f[10]++;
      var a = (cov_20palfju0r().s[35]++, this.xdrAccountId().toXDR());
      cov_20palfju0r().s[36]++;
      return a.slice(a.length - 4);
    }

    /**
     * Returns public key associated with this `Keypair` object.
     * @returns {string}
     */
  }, {
    key: "publicKey",
    value: function publicKey() {
      cov_20palfju0r().f[11]++;
      cov_20palfju0r().s[37]++;
      return _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.encodeEd25519PublicKey(this._publicKey);
    }

    /**
     * Returns secret key associated with this `Keypair` object
     * @returns {string}
     */
  }, {
    key: "secret",
    value: function secret() {
      cov_20palfju0r().f[12]++;
      cov_20palfju0r().s[38]++;
      if (!this._secretSeed) {
        cov_20palfju0r().b[10][0]++;
        cov_20palfju0r().s[39]++;
        throw new Error('no secret key available');
      } else {
        cov_20palfju0r().b[10][1]++;
      }
      cov_20palfju0r().s[40]++;
      if (this.type === 'ed25519') {
        cov_20palfju0r().b[11][0]++;
        cov_20palfju0r().s[41]++;
        return _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.encodeEd25519SecretSeed(this._secretSeed);
      } else {
        cov_20palfju0r().b[11][1]++;
      }
      cov_20palfju0r().s[42]++;
      throw new Error('Invalid Keypair type');
    }

    /**
     * Returns raw secret key.
     * @returns {Uint8Array}
     */
  }, {
    key: "rawSecretKey",
    value: function rawSecretKey() {
      cov_20palfju0r().f[13]++;
      cov_20palfju0r().s[43]++;
      return this._secretSeed;
    }

    /**
     * Returns `true` if this `Keypair` object contains secret key and can sign.
     * @returns {boolean}
     */
  }, {
    key: "canSign",
    value: function canSign() {
      cov_20palfju0r().f[14]++;
      cov_20palfju0r().s[44]++;
      return !!this._secretKey;
    }

    /**
     * Signs data.
     * @param {Uint8Array} data Data to sign
     * @returns {Uint8Array}
     */
  }, {
    key: "sign",
    value: function sign(data) {
      cov_20palfju0r().f[15]++;
      cov_20palfju0r().s[45]++;
      if (!this.canSign()) {
        cov_20palfju0r().b[12][0]++;
        cov_20palfju0r().s[46]++;
        throw new Error('cannot sign: no secret key available');
      } else {
        cov_20palfju0r().b[12][1]++;
      }
      cov_20palfju0r().s[47]++;
      return (0,_signing__WEBPACK_IMPORTED_MODULE_4__.sign)(data, this._secretKey);
    }

    /**
     * Verifies if `signature` for `data` is valid.
     * @param {Uint8Array} data Signed data
     * @param {Uint8Array} signature Signature
     * @returns {boolean}
     */
  }, {
    key: "verify",
    value: function verify(data, signature) {
      cov_20palfju0r().f[16]++;
      cov_20palfju0r().s[48]++;
      return (0,_signing__WEBPACK_IMPORTED_MODULE_4__.verify)(data, signature, this._publicKey);
    }

    /**
     * Returns the decorated signature (hint+sig) for arbitrary data.
     *
     * @param  {Uint8Array} data  arbitrary data to sign
     * @return {xdr.DecoratedSignature}   the raw signature structure which can be
     *     added directly to a transaction envelope
     *
     * @see TransactionBase.addDecoratedSignature
     */
  }, {
    key: "signDecorated",
    value: function signDecorated(data) {
      cov_20palfju0r().f[17]++;
      var signature = (cov_20palfju0r().s[49]++, this.sign(data));
      var hint = (cov_20palfju0r().s[50]++, this.signatureHint());
      cov_20palfju0r().s[51]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].DecoratedSignature({
        hint: hint,
        signature: signature
      });
    }

    /**
     * Returns the raw decorated signature (hint+sig) for a signed payload signer.
     *
     *  The hint is defined as the last 4 bytes of the signer key XORed with last
     *  4 bytes of the payload (zero-left-padded if necessary).
     *
     * @param  {Uint8Array} data    data to both sign and treat as the payload
     * @return {xdr.DecoratedSignature}
     *
     * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0040.md#signature-hint
     * @see TransactionBase.addDecoratedSignature
     */
  }, {
    key: "signPayloadDecorated",
    value: function signPayloadDecorated(data) {
      cov_20palfju0r().f[18]++;
      var signature = (cov_20palfju0r().s[52]++, this.sign(data));
      var keyHint = (cov_20palfju0r().s[53]++, this.signatureHint());
      var hint = (cov_20palfju0r().s[54]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(data.slice(-4)));
      cov_20palfju0r().s[55]++;
      if (hint.length < 4) {
        cov_20palfju0r().b[13][0]++;
        cov_20palfju0r().s[56]++;
        // append zeroes as needed
        hint = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].concat([hint, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].alloc(4 - data.length, 0)]);
      } else {
        cov_20palfju0r().b[13][1]++;
      }
      cov_20palfju0r().s[57]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_7__["default"].DecoratedSignature({
        hint: hint.map(function (_byte, i) {
          cov_20palfju0r().f[19]++;
          cov_20palfju0r().s[58]++;
          return _byte ^ keyHint[i];
        }),
        signature: signature
      });
    }
  }], [{
    key: "fromSecret",
    value: function fromSecret(secret) {
      cov_20palfju0r().f[1]++;
      var rawSecret = (cov_20palfju0r().s[15]++, _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.decodeEd25519SecretSeed(secret));
      cov_20palfju0r().s[16]++;
      return this.fromRawEd25519Seed(rawSecret);
    }

    /**
     * Creates a new `Keypair` object from ed25519 secret key seed raw bytes.
     *
     * @param {Uint8Array} rawSeed Raw 32-byte ed25519 secret key seed
     * @returns {Keypair}
     */
  }, {
    key: "fromRawEd25519Seed",
    value: function fromRawEd25519Seed(rawSeed) {
      cov_20palfju0r().f[2]++;
      cov_20palfju0r().s[17]++;
      return new this({
        type: 'ed25519',
        secretKey: rawSeed
      });
    }

    /**
     * Returns `Keypair` object representing network master key.
     * @param {string} networkPassphrase passphrase of the target stellar network (e.g. "Public Global Stellar Network ; September 2015").
     * @returns {Keypair}
     */
  }, {
    key: "master",
    value: function master(networkPassphrase) {
      cov_20palfju0r().f[3]++;
      cov_20palfju0r().s[18]++;
      if (!networkPassphrase) {
        cov_20palfju0r().b[6][0]++;
        cov_20palfju0r().s[19]++;
        throw new Error('No network selected. Please pass a network argument, e.g. `Keypair.master(Networks.PUBLIC)`.');
      } else {
        cov_20palfju0r().b[6][1]++;
      }
      cov_20palfju0r().s[20]++;
      return this.fromRawEd25519Seed((0,_hashing__WEBPACK_IMPORTED_MODULE_6__.hash)(networkPassphrase));
    }

    /**
     * Creates a new `Keypair` object from public key.
     * @param {string} publicKey public key (ex. `GB3KJPLFUYN5VL6R3GU3EGCGVCKFDSD7BEDX42HWG5BWFKB3KQGJJRMA`)
     * @returns {Keypair}
     */
  }, {
    key: "fromPublicKey",
    value: function fromPublicKey(publicKey) {
      cov_20palfju0r().f[4]++;
      cov_20palfju0r().s[21]++;
      publicKey = _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.decodeEd25519PublicKey(publicKey);
      cov_20palfju0r().s[22]++;
      if (publicKey.length !== 32) {
        cov_20palfju0r().b[7][0]++;
        cov_20palfju0r().s[23]++;
        throw new Error('Invalid Stellar public key');
      } else {
        cov_20palfju0r().b[7][1]++;
      }
      cov_20palfju0r().s[24]++;
      return new this({
        type: 'ed25519',
        publicKey: publicKey
      });
    }

    /**
     * Create a random `Keypair` object.
     * @returns {Keypair}
     */
  }, {
    key: "random",
    value: function random() {
      cov_20palfju0r().f[5]++;
      var secret = (cov_20palfju0r().s[25]++, tweetnacl__WEBPACK_IMPORTED_MODULE_0___default().randomBytes(32));
      cov_20palfju0r().s[26]++;
      return this.fromRawEd25519Seed(secret);
    }
  }]);
  return Keypair;
}();

/***/ }),

/***/ "./src/liquidity_pool_asset.js":
/*!*************************************!*\
  !*** ./src/liquidity_pool_asset.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LiquidityPoolAsset": () => (/* binding */ LiquidityPoolAsset)
/* harmony export */ });
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./asset */ "./src/asset.js");
/* harmony import */ var _get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./get_liquidity_pool_id */ "./src/get_liquidity_pool_id.js");
function cov_2gv5w16r6d() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\liquidity_pool_asset.js";
  var hash = "395a60c36d8babed31a1407e479cfdd332387331";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\liquidity_pool_asset.js",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      "1": {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "2": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      "3": {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 43
        }
      },
      "4": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "5": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 63
        }
      },
      "6": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      "7": {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 40
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "9": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "10": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 19
        }
      },
      "11": {
        start: {
          line: 44,
          column: 22
        },
        end: {
          line: 44,
          column: 41
        }
      },
      "12": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 54,
          column: 5
        }
      },
      "13": {
        start: {
          line: 46,
          column: 38
        },
        end: {
          line: 48,
          column: 26
        }
      },
      "14": {
        start: {
          line: 49,
          column: 6
        },
        end: {
          line: 53,
          column: 8
        }
      },
      "15": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 61
        }
      },
      "16": {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 74,
          column: 8
        }
      },
      "17": {
        start: {
          line: 75,
          column: 24
        },
        end: {
          line: 78,
          column: 5
        }
      },
      "18": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 71
        }
      },
      "19": {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 90,
          column: 7
        }
      },
      "20": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 35
        }
      },
      "21": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 110,
          column: 6
        }
      },
      "22": {
        start: {
          line: 114,
          column: 19
        },
        end: {
          line: 117,
          column: 21
        }
      },
      "23": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        },
        loc: {
          start: {
            line: 18,
            column: 35
          },
          end: {
            line: 35,
            column: 3
          }
        },
        line: 18
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 43,
            column: 3
          }
        },
        loc: {
          start: {
            line: 43,
            column: 35
          },
          end: {
            line: 57,
            column: 3
          }
        },
        line: 43
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 68,
            column: 2
          },
          end: {
            line: 68,
            column: 3
          }
        },
        loc: {
          start: {
            line: 68,
            column: 16
          },
          end: {
            line: 80,
            column: 3
          }
        },
        line: 68
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 85,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        },
        loc: {
          start: {
            line: 85,
            column: 31
          },
          end: {
            line: 91,
            column: 3
          }
        },
        line: 85
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 97,
            column: 3
          }
        },
        loc: {
          start: {
            line: 97,
            column: 17
          },
          end: {
            line: 99,
            column: 3
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 105,
            column: 2
          },
          end: {
            line: 105,
            column: 3
          }
        },
        loc: {
          start: {
            line: 105,
            column: 16
          },
          end: {
            line: 111,
            column: 3
          }
        },
        line: 105
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 113,
            column: 2
          },
          end: {
            line: 113,
            column: 3
          }
        },
        loc: {
          start: {
            line: 113,
            column: 13
          },
          end: {
            line: 119,
            column: 3
          }
        },
        line: 113
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 19,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 19,
            column: 8
          },
          end: {
            line: 19,
            column: 15
          }
        }, {
          start: {
            line: 19,
            column: 19
          },
          end: {
            line: 19,
            column: 45
          }
        }],
        line: 19
      },
      "2": {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "3": {
        loc: {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 15
          }
        }, {
          start: {
            line: 22,
            column: 19
          },
          end: {
            line: 22,
            column: 45
          }
        }],
        line: 22
      },
      "4": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "5": {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "6": {
        loc: {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 43
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 28,
            column: 12
          }
        }, {
          start: {
            line: 28,
            column: 16
          },
          end: {
            line: 28,
            column: 43
          }
        }],
        line: 28
      },
      "7": {
        loc: {
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 4
          },
          end: {
            line: 54,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 109,
            column: 28
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 107,
            column: 38
          }
        }, {
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 108,
            column: 38
          }
        }, {
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 109,
            column: 28
          }
        }],
        line: 107
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "395a60c36d8babed31a1407e479cfdd332387331"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gv5w16r6d = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gv5w16r6d();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





/**
 * LiquidityPoolAsset class represents a liquidity pool trustline change.
 *
 * @constructor
 * @param {Asset} assetA – The first asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.
 * @param {Asset} assetB – The second asset in the Pool, it must respect the rule assetA < assetB. See {@link Asset.compare} for more details on how assets are sorted.
 * @param {number} fee – The liquidity pool fee. For now the only fee supported is `30`.
 */
var LiquidityPoolAsset = /*#__PURE__*/function () {
  function LiquidityPoolAsset(assetA, assetB, fee) {
    _classCallCheck(this, LiquidityPoolAsset);
    cov_2gv5w16r6d().f[0]++;
    cov_2gv5w16r6d().s[0]++;
    if ((cov_2gv5w16r6d().b[1][0]++, !assetA) || (cov_2gv5w16r6d().b[1][1]++, !(assetA instanceof _asset__WEBPACK_IMPORTED_MODULE_2__.Asset))) {
      cov_2gv5w16r6d().b[0][0]++;
      cov_2gv5w16r6d().s[1]++;
      throw new Error('assetA is invalid');
    } else {
      cov_2gv5w16r6d().b[0][1]++;
    }
    cov_2gv5w16r6d().s[2]++;
    if ((cov_2gv5w16r6d().b[3][0]++, !assetB) || (cov_2gv5w16r6d().b[3][1]++, !(assetB instanceof _asset__WEBPACK_IMPORTED_MODULE_2__.Asset))) {
      cov_2gv5w16r6d().b[2][0]++;
      cov_2gv5w16r6d().s[3]++;
      throw new Error('assetB is invalid');
    } else {
      cov_2gv5w16r6d().b[2][1]++;
    }
    cov_2gv5w16r6d().s[4]++;
    if (_asset__WEBPACK_IMPORTED_MODULE_2__.Asset.compare(assetA, assetB) !== -1) {
      cov_2gv5w16r6d().b[4][0]++;
      cov_2gv5w16r6d().s[5]++;
      throw new Error('Assets are not in lexicographic order');
    } else {
      cov_2gv5w16r6d().b[4][1]++;
    }
    cov_2gv5w16r6d().s[6]++;
    if ((cov_2gv5w16r6d().b[6][0]++, !fee) || (cov_2gv5w16r6d().b[6][1]++, fee !== _get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_3__.LiquidityPoolFeeV18)) {
      cov_2gv5w16r6d().b[5][0]++;
      cov_2gv5w16r6d().s[7]++;
      throw new Error('fee is invalid');
    } else {
      cov_2gv5w16r6d().b[5][1]++;
    }
    cov_2gv5w16r6d().s[8]++;
    this.assetA = assetA;
    cov_2gv5w16r6d().s[9]++;
    this.assetB = assetB;
    cov_2gv5w16r6d().s[10]++;
    this.fee = fee;
  }

  /**
   * Returns a liquidity pool asset object from its XDR ChangeTrustAsset object
   * representation.
   * @param {xdr.ChangeTrustAsset} ctAssetXdr - The asset XDR object.
   * @returns {LiquidityPoolAsset}
   */
  _createClass(LiquidityPoolAsset, [{
    key: "toXDRObject",
    value:
    /**
     * Returns the `xdr.ChangeTrustAsset` object for this liquidity pool asset.
     *
     * Note: To convert from an {@link Asset `Asset`} to `xdr.ChangeTrustAsset`
     * please refer to the
     * {@link Asset.toChangeTrustXDRObject `Asset.toChangeTrustXDRObject`} method.
     *
     * @returns {xdr.ChangeTrustAsset} XDR ChangeTrustAsset object.
     */
    function toXDRObject() {
      cov_2gv5w16r6d().f[2]++;
      var lpConstantProductParamsXdr = (cov_2gv5w16r6d().s[16]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LiquidityPoolConstantProductParameters({
        assetA: this.assetA.toXDRObject(),
        assetB: this.assetB.toXDRObject(),
        fee: this.fee
      }));
      var lpParamsXdr = (cov_2gv5w16r6d().s[17]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LiquidityPoolParameters('liquidityPoolConstantProduct', lpConstantProductParamsXdr));
      cov_2gv5w16r6d().s[18]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].ChangeTrustAsset('assetTypePoolShare', lpParamsXdr);
    }

    /**
     * @returns {LiquidityPoolParameters} Liquidity pool parameters.
     */
  }, {
    key: "getLiquidityPoolParameters",
    value: function getLiquidityPoolParameters() {
      cov_2gv5w16r6d().f[3]++;
      cov_2gv5w16r6d().s[19]++;
      return lodash_clone__WEBPACK_IMPORTED_MODULE_0___default()({
        assetA: this.assetA,
        assetB: this.assetB,
        fee: this.fee
      });
    }

    /**
     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)
     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.
     */
  }, {
    key: "getAssetType",
    value: function getAssetType() {
      cov_2gv5w16r6d().f[4]++;
      cov_2gv5w16r6d().s[20]++;
      return 'liquidity_pool_shares';
    }

    /**
     * @param {LiquidityPoolAsset} other the LiquidityPoolAsset to compare
     * @returns {boolean} `true` if this asset equals the given asset.
     */
  }, {
    key: "equals",
    value: function equals(other) {
      cov_2gv5w16r6d().f[5]++;
      cov_2gv5w16r6d().s[21]++;
      return (cov_2gv5w16r6d().b[8][0]++, this.assetA.equals(other.assetA)) && (cov_2gv5w16r6d().b[8][1]++, this.assetB.equals(other.assetB)) && (cov_2gv5w16r6d().b[8][2]++, this.fee === other.fee);
    }
  }, {
    key: "toString",
    value: function toString() {
      cov_2gv5w16r6d().f[6]++;
      var poolId = (cov_2gv5w16r6d().s[22]++, (0,_get_liquidity_pool_id__WEBPACK_IMPORTED_MODULE_3__.getLiquidityPoolId)('constant_product', this.getLiquidityPoolParameters()).toString('hex'));
      cov_2gv5w16r6d().s[23]++;
      return "liquidity_pool:".concat(poolId);
    }
  }], [{
    key: "fromOperation",
    value: function fromOperation(ctAssetXdr) {
      cov_2gv5w16r6d().f[1]++;
      var assetType = (cov_2gv5w16r6d().s[11]++, ctAssetXdr["switch"]());
      cov_2gv5w16r6d().s[12]++;
      if (assetType === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AssetType.assetTypePoolShare()) {
        cov_2gv5w16r6d().b[7][0]++;
        var liquidityPoolParameters = (cov_2gv5w16r6d().s[13]++, ctAssetXdr.liquidityPool().constantProduct());
        cov_2gv5w16r6d().s[14]++;
        return new this(_asset__WEBPACK_IMPORTED_MODULE_2__.Asset.fromOperation(liquidityPoolParameters.assetA()), _asset__WEBPACK_IMPORTED_MODULE_2__.Asset.fromOperation(liquidityPoolParameters.assetB()), liquidityPoolParameters.fee());
      } else {
        cov_2gv5w16r6d().b[7][1]++;
      }
      cov_2gv5w16r6d().s[15]++;
      throw new Error("Invalid asset type: ".concat(assetType.name));
    }
  }]);
  return LiquidityPoolAsset;
}();

/***/ }),

/***/ "./src/liquidity_pool_id.js":
/*!**********************************!*\
  !*** ./src/liquidity_pool_id.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "LiquidityPoolId": () => (/* binding */ LiquidityPoolId)
/* harmony export */ });
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
function cov_2glcac2tn0() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\liquidity_pool_id.js";
  var hash = "5d2cd998cd4ca9bc31c998e3e9113a3b2cf0b136";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\liquidity_pool_id.js",
    statementMap: {
      "0": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "1": {
        start: {
          line: 14,
          column: 6
        },
        end: {
          line: 14,
          column: 57
        }
      },
      "2": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 18,
          column: 5
        }
      },
      "3": {
        start: {
          line: 17,
          column: 6
        },
        end: {
          line: 17,
          column: 63
        }
      },
      "4": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 43
        }
      },
      "5": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 41
        }
      },
      "6": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      "7": {
        start: {
          line: 31,
          column: 30
        },
        end: {
          line: 31,
          column: 74
        }
      },
      "8": {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 39
        }
      },
      "9": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 61
        }
      },
      "10": {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 69
        }
      },
      "11": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 67
        }
      },
      "12": {
        start: {
          line: 56,
          column: 4
        },
        end: {
          line: 56,
          column: 39
        }
      },
      "13": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 35
        }
      },
      "14": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 63
        }
      },
      "15": {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 76,
          column: 52
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 12,
            column: 3
          }
        },
        loc: {
          start: {
            line: 12,
            column: 31
          },
          end: {
            line: 21,
            column: 3
          }
        },
        line: 12
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 28,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        loc: {
          start: {
            line: 28,
            column: 35
          },
          end: {
            line: 36,
            column: 3
          }
        },
        line: 28
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        loc: {
          start: {
            line: 47,
            column: 16
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 47
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 55,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        loc: {
          start: {
            line: 55,
            column: 23
          },
          end: {
            line: 57,
            column: 3
          }
        },
        line: 55
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 17
          },
          end: {
            line: 65,
            column: 3
          }
        },
        line: 63
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 71,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        loc: {
          start: {
            line: 71,
            column: 16
          },
          end: {
            line: 73,
            column: 3
          }
        },
        line: 71
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 75,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        },
        loc: {
          start: {
            line: 75,
            column: 13
          },
          end: {
            line: 77,
            column: 3
          }
        },
        line: 75
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 13,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 13
      },
      "1": {
        loc: {
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 16,
            column: 4
          },
          end: {
            line: 18,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 16
      },
      "2": {
        loc: {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d2cd998cd4ca9bc31c998e3e9113a3b2cf0b136"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2glcac2tn0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2glcac2tn0();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



/**
 * LiquidityPoolId class represents the asset referenced by a trustline to a
 * liquidity pool.
 *
 * @constructor
 * @param {string} liquidityPoolId - The ID of the liquidity pool in string 'hex'.
 */
var LiquidityPoolId = /*#__PURE__*/function () {
  function LiquidityPoolId(liquidityPoolId) {
    _classCallCheck(this, LiquidityPoolId);
    cov_2glcac2tn0().f[0]++;
    cov_2glcac2tn0().s[0]++;
    if (!liquidityPoolId) {
      cov_2glcac2tn0().b[0][0]++;
      cov_2glcac2tn0().s[1]++;
      throw new Error('liquidityPoolId cannot be empty');
    } else {
      cov_2glcac2tn0().b[0][1]++;
    }
    cov_2glcac2tn0().s[2]++;
    if (!/^[a-f0-9]{64}$/.test(liquidityPoolId)) {
      cov_2glcac2tn0().b[1][0]++;
      cov_2glcac2tn0().s[3]++;
      throw new Error('Liquidity pool ID is not a valid hash');
    } else {
      cov_2glcac2tn0().b[1][1]++;
    }
    cov_2glcac2tn0().s[4]++;
    this.liquidityPoolId = liquidityPoolId;
  }

  /**
   * Returns a liquidity pool ID object from its xdr.TrustLineAsset representation.
   * @param {xdr.TrustLineAsset} tlAssetXdr - The asset XDR object.
   * @returns {LiquidityPoolId}
   */
  _createClass(LiquidityPoolId, [{
    key: "toXDRObject",
    value:
    /**
     * Returns the `xdr.TrustLineAsset` object for this liquidity pool ID.
     *
     * Note: To convert from {@link Asset `Asset`} to `xdr.TrustLineAsset` please
     * refer to the
     * {@link Asset.toTrustLineXDRObject `Asset.toTrustLineXDRObject`} method.
     *
     * @returns {xdr.TrustLineAsset} XDR LiquidityPoolId object
     */
    function toXDRObject() {
      cov_2glcac2tn0().f[2]++;
      var xdrPoolId = (cov_2glcac2tn0().s[10]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PoolId.fromXDR(this.liquidityPoolId, 'hex'));
      cov_2glcac2tn0().s[11]++;
      return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TrustLineAsset('assetTypePoolShare', xdrPoolId);
    }

    /**
     * @returns {string} Liquidity pool ID.
     */
  }, {
    key: "getLiquidityPoolId",
    value: function getLiquidityPoolId() {
      cov_2glcac2tn0().f[3]++;
      cov_2glcac2tn0().s[12]++;
      return lodash_clone__WEBPACK_IMPORTED_MODULE_0___default()(this.liquidityPoolId);
    }

    /**
     * @see [Assets concept](https://developers.stellar.org/docs/glossary/assets/)
     * @returns {AssetType.liquidityPoolShares} asset type. Can only be `liquidity_pool_shares`.
     */
  }, {
    key: "getAssetType",
    value: function getAssetType() {
      cov_2glcac2tn0().f[4]++;
      cov_2glcac2tn0().s[13]++;
      return 'liquidity_pool_shares';
    }

    /**
     * @param {LiquidityPoolId} asset LiquidityPoolId to compare.
     * @returns {boolean} `true` if this asset equals the given asset.
     */
  }, {
    key: "equals",
    value: function equals(asset) {
      cov_2glcac2tn0().f[5]++;
      cov_2glcac2tn0().s[14]++;
      return this.liquidityPoolId === asset.getLiquidityPoolId();
    }
  }, {
    key: "toString",
    value: function toString() {
      cov_2glcac2tn0().f[6]++;
      cov_2glcac2tn0().s[15]++;
      return "liquidity_pool:".concat(this.liquidityPoolId);
    }
  }], [{
    key: "fromOperation",
    value: function fromOperation(tlAssetXdr) {
      cov_2glcac2tn0().f[1]++;
      var assetType = (cov_2glcac2tn0().s[5]++, tlAssetXdr["switch"]());
      cov_2glcac2tn0().s[6]++;
      if (assetType === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AssetType.assetTypePoolShare()) {
        cov_2glcac2tn0().b[2][0]++;
        var liquidityPoolId = (cov_2glcac2tn0().s[7]++, tlAssetXdr.liquidityPoolId().toString('hex'));
        cov_2glcac2tn0().s[8]++;
        return new this(liquidityPoolId);
      } else {
        cov_2glcac2tn0().b[2][1]++;
      }
      cov_2glcac2tn0().s[9]++;
      throw new Error("Invalid asset type: ".concat(assetType.name));
    }
  }]);
  return LiquidityPoolId;
}();

/***/ }),

/***/ "./src/memo.js":
/*!*********************!*\
  !*** ./src/memo.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Memo": () => (/* binding */ Memo),
/* harmony export */   "MemoHash": () => (/* binding */ MemoHash),
/* harmony export */   "MemoID": () => (/* binding */ MemoID),
/* harmony export */   "MemoNone": () => (/* binding */ MemoNone),
/* harmony export */   "MemoReturn": () => (/* binding */ MemoReturn),
/* harmony export */   "MemoText": () => (/* binding */ MemoText)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_sftbodbgn() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\memo.js";
  var hash = "854d1a797f8621a11fe73a29dfc8dacc2b026d6b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\memo.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 24
        },
        end: {
          line: 12,
          column: 30
        }
      },
      "1": {
        start: {
          line: 16,
          column: 22
        },
        end: {
          line: 16,
          column: 26
        }
      },
      "2": {
        start: {
          line: 20,
          column: 24
        },
        end: {
          line: 20,
          column: 30
        }
      },
      "3": {
        start: {
          line: 24,
          column: 24
        },
        end: {
          line: 24,
          column: 30
        }
      },
      "4": {
        start: {
          line: 28,
          column: 26
        },
        end: {
          line: 28,
          column: 34
        }
      },
      "5": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 22
        }
      },
      "6": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 24
        }
      },
      "7": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "8": {
        start: {
          line: 45,
          column: 8
        },
        end: {
          line: 45,
          column: 14
        }
      },
      "9": {
        start: {
          line: 47,
          column: 8
        },
        end: {
          line: 47,
          column: 37
        }
      },
      "10": {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 14
        }
      },
      "11": {
        start: {
          line: 50,
          column: 8
        },
        end: {
          line: 50,
          column: 39
        }
      },
      "12": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 14
        }
      },
      "13": {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 39
        }
      },
      "14": {
        start: {
          line: 56,
          column: 8
        },
        end: {
          line: 58,
          column: 9
        }
      },
      "15": {
        start: {
          line: 57,
          column: 10
        },
        end: {
          line: 57,
          column: 57
        }
      },
      "16": {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 14
        }
      },
      "17": {
        start: {
          line: 61,
          column: 8
        },
        end: {
          line: 61,
          column: 45
        }
      },
      "18": {
        start: {
          line: 69,
          column: 4
        },
        end: {
          line: 69,
          column: 29
        }
      },
      "19": {
        start: {
          line: 73,
          column: 4
        },
        end: {
          line: 73,
          column: 41
        }
      },
      "20": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 95,
          column: 5
        }
      },
      "21": {
        start: {
          line: 86,
          column: 8
        },
        end: {
          line: 86,
          column: 20
        }
      },
      "22": {
        start: {
          line: 89,
          column: 8
        },
        end: {
          line: 89,
          column: 34
        }
      },
      "23": {
        start: {
          line: 92,
          column: 8
        },
        end: {
          line: 92,
          column: 47
        }
      },
      "24": {
        start: {
          line: 94,
          column: 8
        },
        end: {
          line: 94,
          column: 45
        }
      },
      "25": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 41
        }
      },
      "26": {
        start: {
          line: 103,
          column: 18
        },
        end: {
          line: 103,
          column: 72
        }
      },
      "27": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 107,
          column: 5
        }
      },
      "28": {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 106,
          column: 18
        }
      },
      "29": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 114,
          column: 5
        }
      },
      "30": {
        start: {
          line: 111,
          column: 6
        },
        end: {
          line: 111,
          column: 36
        }
      },
      "31": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 113,
          column: 18
        }
      },
      "32": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 119,
          column: 5
        }
      },
      "33": {
        start: {
          line: 118,
          column: 6
        },
        end: {
          line: 118,
          column: 18
        }
      },
      "34": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 124,
          column: 5
        }
      },
      "35": {
        start: {
          line: 123,
          column: 6
        },
        end: {
          line: 123,
          column: 18
        }
      },
      "36": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 130,
          column: 5
        }
      },
      "37": {
        start: {
          line: 129,
          column: 6
        },
        end: {
          line: 129,
          column: 71
        }
      },
      "38": {
        start: {
          line: 134,
          column: 18
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "39": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 140,
          column: 5
        }
      },
      "40": {
        start: {
          line: 139,
          column: 6
        },
        end: {
          line: 139,
          column: 18
        }
      },
      "41": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "42": {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 146,
          column: 7
        }
      },
      "43": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 20
        }
      },
      "44": {
        start: {
          line: 147,
          column: 6
        },
        end: {
          line: 147,
          column: 53
        }
      },
      "45": {
        start: {
          line: 148,
          column: 11
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "46": {
        start: {
          line: 149,
          column: 6
        },
        end: {
          line: 149,
          column: 46
        }
      },
      "47": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 151,
          column: 18
        }
      },
      "48": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      "49": {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 155,
          column: 18
        }
      },
      "50": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 164,
          column: 30
        }
      },
      "51": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 36
        }
      },
      "52": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 32
        }
      },
      "53": {
        start: {
          line: 191,
          column: 4
        },
        end: {
          line: 191,
          column: 36
        }
      },
      "54": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 38
        }
      },
      "55": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 221,
          column: 5
        }
      },
      "56": {
        start: {
          line: 210,
          column: 8
        },
        end: {
          line: 210,
          column: 35
        }
      },
      "57": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 212,
          column: 70
        }
      },
      "58": {
        start: {
          line: 214,
          column: 8
        },
        end: {
          line: 214,
          column: 46
        }
      },
      "59": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 46
        }
      },
      "60": {
        start: {
          line: 218,
          column: 8
        },
        end: {
          line: 218,
          column: 48
        }
      },
      "61": {
        start: {
          line: 220,
          column: 8
        },
        end: {
          line: 220,
          column: 20
        }
      },
      "62": {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 241,
          column: 5
        }
      },
      "63": {
        start: {
          line: 232,
          column: 8
        },
        end: {
          line: 232,
          column: 50
        }
      },
      "64": {
        start: {
          line: 234,
          column: 8
        },
        end: {
          line: 234,
          column: 41
        }
      },
      "65": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 41
        }
      },
      "66": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 43
        }
      },
      "67": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 14
        }
      },
      "68": {
        start: {
          line: 243,
          column: 4
        },
        end: {
          line: 245,
          column: 5
        }
      },
      "69": {
        start: {
          line: 244,
          column: 6
        },
        end: {
          line: 244,
          column: 25
        }
      },
      "70": {
        start: {
          line: 247,
          column: 4
        },
        end: {
          line: 247,
          column: 36
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        loc: {
          start: {
            line: 39,
            column: 34
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 39
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 68,
            column: 2
          },
          end: {
            line: 68,
            column: 3
          }
        },
        loc: {
          start: {
            line: 68,
            column: 13
          },
          end: {
            line: 70,
            column: 3
          }
        },
        line: 68
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 72,
            column: 2
          },
          end: {
            line: 72,
            column: 3
          }
        },
        loc: {
          start: {
            line: 72,
            column: 17
          },
          end: {
            line: 74,
            column: 3
          }
        },
        line: 72
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 83,
            column: 3
          }
        },
        loc: {
          start: {
            line: 83,
            column: 14
          },
          end: {
            line: 96,
            column: 3
          }
        },
        line: 83
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 98,
            column: 2
          },
          end: {
            line: 98,
            column: 3
          }
        },
        loc: {
          start: {
            line: 98,
            column: 19
          },
          end: {
            line: 100,
            column: 3
          }
        },
        line: 98
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 102,
            column: 2
          },
          end: {
            line: 102,
            column: 3
          }
        },
        loc: {
          start: {
            line: 102,
            column: 33
          },
          end: {
            line: 125,
            column: 3
          }
        },
        line: 102
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 127,
            column: 2
          },
          end: {
            line: 127,
            column: 3
          }
        },
        loc: {
          start: {
            line: 127,
            column: 35
          },
          end: {
            line: 131,
            column: 3
          }
        },
        line: 127
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 133,
            column: 2
          },
          end: {
            line: 133,
            column: 3
          }
        },
        loc: {
          start: {
            line: 133,
            column: 35
          },
          end: {
            line: 157,
            column: 3
          }
        },
        line: 133
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 163,
            column: 2
          },
          end: {
            line: 163,
            column: 3
          }
        },
        loc: {
          start: {
            line: 163,
            column: 16
          },
          end: {
            line: 165,
            column: 3
          }
        },
        line: 163
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 172,
            column: 2
          },
          end: {
            line: 172,
            column: 3
          }
        },
        loc: {
          start: {
            line: 172,
            column: 20
          },
          end: {
            line: 174,
            column: 3
          }
        },
        line: 172
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 181,
            column: 2
          },
          end: {
            line: 181,
            column: 3
          }
        },
        loc: {
          start: {
            line: 181,
            column: 16
          },
          end: {
            line: 183,
            column: 3
          }
        },
        line: 181
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 190,
            column: 2
          },
          end: {
            line: 190,
            column: 3
          }
        },
        loc: {
          start: {
            line: 190,
            column: 20
          },
          end: {
            line: 192,
            column: 3
          }
        },
        line: 190
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 199,
            column: 2
          },
          end: {
            line: 199,
            column: 3
          }
        },
        loc: {
          start: {
            line: 199,
            column: 22
          },
          end: {
            line: 201,
            column: 3
          }
        },
        line: 199
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 207,
            column: 2
          },
          end: {
            line: 207,
            column: 3
          }
        },
        loc: {
          start: {
            line: 207,
            column: 16
          },
          end: {
            line: 222,
            column: 3
          }
        },
        line: 207
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 229,
            column: 2
          },
          end: {
            line: 229,
            column: 3
          }
        },
        loc: {
          start: {
            line: 229,
            column: 31
          },
          end: {
            line: 248,
            column: 3
          }
        },
        line: 229
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 20
          },
          end: {
            line: 39,
            column: 32
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 39,
            column: 28
          },
          end: {
            line: 39,
            column: 32
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 45,
            column: 14
          }
        }, {
          start: {
            line: 46,
            column: 6
          },
          end: {
            line: 48,
            column: 14
          }
        }, {
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 51,
            column: 14
          }
        }, {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 52,
            column: 20
          }
        }, {
          start: {
            line: 53,
            column: 6
          },
          end: {
            line: 59,
            column: 14
          }
        }, {
          start: {
            line: 60,
            column: 6
          },
          end: {
            line: 61,
            column: 45
          }
        }],
        line: 43
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 8
          },
          end: {
            line: 58,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 95,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 85,
            column: 6
          },
          end: {
            line: 86,
            column: 20
          }
        }, {
          start: {
            line: 87,
            column: 6
          },
          end: {
            line: 87,
            column: 18
          }
        }, {
          start: {
            line: 88,
            column: 6
          },
          end: {
            line: 89,
            column: 34
          }
        }, {
          start: {
            line: 90,
            column: 6
          },
          end: {
            line: 90,
            column: 20
          }
        }, {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 92,
            column: 47
          }
        }, {
          start: {
            line: 93,
            column: 6
          },
          end: {
            line: 94,
            column: 45
          }
        }],
        line: 84
      },
      "4": {
        loc: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 107,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 105
      },
      "5": {
        loc: {
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 117,
            column: 4
          },
          end: {
            line: 119,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 117
      },
      "6": {
        loc: {
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 122,
            column: 4
          },
          end: {
            line: 124,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 122
      },
      "7": {
        loc: {
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 128,
            column: 4
          },
          end: {
            line: 130,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 128
      },
      "8": {
        loc: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 140,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "9": {
        loc: {
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 138,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 138,
            column: 8
          },
          end: {
            line: 138,
            column: 22
          }
        }, {
          start: {
            line: 138,
            column: 26
          },
          end: {
            line: 138,
            column: 44
          }
        }],
        line: 138
      },
      "10": {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: 148,
            column: 11
          },
          end: {
            line: 152,
            column: 5
          }
        }],
        line: 143
      },
      "11": {
        loc: {
          start: {
            line: 144,
            column: 6
          },
          end: {
            line: 146,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 144,
            column: 6
          },
          end: {
            line: 146,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 144
      },
      "12": {
        loc: {
          start: {
            line: 148,
            column: 11
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 148,
            column: 11
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: 150,
            column: 11
          },
          end: {
            line: 152,
            column: 5
          }
        }],
        line: 148
      },
      "13": {
        loc: {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "14": {
        loc: {
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 154,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 154,
            column: 8
          },
          end: {
            line: 154,
            column: 27
          }
        }, {
          start: {
            line: 154,
            column: 31
          },
          end: {
            line: 154,
            column: 56
          }
        }],
        line: 154
      },
      "15": {
        loc: {
          start: {
            line: 208,
            column: 4
          },
          end: {
            line: 221,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 209,
            column: 6
          },
          end: {
            line: 210,
            column: 35
          }
        }, {
          start: {
            line: 211,
            column: 6
          },
          end: {
            line: 212,
            column: 70
          }
        }, {
          start: {
            line: 213,
            column: 6
          },
          end: {
            line: 214,
            column: 46
          }
        }, {
          start: {
            line: 215,
            column: 6
          },
          end: {
            line: 216,
            column: 46
          }
        }, {
          start: {
            line: 217,
            column: 6
          },
          end: {
            line: 218,
            column: 48
          }
        }, {
          start: {
            line: 219,
            column: 6
          },
          end: {
            line: 220,
            column: 20
          }
        }],
        line: 208
      },
      "16": {
        loc: {
          start: {
            line: 230,
            column: 4
          },
          end: {
            line: 241,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 231,
            column: 6
          },
          end: {
            line: 232,
            column: 50
          }
        }, {
          start: {
            line: 233,
            column: 6
          },
          end: {
            line: 234,
            column: 41
          }
        }, {
          start: {
            line: 235,
            column: 6
          },
          end: {
            line: 236,
            column: 41
          }
        }, {
          start: {
            line: 237,
            column: 6
          },
          end: {
            line: 238,
            column: 43
          }
        }, {
          start: {
            line: 239,
            column: 6
          },
          end: {
            line: 240,
            column: 14
          }
        }],
        line: 230
      },
      "17": {
        loc: {
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 243,
            column: 4
          },
          end: {
            line: 245,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 243
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    b: {
      "0": [0],
      "1": [0, 0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0, 0, 0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0, 0, 0, 0, 0],
      "16": [0, 0, 0, 0, 0],
      "17": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "854d1a797f8621a11fe73a29dfc8dacc2b026d6b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_sftbodbgn = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_sftbodbgn();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }








/**
 * Type of {@link Memo}.
 */
var MemoNone = (cov_sftbodbgn().s[0]++, 'none');
/**
 * Type of {@link Memo}.
 */
var MemoID = (cov_sftbodbgn().s[1]++, 'id');
/**
 * Type of {@link Memo}.
 */
var MemoText = (cov_sftbodbgn().s[2]++, 'text');
/**
 * Type of {@link Memo}.
 */
var MemoHash = (cov_sftbodbgn().s[3]++, 'hash');
/**
 * Type of {@link Memo}.
 */
var MemoReturn = (cov_sftbodbgn().s[4]++, 'return');

/**
 * `Memo` represents memos attached to transactions.
 *
 * @param {string} type - `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`
 * @param {*} value - `string` for `MemoID`, `MemoText`, buffer of hex string for `MemoHash` or `MemoReturn`
 * @see [Transactions concept](https://developers.stellar.org/docs/glossary/transactions/)
 * @class Memo
 */
var Memo = /*#__PURE__*/function () {
  function Memo(type) {
    var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_sftbodbgn().b[0][0]++, null);
    _classCallCheck(this, Memo);
    cov_sftbodbgn().f[0]++;
    cov_sftbodbgn().s[5]++;
    this._type = type;
    cov_sftbodbgn().s[6]++;
    this._value = value;
    cov_sftbodbgn().s[7]++;
    switch (this._type) {
      case MemoNone:
        cov_sftbodbgn().b[1][0]++;
        cov_sftbodbgn().s[8]++;
        break;
      case MemoID:
        cov_sftbodbgn().b[1][1]++;
        cov_sftbodbgn().s[9]++;
        Memo._validateIdValue(value);
        cov_sftbodbgn().s[10]++;
        break;
      case MemoText:
        cov_sftbodbgn().b[1][2]++;
        cov_sftbodbgn().s[11]++;
        Memo._validateTextValue(value);
        cov_sftbodbgn().s[12]++;
        break;
      case MemoHash:
        cov_sftbodbgn().b[1][3]++;
      case MemoReturn:
        cov_sftbodbgn().b[1][4]++;
        cov_sftbodbgn().s[13]++;
        Memo._validateHashValue(value);
        // We want MemoHash and MemoReturn to have BrowserBuffer as a value
        cov_sftbodbgn().s[14]++;
        if (lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(value)) {
          cov_sftbodbgn().b[2][0]++;
          cov_sftbodbgn().s[15]++;
          this._value = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(value, 'hex');
        } else {
          cov_sftbodbgn().b[2][1]++;
        }
        cov_sftbodbgn().s[16]++;
        break;
      default:
        cov_sftbodbgn().b[1][5]++;
        cov_sftbodbgn().s[17]++;
        throw new Error('Invalid memo type');
    }
  }

  /**
   * Contains memo type: `MemoNone`, `MemoID`, `MemoText`, `MemoHash` or `MemoReturn`
   */
  _createClass(Memo, [{
    key: "type",
    get: function get() {
      cov_sftbodbgn().f[1]++;
      cov_sftbodbgn().s[18]++;
      return lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(this._type);
    },
    set: function set(type) {
      cov_sftbodbgn().f[2]++;
      cov_sftbodbgn().s[19]++;
      throw new Error('Memo is immutable');
    }

    /**
     * Contains memo value:
     * * `null` for `MemoNone`,
     * * `string` for `MemoID`,
     * * `Buffer` for `MemoText` after decoding using `fromXDRObject`, original value otherwise,
     * * `Buffer` for `MemoHash`, `MemoReturn`.
     */
  }, {
    key: "value",
    get: function get() {
      cov_sftbodbgn().f[3]++;
      cov_sftbodbgn().s[20]++;
      switch (this._type) {
        case MemoNone:
          cov_sftbodbgn().b[3][0]++;
          cov_sftbodbgn().s[21]++;
          return null;
        case MemoID:
          cov_sftbodbgn().b[3][1]++;
        case MemoText:
          cov_sftbodbgn().b[3][2]++;
          cov_sftbodbgn().s[22]++;
          return lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(this._value);
        case MemoHash:
          cov_sftbodbgn().b[3][3]++;
        case MemoReturn:
          cov_sftbodbgn().b[3][4]++;
          cov_sftbodbgn().s[23]++;
          return _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(this._value);
        default:
          cov_sftbodbgn().b[3][5]++;
          cov_sftbodbgn().s[24]++;
          throw new Error('Invalid memo type');
      }
    },
    set: function set(value) {
      cov_sftbodbgn().f[4]++;
      cov_sftbodbgn().s[25]++;
      throw new Error('Memo is immutable');
    }
  }, {
    key: "toXDRObject",
    value:
    /**
     * Returns XDR memo object.
     * @returns {xdr.Memo}
     */
    function toXDRObject() {
      cov_sftbodbgn().f[13]++;
      cov_sftbodbgn().s[55]++;
      switch (this._type) {
        case MemoNone:
          cov_sftbodbgn().b[15][0]++;
          cov_sftbodbgn().s[56]++;
          return _xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.memoNone();
        case MemoID:
          cov_sftbodbgn().b[15][1]++;
          cov_sftbodbgn().s[57]++;
          return _xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.memoId(js_xdr__WEBPACK_IMPORTED_MODULE_3__.UnsignedHyper.fromString(this._value));
        case MemoText:
          cov_sftbodbgn().b[15][2]++;
          cov_sftbodbgn().s[58]++;
          return _xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.memoText(this._value);
        case MemoHash:
          cov_sftbodbgn().b[15][3]++;
          cov_sftbodbgn().s[59]++;
          return _xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.memoHash(this._value);
        case MemoReturn:
          cov_sftbodbgn().b[15][4]++;
          cov_sftbodbgn().s[60]++;
          return _xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.memoReturn(this._value);
        default:
          cov_sftbodbgn().b[15][5]++;
          cov_sftbodbgn().s[61]++;
          return null;
      }
    }

    /**
     * Returns {@link Memo} from XDR memo object.
     * @param {xdr.Memo} object XDR memo object
     * @returns {Memo}
     */
  }], [{
    key: "_validateIdValue",
    value: function _validateIdValue(value) {
      cov_sftbodbgn().f[5]++;
      var error = (cov_sftbodbgn().s[26]++, new Error("Expects a int64 as a string. Got ".concat(value)));
      cov_sftbodbgn().s[27]++;
      if (!lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(value)) {
        cov_sftbodbgn().b[4][0]++;
        cov_sftbodbgn().s[28]++;
        throw error;
      } else {
        cov_sftbodbgn().b[4][1]++;
      }
      var number;
      cov_sftbodbgn().s[29]++;
      try {
        cov_sftbodbgn().s[30]++;
        number = new bignumber_js__WEBPACK_IMPORTED_MODULE_4__["default"](value);
      } catch (e) {
        cov_sftbodbgn().s[31]++;
        throw error;
      }

      // Infinity
      cov_sftbodbgn().s[32]++;
      if (!number.isFinite()) {
        cov_sftbodbgn().b[5][0]++;
        cov_sftbodbgn().s[33]++;
        throw error;
      } else {
        cov_sftbodbgn().b[5][1]++;
      }

      // NaN
      cov_sftbodbgn().s[34]++;
      if (number.isNaN()) {
        cov_sftbodbgn().b[6][0]++;
        cov_sftbodbgn().s[35]++;
        throw error;
      } else {
        cov_sftbodbgn().b[6][1]++;
      }
    }
  }, {
    key: "_validateTextValue",
    value: function _validateTextValue(value) {
      cov_sftbodbgn().f[6]++;
      cov_sftbodbgn().s[36]++;
      if (!_xdr__WEBPACK_IMPORTED_MODULE_5__["default"].Memo.armTypeForArm('text').isValid(value)) {
        cov_sftbodbgn().b[7][0]++;
        cov_sftbodbgn().s[37]++;
        throw new Error('Expects string, array or buffer, max 28 bytes');
      } else {
        cov_sftbodbgn().b[7][1]++;
      }
    }
  }, {
    key: "_validateHashValue",
    value: function _validateHashValue(value) {
      cov_sftbodbgn().f[7]++;
      var error = (cov_sftbodbgn().s[38]++, new Error("Expects a 32 byte hash value or hex encoded string. Got ".concat(value)));
      cov_sftbodbgn().s[39]++;
      if ((cov_sftbodbgn().b[9][0]++, value === null) || (cov_sftbodbgn().b[9][1]++, lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(value))) {
        cov_sftbodbgn().b[8][0]++;
        cov_sftbodbgn().s[40]++;
        throw error;
      } else {
        cov_sftbodbgn().b[8][1]++;
      }
      var valueBuffer;
      cov_sftbodbgn().s[41]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(value)) {
        cov_sftbodbgn().b[10][0]++;
        cov_sftbodbgn().s[42]++;
        if (!/^[0-9A-Fa-f]{64}$/g.test(value)) {
          cov_sftbodbgn().b[11][0]++;
          cov_sftbodbgn().s[43]++;
          throw error;
        } else {
          cov_sftbodbgn().b[11][1]++;
        }
        cov_sftbodbgn().s[44]++;
        valueBuffer = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(value, 'hex');
      } else {
        cov_sftbodbgn().b[10][1]++;
        cov_sftbodbgn().s[45]++;
        if (_util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].isBuffer(value)) {
          cov_sftbodbgn().b[12][0]++;
          cov_sftbodbgn().s[46]++;
          valueBuffer = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(value);
        } else {
          cov_sftbodbgn().b[12][1]++;
          cov_sftbodbgn().s[47]++;
          throw error;
        }
      }
      cov_sftbodbgn().s[48]++;
      if ((cov_sftbodbgn().b[14][0]++, !valueBuffer.length) || (cov_sftbodbgn().b[14][1]++, valueBuffer.length !== 32)) {
        cov_sftbodbgn().b[13][0]++;
        cov_sftbodbgn().s[49]++;
        throw error;
      } else {
        cov_sftbodbgn().b[13][1]++;
      }
    }

    /**
     * Returns an empty memo (`MemoNone`).
     * @returns {Memo}
     */
  }, {
    key: "none",
    value: function none() {
      cov_sftbodbgn().f[8]++;
      cov_sftbodbgn().s[50]++;
      return new Memo(MemoNone);
    }

    /**
     * Creates and returns a `MemoText` memo.
     * @param {string} text - memo text
     * @returns {Memo}
     */
  }, {
    key: "text",
    value: function text(_text) {
      cov_sftbodbgn().f[9]++;
      cov_sftbodbgn().s[51]++;
      return new Memo(MemoText, _text);
    }

    /**
     * Creates and returns a `MemoID` memo.
     * @param {string} id - 64-bit number represented as a string
     * @returns {Memo}
     */
  }, {
    key: "id",
    value: function id(_id) {
      cov_sftbodbgn().f[10]++;
      cov_sftbodbgn().s[52]++;
      return new Memo(MemoID, _id);
    }

    /**
     * Creates and returns a `MemoHash` memo.
     * @param {array|string} hash - 32 byte hash or hex encoded string
     * @returns {Memo}
     */
  }, {
    key: "hash",
    value: function hash(_hash) {
      cov_sftbodbgn().f[11]++;
      cov_sftbodbgn().s[53]++;
      return new Memo(MemoHash, _hash);
    }

    /**
     * Creates and returns a `MemoReturn` memo.
     * @param {array|string} hash - 32 byte hash or hex encoded string
     * @returns {Memo}
     */
  }, {
    key: "return",
    value: function _return(hash) {
      cov_sftbodbgn().f[12]++;
      cov_sftbodbgn().s[54]++;
      return new Memo(MemoReturn, hash);
    }
  }, {
    key: "fromXDRObject",
    value: function fromXDRObject(object) {
      cov_sftbodbgn().f[14]++;
      cov_sftbodbgn().s[62]++;
      switch (object.arm()) {
        case 'id':
          cov_sftbodbgn().b[16][0]++;
          cov_sftbodbgn().s[63]++;
          return Memo.id(object.value().toString());
        case 'text':
          cov_sftbodbgn().b[16][1]++;
          cov_sftbodbgn().s[64]++;
          return Memo.text(object.value());
        case 'hash':
          cov_sftbodbgn().b[16][2]++;
          cov_sftbodbgn().s[65]++;
          return Memo.hash(object.value());
        case 'retHash':
          cov_sftbodbgn().b[16][3]++;
          cov_sftbodbgn().s[66]++;
          return Memo["return"](object.value());
        default:
          cov_sftbodbgn().b[16][4]++;
          cov_sftbodbgn().s[67]++;
          break;
      }
      cov_sftbodbgn().s[68]++;
      if (typeof object.value() === 'undefined') {
        cov_sftbodbgn().b[17][0]++;
        cov_sftbodbgn().s[69]++;
        return Memo.none();
      } else {
        cov_sftbodbgn().b[17][1]++;
      }
      cov_sftbodbgn().s[70]++;
      throw new Error('Unknown type');
    }
  }]);
  return Memo;
}();

/***/ }),

/***/ "./src/muxed_account.js":
/*!******************************!*\
  !*** ./src/muxed_account.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MuxedAccount": () => (/* binding */ MuxedAccount)
/* harmony export */ });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _account__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account */ "./src/account.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_1q7w1nhms() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\muxed_account.js";
  var hash = "aa61c0f496e3fd5e8e1d154da9bc247f43450728";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\muxed_account.js",
    statementMap: {
      "0": {
        start: {
          line: 52,
          column: 22
        },
        end: {
          line: 52,
          column: 45
        }
      },
      "1": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "2": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "3": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 57,
          column: 31
        }
      },
      "4": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 55
        }
      },
      "5": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 65
        }
      },
      "6": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 18
        }
      },
      "7": {
        start: {
          line: 75,
          column: 25
        },
        end: {
          line: 75,
          column: 62
        }
      },
      "8": {
        start: {
          line: 76,
          column: 21
        },
        end: {
          line: 76,
          column: 49
        }
      },
      "9": {
        start: {
          line: 77,
          column: 15
        },
        end: {
          line: 77,
          column: 54
        }
      },
      "10": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 68
        }
      },
      "11": {
        start: {
          line: 87,
          column: 4
        },
        end: {
          line: 87,
          column: 24
        }
      },
      "12": {
        start: {
          line: 94,
          column: 4
        },
        end: {
          line: 94,
          column: 26
        }
      },
      "13": {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 98,
          column: 20
        }
      },
      "14": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 104,
          column: 5
        }
      },
      "15": {
        start: {
          line: 103,
          column: 6
        },
        end: {
          line: 103,
          column: 78
        }
      },
      "16": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 106,
          column: 60
        }
      },
      "17": {
        start: {
          line: 107,
          column: 4
        },
        end: {
          line: 107,
          column: 65
        }
      },
      "18": {
        start: {
          line: 108,
          column: 4
        },
        end: {
          line: 108,
          column: 18
        }
      },
      "19": {
        start: {
          line: 109,
          column: 4
        },
        end: {
          line: 109,
          column: 16
        }
      },
      "20": {
        start: {
          line: 117,
          column: 4
        },
        end: {
          line: 117,
          column: 41
        }
      },
      "21": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 50
        }
      },
      "22": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 133,
          column: 26
        }
      },
      "23": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 62
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        loc: {
          start: {
            line: 51,
            column: 31
          },
          end: {
            line: 61,
            column: 3
          }
        },
        line: 51
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 74,
            column: 2
          },
          end: {
            line: 74,
            column: 3
          }
        },
        loc: {
          start: {
            line: 74,
            column: 44
          },
          end: {
            line: 80,
            column: 3
          }
        },
        line: 74
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 86,
            column: 2
          },
          end: {
            line: 86,
            column: 3
          }
        },
        loc: {
          start: {
            line: 86,
            column: 16
          },
          end: {
            line: 88,
            column: 3
          }
        },
        line: 86
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 93,
            column: 3
          }
        },
        loc: {
          start: {
            line: 93,
            column: 14
          },
          end: {
            line: 95,
            column: 3
          }
        },
        line: 93
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 97,
            column: 2
          },
          end: {
            line: 97,
            column: 3
          }
        },
        loc: {
          start: {
            line: 97,
            column: 7
          },
          end: {
            line: 99,
            column: 3
          }
        },
        line: 97
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 101,
            column: 2
          },
          end: {
            line: 101,
            column: 3
          }
        },
        loc: {
          start: {
            line: 101,
            column: 12
          },
          end: {
            line: 110,
            column: 3
          }
        },
        line: 101
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 116,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        },
        loc: {
          start: {
            line: 116,
            column: 19
          },
          end: {
            line: 118,
            column: 3
          }
        },
        line: 116
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 124,
            column: 3
          }
        },
        loc: {
          start: {
            line: 124,
            column: 28
          },
          end: {
            line: 126,
            column: 3
          }
        },
        line: 124
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 132,
            column: 2
          },
          end: {
            line: 132,
            column: 3
          }
        },
        loc: {
          start: {
            line: 132,
            column: 16
          },
          end: {
            line: 134,
            column: 3
          }
        },
        line: 132
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        },
        loc: {
          start: {
            line: 136,
            column: 28
          },
          end: {
            line: 138,
            column: 3
          }
        },
        line: 136
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "1": {
        loc: {
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 102,
            column: 4
          },
          end: {
            line: 104,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 102
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aa61c0f496e3fd5e8e1d154da9bc247f43450728"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1q7w1nhms = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1q7w1nhms();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }






/**
 * Represents a muxed account for transactions and operations.
 *
 * A muxed (or *multiplexed*) account (defined rigorously in
 * [CAP-27](https://stellar.org/protocol/cap-27) and briefly in
 * [SEP-23](https://stellar.org/protocol/sep-23)) is one that resolves a single
 * Stellar `G...`` account to many different underlying IDs.
 *
 * For example, you may have a single Stellar address for accounting purposes:
 *   GA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJVSGZ
 *
 * Yet would like to use it for 4 different family members:
 *   1: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAGZFQ
 *   2: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAALIWQ
 *   3: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAPYHQ
 *   4: MA7QYNF7SOWQ3GLR2BGMZEHXAVIRZA4KVWLTJJFC7MGXUA74P7UJUAAAAAAAAAAAAQLQQ
 *
 * This object makes it easy to create muxed accounts from regular accounts,
 * duplicate them, get/set the underlying IDs, etc. without mucking around with
 * the raw XDR.
 *
 * Because muxed accounts are purely an off-chain convention, they all share the
 * sequence number tied to their underlying G... account. Thus, this object
 * *requires* an {@link Account} instance to be passed in, so that muxed
 * instances of an account can collectively modify the sequence number whenever
 * a muxed account is used as the source of a @{link Transaction} with {@link
 * TransactionBuilder}.
 *
 * @constructor
 *
 * @param {Account}   account - the @{link Account} instance representing the
 *                              underlying G... address
 * @param {string}    id      - a stringified uint64 value that represents the
 *                              ID of the muxed account
 *
 * @link https://developers.stellar.org/docs/glossary/muxed-accounts/
 */
var MuxedAccount = /*#__PURE__*/function () {
  function MuxedAccount(baseAccount, id) {
    _classCallCheck(this, MuxedAccount);
    cov_1q7w1nhms().f[0]++;
    var accountId = (cov_1q7w1nhms().s[0]++, baseAccount.accountId());
    cov_1q7w1nhms().s[1]++;
    if (!_strkey__WEBPACK_IMPORTED_MODULE_3__.StrKey.isValidEd25519PublicKey(accountId)) {
      cov_1q7w1nhms().b[0][0]++;
      cov_1q7w1nhms().s[2]++;
      throw new Error('accountId is invalid');
    } else {
      cov_1q7w1nhms().b[0][1]++;
    }
    cov_1q7w1nhms().s[3]++;
    this.account = baseAccount;
    cov_1q7w1nhms().s[4]++;
    this._muxedXdr = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.encodeMuxedAccount)(accountId, id);
    cov_1q7w1nhms().s[5]++;
    this._mAddress = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.encodeMuxedAccountToAddress)(this._muxedXdr);
    cov_1q7w1nhms().s[6]++;
    this._id = id;
  }

  /**
   * Parses an M-address into a MuxedAccount object.
   *
   * @param  {string} mAddress    - an M-address to transform
   * @param  {string} sequenceNum - the sequence number of the underlying {@link
   *     Account}, to use for the underlying base account (@link
   *     MuxedAccount.baseAccount). If you're using the SDK, you can use
   *     `server.loadAccount` to fetch this if you don't know it.
   *
   * @return {MuxedAccount}
   */
  _createClass(MuxedAccount, [{
    key: "baseAccount",
    value:
    /**
     * @return {Account} the underlying account object shared among all muxed
     *     accounts with this Stellar address
     */
    function baseAccount() {
      cov_1q7w1nhms().f[2]++;
      cov_1q7w1nhms().s[11]++;
      return this.account;
    }

    /**
     * @return {string} the M-address representing this account's (G-address, ID)
     */
  }, {
    key: "accountId",
    value: function accountId() {
      cov_1q7w1nhms().f[3]++;
      cov_1q7w1nhms().s[12]++;
      return this._mAddress;
    }
  }, {
    key: "id",
    value: function id() {
      cov_1q7w1nhms().f[4]++;
      cov_1q7w1nhms().s[13]++;
      return this._id;
    }
  }, {
    key: "setId",
    value: function setId(id) {
      cov_1q7w1nhms().f[5]++;
      cov_1q7w1nhms().s[14]++;
      if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(id)) {
        cov_1q7w1nhms().b[1][0]++;
        cov_1q7w1nhms().s[15]++;
        throw new Error('id should be a string representing a number (uint64)');
      } else {
        cov_1q7w1nhms().b[1][1]++;
      }
      cov_1q7w1nhms().s[16]++;
      this._muxedXdr.med25519().id(_xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Uint64.fromString(id));
      cov_1q7w1nhms().s[17]++;
      this._mAddress = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.encodeMuxedAccountToAddress)(this._muxedXdr);
      cov_1q7w1nhms().s[18]++;
      this._id = id;
      cov_1q7w1nhms().s[19]++;
      return this;
    }

    /**
     * Accesses the underlying account's sequence number.
     * @return {string}  strigified sequence number for the underlying account
     */
  }, {
    key: "sequenceNumber",
    value: function sequenceNumber() {
      cov_1q7w1nhms().f[6]++;
      cov_1q7w1nhms().s[20]++;
      return this.account.sequenceNumber();
    }

    /**
     * Increments the underlying account's sequence number by one.
     * @return {void}
     */
  }, {
    key: "incrementSequenceNumber",
    value: function incrementSequenceNumber() {
      cov_1q7w1nhms().f[7]++;
      cov_1q7w1nhms().s[21]++;
      return this.account.incrementSequenceNumber();
    }

    /**
     * @return {xdr.MuxedAccount} the XDR object representing this muxed account's
     *     G-address and uint64 ID
     */
  }, {
    key: "toXDRObject",
    value: function toXDRObject() {
      cov_1q7w1nhms().f[8]++;
      cov_1q7w1nhms().s[22]++;
      return this._muxedXdr;
    }
  }, {
    key: "equals",
    value: function equals(otherMuxedAccount) {
      cov_1q7w1nhms().f[9]++;
      cov_1q7w1nhms().s[23]++;
      return this.accountId() === otherMuxedAccount.accountId();
    }
  }], [{
    key: "fromAddress",
    value: function fromAddress(mAddress, sequenceNum) {
      cov_1q7w1nhms().f[1]++;
      var muxedAccount = (cov_1q7w1nhms().s[7]++, (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.decodeAddressToMuxedAccount)(mAddress));
      var gAddress = (cov_1q7w1nhms().s[8]++, (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_4__.extractBaseAddress)(mAddress));
      var id = (cov_1q7w1nhms().s[9]++, muxedAccount.med25519().id().toString());
      cov_1q7w1nhms().s[10]++;
      return new MuxedAccount(new _account__WEBPACK_IMPORTED_MODULE_2__.Account(gAddress, sequenceNum), id);
    }
  }]);
  return MuxedAccount;
}();

/***/ }),

/***/ "./src/network.js":
/*!************************!*\
  !*** ./src/network.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Networks": () => (/* binding */ Networks)
/* harmony export */ });
function cov_u5wyb356h() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\network.js";
  var hash = "5d23acf587ff471c681677c94b2f10e4d4b9c424";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\network.js",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 24
        },
        end: {
          line: 10,
          column: 1
        }
      }
    },
    fnMap: {},
    branchMap: {},
    s: {
      "0": 0
    },
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5d23acf587ff471c681677c94b2f10e4d4b9c424"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_u5wyb356h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_u5wyb356h();
/**
 * Contains passphrases for common networks:
 * * `Networks.PUBLIC`: `Public Global Stellar Network ; September 2015`
 * * `Networks.TESTNET`: `Test SDF Network ; September 2015`
 * @type {{PUBLIC: string, TESTNET: string}}
 */
var Networks = (cov_u5wyb356h().s[0]++, {
  PUBLIC: 'Public Global Stellar Network ; September 2015',
  TESTNET: 'Test SDF Network ; September 2015'
});

/***/ }),

/***/ "./src/operation.js":
/*!**************************!*\
  !*** ./src/operation.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthClawbackEnabledFlag": () => (/* binding */ AuthClawbackEnabledFlag),
/* harmony export */   "AuthImmutableFlag": () => (/* binding */ AuthImmutableFlag),
/* harmony export */   "AuthRequiredFlag": () => (/* binding */ AuthRequiredFlag),
/* harmony export */   "AuthRevocableFlag": () => (/* binding */ AuthRevocableFlag),
/* harmony export */   "Operation": () => (/* binding */ Operation)
/* harmony export */ });
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/trimEnd */ "./node_modules/lodash/trimEnd.js");
/* harmony import */ var lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isNumber */ "./node_modules/lodash/isNumber.js");
/* harmony import */ var lodash_isNumber__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isNumber__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var lodash_isFinite__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! lodash/isFinite */ "./node_modules/lodash/isFinite.js");
/* harmony import */ var lodash_isFinite__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(lodash_isFinite__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util_continued_fraction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/continued_fraction */ "./src/util/continued_fraction.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./asset */ "./src/asset.js");
/* harmony import */ var _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./liquidity_pool_asset */ "./src/liquidity_pool_asset.js");
/* harmony import */ var _claimant__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./claimant */ "./src/claimant.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* harmony import */ var _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./liquidity_pool_id */ "./src/liquidity_pool_id.js");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _operations_index__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./operations/index */ "./src/operations/index.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_1jzfu96gqr() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operation.js";
  var hash = "757a6b148f0586f5b2f43ee8c12c051e16b1e711";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operation.js",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 12
        },
        end: {
          line: 23,
          column: 20
        }
      },
      "1": {
        start: {
          line: 24,
          column: 18
        },
        end: {
          line: 24,
          column: 39
        }
      },
      "2": {
        start: {
          line: 34,
          column: 32
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "3": {
        start: {
          line: 42,
          column: 33
        },
        end: {
          line: 42,
          column: 39
        }
      },
      "4": {
        start: {
          line: 50,
          column: 33
        },
        end: {
          line: 50,
          column: 39
        }
      },
      "5": {
        start: {
          line: 60,
          column: 39
        },
        end: {
          line: 60,
          column: 45
        }
      },
      "6": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 106,
          column: 5
        }
      },
      "7": {
        start: {
          line: 101,
          column: 6
        },
        end: {
          line: 105,
          column: 7
        }
      },
      "8": {
        start: {
          line: 102,
          column: 8
        },
        end: {
          line: 102,
          column: 78
        }
      },
      "9": {
        start: {
          line: 104,
          column: 8
        },
        end: {
          line: 104,
          column: 53
        }
      },
      "10": {
        start: {
          line: 117,
          column: 19
        },
        end: {
          line: 117,
          column: 21
        }
      },
      "11": {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 120,
          column: 5
        }
      },
      "12": {
        start: {
          line: 119,
          column: 6
        },
        end: {
          line: 119,
          column: 77
        }
      },
      "13": {
        start: {
          line: 122,
          column: 18
        },
        end: {
          line: 122,
          column: 42
        }
      },
      "14": {
        start: {
          line: 123,
          column: 26
        },
        end: {
          line: 123,
          column: 56
        }
      },
      "15": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 379,
          column: 5
        }
      },
      "16": {
        start: {
          line: 127,
          column: 8
        },
        end: {
          line: 127,
          column: 38
        }
      },
      "17": {
        start: {
          line: 128,
          column: 8
        },
        end: {
          line: 128,
          column: 69
        }
      },
      "18": {
        start: {
          line: 129,
          column: 8
        },
        end: {
          line: 129,
          column: 78
        }
      },
      "19": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 14
        }
      },
      "20": {
        start: {
          line: 133,
          column: 8
        },
        end: {
          line: 133,
          column: 32
        }
      },
      "21": {
        start: {
          line: 134,
          column: 8
        },
        end: {
          line: 134,
          column: 78
        }
      },
      "22": {
        start: {
          line: 135,
          column: 8
        },
        end: {
          line: 135,
          column: 58
        }
      },
      "23": {
        start: {
          line: 136,
          column: 8
        },
        end: {
          line: 136,
          column: 60
        }
      },
      "24": {
        start: {
          line: 137,
          column: 8
        },
        end: {
          line: 137,
          column: 14
        }
      },
      "25": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 49
        }
      },
      "26": {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 66
        }
      },
      "27": {
        start: {
          line: 142,
          column: 8
        },
        end: {
          line: 142,
          column: 62
        }
      },
      "28": {
        start: {
          line: 143,
          column: 8
        },
        end: {
          line: 143,
          column: 78
        }
      },
      "29": {
        start: {
          line: 144,
          column: 8
        },
        end: {
          line: 144,
          column: 66
        }
      },
      "30": {
        start: {
          line: 145,
          column: 8
        },
        end: {
          line: 145,
          column: 68
        }
      },
      "31": {
        start: {
          line: 146,
          column: 8
        },
        end: {
          line: 146,
          column: 25
        }
      },
      "32": {
        start: {
          line: 148,
          column: 21
        },
        end: {
          line: 148,
          column: 33
        }
      },
      "33": {
        start: {
          line: 151,
          column: 8
        },
        end: {
          line: 153,
          column: 11
        }
      },
      "34": {
        start: {
          line: 152,
          column: 10
        },
        end: {
          line: 152,
          column: 63
        }
      },
      "35": {
        start: {
          line: 154,
          column: 8
        },
        end: {
          line: 154,
          column: 14
        }
      },
      "36": {
        start: {
          line: 157,
          column: 8
        },
        end: {
          line: 157,
          column: 46
        }
      },
      "37": {
        start: {
          line: 158,
          column: 8
        },
        end: {
          line: 158,
          column: 66
        }
      },
      "38": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 68
        }
      },
      "39": {
        start: {
          line: 160,
          column: 8
        },
        end: {
          line: 160,
          column: 78
        }
      },
      "40": {
        start: {
          line: 161,
          column: 8
        },
        end: {
          line: 161,
          column: 66
        }
      },
      "41": {
        start: {
          line: 162,
          column: 8
        },
        end: {
          line: 162,
          column: 62
        }
      },
      "42": {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 25
        }
      },
      "43": {
        start: {
          line: 165,
          column: 21
        },
        end: {
          line: 165,
          column: 33
        }
      },
      "44": {
        start: {
          line: 168,
          column: 8
        },
        end: {
          line: 170,
          column: 11
        }
      },
      "45": {
        start: {
          line: 169,
          column: 10
        },
        end: {
          line: 169,
          column: 63
        }
      },
      "46": {
        start: {
          line: 171,
          column: 8
        },
        end: {
          line: 171,
          column: 14
        }
      },
      "47": {
        start: {
          line: 174,
          column: 8
        },
        end: {
          line: 174,
          column: 36
        }
      },
      "48": {
        start: {
          line: 175,
          column: 8
        },
        end: {
          line: 182,
          column: 9
        }
      },
      "49": {
        start: {
          line: 177,
          column: 12
        },
        end: {
          line: 177,
          column: 73
        }
      },
      "50": {
        start: {
          line: 178,
          column: 12
        },
        end: {
          line: 178,
          column: 18
        }
      },
      "51": {
        start: {
          line: 180,
          column: 12
        },
        end: {
          line: 180,
          column: 60
        }
      },
      "52": {
        start: {
          line: 181,
          column: 12
        },
        end: {
          line: 181,
          column: 18
        }
      },
      "53": {
        start: {
          line: 183,
          column: 8
        },
        end: {
          line: 183,
          column: 58
        }
      },
      "54": {
        start: {
          line: 184,
          column: 8
        },
        end: {
          line: 184,
          column: 14
        }
      },
      "55": {
        start: {
          line: 187,
          column: 8
        },
        end: {
          line: 187,
          column: 35
        }
      },
      "56": {
        start: {
          line: 188,
          column: 8
        },
        end: {
          line: 188,
          column: 61
        }
      },
      "57": {
        start: {
          line: 189,
          column: 8
        },
        end: {
          line: 189,
          column: 60
        }
      },
      "58": {
        start: {
          line: 190,
          column: 8
        },
        end: {
          line: 190,
          column: 59
        }
      },
      "59": {
        start: {
          line: 191,
          column: 8
        },
        end: {
          line: 191,
          column: 45
        }
      },
      "60": {
        start: {
          line: 192,
          column: 8
        },
        end: {
          line: 192,
          column: 14
        }
      },
      "61": {
        start: {
          line: 195,
          column: 8
        },
        end: {
          line: 195,
          column: 35
        }
      },
      "62": {
        start: {
          line: 196,
          column: 8
        },
        end: {
          line: 198,
          column: 9
        }
      },
      "63": {
        start: {
          line: 197,
          column: 10
        },
        end: {
          line: 197,
          column: 75
        }
      },
      "64": {
        start: {
          line: 200,
          column: 8
        },
        end: {
          line: 200,
          column: 47
        }
      },
      "65": {
        start: {
          line: 201,
          column: 8
        },
        end: {
          line: 201,
          column: 43
        }
      },
      "66": {
        start: {
          line: 202,
          column: 8
        },
        end: {
          line: 202,
          column: 51
        }
      },
      "67": {
        start: {
          line: 203,
          column: 8
        },
        end: {
          line: 203,
          column: 51
        }
      },
      "68": {
        start: {
          line: 204,
          column: 8
        },
        end: {
          line: 204,
          column: 51
        }
      },
      "69": {
        start: {
          line: 205,
          column: 8
        },
        end: {
          line: 205,
          column: 53
        }
      },
      "70": {
        start: {
          line: 207,
          column: 8
        },
        end: {
          line: 210,
          column: 24
        }
      },
      "71": {
        start: {
          line: 212,
          column: 8
        },
        end: {
          line: 230,
          column: 9
        }
      },
      "72": {
        start: {
          line: 213,
          column: 25
        },
        end: {
          line: 213,
          column: 27
        }
      },
      "73": {
        start: {
          line: 214,
          column: 22
        },
        end: {
          line: 214,
          column: 48
        }
      },
      "74": {
        start: {
          line: 215,
          column: 10
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "75": {
        start: {
          line: 216,
          column: 12
        },
        end: {
          line: 216,
          column: 79
        }
      },
      "76": {
        start: {
          line: 217,
          column: 17
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "77": {
        start: {
          line: 218,
          column: 12
        },
        end: {
          line: 218,
          column: 64
        }
      },
      "78": {
        start: {
          line: 219,
          column: 17
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "79": {
        start: {
          line: 220,
          column: 12
        },
        end: {
          line: 220,
          column: 61
        }
      },
      "80": {
        start: {
          line: 221,
          column: 17
        },
        end: {
          line: 226,
          column: 11
        }
      },
      "81": {
        start: {
          line: 222,
          column: 34
        },
        end: {
          line: 222,
          column: 77
        }
      },
      "82": {
        start: {
          line: 223,
          column: 12
        },
        end: {
          line: 225,
          column: 14
        }
      },
      "83": {
        start: {
          line: 228,
          column: 10
        },
        end: {
          line: 228,
          column: 50
        }
      },
      "84": {
        start: {
          line: 229,
          column: 10
        },
        end: {
          line: 229,
          column: 33
        }
      },
      "85": {
        start: {
          line: 231,
          column: 8
        },
        end: {
          line: 231,
          column: 14
        }
      },
      "86": {
        start: {
          line: 236,
          column: 8
        },
        end: {
          line: 236,
          column: 40
        }
      },
      "87": {
        start: {
          line: 237,
          column: 8
        },
        end: {
          line: 237,
          column: 62
        }
      },
      "88": {
        start: {
          line: 238,
          column: 8
        },
        end: {
          line: 238,
          column: 60
        }
      },
      "89": {
        start: {
          line: 239,
          column: 8
        },
        end: {
          line: 239,
          column: 60
        }
      },
      "90": {
        start: {
          line: 240,
          column: 8
        },
        end: {
          line: 240,
          column: 57
        }
      },
      "91": {
        start: {
          line: 241,
          column: 8
        },
        end: {
          line: 241,
          column: 52
        }
      },
      "92": {
        start: {
          line: 242,
          column: 8
        },
        end: {
          line: 242,
          column: 14
        }
      },
      "93": {
        start: {
          line: 245,
          column: 8
        },
        end: {
          line: 245,
          column: 39
        }
      },
      "94": {
        start: {
          line: 246,
          column: 8
        },
        end: {
          line: 246,
          column: 62
        }
      },
      "95": {
        start: {
          line: 247,
          column: 8
        },
        end: {
          line: 247,
          column: 60
        }
      },
      "96": {
        start: {
          line: 248,
          column: 8
        },
        end: {
          line: 248,
          column: 66
        }
      },
      "97": {
        start: {
          line: 249,
          column: 8
        },
        end: {
          line: 249,
          column: 57
        }
      },
      "98": {
        start: {
          line: 250,
          column: 8
        },
        end: {
          line: 250,
          column: 52
        }
      },
      "99": {
        start: {
          line: 251,
          column: 8
        },
        end: {
          line: 251,
          column: 14
        }
      },
      "100": {
        start: {
          line: 256,
          column: 8
        },
        end: {
          line: 256,
          column: 47
        }
      },
      "101": {
        start: {
          line: 257,
          column: 8
        },
        end: {
          line: 257,
          column: 62
        }
      },
      "102": {
        start: {
          line: 258,
          column: 8
        },
        end: {
          line: 258,
          column: 60
        }
      },
      "103": {
        start: {
          line: 259,
          column: 8
        },
        end: {
          line: 259,
          column: 60
        }
      },
      "104": {
        start: {
          line: 260,
          column: 8
        },
        end: {
          line: 260,
          column: 57
        }
      },
      "105": {
        start: {
          line: 261,
          column: 8
        },
        end: {
          line: 261,
          column: 14
        }
      },
      "106": {
        start: {
          line: 264,
          column: 8
        },
        end: {
          line: 264,
          column: 37
        }
      },
      "107": {
        start: {
          line: 265,
          column: 8
        },
        end: {
          line: 265,
          column: 64
        }
      },
      "108": {
        start: {
          line: 266,
          column: 8
        },
        end: {
          line: 266,
          column: 14
        }
      },
      "109": {
        start: {
          line: 269,
          column: 8
        },
        end: {
          line: 269,
          column: 35
        }
      },
      "110": {
        start: {
          line: 271,
          column: 8
        },
        end: {
          line: 271,
          column: 57
        }
      },
      "111": {
        start: {
          line: 272,
          column: 8
        },
        end: {
          line: 272,
          column: 41
        }
      },
      "112": {
        start: {
          line: 273,
          column: 8
        },
        end: {
          line: 273,
          column: 14
        }
      },
      "113": {
        start: {
          line: 276,
          column: 8
        },
        end: {
          line: 276,
          column: 34
        }
      },
      "114": {
        start: {
          line: 277,
          column: 8
        },
        end: {
          line: 277,
          column: 14
        }
      },
      "115": {
        start: {
          line: 280,
          column: 8
        },
        end: {
          line: 280,
          column: 37
        }
      },
      "116": {
        start: {
          line: 281,
          column: 8
        },
        end: {
          line: 281,
          column: 50
        }
      },
      "117": {
        start: {
          line: 282,
          column: 8
        },
        end: {
          line: 282,
          column: 14
        }
      },
      "118": {
        start: {
          line: 285,
          column: 8
        },
        end: {
          line: 285,
          column: 47
        }
      },
      "119": {
        start: {
          line: 286,
          column: 8
        },
        end: {
          line: 286,
          column: 58
        }
      },
      "120": {
        start: {
          line: 287,
          column: 8
        },
        end: {
          line: 287,
          column: 60
        }
      },
      "121": {
        start: {
          line: 288,
          column: 8
        },
        end: {
          line: 288,
          column: 30
        }
      },
      "122": {
        start: {
          line: 289,
          column: 8
        },
        end: {
          line: 291,
          column: 11
        }
      },
      "123": {
        start: {
          line: 290,
          column: 10
        },
        end: {
          line: 290,
          column: 60
        }
      },
      "124": {
        start: {
          line: 292,
          column: 8
        },
        end: {
          line: 292,
          column: 14
        }
      },
      "125": {
        start: {
          line: 295,
          column: 8
        },
        end: {
          line: 295,
          column: 46
        }
      },
      "126": {
        start: {
          line: 296,
          column: 8
        },
        end: {
          line: 296,
          column: 46
        }
      },
      "127": {
        start: {
          line: 297,
          column: 8
        },
        end: {
          line: 297,
          column: 14
        }
      },
      "128": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 300,
          column: 54
        }
      },
      "129": {
        start: {
          line: 301,
          column: 8
        },
        end: {
          line: 301,
          column: 69
        }
      },
      "130": {
        start: {
          line: 302,
          column: 8
        },
        end: {
          line: 302,
          column: 14
        }
      },
      "131": {
        start: {
          line: 305,
          column: 8
        },
        end: {
          line: 305,
          column: 52
        }
      },
      "132": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "133": {
        start: {
          line: 309,
          column: 8
        },
        end: {
          line: 309,
          column: 52
        }
      },
      "134": {
        start: {
          line: 310,
          column: 8
        },
        end: {
          line: 310,
          column: 14
        }
      },
      "135": {
        start: {
          line: 313,
          column: 8
        },
        end: {
          line: 313,
          column: 33
        }
      },
      "136": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 60
        }
      },
      "137": {
        start: {
          line: 315,
          column: 8
        },
        end: {
          line: 315,
          column: 64
        }
      },
      "138": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 316,
          column: 58
        }
      },
      "139": {
        start: {
          line: 317,
          column: 8
        },
        end: {
          line: 317,
          column: 14
        }
      },
      "140": {
        start: {
          line: 320,
          column: 8
        },
        end: {
          line: 320,
          column: 49
        }
      },
      "141": {
        start: {
          line: 321,
          column: 8
        },
        end: {
          line: 321,
          column: 46
        }
      },
      "142": {
        start: {
          line: 322,
          column: 8
        },
        end: {
          line: 322,
          column: 14
        }
      },
      "143": {
        start: {
          line: 325,
          column: 8
        },
        end: {
          line: 325,
          column: 42
        }
      },
      "144": {
        start: {
          line: 326,
          column: 8
        },
        end: {
          line: 326,
          column: 58
        }
      },
      "145": {
        start: {
          line: 327,
          column: 8
        },
        end: {
          line: 327,
          column: 61
        }
      },
      "146": {
        start: {
          line: 331,
          column: 23
        },
        end: {
          line: 331,
          column: 41
        }
      },
      "147": {
        start: {
          line: 332,
          column: 21
        },
        end: {
          line: 332,
          column: 37
        }
      },
      "148": {
        start: {
          line: 334,
          column: 24
        },
        end: {
          line: 339,
          column: 9
        }
      },
      "149": {
        start: {
          line: 341,
          column: 29
        },
        end: {
          line: 350,
          column: 9
        }
      },
      "150": {
        start: {
          line: 342,
          column: 22
        },
        end: {
          line: 342,
          column: 40
        }
      },
      "151": {
        start: {
          line: 343,
          column: 10
        },
        end: {
          line: 345,
          column: 11
        }
      },
      "152": {
        start: {
          line: 344,
          column: 12
        },
        end: {
          line: 344,
          column: 24
        }
      },
      "153": {
        start: {
          line: 346,
          column: 10
        },
        end: {
          line: 348,
          column: 11
        }
      },
      "154": {
        start: {
          line: 347,
          column: 12
        },
        end: {
          line: 347,
          column: 25
        }
      },
      "155": {
        start: {
          line: 349,
          column: 10
        },
        end: {
          line: 349,
          column: 27
        }
      },
      "156": {
        start: {
          line: 352,
          column: 8
        },
        end: {
          line: 352,
          column: 26
        }
      },
      "157": {
        start: {
          line: 353,
          column: 8
        },
        end: {
          line: 355,
          column: 11
        }
      },
      "158": {
        start: {
          line: 354,
          column: 10
        },
        end: {
          line: 354,
          column: 58
        }
      },
      "159": {
        start: {
          line: 357,
          column: 8
        },
        end: {
          line: 357,
          column: 14
        }
      },
      "160": {
        start: {
          line: 360,
          column: 8
        },
        end: {
          line: 360,
          column: 45
        }
      },
      "161": {
        start: {
          line: 361,
          column: 8
        },
        end: {
          line: 361,
          column: 73
        }
      },
      "162": {
        start: {
          line: 362,
          column: 8
        },
        end: {
          line: 362,
          column: 68
        }
      },
      "163": {
        start: {
          line: 363,
          column: 8
        },
        end: {
          line: 363,
          column: 68
        }
      },
      "164": {
        start: {
          line: 364,
          column: 8
        },
        end: {
          line: 364,
          column: 63
        }
      },
      "165": {
        start: {
          line: 365,
          column: 8
        },
        end: {
          line: 365,
          column: 63
        }
      },
      "166": {
        start: {
          line: 366,
          column: 8
        },
        end: {
          line: 366,
          column: 14
        }
      },
      "167": {
        start: {
          line: 369,
          column: 8
        },
        end: {
          line: 369,
          column: 46
        }
      },
      "168": {
        start: {
          line: 370,
          column: 8
        },
        end: {
          line: 370,
          column: 73
        }
      },
      "169": {
        start: {
          line: 371,
          column: 8
        },
        end: {
          line: 371,
          column: 60
        }
      },
      "170": {
        start: {
          line: 372,
          column: 8
        },
        end: {
          line: 372,
          column: 68
        }
      },
      "171": {
        start: {
          line: 373,
          column: 8
        },
        end: {
          line: 373,
          column: 68
        }
      },
      "172": {
        start: {
          line: 374,
          column: 8
        },
        end: {
          line: 374,
          column: 14
        }
      },
      "173": {
        start: {
          line: 377,
          column: 8
        },
        end: {
          line: 377,
          column: 63
        }
      },
      "174": {
        start: {
          line: 380,
          column: 4
        },
        end: {
          line: 380,
          column: 18
        }
      },
      "175": {
        start: {
          line: 399,
          column: 4
        },
        end: {
          line: 401,
          column: 5
        }
      },
      "176": {
        start: {
          line: 400,
          column: 6
        },
        end: {
          line: 400,
          column: 19
        }
      },
      "177": {
        start: {
          line: 404,
          column: 4
        },
        end: {
          line: 408,
          column: 5
        }
      },
      "178": {
        start: {
          line: 405,
          column: 6
        },
        end: {
          line: 405,
          column: 36
        }
      },
      "179": {
        start: {
          line: 407,
          column: 6
        },
        end: {
          line: 407,
          column: 19
        }
      },
      "180": {
        start: {
          line: 410,
          column: 4
        },
        end: {
          line: 424,
          column: 5
        }
      },
      "181": {
        start: {
          line: 423,
          column: 6
        },
        end: {
          line: 423,
          column: 19
        }
      },
      "182": {
        start: {
          line: 426,
          column: 4
        },
        end: {
          line: 426,
          column: 16
        }
      },
      "183": {
        start: {
          line: 430,
          column: 4
        },
        end: {
          line: 430,
          column: 125
        }
      },
      "184": {
        start: {
          line: 444,
          column: 4
        },
        end: {
          line: 446,
          column: 5
        }
      },
      "185": {
        start: {
          line: 445,
          column: 6
        },
        end: {
          line: 445,
          column: 23
        }
      },
      "186": {
        start: {
          line: 448,
          column: 4
        },
        end: {
          line: 450,
          column: 5
        }
      },
      "187": {
        start: {
          line: 449,
          column: 6
        },
        end: {
          line: 449,
          column: 32
        }
      },
      "188": {
        start: {
          line: 452,
          column: 4
        },
        end: {
          line: 462,
          column: 5
        }
      },
      "189": {
        start: {
          line: 454,
          column: 8
        },
        end: {
          line: 454,
          column: 52
        }
      },
      "190": {
        start: {
          line: 456,
          column: 8
        },
        end: {
          line: 456,
          column: 58
        }
      },
      "191": {
        start: {
          line: 459,
          column: 8
        },
        end: {
          line: 459,
          column: 21
        }
      },
      "192": {
        start: {
          line: 461,
          column: 8
        },
        end: {
          line: 461,
          column: 52
        }
      },
      "193": {
        start: {
          line: 470,
          column: 19
        },
        end: {
          line: 470,
          column: 50
        }
      },
      "194": {
        start: {
          line: 471,
          column: 4
        },
        end: {
          line: 471,
          column: 47
        }
      },
      "195": {
        start: {
          line: 480,
          column: 4
        },
        end: {
          line: 480,
          column: 52
        }
      },
      "196": {
        start: {
          line: 491,
          column: 14
        },
        end: {
          line: 491,
          column: 38
        }
      },
      "197": {
        start: {
          line: 492,
          column: 4
        },
        end: {
          line: 492,
          column: 54
        }
      },
      "198": {
        start: {
          line: 504,
          column: 4
        },
        end: {
          line: 512,
          column: 5
        }
      },
      "199": {
        start: {
          line: 505,
          column: 6
        },
        end: {
          line: 505,
          column: 39
        }
      },
      "200": {
        start: {
          line: 507,
          column: 21
        },
        end: {
          line: 507,
          column: 34
        }
      },
      "201": {
        start: {
          line: 508,
          column: 6
        },
        end: {
          line: 511,
          column: 9
        }
      },
      "202": {
        start: {
          line: 514,
          column: 4
        },
        end: {
          line: 516,
          column: 5
        }
      },
      "203": {
        start: {
          line: 515,
          column: 6
        },
        end: {
          line: 515,
          column: 48
        }
      },
      "204": {
        start: {
          line: 518,
          column: 4
        },
        end: {
          line: 518,
          column: 21
        }
      },
      "205": {
        start: {
          line: 523,
          column: 2
        },
        end: {
          line: 591,
          column: 3
        }
      },
      "206": {
        start: {
          line: 525,
          column: 24
        },
        end: {
          line: 525,
          column: 41
        }
      },
      "207": {
        start: {
          line: 526,
          column: 6
        },
        end: {
          line: 579,
          column: 7
        }
      },
      "208": {
        start: {
          line: 528,
          column: 10
        },
        end: {
          line: 528,
          column: 51
        }
      },
      "209": {
        start: {
          line: 529,
          column: 10
        },
        end: {
          line: 529,
          column: 79
        }
      },
      "210": {
        start: {
          line: 530,
          column: 10
        },
        end: {
          line: 530,
          column: 16
        }
      },
      "211": {
        start: {
          line: 533,
          column: 10
        },
        end: {
          line: 533,
          column: 53
        }
      },
      "212": {
        start: {
          line: 534,
          column: 10
        },
        end: {
          line: 536,
          column: 12
        }
      },
      "213": {
        start: {
          line: 537,
          column: 27
        },
        end: {
          line: 537,
          column: 56
        }
      },
      "214": {
        start: {
          line: 538,
          column: 10
        },
        end: {
          line: 545,
          column: 11
        }
      },
      "215": {
        start: {
          line: 540,
          column: 14
        },
        end: {
          line: 540,
          column: 69
        }
      },
      "216": {
        start: {
          line: 541,
          column: 14
        },
        end: {
          line: 541,
          column: 20
        }
      },
      "217": {
        start: {
          line: 543,
          column: 14
        },
        end: {
          line: 543,
          column: 59
        }
      },
      "218": {
        start: {
          line: 544,
          column: 14
        },
        end: {
          line: 544,
          column: 20
        }
      },
      "219": {
        start: {
          line: 546,
          column: 10
        },
        end: {
          line: 546,
          column: 16
        }
      },
      "220": {
        start: {
          line: 549,
          column: 10
        },
        end: {
          line: 549,
          column: 49
        }
      },
      "221": {
        start: {
          line: 550,
          column: 10
        },
        end: {
          line: 550,
          column: 75
        }
      },
      "222": {
        start: {
          line: 551,
          column: 10
        },
        end: {
          line: 551,
          column: 66
        }
      },
      "223": {
        start: {
          line: 552,
          column: 10
        },
        end: {
          line: 552,
          column: 16
        }
      },
      "224": {
        start: {
          line: 555,
          column: 10
        },
        end: {
          line: 555,
          column: 48
        }
      },
      "225": {
        start: {
          line: 556,
          column: 10
        },
        end: {
          line: 556,
          column: 76
        }
      },
      "226": {
        start: {
          line: 557,
          column: 10
        },
        end: {
          line: 557,
          column: 70
        }
      },
      "227": {
        start: {
          line: 558,
          column: 10
        },
        end: {
          line: 558,
          column: 16
        }
      },
      "228": {
        start: {
          line: 561,
          column: 10
        },
        end: {
          line: 561,
          column: 60
        }
      },
      "229": {
        start: {
          line: 562,
          column: 10
        },
        end: {
          line: 565,
          column: 26
        }
      },
      "230": {
        start: {
          line: 566,
          column: 10
        },
        end: {
          line: 566,
          column: 16
        }
      },
      "231": {
        start: {
          line: 569,
          column: 10
        },
        end: {
          line: 569,
          column: 57
        }
      },
      "232": {
        start: {
          line: 570,
          column: 10
        },
        end: {
          line: 573,
          column: 29
        }
      },
      "233": {
        start: {
          line: 574,
          column: 10
        },
        end: {
          line: 574,
          column: 16
        }
      },
      "234": {
        start: {
          line: 577,
          column: 10
        },
        end: {
          line: 577,
          column: 71
        }
      },
      "235": {
        start: {
          line: 580,
          column: 6
        },
        end: {
          line: 580,
          column: 12
        }
      },
      "236": {
        start: {
          line: 583,
          column: 6
        },
        end: {
          line: 583,
          column: 46
        }
      },
      "237": {
        start: {
          line: 584,
          column: 6
        },
        end: {
          line: 584,
          column: 70
        }
      },
      "238": {
        start: {
          line: 585,
          column: 6
        },
        end: {
          line: 585,
          column: 78
        }
      },
      "239": {
        start: {
          line: 586,
          column: 6
        },
        end: {
          line: 586,
          column: 12
        }
      },
      "240": {
        start: {
          line: 589,
          column: 6
        },
        end: {
          line: 589,
          column: 75
        }
      },
      "241": {
        start: {
          line: 595,
          column: 16
        },
        end: {
          line: 595,
          column: 18
        }
      },
      "242": {
        start: {
          line: 596,
          column: 2
        },
        end: {
          line: 614,
          column: 3
        }
      },
      "243": {
        start: {
          line: 598,
          column: 6
        },
        end: {
          line: 600,
          column: 8
        }
      },
      "244": {
        start: {
          line: 601,
          column: 6
        },
        end: {
          line: 601,
          column: 12
        }
      },
      "245": {
        start: {
          line: 604,
          column: 6
        },
        end: {
          line: 604,
          column: 62
        }
      },
      "246": {
        start: {
          line: 605,
          column: 6
        },
        end: {
          line: 605,
          column: 12
        }
      },
      "247": {
        start: {
          line: 608,
          column: 6
        },
        end: {
          line: 608,
          column: 59
        }
      },
      "248": {
        start: {
          line: 609,
          column: 6
        },
        end: {
          line: 609,
          column: 12
        }
      },
      "249": {
        start: {
          line: 612,
          column: 6
        },
        end: {
          line: 612,
          column: 71
        }
      },
      "250": {
        start: {
          line: 616,
          column: 2
        },
        end: {
          line: 616,
          column: 15
        }
      },
      "251": {
        start: {
          line: 620,
          column: 2
        },
        end: {
          line: 620,
          column: 60
        }
      },
      "252": {
        start: {
          line: 624,
          column: 0
        },
        end: {
          line: 624,
          column: 42
        }
      },
      "253": {
        start: {
          line: 625,
          column: 0
        },
        end: {
          line: 625,
          column: 38
        }
      },
      "254": {
        start: {
          line: 626,
          column: 0
        },
        end: {
          line: 626,
          column: 42
        }
      },
      "255": {
        start: {
          line: 627,
          column: 0
        },
        end: {
          line: 627,
          column: 40
        }
      },
      "256": {
        start: {
          line: 628,
          column: 0
        },
        end: {
          line: 628,
          column: 44
        }
      },
      "257": {
        start: {
          line: 629,
          column: 0
        },
        end: {
          line: 629,
          column: 62
        }
      },
      "258": {
        start: {
          line: 630,
          column: 0
        },
        end: {
          line: 630,
          column: 60
        }
      },
      "259": {
        start: {
          line: 631,
          column: 0
        },
        end: {
          line: 631,
          column: 66
        }
      },
      "260": {
        start: {
          line: 632,
          column: 0
        },
        end: {
          line: 632,
          column: 62
        }
      },
      "261": {
        start: {
          line: 633,
          column: 0
        },
        end: {
          line: 633,
          column: 36
        }
      },
      "262": {
        start: {
          line: 634,
          column: 0
        },
        end: {
          line: 634,
          column: 38
        }
      },
      "263": {
        start: {
          line: 635,
          column: 0
        },
        end: {
          line: 635,
          column: 48
        }
      },
      "264": {
        start: {
          line: 636,
          column: 0
        },
        end: {
          line: 636,
          column: 46
        }
      },
      "265": {
        start: {
          line: 637,
          column: 0
        },
        end: {
          line: 637,
          column: 66
        }
      },
      "266": {
        start: {
          line: 638,
          column: 0
        },
        end: {
          line: 638,
          column: 60
        }
      },
      "267": {
        start: {
          line: 639,
          column: 0
        },
        end: {
          line: 639,
          column: 32
        }
      },
      "268": {
        start: {
          line: 640,
          column: 0
        },
        end: {
          line: 640,
          column: 38
        }
      },
      "269": {
        start: {
          line: 641,
          column: 0
        },
        end: {
          line: 641,
          column: 76
        }
      },
      "270": {
        start: {
          line: 642,
          column: 0
        },
        end: {
          line: 642,
          column: 72
        }
      },
      "271": {
        start: {
          line: 643,
          column: 0
        },
        end: {
          line: 643,
          column: 66
        }
      },
      "272": {
        start: {
          line: 644,
          column: 0
        },
        end: {
          line: 644,
          column: 70
        }
      },
      "273": {
        start: {
          line: 645,
          column: 0
        },
        end: {
          line: 645,
          column: 62
        }
      },
      "274": {
        start: {
          line: 646,
          column: 0
        },
        end: {
          line: 646,
          column: 60
        }
      },
      "275": {
        start: {
          line: 647,
          column: 0
        },
        end: {
          line: 648,
          column: 40
        }
      },
      "276": {
        start: {
          line: 649,
          column: 0
        },
        end: {
          line: 649,
          column: 78
        }
      },
      "277": {
        start: {
          line: 650,
          column: 0
        },
        end: {
          line: 650,
          column: 64
        }
      },
      "278": {
        start: {
          line: 651,
          column: 0
        },
        end: {
          line: 651,
          column: 34
        }
      },
      "279": {
        start: {
          line: 652,
          column: 0
        },
        end: {
          line: 652,
          column: 52
        }
      },
      "280": {
        start: {
          line: 653,
          column: 0
        },
        end: {
          line: 653,
          column: 58
        }
      },
      "281": {
        start: {
          line: 654,
          column: 0
        },
        end: {
          line: 654,
          column: 60
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 99,
            column: 2
          },
          end: {
            line: 99,
            column: 3
          }
        },
        loc: {
          start: {
            line: 99,
            column: 46
          },
          end: {
            line: 107,
            column: 3
          }
        },
        line: 99
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 116,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        },
        loc: {
          start: {
            line: 116,
            column: 34
          },
          end: {
            line: 381,
            column: 3
          }
        },
        line: 116
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 151,
            column: 34
          },
          end: {
            line: 151,
            column: 35
          }
        },
        loc: {
          start: {
            line: 151,
            column: 47
          },
          end: {
            line: 153,
            column: 9
          }
        },
        line: 151
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 168,
            column: 34
          },
          end: {
            line: 168,
            column: 35
          }
        },
        loc: {
          start: {
            line: 168,
            column: 47
          },
          end: {
            line: 170,
            column: 9
          }
        },
        line: 168
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 289,
            column: 34
          },
          end: {
            line: 289,
            column: 35
          }
        },
        loc: {
          start: {
            line: 289,
            column: 48
          },
          end: {
            line: 291,
            column: 9
          }
        },
        line: 289
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 341,
            column: 29
          },
          end: {
            line: 341,
            column: 30
          }
        },
        loc: {
          start: {
            line: 341,
            column: 38
          },
          end: {
            line: 350,
            column: 9
          }
        },
        line: 341
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 353,
            column: 37
          },
          end: {
            line: 353,
            column: 38
          }
        },
        loc: {
          start: {
            line: 353,
            column: 51
          },
          end: {
            line: 355,
            column: 9
          }
        },
        line: 353
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 398,
            column: 2
          },
          end: {
            line: 398,
            column: 3
          }
        },
        loc: {
          start: {
            line: 398,
            column: 49
          },
          end: {
            line: 427,
            column: 3
          }
        },
        line: 398
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 429,
            column: 2
          },
          end: {
            line: 429,
            column: 3
          }
        },
        loc: {
          start: {
            line: 429,
            column: 47
          },
          end: {
            line: 431,
            column: 3
          }
        },
        line: 429
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 443,
            column: 2
          },
          end: {
            line: 443,
            column: 3
          }
        },
        loc: {
          start: {
            line: 443,
            column: 69
          },
          end: {
            line: 463,
            column: 3
          }
        },
        line: 443
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 469,
            column: 2
          },
          end: {
            line: 469,
            column: 3
          }
        },
        loc: {
          start: {
            line: 469,
            column: 29
          },
          end: {
            line: 472,
            column: 3
          }
        },
        line: 469
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 479,
            column: 2
          },
          end: {
            line: 479,
            column: 3
          }
        },
        loc: {
          start: {
            line: 479,
            column: 31
          },
          end: {
            line: 481,
            column: 3
          }
        },
        line: 479
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 490,
            column: 2
          },
          end: {
            line: 490,
            column: 3
          }
        },
        loc: {
          start: {
            line: 490,
            column: 30
          },
          end: {
            line: 493,
            column: 3
          }
        },
        line: 490
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 502,
            column: 2
          },
          end: {
            line: 502,
            column: 3
          }
        },
        loc: {
          start: {
            line: 502,
            column: 28
          },
          end: {
            line: 519,
            column: 3
          }
        },
        line: 502
      },
      "14": {
        name: "extractRevokeSponshipDetails",
        decl: {
          start: {
            line: 522,
            column: 9
          },
          end: {
            line: 522,
            column: 37
          }
        },
        loc: {
          start: {
            line: 522,
            column: 53
          },
          end: {
            line: 592,
            column: 1
          }
        },
        line: 522
      },
      "15": {
        name: "convertXDRSignerKeyToObject",
        decl: {
          start: {
            line: 594,
            column: 9
          },
          end: {
            line: 594,
            column: 36
          }
        },
        loc: {
          start: {
            line: 594,
            column: 48
          },
          end: {
            line: 617,
            column: 1
          }
        },
        line: 594
      },
      "16": {
        name: "accountIdtoAddress",
        decl: {
          start: {
            line: 619,
            column: 9
          },
          end: {
            line: 619,
            column: 27
          }
        },
        loc: {
          start: {
            line: 619,
            column: 39
          },
          end: {
            line: 621,
            column: 1
          }
        },
        line: 619
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 106,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 100
      },
      "1": {
        loc: {
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 4
          },
          end: {
            line: 120,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      },
      "2": {
        loc: {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 379,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 126,
            column: 6
          },
          end: {
            line: 131,
            column: 7
          }
        }, {
          start: {
            line: 132,
            column: 6
          },
          end: {
            line: 138,
            column: 7
          }
        }, {
          start: {
            line: 139,
            column: 6
          },
          end: {
            line: 155,
            column: 7
          }
        }, {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 172,
            column: 7
          }
        }, {
          start: {
            line: 173,
            column: 6
          },
          end: {
            line: 185,
            column: 7
          }
        }, {
          start: {
            line: 186,
            column: 6
          },
          end: {
            line: 193,
            column: 7
          }
        }, {
          start: {
            line: 194,
            column: 6
          },
          end: {
            line: 232,
            column: 7
          }
        }, {
          start: {
            line: 234,
            column: 6
          },
          end: {
            line: 234,
            column: 25
          }
        }, {
          start: {
            line: 235,
            column: 6
          },
          end: {
            line: 243,
            column: 7
          }
        }, {
          start: {
            line: 244,
            column: 6
          },
          end: {
            line: 252,
            column: 7
          }
        }, {
          start: {
            line: 254,
            column: 6
          },
          end: {
            line: 254,
            column: 32
          }
        }, {
          start: {
            line: 255,
            column: 6
          },
          end: {
            line: 262,
            column: 7
          }
        }, {
          start: {
            line: 263,
            column: 6
          },
          end: {
            line: 267,
            column: 7
          }
        }, {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 274,
            column: 7
          }
        }, {
          start: {
            line: 275,
            column: 6
          },
          end: {
            line: 278,
            column: 7
          }
        }, {
          start: {
            line: 279,
            column: 6
          },
          end: {
            line: 283,
            column: 7
          }
        }, {
          start: {
            line: 284,
            column: 6
          },
          end: {
            line: 293,
            column: 7
          }
        }, {
          start: {
            line: 294,
            column: 6
          },
          end: {
            line: 298,
            column: 7
          }
        }, {
          start: {
            line: 299,
            column: 6
          },
          end: {
            line: 303,
            column: 7
          }
        }, {
          start: {
            line: 304,
            column: 6
          },
          end: {
            line: 307,
            column: 7
          }
        }, {
          start: {
            line: 308,
            column: 6
          },
          end: {
            line: 311,
            column: 7
          }
        }, {
          start: {
            line: 312,
            column: 6
          },
          end: {
            line: 318,
            column: 7
          }
        }, {
          start: {
            line: 319,
            column: 6
          },
          end: {
            line: 323,
            column: 7
          }
        }, {
          start: {
            line: 324,
            column: 6
          },
          end: {
            line: 358,
            column: 7
          }
        }, {
          start: {
            line: 359,
            column: 6
          },
          end: {
            line: 367,
            column: 7
          }
        }, {
          start: {
            line: 368,
            column: 6
          },
          end: {
            line: 375,
            column: 7
          }
        }, {
          start: {
            line: 376,
            column: 6
          },
          end: {
            line: 378,
            column: 7
          }
        }],
        line: 125
      },
      "3": {
        loc: {
          start: {
            line: 175,
            column: 8
          },
          end: {
            line: 182,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 176,
            column: 10
          },
          end: {
            line: 178,
            column: 18
          }
        }, {
          start: {
            line: 179,
            column: 10
          },
          end: {
            line: 181,
            column: 18
          }
        }],
        line: 175
      },
      "4": {
        loc: {
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 196,
            column: 8
          },
          end: {
            line: 198,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 196
      },
      "5": {
        loc: {
          start: {
            line: 208,
            column: 10
          },
          end: {
            line: 210,
            column: 23
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 209,
            column: 14
          },
          end: {
            line: 209,
            column: 50
          }
        }, {
          start: {
            line: 210,
            column: 14
          },
          end: {
            line: 210,
            column: 23
          }
        }],
        line: 208
      },
      "6": {
        loc: {
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 212,
            column: 8
          },
          end: {
            line: 230,
            column: 9
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 212
      },
      "7": {
        loc: {
          start: {
            line: 215,
            column: 10
          },
          end: {
            line: 226,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 10
          },
          end: {
            line: 226,
            column: 11
          }
        }, {
          start: {
            line: 217,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }],
        line: 215
      },
      "8": {
        loc: {
          start: {
            line: 217,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 217,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }, {
          start: {
            line: 219,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }],
        line: 217
      },
      "9": {
        loc: {
          start: {
            line: 219,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 219,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }, {
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }],
        line: 219
      },
      "10": {
        loc: {
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 17
          },
          end: {
            line: 226,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "11": {
        loc: {
          start: {
            line: 343,
            column: 10
          },
          end: {
            line: 345,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 343,
            column: 10
          },
          end: {
            line: 345,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 343
      },
      "12": {
        loc: {
          start: {
            line: 346,
            column: 10
          },
          end: {
            line: 348,
            column: 11
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 346,
            column: 10
          },
          end: {
            line: 348,
            column: 11
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 346
      },
      "13": {
        loc: {
          start: {
            line: 398,
            column: 30
          },
          end: {
            line: 398,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 398,
            column: 42
          },
          end: {
            line: 398,
            column: 47
          }
        }],
        line: 398
      },
      "14": {
        loc: {
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 399,
            column: 4
          },
          end: {
            line: 401,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 399
      },
      "15": {
        loc: {
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 410,
            column: 4
          },
          end: {
            line: 424,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 410
      },
      "16": {
        loc: {
          start: {
            line: 412,
            column: 6
          },
          end: {
            line: 421,
            column: 24
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 412,
            column: 7
          },
          end: {
            line: 412,
            column: 17
          }
        }, {
          start: {
            line: 412,
            column: 21
          },
          end: {
            line: 412,
            column: 36
          }
        }, {
          start: {
            line: 414,
            column: 6
          },
          end: {
            line: 414,
            column: 25
          }
        }, {
          start: {
            line: 416,
            column: 6
          },
          end: {
            line: 416,
            column: 63
          }
        }, {
          start: {
            line: 418,
            column: 6
          },
          end: {
            line: 418,
            column: 32
          }
        }, {
          start: {
            line: 420,
            column: 6
          },
          end: {
            line: 420,
            column: 20
          }
        }, {
          start: {
            line: 421,
            column: 6
          },
          end: {
            line: 421,
            column: 24
          }
        }],
        line: 412
      },
      "17": {
        loc: {
          start: {
            line: 443,
            column: 45
          },
          end: {
            line: 443,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 443,
            column: 63
          },
          end: {
            line: 443,
            column: 67
          }
        }],
        line: 443
      },
      "18": {
        loc: {
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 444,
            column: 4
          },
          end: {
            line: 446,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 444
      },
      "19": {
        loc: {
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 448,
            column: 4
          },
          end: {
            line: 450,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 448
      },
      "20": {
        loc: {
          start: {
            line: 452,
            column: 4
          },
          end: {
            line: 462,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 453,
            column: 6
          },
          end: {
            line: 454,
            column: 52
          }
        }, {
          start: {
            line: 455,
            column: 6
          },
          end: {
            line: 456,
            column: 58
          }
        }, {
          start: {
            line: 457,
            column: 6
          },
          end: {
            line: 459,
            column: 21
          }
        }, {
          start: {
            line: 460,
            column: 6
          },
          end: {
            line: 461,
            column: 52
          }
        }],
        line: 452
      },
      "21": {
        loc: {
          start: {
            line: 453,
            column: 11
          },
          end: {
            line: 453,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 453,
            column: 11
          },
          end: {
            line: 453,
            column: 27
          }
        }, {
          start: {
            line: 453,
            column: 31
          },
          end: {
            line: 453,
            column: 47
          }
        }, {
          start: {
            line: 453,
            column: 51
          },
          end: {
            line: 453,
            column: 66
          }
        }],
        line: 453
      },
      "22": {
        loc: {
          start: {
            line: 457,
            column: 11
          },
          end: {
            line: 458,
            column: 57
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 457,
            column: 11
          },
          end: {
            line: 457,
            column: 27
          }
        }, {
          start: {
            line: 458,
            column: 9
          },
          end: {
            line: 458,
            column: 24
          }
        }, {
          start: {
            line: 458,
            column: 28
          },
          end: {
            line: 458,
            column: 56
          }
        }],
        line: 457
      },
      "23": {
        loc: {
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 504,
            column: 4
          },
          end: {
            line: 512,
            column: 5
          }
        }, {
          start: {
            line: 506,
            column: 11
          },
          end: {
            line: 512,
            column: 5
          }
        }],
        line: 504
      },
      "24": {
        loc: {
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 504,
            column: 26
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 504,
            column: 8
          },
          end: {
            line: 504,
            column: 15
          }
        }, {
          start: {
            line: 504,
            column: 19
          },
          end: {
            line: 504,
            column: 26
          }
        }],
        line: 504
      },
      "25": {
        loc: {
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 514,
            column: 4
          },
          end: {
            line: 516,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 514
      },
      "26": {
        loc: {
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 514,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 514,
            column: 8
          },
          end: {
            line: 514,
            column: 25
          }
        }, {
          start: {
            line: 514,
            column: 29
          },
          end: {
            line: 514,
            column: 46
          }
        }],
        line: 514
      },
      "27": {
        loc: {
          start: {
            line: 523,
            column: 2
          },
          end: {
            line: 591,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 524,
            column: 4
          },
          end: {
            line: 581,
            column: 5
          }
        }, {
          start: {
            line: 582,
            column: 4
          },
          end: {
            line: 587,
            column: 5
          }
        }, {
          start: {
            line: 588,
            column: 4
          },
          end: {
            line: 590,
            column: 5
          }
        }],
        line: 523
      },
      "28": {
        loc: {
          start: {
            line: 526,
            column: 6
          },
          end: {
            line: 579,
            column: 7
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 527,
            column: 8
          },
          end: {
            line: 531,
            column: 9
          }
        }, {
          start: {
            line: 532,
            column: 8
          },
          end: {
            line: 547,
            column: 9
          }
        }, {
          start: {
            line: 548,
            column: 8
          },
          end: {
            line: 553,
            column: 9
          }
        }, {
          start: {
            line: 554,
            column: 8
          },
          end: {
            line: 559,
            column: 9
          }
        }, {
          start: {
            line: 560,
            column: 8
          },
          end: {
            line: 567,
            column: 9
          }
        }, {
          start: {
            line: 568,
            column: 8
          },
          end: {
            line: 575,
            column: 9
          }
        }, {
          start: {
            line: 576,
            column: 8
          },
          end: {
            line: 578,
            column: 9
          }
        }],
        line: 526
      },
      "29": {
        loc: {
          start: {
            line: 538,
            column: 10
          },
          end: {
            line: 545,
            column: 11
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 539,
            column: 12
          },
          end: {
            line: 541,
            column: 20
          }
        }, {
          start: {
            line: 542,
            column: 12
          },
          end: {
            line: 544,
            column: 20
          }
        }],
        line: 538
      },
      "30": {
        loc: {
          start: {
            line: 596,
            column: 2
          },
          end: {
            line: 614,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 597,
            column: 4
          },
          end: {
            line: 602,
            column: 5
          }
        }, {
          start: {
            line: 603,
            column: 4
          },
          end: {
            line: 606,
            column: 5
          }
        }, {
          start: {
            line: 607,
            column: 4
          },
          end: {
            line: 610,
            column: 5
          }
        }, {
          start: {
            line: 611,
            column: 4
          },
          end: {
            line: 613,
            column: 5
          }
        }],
        line: 596
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0,
      "144": 0,
      "145": 0,
      "146": 0,
      "147": 0,
      "148": 0,
      "149": 0,
      "150": 0,
      "151": 0,
      "152": 0,
      "153": 0,
      "154": 0,
      "155": 0,
      "156": 0,
      "157": 0,
      "158": 0,
      "159": 0,
      "160": 0,
      "161": 0,
      "162": 0,
      "163": 0,
      "164": 0,
      "165": 0,
      "166": 0,
      "167": 0,
      "168": 0,
      "169": 0,
      "170": 0,
      "171": 0,
      "172": 0,
      "173": 0,
      "174": 0,
      "175": 0,
      "176": 0,
      "177": 0,
      "178": 0,
      "179": 0,
      "180": 0,
      "181": 0,
      "182": 0,
      "183": 0,
      "184": 0,
      "185": 0,
      "186": 0,
      "187": 0,
      "188": 0,
      "189": 0,
      "190": 0,
      "191": 0,
      "192": 0,
      "193": 0,
      "194": 0,
      "195": 0,
      "196": 0,
      "197": 0,
      "198": 0,
      "199": 0,
      "200": 0,
      "201": 0,
      "202": 0,
      "203": 0,
      "204": 0,
      "205": 0,
      "206": 0,
      "207": 0,
      "208": 0,
      "209": 0,
      "210": 0,
      "211": 0,
      "212": 0,
      "213": 0,
      "214": 0,
      "215": 0,
      "216": 0,
      "217": 0,
      "218": 0,
      "219": 0,
      "220": 0,
      "221": 0,
      "222": 0,
      "223": 0,
      "224": 0,
      "225": 0,
      "226": 0,
      "227": 0,
      "228": 0,
      "229": 0,
      "230": 0,
      "231": 0,
      "232": 0,
      "233": 0,
      "234": 0,
      "235": 0,
      "236": 0,
      "237": 0,
      "238": 0,
      "239": 0,
      "240": 0,
      "241": 0,
      "242": 0,
      "243": 0,
      "244": 0,
      "245": 0,
      "246": 0,
      "247": 0,
      "248": 0,
      "249": 0,
      "250": 0,
      "251": 0,
      "252": 0,
      "253": 0,
      "254": 0,
      "255": 0,
      "256": 0,
      "257": 0,
      "258": 0,
      "259": 0,
      "260": 0,
      "261": 0,
      "262": 0,
      "263": 0,
      "264": 0,
      "265": 0,
      "266": 0,
      "267": 0,
      "268": 0,
      "269": 0,
      "270": 0,
      "271": 0,
      "272": 0,
      "273": 0,
      "274": 0,
      "275": 0,
      "276": 0,
      "277": 0,
      "278": 0,
      "279": 0,
      "280": 0,
      "281": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0, 0, 0, 0, 0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0, 0, 0],
      "21": [0, 0, 0],
      "22": [0, 0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0, 0],
      "28": [0, 0, 0, 0, 0, 0, 0],
      "29": [0, 0],
      "30": [0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "757a6b148f0586f5b2f43ee8c12c051e16b1e711"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1jzfu96gqr = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1jzfu96gqr();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint-disable no-bitwise */

















var ONE = (cov_1jzfu96gqr().s[0]++, 10000000);
var MAX_INT64 = (cov_1jzfu96gqr().s[1]++, '9223372036854775807');

/**
 * When set using `{@link Operation.setOptions}` option, requires the issuing
 * account to give other accounts permission before they can hold the issuing
 * account’s credit.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */
var AuthRequiredFlag = (cov_1jzfu96gqr().s[2]++, 1 << 0);
/**
 * When set using `{@link Operation.setOptions}` option, allows the issuing
 * account to revoke its credit held by other accounts.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */
var AuthRevocableFlag = (cov_1jzfu96gqr().s[3]++, 1 << 1);
/**
 * When set using `{@link Operation.setOptions}` option, then none of the
 * authorization flags can be set and the account can never be deleted.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */
var AuthImmutableFlag = (cov_1jzfu96gqr().s[4]++, 1 << 2);

/**
 * When set using `{@link Operation.setOptions}` option, then any trustlines
 * created by this account can have a ClawbackOp operation submitted for the
 * corresponding asset.
 *
 * @constant
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */
var AuthClawbackEnabledFlag = (cov_1jzfu96gqr().s[5]++, 1 << 3);

/**
 * `Operation` class represents [operations](https://developers.stellar.org/docs/glossary/operations/) in Stellar network.
 * Use one of static methods to create operations:
 * * `{@link Operation.createAccount}`
 * * `{@link Operation.payment}`
 * * `{@link Operation.pathPaymentStrictReceive}`
 * * `{@link Operation.pathPaymentStrictSend}`
 * * `{@link Operation.manageSellOffer}`
 * * `{@link Operation.manageBuyOffer}`
 * * `{@link Operation.createPassiveSellOffer}`
 * * `{@link Operation.setOptions}`
 * * `{@link Operation.changeTrust}`
 * * `{@link Operation.allowTrust}`
 * * `{@link Operation.accountMerge}`
 * * `{@link Operation.inflation}`
 * * `{@link Operation.manageData}`
 * * `{@link Operation.bumpSequence}`
 * * `{@link Operation.createClaimableBalance}`
 * * `{@link Operation.claimClaimableBalance}`
 * * `{@link Operation.beginSponsoringFutureReserves}`
 * * `{@link Operation.endSponsoringFutureReserves}`
 * * `{@link Operation.revokeAccountSponsorship}`
 * * `{@link Operation.revokeTrustlineSponsorship}`
 * * `{@link Operation.revokeOfferSponsorship}`
 * * `{@link Operation.revokeDataSponsorship}`
 * * `{@link Operation.revokeClaimableBalanceSponsorship}`
 * * `{@link Operation.revokeLiquidityPoolSponsorship}`
 * * `{@link Operation.revokeSignerSponsorship}`
 * * `{@link Operation.clawback}`
 * * `{@link Operation.clawbackClaimableBalance}`
 * * `{@link Operation.setTrustLineFlags}`
 * * `{@link Operation.liquidityPoolDeposit}`
 * * `{@link Operation.liquidityPoolWithdraw}`
 *
 * @class Operation
 */
var Operation = /*#__PURE__*/function () {
  function Operation() {
    _classCallCheck(this, Operation);
  }
  _createClass(Operation, null, [{
    key: "setSourceAccount",
    value: function setSourceAccount(opAttributes, opts) {
      cov_1jzfu96gqr().f[0]++;
      cov_1jzfu96gqr().s[6]++;
      if (opts.source) {
        cov_1jzfu96gqr().b[0][0]++;
        cov_1jzfu96gqr().s[7]++;
        try {
          cov_1jzfu96gqr().s[8]++;
          opAttributes.sourceAccount = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.decodeAddressToMuxedAccount)(opts.source);
        } catch (e) {
          cov_1jzfu96gqr().s[9]++;
          throw new Error('Source address is invalid');
        }
      } else {
        cov_1jzfu96gqr().b[0][1]++;
      }
    }

    /**
     * Deconstructs the raw XDR operation object into the structured object that
     * was used to create the operation (i.e. the `opts` parameter to most ops).
     *
     * @param {xdr.Operation}   operation - An XDR Operation.
     * @return {Operation}
     */
  }, {
    key: "fromXDRObject",
    value: function fromXDRObject(operation) {
      cov_1jzfu96gqr().f[1]++;
      var result = (cov_1jzfu96gqr().s[10]++, {});
      cov_1jzfu96gqr().s[11]++;
      if (operation.sourceAccount()) {
        cov_1jzfu96gqr().b[1][0]++;
        cov_1jzfu96gqr().s[12]++;
        result.source = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(operation.sourceAccount());
      } else {
        cov_1jzfu96gqr().b[1][1]++;
      }
      var attrs = (cov_1jzfu96gqr().s[13]++, operation.body().value());
      var operationName = (cov_1jzfu96gqr().s[14]++, operation.body()["switch"]().name);
      cov_1jzfu96gqr().s[15]++;
      switch (operationName) {
        case 'createAccount':
          cov_1jzfu96gqr().b[2][0]++;
          {
            cov_1jzfu96gqr().s[16]++;
            result.type = 'createAccount';
            cov_1jzfu96gqr().s[17]++;
            result.destination = accountIdtoAddress(attrs.destination());
            cov_1jzfu96gqr().s[18]++;
            result.startingBalance = this._fromXDRAmount(attrs.startingBalance());
            cov_1jzfu96gqr().s[19]++;
            break;
          }
        case 'payment':
          cov_1jzfu96gqr().b[2][1]++;
          {
            cov_1jzfu96gqr().s[20]++;
            result.type = 'payment';
            cov_1jzfu96gqr().s[21]++;
            result.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(attrs.destination());
            cov_1jzfu96gqr().s[22]++;
            result.asset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.asset());
            cov_1jzfu96gqr().s[23]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[24]++;
            break;
          }
        case 'pathPaymentStrictReceive':
          cov_1jzfu96gqr().b[2][2]++;
          {
            cov_1jzfu96gqr().s[25]++;
            result.type = 'pathPaymentStrictReceive';
            cov_1jzfu96gqr().s[26]++;
            result.sendAsset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.sendAsset());
            cov_1jzfu96gqr().s[27]++;
            result.sendMax = this._fromXDRAmount(attrs.sendMax());
            cov_1jzfu96gqr().s[28]++;
            result.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(attrs.destination());
            cov_1jzfu96gqr().s[29]++;
            result.destAsset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.destAsset());
            cov_1jzfu96gqr().s[30]++;
            result.destAmount = this._fromXDRAmount(attrs.destAmount());
            cov_1jzfu96gqr().s[31]++;
            result.path = [];
            var path = (cov_1jzfu96gqr().s[32]++, attrs.path());

            // note that Object.values isn't supported by node 6!
            cov_1jzfu96gqr().s[33]++;
            Object.keys(path).forEach(function (pathKey) {
              cov_1jzfu96gqr().f[2]++;
              cov_1jzfu96gqr().s[34]++;
              result.path.push(_asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(path[pathKey]));
            });
            cov_1jzfu96gqr().s[35]++;
            break;
          }
        case 'pathPaymentStrictSend':
          cov_1jzfu96gqr().b[2][3]++;
          {
            cov_1jzfu96gqr().s[36]++;
            result.type = 'pathPaymentStrictSend';
            cov_1jzfu96gqr().s[37]++;
            result.sendAsset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.sendAsset());
            cov_1jzfu96gqr().s[38]++;
            result.sendAmount = this._fromXDRAmount(attrs.sendAmount());
            cov_1jzfu96gqr().s[39]++;
            result.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(attrs.destination());
            cov_1jzfu96gqr().s[40]++;
            result.destAsset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.destAsset());
            cov_1jzfu96gqr().s[41]++;
            result.destMin = this._fromXDRAmount(attrs.destMin());
            cov_1jzfu96gqr().s[42]++;
            result.path = [];
            var _path = (cov_1jzfu96gqr().s[43]++, attrs.path());

            // note that Object.values isn't supported by node 6!
            cov_1jzfu96gqr().s[44]++;
            Object.keys(_path).forEach(function (pathKey) {
              cov_1jzfu96gqr().f[3]++;
              cov_1jzfu96gqr().s[45]++;
              result.path.push(_asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(_path[pathKey]));
            });
            cov_1jzfu96gqr().s[46]++;
            break;
          }
        case 'changeTrust':
          cov_1jzfu96gqr().b[2][4]++;
          {
            cov_1jzfu96gqr().s[47]++;
            result.type = 'changeTrust';
            cov_1jzfu96gqr().s[48]++;
            switch (attrs.line()["switch"]()) {
              case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].AssetType.assetTypePoolShare():
                cov_1jzfu96gqr().b[3][0]++;
                cov_1jzfu96gqr().s[49]++;
                result.line = _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_9__.LiquidityPoolAsset.fromOperation(attrs.line());
                cov_1jzfu96gqr().s[50]++;
                break;
              default:
                cov_1jzfu96gqr().b[3][1]++;
                cov_1jzfu96gqr().s[51]++;
                result.line = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.line());
                cov_1jzfu96gqr().s[52]++;
                break;
            }
            cov_1jzfu96gqr().s[53]++;
            result.limit = this._fromXDRAmount(attrs.limit());
            cov_1jzfu96gqr().s[54]++;
            break;
          }
        case 'allowTrust':
          cov_1jzfu96gqr().b[2][5]++;
          {
            cov_1jzfu96gqr().s[55]++;
            result.type = 'allowTrust';
            cov_1jzfu96gqr().s[56]++;
            result.trustor = accountIdtoAddress(attrs.trustor());
            cov_1jzfu96gqr().s[57]++;
            result.assetCode = attrs.asset().value().toString();
            cov_1jzfu96gqr().s[58]++;
            result.assetCode = lodash_trimEnd__WEBPACK_IMPORTED_MODULE_2___default()(result.assetCode, '\0');
            cov_1jzfu96gqr().s[59]++;
            result.authorize = attrs.authorize();
            cov_1jzfu96gqr().s[60]++;
            break;
          }
        case 'setOptions':
          cov_1jzfu96gqr().b[2][6]++;
          {
            cov_1jzfu96gqr().s[61]++;
            result.type = 'setOptions';
            cov_1jzfu96gqr().s[62]++;
            if (attrs.inflationDest()) {
              cov_1jzfu96gqr().b[4][0]++;
              cov_1jzfu96gqr().s[63]++;
              result.inflationDest = accountIdtoAddress(attrs.inflationDest());
            } else {
              cov_1jzfu96gqr().b[4][1]++;
            }
            cov_1jzfu96gqr().s[64]++;
            result.clearFlags = attrs.clearFlags();
            cov_1jzfu96gqr().s[65]++;
            result.setFlags = attrs.setFlags();
            cov_1jzfu96gqr().s[66]++;
            result.masterWeight = attrs.masterWeight();
            cov_1jzfu96gqr().s[67]++;
            result.lowThreshold = attrs.lowThreshold();
            cov_1jzfu96gqr().s[68]++;
            result.medThreshold = attrs.medThreshold();
            cov_1jzfu96gqr().s[69]++;
            result.highThreshold = attrs.highThreshold();
            // home_domain is checked by iscntrl in stellar-core
            cov_1jzfu96gqr().s[70]++;
            result.homeDomain = attrs.homeDomain() !== undefined ? (cov_1jzfu96gqr().b[5][0]++, attrs.homeDomain().toString('ascii')) : (cov_1jzfu96gqr().b[5][1]++, undefined);
            cov_1jzfu96gqr().s[71]++;
            if (attrs.signer()) {
              cov_1jzfu96gqr().b[6][0]++;
              var signer = (cov_1jzfu96gqr().s[72]++, {});
              var arm = (cov_1jzfu96gqr().s[73]++, attrs.signer().key().arm());
              cov_1jzfu96gqr().s[74]++;
              if (arm === 'ed25519') {
                cov_1jzfu96gqr().b[7][0]++;
                cov_1jzfu96gqr().s[75]++;
                signer.ed25519PublicKey = accountIdtoAddress(attrs.signer().key());
              } else {
                cov_1jzfu96gqr().b[7][1]++;
                cov_1jzfu96gqr().s[76]++;
                if (arm === 'preAuthTx') {
                  cov_1jzfu96gqr().b[8][0]++;
                  cov_1jzfu96gqr().s[77]++;
                  signer.preAuthTx = attrs.signer().key().preAuthTx();
                } else {
                  cov_1jzfu96gqr().b[8][1]++;
                  cov_1jzfu96gqr().s[78]++;
                  if (arm === 'hashX') {
                    cov_1jzfu96gqr().b[9][0]++;
                    cov_1jzfu96gqr().s[79]++;
                    signer.sha256Hash = attrs.signer().key().hashX();
                  } else {
                    cov_1jzfu96gqr().b[9][1]++;
                    cov_1jzfu96gqr().s[80]++;
                    if (arm === 'ed25519SignedPayload') {
                      cov_1jzfu96gqr().b[10][0]++;
                      var signedPayload = (cov_1jzfu96gqr().s[81]++, attrs.signer().key().ed25519SignedPayload());
                      cov_1jzfu96gqr().s[82]++;
                      signer.ed25519SignedPayload = _strkey__WEBPACK_IMPORTED_MODULE_11__.StrKey.encodeSignedPayload(signedPayload.toXDR());
                    } else {
                      cov_1jzfu96gqr().b[10][1]++;
                    }
                  }
                }
              }
              cov_1jzfu96gqr().s[83]++;
              signer.weight = attrs.signer().weight();
              cov_1jzfu96gqr().s[84]++;
              result.signer = signer;
            } else {
              cov_1jzfu96gqr().b[6][1]++;
            }
            cov_1jzfu96gqr().s[85]++;
            break;
          }
        // the next case intentionally falls through!
        case 'manageOffer':
          cov_1jzfu96gqr().b[2][7]++;
        case 'manageSellOffer':
          cov_1jzfu96gqr().b[2][8]++;
          {
            cov_1jzfu96gqr().s[86]++;
            result.type = 'manageSellOffer';
            cov_1jzfu96gqr().s[87]++;
            result.selling = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.selling());
            cov_1jzfu96gqr().s[88]++;
            result.buying = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.buying());
            cov_1jzfu96gqr().s[89]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[90]++;
            result.price = this._fromXDRPrice(attrs.price());
            cov_1jzfu96gqr().s[91]++;
            result.offerId = attrs.offerId().toString();
            cov_1jzfu96gqr().s[92]++;
            break;
          }
        case 'manageBuyOffer':
          cov_1jzfu96gqr().b[2][9]++;
          {
            cov_1jzfu96gqr().s[93]++;
            result.type = 'manageBuyOffer';
            cov_1jzfu96gqr().s[94]++;
            result.selling = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.selling());
            cov_1jzfu96gqr().s[95]++;
            result.buying = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.buying());
            cov_1jzfu96gqr().s[96]++;
            result.buyAmount = this._fromXDRAmount(attrs.buyAmount());
            cov_1jzfu96gqr().s[97]++;
            result.price = this._fromXDRPrice(attrs.price());
            cov_1jzfu96gqr().s[98]++;
            result.offerId = attrs.offerId().toString();
            cov_1jzfu96gqr().s[99]++;
            break;
          }
        // the next case intentionally falls through!
        case 'createPassiveOffer':
          cov_1jzfu96gqr().b[2][10]++;
        case 'createPassiveSellOffer':
          cov_1jzfu96gqr().b[2][11]++;
          {
            cov_1jzfu96gqr().s[100]++;
            result.type = 'createPassiveSellOffer';
            cov_1jzfu96gqr().s[101]++;
            result.selling = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.selling());
            cov_1jzfu96gqr().s[102]++;
            result.buying = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.buying());
            cov_1jzfu96gqr().s[103]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[104]++;
            result.price = this._fromXDRPrice(attrs.price());
            cov_1jzfu96gqr().s[105]++;
            break;
          }
        case 'accountMerge':
          cov_1jzfu96gqr().b[2][12]++;
          {
            cov_1jzfu96gqr().s[106]++;
            result.type = 'accountMerge';
            cov_1jzfu96gqr().s[107]++;
            result.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(attrs);
            cov_1jzfu96gqr().s[108]++;
            break;
          }
        case 'manageData':
          cov_1jzfu96gqr().b[2][13]++;
          {
            cov_1jzfu96gqr().s[109]++;
            result.type = 'manageData';
            // manage_data.name is checked by iscntrl in stellar-core
            cov_1jzfu96gqr().s[110]++;
            result.name = attrs.dataName().toString('ascii');
            cov_1jzfu96gqr().s[111]++;
            result.value = attrs.dataValue();
            cov_1jzfu96gqr().s[112]++;
            break;
          }
        case 'inflation':
          cov_1jzfu96gqr().b[2][14]++;
          {
            cov_1jzfu96gqr().s[113]++;
            result.type = 'inflation';
            cov_1jzfu96gqr().s[114]++;
            break;
          }
        case 'bumpSequence':
          cov_1jzfu96gqr().b[2][15]++;
          {
            cov_1jzfu96gqr().s[115]++;
            result.type = 'bumpSequence';
            cov_1jzfu96gqr().s[116]++;
            result.bumpTo = attrs.bumpTo().toString();
            cov_1jzfu96gqr().s[117]++;
            break;
          }
        case 'createClaimableBalance':
          cov_1jzfu96gqr().b[2][16]++;
          {
            cov_1jzfu96gqr().s[118]++;
            result.type = 'createClaimableBalance';
            cov_1jzfu96gqr().s[119]++;
            result.asset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.asset());
            cov_1jzfu96gqr().s[120]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[121]++;
            result.claimants = [];
            cov_1jzfu96gqr().s[122]++;
            attrs.claimants().forEach(function (claimant) {
              cov_1jzfu96gqr().f[4]++;
              cov_1jzfu96gqr().s[123]++;
              result.claimants.push(_claimant__WEBPACK_IMPORTED_MODULE_10__.Claimant.fromXDR(claimant));
            });
            cov_1jzfu96gqr().s[124]++;
            break;
          }
        case 'claimClaimableBalance':
          cov_1jzfu96gqr().b[2][17]++;
          {
            cov_1jzfu96gqr().s[125]++;
            result.type = 'claimClaimableBalance';
            cov_1jzfu96gqr().s[126]++;
            result.balanceId = attrs.toXDR('hex');
            cov_1jzfu96gqr().s[127]++;
            break;
          }
        case 'beginSponsoringFutureReserves':
          cov_1jzfu96gqr().b[2][18]++;
          {
            cov_1jzfu96gqr().s[128]++;
            result.type = 'beginSponsoringFutureReserves';
            cov_1jzfu96gqr().s[129]++;
            result.sponsoredId = accountIdtoAddress(attrs.sponsoredId());
            cov_1jzfu96gqr().s[130]++;
            break;
          }
        case 'endSponsoringFutureReserves':
          cov_1jzfu96gqr().b[2][19]++;
          {
            cov_1jzfu96gqr().s[131]++;
            result.type = 'endSponsoringFutureReserves';
            cov_1jzfu96gqr().s[132]++;
            break;
          }
        case 'revokeSponsorship':
          cov_1jzfu96gqr().b[2][20]++;
          {
            cov_1jzfu96gqr().s[133]++;
            extractRevokeSponshipDetails(attrs, result);
            cov_1jzfu96gqr().s[134]++;
            break;
          }
        case 'clawback':
          cov_1jzfu96gqr().b[2][21]++;
          {
            cov_1jzfu96gqr().s[135]++;
            result.type = 'clawback';
            cov_1jzfu96gqr().s[136]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[137]++;
            result.from = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_15__.encodeMuxedAccountToAddress)(attrs.from());
            cov_1jzfu96gqr().s[138]++;
            result.asset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.asset());
            cov_1jzfu96gqr().s[139]++;
            break;
          }
        case 'clawbackClaimableBalance':
          cov_1jzfu96gqr().b[2][22]++;
          {
            cov_1jzfu96gqr().s[140]++;
            result.type = 'clawbackClaimableBalance';
            cov_1jzfu96gqr().s[141]++;
            result.balanceId = attrs.toXDR('hex');
            cov_1jzfu96gqr().s[142]++;
            break;
          }
        case 'setTrustLineFlags':
          cov_1jzfu96gqr().b[2][23]++;
          {
            cov_1jzfu96gqr().s[143]++;
            result.type = 'setTrustLineFlags';
            cov_1jzfu96gqr().s[144]++;
            result.asset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(attrs.asset());
            cov_1jzfu96gqr().s[145]++;
            result.trustor = accountIdtoAddress(attrs.trustor());

            // Convert from the integer-bitwised flag into a sensible object that
            // indicates true/false for each flag that's on/off.
            var clears = (cov_1jzfu96gqr().s[146]++, attrs.clearFlags());
            var sets = (cov_1jzfu96gqr().s[147]++, attrs.setFlags());
            var mapping = (cov_1jzfu96gqr().s[148]++, {
              authorized: _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].TrustLineFlags.authorizedFlag(),
              authorizedToMaintainLiabilities: _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),
              clawbackEnabled: _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].TrustLineFlags.trustlineClawbackEnabledFlag()
            });
            cov_1jzfu96gqr().s[149]++;
            var getFlagValue = function getFlagValue(key) {
              cov_1jzfu96gqr().f[5]++;
              var bit = (cov_1jzfu96gqr().s[150]++, mapping[key].value);
              cov_1jzfu96gqr().s[151]++;
              if (sets & bit) {
                cov_1jzfu96gqr().b[11][0]++;
                cov_1jzfu96gqr().s[152]++;
                return true;
              } else {
                cov_1jzfu96gqr().b[11][1]++;
              }
              cov_1jzfu96gqr().s[153]++;
              if (clears & bit) {
                cov_1jzfu96gqr().b[12][0]++;
                cov_1jzfu96gqr().s[154]++;
                return false;
              } else {
                cov_1jzfu96gqr().b[12][1]++;
              }
              cov_1jzfu96gqr().s[155]++;
              return undefined;
            };
            cov_1jzfu96gqr().s[156]++;
            result.flags = {};
            cov_1jzfu96gqr().s[157]++;
            Object.keys(mapping).forEach(function (flagName) {
              cov_1jzfu96gqr().f[6]++;
              cov_1jzfu96gqr().s[158]++;
              result.flags[flagName] = getFlagValue(flagName);
            });
            cov_1jzfu96gqr().s[159]++;
            break;
          }
        case 'liquidityPoolDeposit':
          cov_1jzfu96gqr().b[2][24]++;
          {
            cov_1jzfu96gqr().s[160]++;
            result.type = 'liquidityPoolDeposit';
            cov_1jzfu96gqr().s[161]++;
            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');
            cov_1jzfu96gqr().s[162]++;
            result.maxAmountA = this._fromXDRAmount(attrs.maxAmountA());
            cov_1jzfu96gqr().s[163]++;
            result.maxAmountB = this._fromXDRAmount(attrs.maxAmountB());
            cov_1jzfu96gqr().s[164]++;
            result.minPrice = this._fromXDRPrice(attrs.minPrice());
            cov_1jzfu96gqr().s[165]++;
            result.maxPrice = this._fromXDRPrice(attrs.maxPrice());
            cov_1jzfu96gqr().s[166]++;
            break;
          }
        case 'liquidityPoolWithdraw':
          cov_1jzfu96gqr().b[2][25]++;
          {
            cov_1jzfu96gqr().s[167]++;
            result.type = 'liquidityPoolWithdraw';
            cov_1jzfu96gqr().s[168]++;
            result.liquidityPoolId = attrs.liquidityPoolId().toString('hex');
            cov_1jzfu96gqr().s[169]++;
            result.amount = this._fromXDRAmount(attrs.amount());
            cov_1jzfu96gqr().s[170]++;
            result.minAmountA = this._fromXDRAmount(attrs.minAmountA());
            cov_1jzfu96gqr().s[171]++;
            result.minAmountB = this._fromXDRAmount(attrs.minAmountB());
            cov_1jzfu96gqr().s[172]++;
            break;
          }
        default:
          cov_1jzfu96gqr().b[2][26]++;
          {
            cov_1jzfu96gqr().s[173]++;
            throw new Error("Unknown operation: ".concat(operationName));
          }
      }
      cov_1jzfu96gqr().s[174]++;
      return result;
    }

    /**
     * Validates that a given amount is possible for a Stellar asset.
     *
     * Specifically, this means that the amount is well, a valid number, but also
     * that it is within the int64 range and has no more than 7 decimal levels of
     * precision.
     *
     * Note that while smart contracts allow larger amounts, this is oriented
     * towards validating the standard Stellar operations.
     *
     * @param {string} value          the amount to validate
     * @param {[boolean]} allowZero   whether or not zero is valid (default: no)
     *
     * @returns {boolean}
     */
  }, {
    key: "isValidAmount",
    value: function isValidAmount(value) {
      var allowZero = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_1jzfu96gqr().b[13][0]++, false);
      cov_1jzfu96gqr().f[7]++;
      cov_1jzfu96gqr().s[175]++;
      if (!lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(value)) {
        cov_1jzfu96gqr().b[14][0]++;
        cov_1jzfu96gqr().s[176]++;
        return false;
      } else {
        cov_1jzfu96gqr().b[14][1]++;
      }
      var amount;
      cov_1jzfu96gqr().s[177]++;
      try {
        cov_1jzfu96gqr().s[178]++;
        amount = new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](value);
      } catch (e) {
        cov_1jzfu96gqr().s[179]++;
        return false;
      }
      cov_1jzfu96gqr().s[180]++;
      if (
      // == 0
      (cov_1jzfu96gqr().b[16][0]++, !allowZero) && (cov_1jzfu96gqr().b[16][1]++, amount.isZero()) || (cov_1jzfu96gqr().b[16][2]++,
      // < 0
      amount.isNegative()) || (cov_1jzfu96gqr().b[16][3]++,
      // > Max value
      amount.times(ONE).gt(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](MAX_INT64).toString())) || (cov_1jzfu96gqr().b[16][4]++,
      // Decimal places (max 7)
      amount.decimalPlaces() > 7) || (cov_1jzfu96gqr().b[16][5]++,
      // NaN or Infinity
      amount.isNaN()) || (cov_1jzfu96gqr().b[16][6]++, !amount.isFinite())) {
        cov_1jzfu96gqr().b[15][0]++;
        cov_1jzfu96gqr().s[181]++;
        return false;
      } else {
        cov_1jzfu96gqr().b[15][1]++;
      }
      cov_1jzfu96gqr().s[182]++;
      return true;
    }
  }, {
    key: "constructAmountRequirementsError",
    value: function constructAmountRequirementsError(arg) {
      cov_1jzfu96gqr().f[8]++;
      cov_1jzfu96gqr().s[183]++;
      return "".concat(arg, " argument must be of type String, represent a positive number and have at most 7 digits after the decimal");
    }

    /**
     * Returns value converted to uint32 value or undefined.
     * If `value` is not `Number`, `String` or `Undefined` then throws an error.
     * Used in {@link Operation.setOptions}.
     * @private
     * @param {string} name Name of the property (used in error message only)
     * @param {*} value Value to check
     * @param {function(value, name)} isValidFunction Function to check other constraints (the argument will be a `Number`)
     * @returns {undefined|Number}
     */
  }, {
    key: "_checkUnsignedIntValue",
    value: function _checkUnsignedIntValue(name, value) {
      var isValidFunction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_1jzfu96gqr().b[17][0]++, null);
      cov_1jzfu96gqr().f[9]++;
      cov_1jzfu96gqr().s[184]++;
      if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3___default()(value)) {
        cov_1jzfu96gqr().b[18][0]++;
        cov_1jzfu96gqr().s[185]++;
        return undefined;
      } else {
        cov_1jzfu96gqr().b[18][1]++;
      }
      cov_1jzfu96gqr().s[186]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(value)) {
        cov_1jzfu96gqr().b[19][0]++;
        cov_1jzfu96gqr().s[187]++;
        value = parseFloat(value);
      } else {
        cov_1jzfu96gqr().b[19][1]++;
      }
      cov_1jzfu96gqr().s[188]++;
      switch (true) {
        case (cov_1jzfu96gqr().b[21][0]++, !lodash_isNumber__WEBPACK_IMPORTED_MODULE_5___default()(value)) || (cov_1jzfu96gqr().b[21][1]++, !lodash_isFinite__WEBPACK_IMPORTED_MODULE_6___default()(value)) || (cov_1jzfu96gqr().b[21][2]++, value % 1 !== 0):
          cov_1jzfu96gqr().b[20][0]++;
          cov_1jzfu96gqr().s[189]++;
          throw new Error("".concat(name, " value is invalid"));
        case value < 0:
          cov_1jzfu96gqr().b[20][1]++;
          cov_1jzfu96gqr().s[190]++;
          throw new Error("".concat(name, " value must be unsigned"));
        case (cov_1jzfu96gqr().b[22][0]++, !isValidFunction) || (cov_1jzfu96gqr().b[22][1]++, isValidFunction) && (cov_1jzfu96gqr().b[22][2]++, isValidFunction(value, name)):
          cov_1jzfu96gqr().b[20][2]++;
          cov_1jzfu96gqr().s[191]++;
          return value;
        default:
          cov_1jzfu96gqr().b[20][3]++;
          cov_1jzfu96gqr().s[192]++;
          throw new Error("".concat(name, " value is invalid"));
      }
    }
    /**
     * @private
     * @param {string|BigNumber} value Value
     * @returns {Hyper} XDR amount
     */
  }, {
    key: "_toXDRAmount",
    value: function _toXDRAmount(value) {
      cov_1jzfu96gqr().f[10]++;
      var amount = (cov_1jzfu96gqr().s[193]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](value).times(ONE));
      cov_1jzfu96gqr().s[194]++;
      return js_xdr__WEBPACK_IMPORTED_MODULE_0__.Hyper.fromString(amount.toString());
    }

    /**
     * @private
     * @param {string|BigNumber} value XDR amount
     * @returns {BigNumber} Number
     */
  }, {
    key: "_fromXDRAmount",
    value: function _fromXDRAmount(value) {
      cov_1jzfu96gqr().f[11]++;
      cov_1jzfu96gqr().s[195]++;
      return new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](value).div(ONE).toFixed(7);
    }

    /**
     * @private
     * @param {object} price Price object
     * @param {function} price.n numerator function that returns a value
     * @param {function} price.d denominator function that returns a value
     * @returns {BigNumber} Big string
     */
  }, {
    key: "_fromXDRPrice",
    value: function _fromXDRPrice(price) {
      cov_1jzfu96gqr().f[12]++;
      var n = (cov_1jzfu96gqr().s[196]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](price.n()));
      cov_1jzfu96gqr().s[197]++;
      return n.div(new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](price.d())).toString();
    }

    /**
     * @private
     * @param {object} price Price object
     * @param {function} price.n numerator function that returns a value
     * @param {function} price.d denominator function that returns a value
     * @returns {object} XDR price object
     */
  }, {
    key: "_toXDRPrice",
    value: function _toXDRPrice(price) {
      cov_1jzfu96gqr().f[13]++;
      var xdrObject;
      cov_1jzfu96gqr().s[198]++;
      if ((cov_1jzfu96gqr().b[24][0]++, price.n) && (cov_1jzfu96gqr().b[24][1]++, price.d)) {
        cov_1jzfu96gqr().b[23][0]++;
        cov_1jzfu96gqr().s[199]++;
        xdrObject = new _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].Price(price);
      } else {
        cov_1jzfu96gqr().b[23][1]++;
        var approx = (cov_1jzfu96gqr().s[200]++, (0,_util_continued_fraction__WEBPACK_IMPORTED_MODULE_7__.best_r)(price));
        cov_1jzfu96gqr().s[201]++;
        xdrObject = new _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].Price({
          n: parseInt(approx[0], 10),
          d: parseInt(approx[1], 10)
        });
      }
      cov_1jzfu96gqr().s[202]++;
      if ((cov_1jzfu96gqr().b[26][0]++, xdrObject.n() < 0) || (cov_1jzfu96gqr().b[26][1]++, xdrObject.d() < 0)) {
        cov_1jzfu96gqr().b[25][0]++;
        cov_1jzfu96gqr().s[203]++;
        throw new Error('price must be positive');
      } else {
        cov_1jzfu96gqr().b[25][1]++;
      }
      cov_1jzfu96gqr().s[204]++;
      return xdrObject;
    }
  }]);
  return Operation;
}();
function extractRevokeSponshipDetails(attrs, result) {
  cov_1jzfu96gqr().f[14]++;
  cov_1jzfu96gqr().s[205]++;
  switch (attrs["switch"]().name) {
    case 'revokeSponsorshipLedgerEntry':
      cov_1jzfu96gqr().b[27][0]++;
      {
        var ledgerKey = (cov_1jzfu96gqr().s[206]++, attrs.ledgerKey());
        cov_1jzfu96gqr().s[207]++;
        switch (ledgerKey["switch"]().name) {
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.account().name:
            cov_1jzfu96gqr().b[28][0]++;
            {
              cov_1jzfu96gqr().s[208]++;
              result.type = 'revokeAccountSponsorship';
              cov_1jzfu96gqr().s[209]++;
              result.account = accountIdtoAddress(ledgerKey.account().accountId());
              cov_1jzfu96gqr().s[210]++;
              break;
            }
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.trustline().name:
            cov_1jzfu96gqr().b[28][1]++;
            {
              cov_1jzfu96gqr().s[211]++;
              result.type = 'revokeTrustlineSponsorship';
              cov_1jzfu96gqr().s[212]++;
              result.account = accountIdtoAddress(ledgerKey.trustLine().accountId());
              var xdrAsset = (cov_1jzfu96gqr().s[213]++, ledgerKey.trustLine().asset());
              cov_1jzfu96gqr().s[214]++;
              switch (xdrAsset["switch"]()) {
                case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].AssetType.assetTypePoolShare():
                  cov_1jzfu96gqr().b[29][0]++;
                  cov_1jzfu96gqr().s[215]++;
                  result.asset = _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_12__.LiquidityPoolId.fromOperation(xdrAsset);
                  cov_1jzfu96gqr().s[216]++;
                  break;
                default:
                  cov_1jzfu96gqr().b[29][1]++;
                  cov_1jzfu96gqr().s[217]++;
                  result.asset = _asset__WEBPACK_IMPORTED_MODULE_8__.Asset.fromOperation(xdrAsset);
                  cov_1jzfu96gqr().s[218]++;
                  break;
              }
              cov_1jzfu96gqr().s[219]++;
              break;
            }
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.offer().name:
            cov_1jzfu96gqr().b[28][2]++;
            {
              cov_1jzfu96gqr().s[220]++;
              result.type = 'revokeOfferSponsorship';
              cov_1jzfu96gqr().s[221]++;
              result.seller = accountIdtoAddress(ledgerKey.offer().sellerId());
              cov_1jzfu96gqr().s[222]++;
              result.offerId = ledgerKey.offer().offerId().toString();
              cov_1jzfu96gqr().s[223]++;
              break;
            }
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.data().name:
            cov_1jzfu96gqr().b[28][3]++;
            {
              cov_1jzfu96gqr().s[224]++;
              result.type = 'revokeDataSponsorship';
              cov_1jzfu96gqr().s[225]++;
              result.account = accountIdtoAddress(ledgerKey.data().accountId());
              cov_1jzfu96gqr().s[226]++;
              result.name = ledgerKey.data().dataName().toString('ascii');
              cov_1jzfu96gqr().s[227]++;
              break;
            }
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.claimableBalance().name:
            cov_1jzfu96gqr().b[28][4]++;
            {
              cov_1jzfu96gqr().s[228]++;
              result.type = 'revokeClaimableBalanceSponsorship';
              cov_1jzfu96gqr().s[229]++;
              result.balanceId = ledgerKey.claimableBalance().balanceId().toXDR('hex');
              cov_1jzfu96gqr().s[230]++;
              break;
            }
          case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].LedgerEntryType.liquidityPool().name:
            cov_1jzfu96gqr().b[28][5]++;
            {
              cov_1jzfu96gqr().s[231]++;
              result.type = 'revokeLiquidityPoolSponsorship';
              cov_1jzfu96gqr().s[232]++;
              result.liquidityPoolId = ledgerKey.liquidityPool().liquidityPoolId().toString('hex');
              cov_1jzfu96gqr().s[233]++;
              break;
            }
          default:
            cov_1jzfu96gqr().b[28][6]++;
            {
              cov_1jzfu96gqr().s[234]++;
              throw new Error("Unknown ledgerKey: ".concat(attrs["switch"]().name));
            }
        }
        cov_1jzfu96gqr().s[235]++;
        break;
      }
    case 'revokeSponsorshipSigner':
      cov_1jzfu96gqr().b[27][1]++;
      {
        cov_1jzfu96gqr().s[236]++;
        result.type = 'revokeSignerSponsorship';
        cov_1jzfu96gqr().s[237]++;
        result.account = accountIdtoAddress(attrs.signer().accountId());
        cov_1jzfu96gqr().s[238]++;
        result.signer = convertXDRSignerKeyToObject(attrs.signer().signerKey());
        cov_1jzfu96gqr().s[239]++;
        break;
      }
    default:
      cov_1jzfu96gqr().b[27][2]++;
      {
        cov_1jzfu96gqr().s[240]++;
        throw new Error("Unknown revokeSponsorship: ".concat(attrs["switch"]().name));
      }
  }
}
function convertXDRSignerKeyToObject(signerKey) {
  cov_1jzfu96gqr().f[15]++;
  var attrs = (cov_1jzfu96gqr().s[241]++, {});
  cov_1jzfu96gqr().s[242]++;
  switch (signerKey["switch"]().name) {
    case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].SignerKeyType.signerKeyTypeEd25519().name:
      cov_1jzfu96gqr().b[30][0]++;
      {
        cov_1jzfu96gqr().s[243]++;
        attrs.ed25519PublicKey = _strkey__WEBPACK_IMPORTED_MODULE_11__.StrKey.encodeEd25519PublicKey(signerKey.ed25519());
        cov_1jzfu96gqr().s[244]++;
        break;
      }
    case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].SignerKeyType.signerKeyTypePreAuthTx().name:
      cov_1jzfu96gqr().b[30][1]++;
      {
        cov_1jzfu96gqr().s[245]++;
        attrs.preAuthTx = signerKey.preAuthTx().toString('hex');
        cov_1jzfu96gqr().s[246]++;
        break;
      }
    case _xdr__WEBPACK_IMPORTED_MODULE_13__["default"].SignerKeyType.signerKeyTypeHashX().name:
      cov_1jzfu96gqr().b[30][2]++;
      {
        cov_1jzfu96gqr().s[247]++;
        attrs.sha256Hash = signerKey.hashX().toString('hex');
        cov_1jzfu96gqr().s[248]++;
        break;
      }
    default:
      cov_1jzfu96gqr().b[30][3]++;
      {
        cov_1jzfu96gqr().s[249]++;
        throw new Error("Unknown signerKey: ".concat(signerKey["switch"]().name));
      }
  }
  cov_1jzfu96gqr().s[250]++;
  return attrs;
}
function accountIdtoAddress(accountId) {
  cov_1jzfu96gqr().f[16]++;
  cov_1jzfu96gqr().s[251]++;
  return _strkey__WEBPACK_IMPORTED_MODULE_11__.StrKey.encodeEd25519PublicKey(accountId.ed25519());
}

// Attach all imported operations as static methods on the Operation class
cov_1jzfu96gqr().s[252]++;
Operation.accountMerge = _operations_index__WEBPACK_IMPORTED_MODULE_14__.accountMerge;
cov_1jzfu96gqr().s[253]++;
Operation.allowTrust = _operations_index__WEBPACK_IMPORTED_MODULE_14__.allowTrust;
cov_1jzfu96gqr().s[254]++;
Operation.bumpSequence = _operations_index__WEBPACK_IMPORTED_MODULE_14__.bumpSequence;
cov_1jzfu96gqr().s[255]++;
Operation.changeTrust = _operations_index__WEBPACK_IMPORTED_MODULE_14__.changeTrust;
cov_1jzfu96gqr().s[256]++;
Operation.createAccount = _operations_index__WEBPACK_IMPORTED_MODULE_14__.createAccount;
cov_1jzfu96gqr().s[257]++;
Operation.createClaimableBalance = _operations_index__WEBPACK_IMPORTED_MODULE_14__.createClaimableBalance;
cov_1jzfu96gqr().s[258]++;
Operation.claimClaimableBalance = _operations_index__WEBPACK_IMPORTED_MODULE_14__.claimClaimableBalance;
cov_1jzfu96gqr().s[259]++;
Operation.clawbackClaimableBalance = _operations_index__WEBPACK_IMPORTED_MODULE_14__.clawbackClaimableBalance;
cov_1jzfu96gqr().s[260]++;
Operation.createPassiveSellOffer = _operations_index__WEBPACK_IMPORTED_MODULE_14__.createPassiveSellOffer;
cov_1jzfu96gqr().s[261]++;
Operation.inflation = _operations_index__WEBPACK_IMPORTED_MODULE_14__.inflation;
cov_1jzfu96gqr().s[262]++;
Operation.manageData = _operations_index__WEBPACK_IMPORTED_MODULE_14__.manageData;
cov_1jzfu96gqr().s[263]++;
Operation.manageSellOffer = _operations_index__WEBPACK_IMPORTED_MODULE_14__.manageSellOffer;
cov_1jzfu96gqr().s[264]++;
Operation.manageBuyOffer = _operations_index__WEBPACK_IMPORTED_MODULE_14__.manageBuyOffer;
cov_1jzfu96gqr().s[265]++;
Operation.pathPaymentStrictReceive = _operations_index__WEBPACK_IMPORTED_MODULE_14__.pathPaymentStrictReceive;
cov_1jzfu96gqr().s[266]++;
Operation.pathPaymentStrictSend = _operations_index__WEBPACK_IMPORTED_MODULE_14__.pathPaymentStrictSend;
cov_1jzfu96gqr().s[267]++;
Operation.payment = _operations_index__WEBPACK_IMPORTED_MODULE_14__.payment;
cov_1jzfu96gqr().s[268]++;
Operation.setOptions = _operations_index__WEBPACK_IMPORTED_MODULE_14__.setOptions;
cov_1jzfu96gqr().s[269]++;
Operation.beginSponsoringFutureReserves = _operations_index__WEBPACK_IMPORTED_MODULE_14__.beginSponsoringFutureReserves;
cov_1jzfu96gqr().s[270]++;
Operation.endSponsoringFutureReserves = _operations_index__WEBPACK_IMPORTED_MODULE_14__.endSponsoringFutureReserves;
cov_1jzfu96gqr().s[271]++;
Operation.revokeAccountSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeAccountSponsorship;
cov_1jzfu96gqr().s[272]++;
Operation.revokeTrustlineSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeTrustlineSponsorship;
cov_1jzfu96gqr().s[273]++;
Operation.revokeOfferSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeOfferSponsorship;
cov_1jzfu96gqr().s[274]++;
Operation.revokeDataSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeDataSponsorship;
cov_1jzfu96gqr().s[275]++;
Operation.revokeClaimableBalanceSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeClaimableBalanceSponsorship;
cov_1jzfu96gqr().s[276]++;
Operation.revokeLiquidityPoolSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeLiquidityPoolSponsorship;
cov_1jzfu96gqr().s[277]++;
Operation.revokeSignerSponsorship = _operations_index__WEBPACK_IMPORTED_MODULE_14__.revokeSignerSponsorship;
cov_1jzfu96gqr().s[278]++;
Operation.clawback = _operations_index__WEBPACK_IMPORTED_MODULE_14__.clawback;
cov_1jzfu96gqr().s[279]++;
Operation.setTrustLineFlags = _operations_index__WEBPACK_IMPORTED_MODULE_14__.setTrustLineFlags;
cov_1jzfu96gqr().s[280]++;
Operation.liquidityPoolDeposit = _operations_index__WEBPACK_IMPORTED_MODULE_14__.liquidityPoolDeposit;
cov_1jzfu96gqr().s[281]++;
Operation.liquidityPoolWithdraw = _operations_index__WEBPACK_IMPORTED_MODULE_14__.liquidityPoolWithdraw;

/***/ }),

/***/ "./src/operations/account_merge.js":
/*!*****************************************!*\
  !*** ./src/operations/account_merge.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "accountMerge": () => (/* binding */ accountMerge)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_1uth7l1ijc() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\account_merge.js";
  var hash = "cc1bc6777261a88a37c9fa28cb8646d134f57cc9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\account_merge.js",
    statementMap: {
      "0": {
        start: {
          line: 18,
          column: 23
        },
        end: {
          line: 18,
          column: 25
        }
      },
      "1": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 25,
          column: 3
        }
      },
      "2": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 22,
          column: 6
        }
      },
      "3": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 46
        }
      },
      "4": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 44
        }
      },
      "5": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "accountMerge",
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 28
          }
        },
        loc: {
          start: {
            line: 17,
            column: 35
          },
          end: {
            line: 29,
            column: 1
          }
        },
        line: 17
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cc1bc6777261a88a37c9fa28cb8646d134f57cc9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1uth7l1ijc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1uth7l1ijc();



/**
 * Transfers native balance to destination account.
 *
 * @function
 * @alias Operation.accountMerge
 *
 * @param {object} opts - options object
 * @param {string} opts.destination - destination to merge the source account into
 * @param {string} [opts.source]    - operation source account (defaults to
 *     transaction source)
 *
 * @returns {xdr.Operation} an Account Merge operation (xdr.AccountMergeOp)
 */
function accountMerge(opts) {
  cov_1uth7l1ijc().f[0]++;
  var opAttributes = (cov_1uth7l1ijc().s[0]++, {});
  cov_1uth7l1ijc().s[1]++;
  try {
    cov_1uth7l1ijc().s[2]++;
    opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.accountMerge((0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__.decodeAddressToMuxedAccount)(opts.destination));
  } catch (e) {
    cov_1uth7l1ijc().s[3]++;
    throw new Error('destination is invalid');
  }
  cov_1uth7l1ijc().s[4]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1uth7l1ijc().s[5]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/allow_trust.js":
/*!***************************************!*\
  !*** ./src/operations/allow_trust.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "allowTrust": () => (/* binding */ allowTrust)
/* harmony export */ });
/* harmony import */ var lodash_padEnd__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/padEnd */ "./node_modules/lodash/padEnd.js");
/* harmony import */ var lodash_padEnd__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_padEnd__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
function cov_14qu1rqp4t() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\allow_trust.js";
  var hash = "18286a1aed7ae82d2433415455006de43f0eb1cc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\allow_trust.js",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 26,
          column: 3
        }
      },
      "1": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 42
        }
      },
      "2": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "3": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 74
        }
      },
      "4": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "5": {
        start: {
          line: 30,
          column: 17
        },
        end: {
          line: 30,
          column: 48
        }
      },
      "6": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "7": {
        start: {
          line: 32,
          column: 9
        },
        end: {
          line: 37,
          column: 3
        }
      },
      "8": {
        start: {
          line: 33,
          column: 17
        },
        end: {
          line: 33,
          column: 49
        }
      },
      "9": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 69
        }
      },
      "10": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 64
        }
      },
      "11": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 47,
          column: 3
        }
      },
      "12": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 44,
          column: 5
        }
      },
      "13": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 71
        }
      },
      "14": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 31
        }
      },
      "15": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 42
        }
      },
      "16": {
        start: {
          line: 49,
          column: 23
        },
        end: {
          line: 49,
          column: 55
        }
      },
      "17": {
        start: {
          line: 51,
          column: 23
        },
        end: {
          line: 51,
          column: 25
        }
      },
      "18": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 65
        }
      },
      "19": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 53,
          column: 44
        }
      },
      "20": {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 55,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "allowTrust",
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 26
          }
        },
        loc: {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 56,
            column: 1
          }
        },
        line: 23
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 24,
            column: 2
          },
          end: {
            line: 26,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        }, {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 37,
            column: 3
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 37,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 9
          },
          end: {
            line: 37,
            column: 3
          }
        }, {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 37,
            column: 3
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }, {
          start: {
            line: 45,
            column: 9
          },
          end: {
            line: 47,
            column: 3
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 44,
            column: 5
          }
        }, {
          start: {
            line: 42,
            column: 11
          },
          end: {
            line: 44,
            column: 5
          }
        }],
        line: 40
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "18286a1aed7ae82d2433415455006de43f0eb1cc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_14qu1rqp4t = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_14qu1rqp4t();





/**
 * @deprecated since v5.0
 *
 * Returns an XDR AllowTrustOp. An "allow trust" operation authorizes another
 * account to hold your account's credit for a given asset.
 *
 * @function
 * @alias Operation.allowTrust
 *
 * @param {object} opts Options object
 * @param {string} opts.trustor - The trusting account (the one being authorized)
 * @param {string} opts.assetCode - The asset code being authorized.
 * @param {(0|1|2)} opts.authorize - `1` to authorize, `2` to authorize to maintain liabilities, and `0` to deauthorize.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 *
 * @returns {xdr.AllowTrustOp} Allow Trust operation
 */
function allowTrust(opts) {
  cov_14qu1rqp4t().f[0]++;
  cov_14qu1rqp4t().s[0]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_3__.StrKey.isValidEd25519PublicKey(opts.trustor)) {
    cov_14qu1rqp4t().b[0][0]++;
    cov_14qu1rqp4t().s[1]++;
    throw new Error('trustor is invalid');
  } else {
    cov_14qu1rqp4t().b[0][1]++;
  }
  var attributes = (cov_14qu1rqp4t().s[2]++, {});
  cov_14qu1rqp4t().s[3]++;
  attributes.trustor = _keypair__WEBPACK_IMPORTED_MODULE_2__.Keypair.fromPublicKey(opts.trustor).xdrAccountId();
  cov_14qu1rqp4t().s[4]++;
  if (opts.assetCode.length <= 4) {
    cov_14qu1rqp4t().b[1][0]++;
    var code = (cov_14qu1rqp4t().s[5]++, lodash_padEnd__WEBPACK_IMPORTED_MODULE_0___default()(opts.assetCode, 4, '\0'));
    cov_14qu1rqp4t().s[6]++;
    attributes.asset = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AssetCode.assetTypeCreditAlphanum4(code);
  } else {
    cov_14qu1rqp4t().b[1][1]++;
    cov_14qu1rqp4t().s[7]++;
    if (opts.assetCode.length <= 12) {
      cov_14qu1rqp4t().b[2][0]++;
      var _code = (cov_14qu1rqp4t().s[8]++, lodash_padEnd__WEBPACK_IMPORTED_MODULE_0___default()(opts.assetCode, 12, '\0'));
      cov_14qu1rqp4t().s[9]++;
      attributes.asset = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AssetCode.assetTypeCreditAlphanum12(_code);
    } else {
      cov_14qu1rqp4t().b[2][1]++;
      cov_14qu1rqp4t().s[10]++;
      throw new Error('Asset code must be 12 characters at max.');
    }
  }
  cov_14qu1rqp4t().s[11]++;
  if (typeof opts.authorize === 'boolean') {
    cov_14qu1rqp4t().b[3][0]++;
    cov_14qu1rqp4t().s[12]++;
    if (opts.authorize) {
      cov_14qu1rqp4t().b[4][0]++;
      cov_14qu1rqp4t().s[13]++;
      attributes.authorize = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TrustLineFlags.authorizedFlag().value;
    } else {
      cov_14qu1rqp4t().b[4][1]++;
      cov_14qu1rqp4t().s[14]++;
      attributes.authorize = 0;
    }
  } else {
    cov_14qu1rqp4t().b[3][1]++;
    cov_14qu1rqp4t().s[15]++;
    attributes.authorize = opts.authorize;
  }
  var allowTrustOp = (cov_14qu1rqp4t().s[16]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AllowTrustOp(attributes));
  var opAttributes = (cov_14qu1rqp4t().s[17]++, {});
  cov_14qu1rqp4t().s[18]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.allowTrust(allowTrustOp);
  cov_14qu1rqp4t().s[19]++;
  this.setSourceAccount(opAttributes, opts);
  cov_14qu1rqp4t().s[20]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/begin_sponsoring_future_reserves.js":
/*!************************************************************!*\
  !*** ./src/operations/begin_sponsoring_future_reserves.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "beginSponsoringFutureReserves": () => (/* binding */ beginSponsoringFutureReserves)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
function cov_1s00m3zwhz() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\begin_sponsoring_future_reserves.js";
  var hash = "140e6540abd399ba6472b05fd2b2466d9f90b656";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\begin_sponsoring_future_reserves.js",
    statementMap: {
      "0": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "1": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 46
        }
      },
      "2": {
        start: {
          line: 24,
          column: 13
        },
        end: {
          line: 26,
          column: 4
        }
      },
      "3": {
        start: {
          line: 28,
          column: 23
        },
        end: {
          line: 28,
          column: 25
        }
      },
      "4": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 74
        }
      },
      "5": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 30,
          column: 44
        }
      },
      "6": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "beginSponsoringFutureReserves",
        decl: {
          start: {
            line: 20,
            column: 16
          },
          end: {
            line: 20,
            column: 45
          }
        },
        loc: {
          start: {
            line: 20,
            column: 57
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 20
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 20,
            column: 46
          },
          end: {
            line: 20,
            column: 55
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 20,
            column: 53
          },
          end: {
            line: 20,
            column: 55
          }
        }],
        line: 20
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "140e6540abd399ba6472b05fd2b2466d9f90b656"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1s00m3zwhz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1s00m3zwhz();




/**
 * Create a "begin sponsoring future reserves" operation.
 * @function
 * @alias Operation.beginSponsoringFutureReserves
 * @param {object} opts Options object
 * @param {string} opts.sponsoredId - The sponsored account id.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.beginSponsoringFutureReserves({
 *   sponsoredId: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 * });
 *
 */
function beginSponsoringFutureReserves() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1s00m3zwhz().b[0][0]++, {});
  cov_1s00m3zwhz().f[0]++;
  cov_1s00m3zwhz().s[0]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_1__.StrKey.isValidEd25519PublicKey(opts.sponsoredId)) {
    cov_1s00m3zwhz().b[1][0]++;
    cov_1s00m3zwhz().s[1]++;
    throw new Error('sponsoredId is invalid');
  } else {
    cov_1s00m3zwhz().b[1][1]++;
  }
  var op = (cov_1s00m3zwhz().s[2]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].BeginSponsoringFutureReservesOp({
    sponsoredId: _keypair__WEBPACK_IMPORTED_MODULE_2__.Keypair.fromPublicKey(opts.sponsoredId).xdrAccountId()
  }));
  var opAttributes = (cov_1s00m3zwhz().s[3]++, {});
  cov_1s00m3zwhz().s[4]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.beginSponsoringFutureReserves(op);
  cov_1s00m3zwhz().s[5]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1s00m3zwhz().s[6]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/bump_sequence.js":
/*!*****************************************!*\
  !*** ./src/operations/bump_sequence.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bumpSequence": () => (/* binding */ bumpSequence)
/* harmony export */ });
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_15h3wsncx9() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\bump_sequence.js";
  var hash = "cd98c9b36c59efff3f3694eb7131f5f099c130a7";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\bump_sequence.js",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 23
        }
      },
      "1": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 47
        }
      },
      "3": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 31
        }
      },
      "5": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 59
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 52
        }
      },
      "7": {
        start: {
          line: 31,
          column: 25
        },
        end: {
          line: 31,
          column: 59
        }
      },
      "8": {
        start: {
          line: 33,
          column: 23
        },
        end: {
          line: 33,
          column: 25
        }
      },
      "9": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 69
        }
      },
      "10": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 44
        }
      },
      "11": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "bumpSequence",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 28
          }
        },
        loc: {
          start: {
            line: 15,
            column: 35
          },
          end: {
            line: 38,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cd98c9b36c59efff3f3694eb7131f5f099c130a7"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_15h3wsncx9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_15h3wsncx9();





/**
 * This operation bumps sequence number.
 * @function
 * @alias Operation.bumpSequence
 * @param {object} opts Options object
 * @param {string} opts.bumpTo - Sequence number to bump to.
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.BumpSequenceOp} Operation
 */
function bumpSequence(opts) {
  cov_15h3wsncx9().f[0]++;
  var attributes = (cov_15h3wsncx9().s[0]++, {});
  cov_15h3wsncx9().s[1]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_2___default()(opts.bumpTo)) {
    cov_15h3wsncx9().b[0][0]++;
    cov_15h3wsncx9().s[2]++;
    throw new Error('bumpTo must be a string');
  } else {
    cov_15h3wsncx9().b[0][1]++;
  }
  cov_15h3wsncx9().s[3]++;
  try {
    cov_15h3wsncx9().s[4]++;
    // eslint-disable-next-line no-new
    new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](opts.bumpTo);
  } catch (e) {
    cov_15h3wsncx9().s[5]++;
    throw new Error('bumpTo must be a stringified number');
  }
  cov_15h3wsncx9().s[6]++;
  attributes.bumpTo = js_xdr__WEBPACK_IMPORTED_MODULE_0__.Hyper.fromString(opts.bumpTo);
  var bumpSequenceOp = (cov_15h3wsncx9().s[7]++, new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].BumpSequenceOp(attributes));
  var opAttributes = (cov_15h3wsncx9().s[8]++, {});
  cov_15h3wsncx9().s[9]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].OperationBody.bumpSequence(bumpSequenceOp);
  cov_15h3wsncx9().s[10]++;
  this.setSourceAccount(opAttributes, opts);
  cov_15h3wsncx9().s[11]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/change_trust.js":
/*!****************************************!*\
  !*** ./src/operations/change_trust.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "changeTrust": () => (/* binding */ changeTrust)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../asset */ "./src/asset.js");
/* harmony import */ var _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../liquidity_pool_asset */ "./src/liquidity_pool_asset.js");
function cov_197iwzf589() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\change_trust.js";
  var hash = "dd6e64661aa9b0c3b9e978c787787d1fc605ced2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\change_trust.js",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 18
        },
        end: {
          line: 8,
          column: 39
        }
      },
      "1": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "2": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "3": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 58
        }
      },
      "4": {
        start: {
          line: 27,
          column: 9
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "5": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 47
        }
      },
      "6": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 69
        }
      },
      "7": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "8": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 72
        }
      },
      "9": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "10": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 53
        }
      },
      "11": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 77
        }
      },
      "12": {
        start: {
          line: 43,
          column: 2
        },
        end: {
          line: 45,
          column: 3
        }
      },
      "13": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 50
        }
      },
      "14": {
        start: {
          line: 46,
          column: 24
        },
        end: {
          line: 46,
          column: 57
        }
      },
      "15": {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 25
        }
      },
      "16": {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 49,
          column: 67
        }
      },
      "17": {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 50,
          column: 44
        }
      },
      "18": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "changeTrust",
        decl: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 27
          }
        },
        loc: {
          start: {
            line: 22,
            column: 34
          },
          end: {
            line: 53,
            column: 1
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        }, {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 31,
            column: 3
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 31,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 9
          },
          end: {
            line: 31,
            column: 3
          }
        }, {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 31,
            column: 3
          }
        }],
        line: 27
      },
      "2": {
        loc: {
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "3": {
        loc: {
          start: {
            line: 33,
            column: 6
          },
          end: {
            line: 33,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 33,
            column: 6
          },
          end: {
            line: 33,
            column: 30
          }
        }, {
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 33,
            column: 71
          }
        }],
        line: 33
      },
      "4": {
        loc: {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }, {
          start: {
            line: 39,
            column: 9
          },
          end: {
            line: 41,
            column: 3
          }
        }],
        line: 37
      },
      "5": {
        loc: {
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 43,
            column: 2
          },
          end: {
            line: 45,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 43
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "dd6e64661aa9b0c3b9e978c787787d1fc605ced2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_197iwzf589 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_197iwzf589();






var MAX_INT64 = (cov_197iwzf589().s[0]++, '9223372036854775807');

/**
 * Returns an XDR ChangeTrustOp. A "change trust" operation adds, removes, or updates a
 * trust line for a given asset from the source account to another.
 * @function
 * @alias Operation.changeTrust
 * @param {object} opts Options object
 * @param {Asset | LiquidityPoolAsset} opts.asset - The asset for the trust line.
 * @param {string} [opts.limit] - The limit for the asset, defaults to max int64.
 *                                If the limit is set to "0" it deletes the trustline.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @returns {xdr.ChangeTrustOp} Change Trust operation
 */
function changeTrust(opts) {
  cov_197iwzf589().f[0]++;
  var attributes = (cov_197iwzf589().s[1]++, {});
  cov_197iwzf589().s[2]++;
  if (opts.asset instanceof _asset__WEBPACK_IMPORTED_MODULE_4__.Asset) {
    cov_197iwzf589().b[0][0]++;
    cov_197iwzf589().s[3]++;
    attributes.line = opts.asset.toChangeTrustXDRObject();
  } else {
    cov_197iwzf589().b[0][1]++;
    cov_197iwzf589().s[4]++;
    if (opts.asset instanceof _liquidity_pool_asset__WEBPACK_IMPORTED_MODULE_5__.LiquidityPoolAsset) {
      cov_197iwzf589().b[1][0]++;
      cov_197iwzf589().s[5]++;
      attributes.line = opts.asset.toXDRObject();
    } else {
      cov_197iwzf589().b[1][1]++;
      cov_197iwzf589().s[6]++;
      throw new TypeError('asset must be Asset or LiquidityPoolAsset');
    }
  }
  cov_197iwzf589().s[7]++;
  if ((cov_197iwzf589().b[3][0]++, !lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.limit)) && (cov_197iwzf589().b[3][1]++, !this.isValidAmount(opts.limit, true))) {
    cov_197iwzf589().b[2][0]++;
    cov_197iwzf589().s[8]++;
    throw new TypeError(this.constructAmountRequirementsError('limit'));
  } else {
    cov_197iwzf589().b[2][1]++;
  }
  cov_197iwzf589().s[9]++;
  if (opts.limit) {
    cov_197iwzf589().b[4][0]++;
    cov_197iwzf589().s[10]++;
    attributes.limit = this._toXDRAmount(opts.limit);
  } else {
    cov_197iwzf589().b[4][1]++;
    cov_197iwzf589().s[11]++;
    attributes.limit = js_xdr__WEBPACK_IMPORTED_MODULE_1__.Hyper.fromString(new bignumber_js__WEBPACK_IMPORTED_MODULE_2__["default"](MAX_INT64).toString());
  }
  cov_197iwzf589().s[12]++;
  if (opts.source) {
    cov_197iwzf589().b[5][0]++;
    cov_197iwzf589().s[13]++;
    attributes.source = opts.source.masterKeypair;
  } else {
    cov_197iwzf589().b[5][1]++;
  }
  var changeTrustOP = (cov_197iwzf589().s[14]++, new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].ChangeTrustOp(attributes));
  var opAttributes = (cov_197iwzf589().s[15]++, {});
  cov_197iwzf589().s[16]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].OperationBody.changeTrust(changeTrustOP);
  cov_197iwzf589().s[17]++;
  this.setSourceAccount(opAttributes, opts);
  cov_197iwzf589().s[18]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/claim_claimable_balance.js":
/*!***************************************************!*\
  !*** ./src/operations/claim_claimable_balance.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "claimClaimableBalance": () => (/* binding */ claimClaimableBalance),
/* harmony export */   "validateClaimableBalanceId": () => (/* binding */ validateClaimableBalanceId)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_1pubez7fch() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\claim_claimable_balance.js";
  var hash = "94c2aeb2ba30fb1150fe6cd193ebc74a29c8ae5d";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\claim_claimable_balance.js",
    statementMap: {
      "0": {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 19,
          column: 45
        }
      },
      "1": {
        start: {
          line: 21,
          column: 21
        },
        end: {
          line: 21,
          column: 23
        }
      },
      "2": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 22,
          column: 79
        }
      },
      "3": {
        start: {
          line: 23,
          column: 34
        },
        end: {
          line: 23,
          column: 77
        }
      },
      "4": {
        start: {
          line: 25,
          column: 23
        },
        end: {
          line: 25,
          column: 25
        }
      },
      "5": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 28,
          column: 4
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 44
        }
      },
      "7": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 31,
          column: 41
        }
      },
      "8": {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      "9": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 65
        }
      }
    },
    fnMap: {
      "0": {
        name: "claimClaimableBalance",
        decl: {
          start: {
            line: 18,
            column: 16
          },
          end: {
            line: 18,
            column: 37
          }
        },
        loc: {
          start: {
            line: 18,
            column: 49
          },
          end: {
            line: 32,
            column: 1
          }
        },
        line: 18
      },
      "1": {
        name: "validateClaimableBalanceId",
        decl: {
          start: {
            line: 34,
            column: 16
          },
          end: {
            line: 34,
            column: 42
          }
        },
        loc: {
          start: {
            line: 34,
            column: 54
          },
          end: {
            line: 41,
            column: 1
          }
        },
        line: 34
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 38
          },
          end: {
            line: 18,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 18,
            column: 45
          },
          end: {
            line: 18,
            column: 47
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 35
      },
      "2": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 37,
            column: 31
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 36,
            column: 33
          }
        }, {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 37,
            column: 31
          }
        }],
        line: 36
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "94c2aeb2ba30fb1150fe6cd193ebc74a29c8ae5d"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pubez7fch = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pubez7fch();


/**
 * Create a new claim claimable balance operation.
 * @function
 * @alias Operation.claimClaimableBalance
 * @param {object} opts Options object
 * @param {string} opts.balanceId - The claimable balance id to be claimed.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} Claim claimable balance operation
 *
 * @example
 * const op = Operation.claimClaimableBalance({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 */
function claimClaimableBalance() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1pubez7fch().b[0][0]++, {});
  cov_1pubez7fch().f[0]++;
  cov_1pubez7fch().s[0]++;
  validateClaimableBalanceId(opts.balanceId);
  var attributes = (cov_1pubez7fch().s[1]++, {});
  cov_1pubez7fch().s[2]++;
  attributes.balanceId = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex');
  var claimClaimableBalanceOp = (cov_1pubez7fch().s[3]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimClaimableBalanceOp(attributes));
  var opAttributes = (cov_1pubez7fch().s[4]++, {});
  cov_1pubez7fch().s[5]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.claimClaimableBalance(claimClaimableBalanceOp);
  cov_1pubez7fch().s[6]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1pubez7fch().s[7]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}
function validateClaimableBalanceId(balanceId) {
  cov_1pubez7fch().f[1]++;
  cov_1pubez7fch().s[8]++;
  if ((cov_1pubez7fch().b[2][0]++, typeof balanceId !== 'string') || (cov_1pubez7fch().b[2][1]++, balanceId.length !== 8 + 64) /* 8b discriminant + 64b string */) {
    cov_1pubez7fch().b[1][0]++;
    cov_1pubez7fch().s[9]++;
    throw new Error('must provide a valid claimable balance id');
  } else {
    cov_1pubez7fch().b[1][1]++;
  }
}

/***/ }),

/***/ "./src/operations/clawback.js":
/*!************************************!*\
  !*** ./src/operations/clawback.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clawback": () => (/* binding */ clawback)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_1ddtao17cz() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\clawback.js";
  var hash = "1492bc2d02f28640ccbf478345151b1d884edca0";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\clawback.js",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 21
        },
        end: {
          line: 24,
          column: 23
        }
      },
      "1": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "2": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "3": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "4": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 46
        }
      },
      "5": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "6": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 61
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 47
        }
      },
      "8": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "9": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 39,
          column: 44
        }
      },
      "10": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "clawback",
        decl: {
          start: {
            line: 23,
            column: 16
          },
          end: {
            line: 23,
            column: 24
          }
        },
        loc: {
          start: {
            line: 23,
            column: 31
          },
          end: {
            line: 42,
            column: 1
          }
        },
        line: 23
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "1492bc2d02f28640ccbf478345151b1d884edca0"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1ddtao17cz = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1ddtao17cz();



/**
 * Creates a clawback operation.
 *
 * @function
 * @alias Operation.clawback
 *
 * @param {object} opts - Options object
 * @param {Asset}  opts.asset   - The asset being clawed back.
 * @param {string} opts.amount  - The amount of the asset to claw back.
 * @param {string} opts.from    - The public key of the (optionally-muxed)
 *     account to claw back from.
 *
 * @param {string} [opts.source] - The source account for the operation.
 *     Defaults to the transaction's source account.
 *
 * @return {xdr.ClawbackOp}
 *
 * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-operation
 */
function clawback(opts) {
  cov_1ddtao17cz().f[0]++;
  var attributes = (cov_1ddtao17cz().s[0]++, {});
  cov_1ddtao17cz().s[1]++;
  if (!this.isValidAmount(opts.amount)) {
    cov_1ddtao17cz().b[0][0]++;
    cov_1ddtao17cz().s[2]++;
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  } else {
    cov_1ddtao17cz().b[0][1]++;
  }
  cov_1ddtao17cz().s[3]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  cov_1ddtao17cz().s[4]++;
  attributes.asset = opts.asset.toXDRObject();
  cov_1ddtao17cz().s[5]++;
  try {
    cov_1ddtao17cz().s[6]++;
    attributes.from = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__.decodeAddressToMuxedAccount)(opts.from);
  } catch (e) {
    cov_1ddtao17cz().s[7]++;
    throw new Error('from address is invalid');
  }
  var opAttributes = (cov_1ddtao17cz().s[8]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.clawback(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClawbackOp(attributes))
  });
  cov_1ddtao17cz().s[9]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1ddtao17cz().s[10]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/clawback_claimable_balance.js":
/*!******************************************************!*\
  !*** ./src/operations/clawback_claimable_balance.js ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "clawbackClaimableBalance": () => (/* binding */ clawbackClaimableBalance)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _claim_claimable_balance__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./claim_claimable_balance */ "./src/operations/claim_claimable_balance.js");
function cov_23kqwxa76h() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\clawback_claimable_balance.js";
  var hash = "f43e24daad8e8cd29381e1c23afead76ad2c51b6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\clawback_claimable_balance.js",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 45
        }
      },
      "1": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "2": {
        start: {
          line: 29,
          column: 23
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "3": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "4": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 36,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "clawbackClaimableBalance",
        decl: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 40
          }
        },
        loc: {
          start: {
            line: 22,
            column: 52
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 41
          },
          end: {
            line: 22,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 22,
            column: 48
          },
          end: {
            line: 22,
            column: 50
          }
        }],
        line: 22
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "f43e24daad8e8cd29381e1c23afead76ad2c51b6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_23kqwxa76h = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_23kqwxa76h();



/**
 * Creates a clawback operation for a claimable balance.
 *
 * @function
 * @alias Operation.clawbackClaimableBalance
 * @param {object} opts - Options object
 * @param {string} opts.balanceId - The claimable balance ID to be clawed back.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @return {xdr.ClawbackClaimableBalanceOp}
 *
 * @example
 * const op = Operation.clawbackClaimableBalance({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 * @link https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#clawback-claimable-balance-operation
 */
function clawbackClaimableBalance() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_23kqwxa76h().b[0][0]++, {});
  cov_23kqwxa76h().f[0]++;
  cov_23kqwxa76h().s[0]++;
  (0,_claim_claimable_balance__WEBPACK_IMPORTED_MODULE_1__.validateClaimableBalanceId)(opts.balanceId);
  var attributes = (cov_23kqwxa76h().s[1]++, {
    balanceId: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')
  });
  var opAttributes = (cov_23kqwxa76h().s[2]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.clawbackClaimableBalance(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].ClawbackClaimableBalanceOp(attributes))
  });
  cov_23kqwxa76h().s[3]++;
  this.setSourceAccount(opAttributes, opts);
  cov_23kqwxa76h().s[4]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/create_account.js":
/*!******************************************!*\
  !*** ./src/operations/create_account.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createAccount": () => (/* binding */ createAccount)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
function cov_2m6ap3ncdj() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_account.js";
  var hash = "7573f0ee4b17ed3d14b5166a0868c63fc31d9c73";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_account.js",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "1": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 46
        }
      },
      "2": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "3": {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 6
        }
      },
      "4": {
        start: {
          line: 25,
          column: 21
        },
        end: {
          line: 25,
          column: 23
        }
      },
      "5": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 28,
          column: 19
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 71
        }
      },
      "7": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 61
        }
      },
      "8": {
        start: {
          line: 32,
          column: 23
        },
        end: {
          line: 32,
          column: 25
        }
      },
      "9": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 71
        }
      },
      "10": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 44
        }
      },
      "11": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 36,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "createAccount",
        decl: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 29
          }
        },
        loc: {
          start: {
            line: 16,
            column: 36
          },
          end: {
            line: 37,
            column: 1
          }
        },
        line: 16
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 20
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7573f0ee4b17ed3d14b5166a0868c63fc31d9c73"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2m6ap3ncdj = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2m6ap3ncdj();




/**
 * Create and fund a non existent account.
 * @function
 * @alias Operation.createAccount
 * @param {object} opts Options object
 * @param {string} opts.destination - Destination account ID to create an account for.
 * @param {string} opts.startingBalance - Amount in XLM the account should be funded for. Must be greater
 *                                   than the [reserve balance amount](https://developers.stellar.org/docs/glossary/fees/).
 * @param {string} [opts.source] - The source account for the payment. Defaults to the transaction's source account.
 * @returns {xdr.CreateAccountOp} Create account operation
 */
function createAccount(opts) {
  cov_2m6ap3ncdj().f[0]++;
  cov_2m6ap3ncdj().s[0]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.destination)) {
    cov_2m6ap3ncdj().b[0][0]++;
    cov_2m6ap3ncdj().s[1]++;
    throw new Error('destination is invalid');
  } else {
    cov_2m6ap3ncdj().b[0][1]++;
  }
  cov_2m6ap3ncdj().s[2]++;
  if (!this.isValidAmount(opts.startingBalance, true)) {
    cov_2m6ap3ncdj().b[1][0]++;
    cov_2m6ap3ncdj().s[3]++;
    throw new TypeError('startingBalance must be of type String, represent a non-negative number and have at most 7 digits after the decimal');
  } else {
    cov_2m6ap3ncdj().b[1][1]++;
  }
  var attributes = (cov_2m6ap3ncdj().s[4]++, {});
  cov_2m6ap3ncdj().s[5]++;
  attributes.destination = _keypair__WEBPACK_IMPORTED_MODULE_1__.Keypair.fromPublicKey(opts.destination).xdrAccountId();
  cov_2m6ap3ncdj().s[6]++;
  attributes.startingBalance = this._toXDRAmount(opts.startingBalance);
  var createAccountOp = (cov_2m6ap3ncdj().s[7]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].CreateAccountOp(attributes));
  var opAttributes = (cov_2m6ap3ncdj().s[8]++, {});
  cov_2m6ap3ncdj().s[9]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.createAccount(createAccountOp);
  cov_2m6ap3ncdj().s[10]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2m6ap3ncdj().s[11]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/create_claimable_balance.js":
/*!****************************************************!*\
  !*** ./src/operations/create_claimable_balance.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createClaimableBalance": () => (/* binding */ createClaimableBalance)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../asset */ "./src/asset.js");
function cov_yhjh4n7c1() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_claimable_balance.js";
  var hash = "c797bacedaf83f2ed4e9650542e7f2760c254fd6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_claimable_balance.js",
    statementMap: {
      "0": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 43,
          column: 3
        }
      },
      "1": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 42,
          column: 6
        }
      },
      "2": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 47,
          column: 3
        }
      },
      "3": {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 73
        }
      },
      "4": {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "5": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 58
        }
      },
      "6": {
        start: {
          line: 53,
          column: 21
        },
        end: {
          line: 53,
          column: 23
        }
      },
      "7": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 46
        }
      },
      "8": {
        start: {
          line: 55,
          column: 2
        },
        end: {
          line: 55,
          column: 53
        }
      },
      "9": {
        start: {
          line: 56,
          column: 2
        },
        end: {
          line: 56,
          column: 68
        }
      },
      "10": {
        start: {
          line: 56,
          column: 51
        },
        end: {
          line: 56,
          column: 66
        }
      },
      "11": {
        start: {
          line: 58,
          column: 35
        },
        end: {
          line: 58,
          column: 79
        }
      },
      "12": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 25
        }
      },
      "13": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 63,
          column: 4
        }
      },
      "14": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 64,
          column: 44
        }
      },
      "15": {
        start: {
          line: 66,
          column: 2
        },
        end: {
          line: 66,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "createClaimableBalance",
        decl: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 38
          }
        },
        loc: {
          start: {
            line: 38,
            column: 45
          },
          end: {
            line: 67,
            column: 1
          }
        },
        line: 38
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 44
          },
          end: {
            line: 56,
            column: 45
          }
        },
        loc: {
          start: {
            line: 56,
            column: 51
          },
          end: {
            line: 56,
            column: 66
          }
        },
        line: 56
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 43,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 43,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "1": {
        loc: {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 45
      },
      "2": {
        loc: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      },
      "3": {
        loc: {
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 49,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 49,
            column: 36
          }
        }, {
          start: {
            line: 49,
            column: 40
          },
          end: {
            line: 49,
            column: 67
          }
        }],
        line: 49
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "c797bacedaf83f2ed4e9650542e7f2760c254fd6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_yhjh4n7c1 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_yhjh4n7c1();



/**
 * Create a new claimable balance operation.
 *
 * @function
 * @alias Operation.createClaimableBalance
 *
 * @param {object} opts Options object
 * @param {Asset} opts.asset - The asset for the claimable balance.
 * @param {string} opts.amount - Amount.
 * @param {Claimant[]} opts.claimants - An array of Claimants
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation} Create claimable balance operation
 *
 * @example
 * const asset = new Asset(
 *   'USD',
 *   'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 * );
 * const amount = '100.0000000';
 * const claimants = [
 *   new Claimant(
 *     'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ',
 *      Claimant.predicateBeforeAbsoluteTime("4102444800000")
 *   )
 * ];
 *
 * const op = Operation.createClaimableBalance({
 *   asset,
 *   amount,
 *   claimants
 * });
 *
 */
function createClaimableBalance(opts) {
  cov_yhjh4n7c1().f[0]++;
  cov_yhjh4n7c1().s[0]++;
  if (!(opts.asset instanceof _asset__WEBPACK_IMPORTED_MODULE_1__.Asset)) {
    cov_yhjh4n7c1().b[0][0]++;
    cov_yhjh4n7c1().s[1]++;
    throw new Error('must provide an asset for create claimable balance operation');
  } else {
    cov_yhjh4n7c1().b[0][1]++;
  }
  cov_yhjh4n7c1().s[2]++;
  if (!this.isValidAmount(opts.amount)) {
    cov_yhjh4n7c1().b[1][0]++;
    cov_yhjh4n7c1().s[3]++;
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  } else {
    cov_yhjh4n7c1().b[1][1]++;
  }
  cov_yhjh4n7c1().s[4]++;
  if ((cov_yhjh4n7c1().b[3][0]++, !Array.isArray(opts.claimants)) || (cov_yhjh4n7c1().b[3][1]++, opts.claimants.length === 0)) {
    cov_yhjh4n7c1().b[2][0]++;
    cov_yhjh4n7c1().s[5]++;
    throw new Error('must provide at least one claimant');
  } else {
    cov_yhjh4n7c1().b[2][1]++;
  }
  var attributes = (cov_yhjh4n7c1().s[6]++, {});
  cov_yhjh4n7c1().s[7]++;
  attributes.asset = opts.asset.toXDRObject();
  cov_yhjh4n7c1().s[8]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  cov_yhjh4n7c1().s[9]++;
  attributes.claimants = opts.claimants.map(function (c) {
    cov_yhjh4n7c1().f[1]++;
    cov_yhjh4n7c1().s[10]++;
    return c.toXDRObject();
  });
  var createClaimableBalanceOp = (cov_yhjh4n7c1().s[11]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].CreateClaimableBalanceOp(attributes));
  var opAttributes = (cov_yhjh4n7c1().s[12]++, {});
  cov_yhjh4n7c1().s[13]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.createClaimableBalance(createClaimableBalanceOp);
  cov_yhjh4n7c1().s[14]++;
  this.setSourceAccount(opAttributes, opts);
  cov_yhjh4n7c1().s[15]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/create_passive_sell_offer.js":
/*!*****************************************************!*\
  !*** ./src/operations/create_passive_sell_offer.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createPassiveSellOffer": () => (/* binding */ createPassiveSellOffer)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_22iqqtf8na() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_passive_sell_offer.js";
  var hash = "2e4e2749b0f19d712e54098d5766ab45dfadff9e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\create_passive_sell_offer.js",
    statementMap: {
      "0": {
        start: {
          line: 23,
          column: 21
        },
        end: {
          line: 23,
          column: 23
        }
      },
      "1": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 50
        }
      },
      "2": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 25,
          column: 48
        }
      },
      "3": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "4": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 73
        }
      },
      "5": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "6": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 32,
          column: 3
        }
      },
      "7": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "8": {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 33,
          column: 50
        }
      },
      "9": {
        start: {
          line: 34,
          column: 35
        },
        end: {
          line: 34,
          column: 79
        }
      },
      "10": {
        start: {
          line: 36,
          column: 23
        },
        end: {
          line: 36,
          column: 25
        }
      },
      "11": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 39,
          column: 4
        }
      },
      "12": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 40,
          column: 44
        }
      },
      "13": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "createPassiveSellOffer",
        decl: {
          start: {
            line: 22,
            column: 16
          },
          end: {
            line: 22,
            column: 38
          }
        },
        loc: {
          start: {
            line: 22,
            column: 45
          },
          end: {
            line: 43,
            column: 1
          }
        },
        line: 22
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "1": {
        loc: {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 32,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 30
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2e4e2749b0f19d712e54098d5766ab45dfadff9e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_22iqqtf8na = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_22iqqtf8na();



/**
 * Returns a XDR CreatePasiveSellOfferOp. A "create passive offer" operation creates an
 * offer that won't consume a counter offer that exactly matches this offer. This is
 * useful for offers just used as 1:1 exchanges for path payments. Use manage offer
 * to manage this offer after using this operation to create it.
 * @function
 * @alias Operation.createPassiveSellOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.CreatePassiveSellOfferOp} Create Passive Sell Offer operation
 */
function createPassiveSellOffer(opts) {
  cov_22iqqtf8na().f[0]++;
  var attributes = (cov_22iqqtf8na().s[0]++, {});
  cov_22iqqtf8na().s[1]++;
  attributes.selling = opts.selling.toXDRObject();
  cov_22iqqtf8na().s[2]++;
  attributes.buying = opts.buying.toXDRObject();
  cov_22iqqtf8na().s[3]++;
  if (!this.isValidAmount(opts.amount)) {
    cov_22iqqtf8na().b[0][0]++;
    cov_22iqqtf8na().s[4]++;
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  } else {
    cov_22iqqtf8na().b[0][1]++;
  }
  cov_22iqqtf8na().s[5]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  cov_22iqqtf8na().s[6]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.price)) {
    cov_22iqqtf8na().b[1][0]++;
    cov_22iqqtf8na().s[7]++;
    throw new TypeError('price argument is required');
  } else {
    cov_22iqqtf8na().b[1][1]++;
  }
  cov_22iqqtf8na().s[8]++;
  attributes.price = this._toXDRPrice(opts.price);
  var createPassiveSellOfferOp = (cov_22iqqtf8na().s[9]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].CreatePassiveSellOfferOp(attributes));
  var opAttributes = (cov_22iqqtf8na().s[10]++, {});
  cov_22iqqtf8na().s[11]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.createPassiveSellOffer(createPassiveSellOfferOp);
  cov_22iqqtf8na().s[12]++;
  this.setSourceAccount(opAttributes, opts);
  cov_22iqqtf8na().s[13]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/end_sponsoring_future_reserves.js":
/*!**********************************************************!*\
  !*** ./src/operations/end_sponsoring_future_reserves.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "endSponsoringFutureReserves": () => (/* binding */ endSponsoringFutureReserves)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_uvozezv8q() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\end_sponsoring_future_reserves.js";
  var hash = "150b0396119616d482edc3506aa0b55f8df491e8";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\end_sponsoring_future_reserves.js",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 23
        },
        end: {
          line: 16,
          column: 25
        }
      },
      "1": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 17,
          column: 70
        }
      },
      "2": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 44
        }
      },
      "3": {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 20,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "endSponsoringFutureReserves",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 43
          }
        },
        loc: {
          start: {
            line: 15,
            column: 55
          },
          end: {
            line: 21,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 15,
            column: 44
          },
          end: {
            line: 15,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 15,
            column: 51
          },
          end: {
            line: 15,
            column: 53
          }
        }],
        line: 15
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "150b0396119616d482edc3506aa0b55f8df491e8"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_uvozezv8q = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_uvozezv8q();


/**
 * Create an "end sponsoring future reserves" operation.
 * @function
 * @alias Operation.endSponsoringFutureReserves
 * @param {object} opts Options object
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.endSponsoringFutureReserves();
 *
 */
function endSponsoringFutureReserves() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_uvozezv8q().b[0][0]++, {});
  cov_uvozezv8q().f[0]++;
  var opAttributes = (cov_uvozezv8q().s[0]++, {});
  cov_uvozezv8q().s[1]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.endSponsoringFutureReserves();
  cov_uvozezv8q().s[2]++;
  this.setSourceAccount(opAttributes, opts);
  cov_uvozezv8q().s[3]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/index.js":
/*!*********************************!*\
  !*** ./src/operations/index.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "accountMerge": () => (/* reexport safe */ _account_merge__WEBPACK_IMPORTED_MODULE_2__.accountMerge),
/* harmony export */   "allowTrust": () => (/* reexport safe */ _allow_trust__WEBPACK_IMPORTED_MODULE_3__.allowTrust),
/* harmony export */   "beginSponsoringFutureReserves": () => (/* reexport safe */ _begin_sponsoring_future_reserves__WEBPACK_IMPORTED_MODULE_17__.beginSponsoringFutureReserves),
/* harmony export */   "bumpSequence": () => (/* reexport safe */ _bump_sequence__WEBPACK_IMPORTED_MODULE_4__.bumpSequence),
/* harmony export */   "changeTrust": () => (/* reexport safe */ _change_trust__WEBPACK_IMPORTED_MODULE_5__.changeTrust),
/* harmony export */   "claimClaimableBalance": () => (/* reexport safe */ _claim_claimable_balance__WEBPACK_IMPORTED_MODULE_8__.claimClaimableBalance),
/* harmony export */   "clawback": () => (/* reexport safe */ _clawback__WEBPACK_IMPORTED_MODULE_20__.clawback),
/* harmony export */   "clawbackClaimableBalance": () => (/* reexport safe */ _clawback_claimable_balance__WEBPACK_IMPORTED_MODULE_9__.clawbackClaimableBalance),
/* harmony export */   "createAccount": () => (/* reexport safe */ _create_account__WEBPACK_IMPORTED_MODULE_6__.createAccount),
/* harmony export */   "createClaimableBalance": () => (/* reexport safe */ _create_claimable_balance__WEBPACK_IMPORTED_MODULE_7__.createClaimableBalance),
/* harmony export */   "createPassiveSellOffer": () => (/* reexport safe */ _create_passive_sell_offer__WEBPACK_IMPORTED_MODULE_1__.createPassiveSellOffer),
/* harmony export */   "endSponsoringFutureReserves": () => (/* reexport safe */ _end_sponsoring_future_reserves__WEBPACK_IMPORTED_MODULE_18__.endSponsoringFutureReserves),
/* harmony export */   "inflation": () => (/* reexport safe */ _inflation__WEBPACK_IMPORTED_MODULE_10__.inflation),
/* harmony export */   "liquidityPoolDeposit": () => (/* reexport safe */ _liquidity_pool_deposit__WEBPACK_IMPORTED_MODULE_22__.liquidityPoolDeposit),
/* harmony export */   "liquidityPoolWithdraw": () => (/* reexport safe */ _liquidity_pool_withdraw__WEBPACK_IMPORTED_MODULE_23__.liquidityPoolWithdraw),
/* harmony export */   "manageBuyOffer": () => (/* reexport safe */ _manage_buy_offer__WEBPACK_IMPORTED_MODULE_12__.manageBuyOffer),
/* harmony export */   "manageData": () => (/* reexport safe */ _manage_data__WEBPACK_IMPORTED_MODULE_11__.manageData),
/* harmony export */   "manageSellOffer": () => (/* reexport safe */ _manage_sell_offer__WEBPACK_IMPORTED_MODULE_0__.manageSellOffer),
/* harmony export */   "pathPaymentStrictReceive": () => (/* reexport safe */ _path_payment_strict_receive__WEBPACK_IMPORTED_MODULE_13__.pathPaymentStrictReceive),
/* harmony export */   "pathPaymentStrictSend": () => (/* reexport safe */ _path_payment_strict_send__WEBPACK_IMPORTED_MODULE_14__.pathPaymentStrictSend),
/* harmony export */   "payment": () => (/* reexport safe */ _payment__WEBPACK_IMPORTED_MODULE_15__.payment),
/* harmony export */   "revokeAccountSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeAccountSponsorship),
/* harmony export */   "revokeClaimableBalanceSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeClaimableBalanceSponsorship),
/* harmony export */   "revokeDataSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeDataSponsorship),
/* harmony export */   "revokeLiquidityPoolSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeLiquidityPoolSponsorship),
/* harmony export */   "revokeOfferSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeOfferSponsorship),
/* harmony export */   "revokeSignerSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeSignerSponsorship),
/* harmony export */   "revokeTrustlineSponsorship": () => (/* reexport safe */ _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__.revokeTrustlineSponsorship),
/* harmony export */   "setOptions": () => (/* reexport safe */ _set_options__WEBPACK_IMPORTED_MODULE_16__.setOptions),
/* harmony export */   "setTrustLineFlags": () => (/* reexport safe */ _set_trustline_flags__WEBPACK_IMPORTED_MODULE_21__.setTrustLineFlags)
/* harmony export */ });
/* harmony import */ var _manage_sell_offer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./manage_sell_offer */ "./src/operations/manage_sell_offer.js");
/* harmony import */ var _create_passive_sell_offer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./create_passive_sell_offer */ "./src/operations/create_passive_sell_offer.js");
/* harmony import */ var _account_merge__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./account_merge */ "./src/operations/account_merge.js");
/* harmony import */ var _allow_trust__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./allow_trust */ "./src/operations/allow_trust.js");
/* harmony import */ var _bump_sequence__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./bump_sequence */ "./src/operations/bump_sequence.js");
/* harmony import */ var _change_trust__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./change_trust */ "./src/operations/change_trust.js");
/* harmony import */ var _create_account__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./create_account */ "./src/operations/create_account.js");
/* harmony import */ var _create_claimable_balance__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./create_claimable_balance */ "./src/operations/create_claimable_balance.js");
/* harmony import */ var _claim_claimable_balance__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./claim_claimable_balance */ "./src/operations/claim_claimable_balance.js");
/* harmony import */ var _clawback_claimable_balance__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./clawback_claimable_balance */ "./src/operations/clawback_claimable_balance.js");
/* harmony import */ var _inflation__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./inflation */ "./src/operations/inflation.js");
/* harmony import */ var _manage_data__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./manage_data */ "./src/operations/manage_data.js");
/* harmony import */ var _manage_buy_offer__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./manage_buy_offer */ "./src/operations/manage_buy_offer.js");
/* harmony import */ var _path_payment_strict_receive__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./path_payment_strict_receive */ "./src/operations/path_payment_strict_receive.js");
/* harmony import */ var _path_payment_strict_send__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./path_payment_strict_send */ "./src/operations/path_payment_strict_send.js");
/* harmony import */ var _payment__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./payment */ "./src/operations/payment.js");
/* harmony import */ var _set_options__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./set_options */ "./src/operations/set_options.js");
/* harmony import */ var _begin_sponsoring_future_reserves__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./begin_sponsoring_future_reserves */ "./src/operations/begin_sponsoring_future_reserves.js");
/* harmony import */ var _end_sponsoring_future_reserves__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./end_sponsoring_future_reserves */ "./src/operations/end_sponsoring_future_reserves.js");
/* harmony import */ var _revoke_sponsorship__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./revoke_sponsorship */ "./src/operations/revoke_sponsorship.js");
/* harmony import */ var _clawback__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./clawback */ "./src/operations/clawback.js");
/* harmony import */ var _set_trustline_flags__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./set_trustline_flags */ "./src/operations/set_trustline_flags.js");
/* harmony import */ var _liquidity_pool_deposit__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./liquidity_pool_deposit */ "./src/operations/liquidity_pool_deposit.js");
/* harmony import */ var _liquidity_pool_withdraw__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./liquidity_pool_withdraw */ "./src/operations/liquidity_pool_withdraw.js");
function cov_234jdqj8qv() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\index.js";
  var hash = "7aab10fb5a6100ceb117c22fa70b8a8713785a4e";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\index.js",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7aab10fb5a6100ceb117c22fa70b8a8713785a4e"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_234jdqj8qv = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_234jdqj8qv();

























/***/ }),

/***/ "./src/operations/inflation.js":
/*!*************************************!*\
  !*** ./src/operations/inflation.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "inflation": () => (/* binding */ inflation)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_1k4bjcfd8i() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\inflation.js";
  var hash = "78fe07aa355d07a600d52d50e1d43fdc02c5a6dc";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\inflation.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 23
        },
        end: {
          line: 12,
          column: 25
        }
      },
      "1": {
        start: {
          line: 13,
          column: 2
        },
        end: {
          line: 13,
          column: 52
        }
      },
      "2": {
        start: {
          line: 14,
          column: 2
        },
        end: {
          line: 14,
          column: 44
        }
      },
      "3": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "inflation",
        decl: {
          start: {
            line: 11,
            column: 16
          },
          end: {
            line: 11,
            column: 25
          }
        },
        loc: {
          start: {
            line: 11,
            column: 37
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 11
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 11,
            column: 35
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 11,
            column: 33
          },
          end: {
            line: 11,
            column: 35
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "78fe07aa355d07a600d52d50e1d43fdc02c5a6dc"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1k4bjcfd8i = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1k4bjcfd8i();


/**
 * This operation generates the inflation.
 * @function
 * @alias Operation.inflation
 * @param {object} [opts] Options object
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.InflationOp} Inflation operation
 */
function inflation() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1k4bjcfd8i().b[0][0]++, {});
  cov_1k4bjcfd8i().f[0]++;
  var opAttributes = (cov_1k4bjcfd8i().s[0]++, {});
  cov_1k4bjcfd8i().s[1]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.inflation();
  cov_1k4bjcfd8i().s[2]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1k4bjcfd8i().s[3]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/liquidity_pool_deposit.js":
/*!**************************************************!*\
  !*** ./src/operations/liquidity_pool_deposit.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "liquidityPoolDeposit": () => (/* binding */ liquidityPoolDeposit)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_zgqrt77aw() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\liquidity_pool_deposit.js";
  var hash = "2ac8a5c98518c2ac37796c62a0bd0dd96982213c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\liquidity_pool_deposit.js",
    statementMap: {
      "0": {
        start: {
          line: 26,
          column: 74
        },
        end: {
          line: 26,
          column: 78
        }
      },
      "1": {
        start: {
          line: 27,
          column: 21
        },
        end: {
          line: 27,
          column: 23
        }
      },
      "2": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "3": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 64
        }
      },
      "4": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 74
        }
      },
      "5": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      "6": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 59
        }
      },
      "7": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 56
        }
      },
      "8": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "9": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 59
        }
      },
      "10": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 56
        }
      },
      "11": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "12": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 57
        }
      },
      "13": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 51
        }
      },
      "14": {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "15": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 57
        }
      },
      "16": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 51
        }
      },
      "17": {
        start: {
          line: 54,
          column: 33
        },
        end: {
          line: 54,
          column: 75
        }
      },
      "18": {
        start: {
          line: 55,
          column: 23
        },
        end: {
          line: 57,
          column: 3
        }
      },
      "19": {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 58,
          column: 44
        }
      },
      "20": {
        start: {
          line: 60,
          column: 2
        },
        end: {
          line: 60,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "liquidityPoolDeposit",
        decl: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 36
          }
        },
        loc: {
          start: {
            line: 25,
            column: 48
          },
          end: {
            line: 61,
            column: 1
          }
        },
        line: 25
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 37
          },
          end: {
            line: 25,
            column: 46
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 25,
            column: 44
          },
          end: {
            line: 25,
            column: 46
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 34
      },
      "3": {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 49
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2ac8a5c98518c2ac37796c62a0bd0dd96982213c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_zgqrt77aw = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_zgqrt77aw();



/**
 * Creates a liquidity pool deposit operation.
 *
 * @function
 * @alias Operation.liquidityPoolDeposit
 * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-deposit
 *
 * @param {object} opts - Options object
 * @param {string} opts.liquidityPoolId - The liquidity pool ID.
 * @param {string} opts.maxAmountA - Maximum amount of first asset to deposit.
 * @param {string} opts.maxAmountB - Maximum amount of second asset to deposit.
 * @param {number|string|BigNumber|Object} opts.minPrice -  Minimum depositA/depositB price.
 * @param {number} opts.minPrice.n - If `opts.minPrice` is an object: the price numerator
 * @param {number} opts.minPrice.d - If `opts.minPrice` is an object: the price denominator
 * @param {number|string|BigNumber|Object} opts.maxPrice -  Maximum depositA/depositB price.
 * @param {number} opts.maxPrice.n - If `opts.maxPrice` is an object: the price numerator
 * @param {number} opts.maxPrice.d - If `opts.maxPrice` is an object: the price denominator
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation} The resulting operation (xdr.LiquidityPoolDepositOp).
 */
function liquidityPoolDeposit() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_zgqrt77aw().b[0][0]++, {});
  cov_zgqrt77aw().f[0]++;
  var _ref = (cov_zgqrt77aw().s[0]++, opts),
    liquidityPoolId = _ref.liquidityPoolId,
    maxAmountA = _ref.maxAmountA,
    maxAmountB = _ref.maxAmountB,
    minPrice = _ref.minPrice,
    maxPrice = _ref.maxPrice;
  var attributes = (cov_zgqrt77aw().s[1]++, {});
  cov_zgqrt77aw().s[2]++;
  if (!liquidityPoolId) {
    cov_zgqrt77aw().b[1][0]++;
    cov_zgqrt77aw().s[3]++;
    throw new TypeError('liquidityPoolId argument is required');
  } else {
    cov_zgqrt77aw().b[1][1]++;
  }
  cov_zgqrt77aw().s[4]++;
  attributes.liquidityPoolId = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PoolId.fromXDR(liquidityPoolId, 'hex');
  cov_zgqrt77aw().s[5]++;
  if (!this.isValidAmount(maxAmountA, true)) {
    cov_zgqrt77aw().b[2][0]++;
    cov_zgqrt77aw().s[6]++;
    throw new TypeError('maxAmountA argument is required');
  } else {
    cov_zgqrt77aw().b[2][1]++;
  }
  cov_zgqrt77aw().s[7]++;
  attributes.maxAmountA = this._toXDRAmount(maxAmountA);
  cov_zgqrt77aw().s[8]++;
  if (!this.isValidAmount(maxAmountB, true)) {
    cov_zgqrt77aw().b[3][0]++;
    cov_zgqrt77aw().s[9]++;
    throw new TypeError('maxAmountB argument is required');
  } else {
    cov_zgqrt77aw().b[3][1]++;
  }
  cov_zgqrt77aw().s[10]++;
  attributes.maxAmountB = this._toXDRAmount(maxAmountB);
  cov_zgqrt77aw().s[11]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(minPrice)) {
    cov_zgqrt77aw().b[4][0]++;
    cov_zgqrt77aw().s[12]++;
    throw new TypeError('minPrice argument is required');
  } else {
    cov_zgqrt77aw().b[4][1]++;
  }
  cov_zgqrt77aw().s[13]++;
  attributes.minPrice = this._toXDRPrice(minPrice);
  cov_zgqrt77aw().s[14]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(maxPrice)) {
    cov_zgqrt77aw().b[5][0]++;
    cov_zgqrt77aw().s[15]++;
    throw new TypeError('maxPrice argument is required');
  } else {
    cov_zgqrt77aw().b[5][1]++;
  }
  cov_zgqrt77aw().s[16]++;
  attributes.maxPrice = this._toXDRPrice(maxPrice);
  var liquidityPoolDepositOp = (cov_zgqrt77aw().s[17]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LiquidityPoolDepositOp(attributes));
  var opAttributes = (cov_zgqrt77aw().s[18]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.liquidityPoolDeposit(liquidityPoolDepositOp)
  });
  cov_zgqrt77aw().s[19]++;
  this.setSourceAccount(opAttributes, opts);
  cov_zgqrt77aw().s[20]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/liquidity_pool_withdraw.js":
/*!***************************************************!*\
  !*** ./src/operations/liquidity_pool_withdraw.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "liquidityPoolWithdraw": () => (/* binding */ liquidityPoolWithdraw)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_2c8eds4ur2() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\liquidity_pool_withdraw.js";
  var hash = "09c935da7800371799ddfb60f5e1bb9d4d020e43";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\liquidity_pool_withdraw.js",
    statementMap: {
      "0": {
        start: {
          line: 20,
          column: 21
        },
        end: {
          line: 20,
          column: 23
        }
      },
      "1": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 23,
          column: 3
        }
      },
      "2": {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 64
        }
      },
      "3": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 79
        }
      },
      "4": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 28,
          column: 3
        }
      },
      "5": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 27,
          column: 55
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 29,
          column: 53
        }
      },
      "7": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "8": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 59
        }
      },
      "9": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 34,
          column: 61
        }
      },
      "10": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "11": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 59
        }
      },
      "12": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 39,
          column: 61
        }
      },
      "13": {
        start: {
          line: 41,
          column: 34
        },
        end: {
          line: 41,
          column: 77
        }
      },
      "14": {
        start: {
          line: 42,
          column: 23
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "15": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "16": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "liquidityPoolWithdraw",
        decl: {
          start: {
            line: 19,
            column: 16
          },
          end: {
            line: 19,
            column: 37
          }
        },
        loc: {
          start: {
            line: 19,
            column: 49
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 19
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 19,
            column: 38
          },
          end: {
            line: 19,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 19,
            column: 45
          },
          end: {
            line: 19,
            column: 47
          }
        }],
        line: 19
      },
      "1": {
        loc: {
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 21,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 21
      },
      "2": {
        loc: {
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 26,
            column: 2
          },
          end: {
            line: 28,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 26
      },
      "3": {
        loc: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 33,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 31
      },
      "4": {
        loc: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "09c935da7800371799ddfb60f5e1bb9d4d020e43"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2c8eds4ur2 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2c8eds4ur2();


/**
 * Creates a liquidity pool withdraw operation.
 *
 * @function
 * @alias Operation.liquidityPoolWithdraw
 * @see https://developers.stellar.org/docs/start/list-of-operations/#liquidity-pool-withdraw
 *
 * @param {object} opts - Options object
 * @param {string} opts.liquidityPoolId - The liquidity pool ID.
 * @param {string} opts.amount - Amount of pool shares to withdraw.
 * @param {string} opts.minAmountA - Minimum amount of first asset to withdraw.
 * @param {string} opts.minAmountB - Minimum amount of second asset to withdraw.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   The resulting operation (xdr.LiquidityPoolWithdrawOp).
 */
function liquidityPoolWithdraw() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2c8eds4ur2().b[0][0]++, {});
  cov_2c8eds4ur2().f[0]++;
  var attributes = (cov_2c8eds4ur2().s[0]++, {});
  cov_2c8eds4ur2().s[1]++;
  if (!opts.liquidityPoolId) {
    cov_2c8eds4ur2().b[1][0]++;
    cov_2c8eds4ur2().s[2]++;
    throw new TypeError('liquidityPoolId argument is required');
  } else {
    cov_2c8eds4ur2().b[1][1]++;
  }
  cov_2c8eds4ur2().s[3]++;
  attributes.liquidityPoolId = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].PoolId.fromXDR(opts.liquidityPoolId, 'hex');
  cov_2c8eds4ur2().s[4]++;
  if (!this.isValidAmount(opts.amount)) {
    cov_2c8eds4ur2().b[2][0]++;
    cov_2c8eds4ur2().s[5]++;
    throw new TypeError('amount argument is required');
  } else {
    cov_2c8eds4ur2().b[2][1]++;
  }
  cov_2c8eds4ur2().s[6]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  cov_2c8eds4ur2().s[7]++;
  if (!this.isValidAmount(opts.minAmountA, true)) {
    cov_2c8eds4ur2().b[3][0]++;
    cov_2c8eds4ur2().s[8]++;
    throw new TypeError('minAmountA argument is required');
  } else {
    cov_2c8eds4ur2().b[3][1]++;
  }
  cov_2c8eds4ur2().s[9]++;
  attributes.minAmountA = this._toXDRAmount(opts.minAmountA);
  cov_2c8eds4ur2().s[10]++;
  if (!this.isValidAmount(opts.minAmountB, true)) {
    cov_2c8eds4ur2().b[4][0]++;
    cov_2c8eds4ur2().s[11]++;
    throw new TypeError('minAmountB argument is required');
  } else {
    cov_2c8eds4ur2().b[4][1]++;
  }
  cov_2c8eds4ur2().s[12]++;
  attributes.minAmountB = this._toXDRAmount(opts.minAmountB);
  var liquidityPoolWithdrawOp = (cov_2c8eds4ur2().s[13]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].LiquidityPoolWithdrawOp(attributes));
  var opAttributes = (cov_2c8eds4ur2().s[14]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.liquidityPoolWithdraw(liquidityPoolWithdrawOp)
  });
  cov_2c8eds4ur2().s[15]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2c8eds4ur2().s[16]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/manage_buy_offer.js":
/*!********************************************!*\
  !*** ./src/operations/manage_buy_offer.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "manageBuyOffer": () => (/* binding */ manageBuyOffer)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_61jlzuv7m() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_buy_offer.js";
  var hash = "185de6c4a7c042c26732632105f91579685f2684";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_buy_offer.js",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "1": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "2": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "3": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 76
        }
      },
      "5": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 59
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "7": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 54
        }
      },
      "8": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "9": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "11": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "12": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 40,
          column: 54
        }
      },
      "13": {
        start: {
          line: 41,
          column: 27
        },
        end: {
          line: 41,
          column: 63
        }
      },
      "14": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "15": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 44,
          column: 73
        }
      },
      "16": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "17": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "manageBuyOffer",
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 30
          }
        },
        loc: {
          start: {
            line: 21,
            column: 37
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        }, {
          start: {
            line: 36,
            column: 9
          },
          end: {
            line: 38,
            column: 3
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "185de6c4a7c042c26732632105f91579685f2684"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_61jlzuv7m = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_61jlzuv7m();



/**
 * Returns a XDR ManageBuyOfferOp. A "manage buy offer" operation creates, updates, or
 * deletes a buy offer.
 * @function
 * @alias Operation.manageBuyOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.buyAmount - The total amount you're buying. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `buying` in terms of `selling`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.ManageBuyOfferOp} Manage Buy Offer operation
 */
function manageBuyOffer(opts) {
  cov_61jlzuv7m().f[0]++;
  var attributes = (cov_61jlzuv7m().s[0]++, {});
  cov_61jlzuv7m().s[1]++;
  attributes.selling = opts.selling.toXDRObject();
  cov_61jlzuv7m().s[2]++;
  attributes.buying = opts.buying.toXDRObject();
  cov_61jlzuv7m().s[3]++;
  if (!this.isValidAmount(opts.buyAmount, true)) {
    cov_61jlzuv7m().b[0][0]++;
    cov_61jlzuv7m().s[4]++;
    throw new TypeError(this.constructAmountRequirementsError('buyAmount'));
  } else {
    cov_61jlzuv7m().b[0][1]++;
  }
  cov_61jlzuv7m().s[5]++;
  attributes.buyAmount = this._toXDRAmount(opts.buyAmount);
  cov_61jlzuv7m().s[6]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.price)) {
    cov_61jlzuv7m().b[1][0]++;
    cov_61jlzuv7m().s[7]++;
    throw new TypeError('price argument is required');
  } else {
    cov_61jlzuv7m().b[1][1]++;
  }
  cov_61jlzuv7m().s[8]++;
  attributes.price = this._toXDRPrice(opts.price);
  cov_61jlzuv7m().s[9]++;
  if (!lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.offerId)) {
    cov_61jlzuv7m().b[2][0]++;
    cov_61jlzuv7m().s[10]++;
    opts.offerId = opts.offerId.toString();
  } else {
    cov_61jlzuv7m().b[2][1]++;
    cov_61jlzuv7m().s[11]++;
    opts.offerId = '0';
  }
  cov_61jlzuv7m().s[12]++;
  attributes.offerId = js_xdr__WEBPACK_IMPORTED_MODULE_1__.Hyper.fromString(opts.offerId);
  var manageBuyOfferOp = (cov_61jlzuv7m().s[13]++, new _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].ManageBuyOfferOp(attributes));
  var opAttributes = (cov_61jlzuv7m().s[14]++, {});
  cov_61jlzuv7m().s[15]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].OperationBody.manageBuyOffer(manageBuyOfferOp);
  cov_61jlzuv7m().s[16]++;
  this.setSourceAccount(opAttributes, opts);
  cov_61jlzuv7m().s[17]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/manage_data.js":
/*!***************************************!*\
  !*** ./src/operations/manage_data.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "manageData": () => (/* binding */ manageData)
/* harmony export */ });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_1lo7tuwyik() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_data.js";
  var hash = "aa1b3ecf26e93bb485accf242bd87d109c185337";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_data.js",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 21
        },
        end: {
          line: 16,
          column: 23
        }
      },
      "1": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "2": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 66
        }
      },
      "3": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 21,
          column: 34
        }
      },
      "4": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 29,
          column: 3
        }
      },
      "5": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 69
        }
      },
      "6": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 35,
          column: 3
        }
      },
      "7": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 58
        }
      },
      "8": {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 38
        }
      },
      "9": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 39,
          column: 3
        }
      },
      "10": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 38,
          column: 60
        }
      },
      "11": {
        start: {
          line: 41,
          column: 23
        },
        end: {
          line: 41,
          column: 55
        }
      },
      "12": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "13": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 44,
          column: 65
        }
      },
      "14": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "15": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "manageData",
        decl: {
          start: {
            line: 15,
            column: 16
          },
          end: {
            line: 15,
            column: 26
          }
        },
        loc: {
          start: {
            line: 15,
            column: 33
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 15
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 20,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 18
      },
      "1": {
        loc: {
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 18,
            column: 8
          },
          end: {
            line: 18,
            column: 27
          }
        }, {
          start: {
            line: 18,
            column: 31
          },
          end: {
            line: 18,
            column: 53
          }
        }],
        line: 18
      },
      "2": {
        loc: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "3": {
        loc: {
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 26,
            column: 23
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 24,
            column: 4
          },
          end: {
            line: 24,
            column: 25
          }
        }, {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 25,
            column: 39
          }
        }, {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 26,
            column: 23
          }
        }],
        line: 24
      },
      "4": {
        loc: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        }, {
          start: {
            line: 33,
            column: 9
          },
          end: {
            line: 35,
            column: 3
          }
        }],
        line: 31
      },
      "5": {
        loc: {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 37
      },
      "6": {
        loc: {
          start: {
            line: 37,
            column: 6
          },
          end: {
            line: 37,
            column: 71
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 37,
            column: 6
          },
          end: {
            line: 37,
            column: 35
          }
        }, {
          start: {
            line: 37,
            column: 39
          },
          end: {
            line: 37,
            column: 71
          }
        }],
        line: 37
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "aa1b3ecf26e93bb485accf242bd87d109c185337"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1lo7tuwyik = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1lo7tuwyik();




/**
 * This operation adds data entry to the ledger.
 * @function
 * @alias Operation.manageData
 * @param {object} opts Options object
 * @param {string} opts.name - The name of the data entry.
 * @param {string|Buffer} opts.value - The value of the data entry.
 * @param {string} [opts.source] - The optional source account.
 * @returns {xdr.ManageDataOp} Manage Data operation
 */
function manageData(opts) {
  cov_1lo7tuwyik().f[0]++;
  var attributes = (cov_1lo7tuwyik().s[0]++, {});
  cov_1lo7tuwyik().s[1]++;
  if (!((cov_1lo7tuwyik().b[1][0]++, lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.name)) && (cov_1lo7tuwyik().b[1][1]++, opts.name.length <= 64))) {
    cov_1lo7tuwyik().b[0][0]++;
    cov_1lo7tuwyik().s[2]++;
    throw new Error('name must be a string, up to 64 characters');
  } else {
    cov_1lo7tuwyik().b[0][1]++;
  }
  cov_1lo7tuwyik().s[3]++;
  attributes.dataName = opts.name;
  cov_1lo7tuwyik().s[4]++;
  if ((cov_1lo7tuwyik().b[3][0]++, !lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.value)) && (cov_1lo7tuwyik().b[3][1]++, !_util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(opts.value)) && (cov_1lo7tuwyik().b[3][2]++, opts.value !== null)) {
    cov_1lo7tuwyik().b[2][0]++;
    cov_1lo7tuwyik().s[5]++;
    throw new Error('value must be a string, BrowserBuffer or null');
  } else {
    cov_1lo7tuwyik().b[2][1]++;
  }
  cov_1lo7tuwyik().s[6]++;
  if (lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.value)) {
    cov_1lo7tuwyik().b[4][0]++;
    cov_1lo7tuwyik().s[7]++;
    attributes.dataValue = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].from(opts.value);
  } else {
    cov_1lo7tuwyik().b[4][1]++;
    cov_1lo7tuwyik().s[8]++;
    attributes.dataValue = opts.value;
  }
  cov_1lo7tuwyik().s[9]++;
  if ((cov_1lo7tuwyik().b[6][0]++, attributes.dataValue !== null) && (cov_1lo7tuwyik().b[6][1]++, attributes.dataValue.length > 64)) {
    cov_1lo7tuwyik().b[5][0]++;
    cov_1lo7tuwyik().s[10]++;
    throw new Error('value cannot be longer that 64 bytes');
  } else {
    cov_1lo7tuwyik().b[5][1]++;
  }
  var manageDataOp = (cov_1lo7tuwyik().s[11]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].ManageDataOp(attributes));
  var opAttributes = (cov_1lo7tuwyik().s[12]++, {});
  cov_1lo7tuwyik().s[13]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.manageData(manageDataOp);
  cov_1lo7tuwyik().s[14]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1lo7tuwyik().s[15]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/manage_sell_offer.js":
/*!*********************************************!*\
  !*** ./src/operations/manage_sell_offer.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "manageSellOffer": () => (/* binding */ manageSellOffer)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
function cov_6lgaovd5z() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_sell_offer.js";
  var hash = "d0e464ef8552f1f790fa61c5f2dc04b8dfa34db6";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\manage_sell_offer.js",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 23
        }
      },
      "1": {
        start: {
          line: 23,
          column: 2
        },
        end: {
          line: 23,
          column: 50
        }
      },
      "2": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 24,
          column: 48
        }
      },
      "3": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "4": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "5": {
        start: {
          line: 28,
          column: 2
        },
        end: {
          line: 28,
          column: 53
        }
      },
      "6": {
        start: {
          line: 29,
          column: 2
        },
        end: {
          line: 31,
          column: 3
        }
      },
      "7": {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 54
        }
      },
      "8": {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 50
        }
      },
      "9": {
        start: {
          line: 34,
          column: 2
        },
        end: {
          line: 38,
          column: 3
        }
      },
      "10": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 43
        }
      },
      "11": {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 23
        }
      },
      "12": {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 40,
          column: 54
        }
      },
      "13": {
        start: {
          line: 41,
          column: 28
        },
        end: {
          line: 41,
          column: 65
        }
      },
      "14": {
        start: {
          line: 43,
          column: 23
        },
        end: {
          line: 43,
          column: 25
        }
      },
      "15": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 44,
          column: 75
        }
      },
      "16": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 44
        }
      },
      "17": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 47,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "manageSellOffer",
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 31
          }
        },
        loc: {
          start: {
            line: 21,
            column: 38
          },
          end: {
            line: 48,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 29
      },
      "2": {
        loc: {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 38,
            column: 3
          }
        }, {
          start: {
            line: 36,
            column: 9
          },
          end: {
            line: 38,
            column: 3
          }
        }],
        line: 34
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "d0e464ef8552f1f790fa61c5f2dc04b8dfa34db6"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_6lgaovd5z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_6lgaovd5z();



/**
 * Returns a XDR ManageSellOfferOp. A "manage sell offer" operation creates, updates, or
 * deletes an offer.
 * @function
 * @alias Operation.manageSellOffer
 * @param {object} opts Options object
 * @param {Asset} opts.selling - What you're selling.
 * @param {Asset} opts.buying - What you're buying.
 * @param {string} opts.amount - The total amount you're selling. If 0, deletes the offer.
 * @param {number|string|BigNumber|Object} opts.price - Price of 1 unit of `selling` in terms of `buying`.
 * @param {number} opts.price.n - If `opts.price` is an object: the price numerator
 * @param {number} opts.price.d - If `opts.price` is an object: the price denominator
 * @param {number|string} [opts.offerId ] - If `0`, will create a new offer (default). Otherwise, edits an exisiting offer.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 * @throws {Error} Throws `Error` when the best rational approximation of `price` cannot be found.
 * @returns {xdr.ManageSellOfferOp} Manage Sell Offer operation
 */
function manageSellOffer(opts) {
  cov_6lgaovd5z().f[0]++;
  var attributes = (cov_6lgaovd5z().s[0]++, {});
  cov_6lgaovd5z().s[1]++;
  attributes.selling = opts.selling.toXDRObject();
  cov_6lgaovd5z().s[2]++;
  attributes.buying = opts.buying.toXDRObject();
  cov_6lgaovd5z().s[3]++;
  if (!this.isValidAmount(opts.amount, true)) {
    cov_6lgaovd5z().b[0][0]++;
    cov_6lgaovd5z().s[4]++;
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  } else {
    cov_6lgaovd5z().b[0][1]++;
  }
  cov_6lgaovd5z().s[5]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  cov_6lgaovd5z().s[6]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.price)) {
    cov_6lgaovd5z().b[1][0]++;
    cov_6lgaovd5z().s[7]++;
    throw new TypeError('price argument is required');
  } else {
    cov_6lgaovd5z().b[1][1]++;
  }
  cov_6lgaovd5z().s[8]++;
  attributes.price = this._toXDRPrice(opts.price);
  cov_6lgaovd5z().s[9]++;
  if (!lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.offerId)) {
    cov_6lgaovd5z().b[2][0]++;
    cov_6lgaovd5z().s[10]++;
    opts.offerId = opts.offerId.toString();
  } else {
    cov_6lgaovd5z().b[2][1]++;
    cov_6lgaovd5z().s[11]++;
    opts.offerId = '0';
  }
  cov_6lgaovd5z().s[12]++;
  attributes.offerId = js_xdr__WEBPACK_IMPORTED_MODULE_1__.Hyper.fromString(opts.offerId);
  var manageSellOfferOp = (cov_6lgaovd5z().s[13]++, new _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].ManageSellOfferOp(attributes));
  var opAttributes = (cov_6lgaovd5z().s[14]++, {});
  cov_6lgaovd5z().s[15]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].OperationBody.manageSellOffer(manageSellOfferOp);
  cov_6lgaovd5z().s[16]++;
  this.setSourceAccount(opAttributes, opts);
  cov_6lgaovd5z().s[17]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_2__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/path_payment_strict_receive.js":
/*!*******************************************************!*\
  !*** ./src/operations/path_payment_strict_receive.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pathPaymentStrictReceive": () => (/* binding */ pathPaymentStrictReceive)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_10iaajmhxi() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\path_payment_strict_receive.js";
  var hash = "5ab65cd268458c287d22890c3800277c5dfd34cf";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\path_payment_strict_receive.js",
    statementMap: {
      "0": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "1": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "2": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 76
        }
      },
      "3": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "4": {
        start: {
          line: 39,
          column: 6
        },
        end: {
          line: 39,
          column: 79
        }
      },
      "5": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 12
        }
      },
      "6": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 44,
          column: 23
        }
      },
      "7": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "8": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 55
        }
      },
      "9": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "10": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 75
        }
      },
      "11": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "12": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 53,
          column: 54
        }
      },
      "13": {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 61
        }
      },
      "14": {
        start: {
          line: 56,
          column: 15
        },
        end: {
          line: 56,
          column: 41
        }
      },
      "15": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 57,
          column: 53
        }
      },
      "16": {
        start: {
          line: 57,
          column: 36
        },
        end: {
          line: 57,
          column: 51
        }
      },
      "17": {
        start: {
          line: 59,
          column: 18
        },
        end: {
          line: 59,
          column: 64
        }
      },
      "18": {
        start: {
          line: 61,
          column: 23
        },
        end: {
          line: 61,
          column: 25
        }
      },
      "19": {
        start: {
          line: 62,
          column: 2
        },
        end: {
          line: 62,
          column: 74
        }
      },
      "20": {
        start: {
          line: 63,
          column: 2
        },
        end: {
          line: 63,
          column: 44
        }
      },
      "21": {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 65,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "pathPaymentStrictReceive",
        decl: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 40
          }
        },
        loc: {
          start: {
            line: 30,
            column: 47
          },
          end: {
            line: 66,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 57,
            column: 29
          },
          end: {
            line: 57,
            column: 30
          }
        },
        loc: {
          start: {
            line: 57,
            column: 36
          },
          end: {
            line: 57,
            column: 51
          }
        },
        line: 57
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 42,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 33,
            column: 51
          }
        }, {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 35,
            column: 76
          }
        }, {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 37,
            column: 74
          }
        }, {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 39,
            column: 79
          }
        }, {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 41,
            column: 12
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 56,
            column: 15
          },
          end: {
            line: 56,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 56,
            column: 27
          },
          end: {
            line: 56,
            column: 36
          }
        }, {
          start: {
            line: 56,
            column: 39
          },
          end: {
            line: 56,
            column: 41
          }
        }],
        line: 56
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "5ab65cd268458c287d22890c3800277c5dfd34cf"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_10iaajmhxi = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_10iaajmhxi();



/**
 * Creates a PathPaymentStrictReceive operation.
 *
 * A `PathPaymentStrictReceive` operation sends the specified amount to the
 * destination account. It credits the destination with `destAmount` of
 * `destAsset`, while debiting at most `sendMax` of `sendAsset` from the source.
 * The transfer optionally occurs through a path. XLM payments create the
 * destination account if it does not exist.
 *
 * @function
 * @alias Operation.pathPaymentStrictReceive
 * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-receive
 *
 * @param {object}  opts - Options object
 * @param {Asset}   opts.sendAsset    - asset to pay with
 * @param {string}  opts.sendMax      - maximum amount of sendAsset to send
 * @param {string}  opts.destination  - destination account to send to
 * @param {Asset}   opts.destAsset    - asset the destination will receive
 * @param {string}  opts.destAmount   - amount the destination receives
 * @param {Asset[]} opts.path         - array of Asset objects to use as the path
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.PathPaymentStrictReceiveOp} the resulting path payment op
 */
function pathPaymentStrictReceive(opts) {
  cov_10iaajmhxi().f[0]++;
  cov_10iaajmhxi().s[0]++;
  switch (true) {
    case !opts.sendAsset:
      cov_10iaajmhxi().b[0][0]++;
      cov_10iaajmhxi().s[1]++;
      throw new Error('Must specify a send asset');
    case !this.isValidAmount(opts.sendMax):
      cov_10iaajmhxi().b[0][1]++;
      cov_10iaajmhxi().s[2]++;
      throw new TypeError(this.constructAmountRequirementsError('sendMax'));
    case !opts.destAsset:
      cov_10iaajmhxi().b[0][2]++;
      cov_10iaajmhxi().s[3]++;
      throw new Error('Must provide a destAsset for a payment operation');
    case !this.isValidAmount(opts.destAmount):
      cov_10iaajmhxi().b[0][3]++;
      cov_10iaajmhxi().s[4]++;
      throw new TypeError(this.constructAmountRequirementsError('destAmount'));
    default:
      cov_10iaajmhxi().b[0][4]++;
      cov_10iaajmhxi().s[5]++;
      break;
  }
  var attributes = (cov_10iaajmhxi().s[6]++, {});
  cov_10iaajmhxi().s[7]++;
  attributes.sendAsset = opts.sendAsset.toXDRObject();
  cov_10iaajmhxi().s[8]++;
  attributes.sendMax = this._toXDRAmount(opts.sendMax);
  cov_10iaajmhxi().s[9]++;
  try {
    cov_10iaajmhxi().s[10]++;
    attributes.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__.decodeAddressToMuxedAccount)(opts.destination);
  } catch (e) {
    cov_10iaajmhxi().s[11]++;
    throw new Error('destination is invalid');
  }
  cov_10iaajmhxi().s[12]++;
  attributes.destAsset = opts.destAsset.toXDRObject();
  cov_10iaajmhxi().s[13]++;
  attributes.destAmount = this._toXDRAmount(opts.destAmount);
  var path = (cov_10iaajmhxi().s[14]++, opts.path ? (cov_10iaajmhxi().b[1][0]++, opts.path) : (cov_10iaajmhxi().b[1][1]++, []));
  cov_10iaajmhxi().s[15]++;
  attributes.path = path.map(function (x) {
    cov_10iaajmhxi().f[1]++;
    cov_10iaajmhxi().s[16]++;
    return x.toXDRObject();
  });
  var payment = (cov_10iaajmhxi().s[17]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].PathPaymentStrictReceiveOp(attributes));
  var opAttributes = (cov_10iaajmhxi().s[18]++, {});
  cov_10iaajmhxi().s[19]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.pathPaymentStrictReceive(payment);
  cov_10iaajmhxi().s[20]++;
  this.setSourceAccount(opAttributes, opts);
  cov_10iaajmhxi().s[21]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/path_payment_strict_send.js":
/*!****************************************************!*\
  !*** ./src/operations/path_payment_strict_send.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "pathPaymentStrictSend": () => (/* binding */ pathPaymentStrictSend)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_2kklzl05xe() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\path_payment_strict_send.js";
  var hash = "e5b36e42fb441014f39e8b28ac8130cbbb8d7427";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\path_payment_strict_send.js",
    statementMap: {
      "0": {
        start: {
          line: 31,
          column: 2
        },
        end: {
          line: 42,
          column: 3
        }
      },
      "1": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 51
        }
      },
      "2": {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 79
        }
      },
      "3": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 74
        }
      },
      "4": {
        start: {
          line: 39,
          column: 6
        },
        end: {
          line: 39,
          column: 76
        }
      },
      "5": {
        start: {
          line: 41,
          column: 6
        },
        end: {
          line: 41,
          column: 12
        }
      },
      "6": {
        start: {
          line: 44,
          column: 21
        },
        end: {
          line: 44,
          column: 23
        }
      },
      "7": {
        start: {
          line: 45,
          column: 2
        },
        end: {
          line: 45,
          column: 54
        }
      },
      "8": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 61
        }
      },
      "9": {
        start: {
          line: 47,
          column: 2
        },
        end: {
          line: 51,
          column: 3
        }
      },
      "10": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 75
        }
      },
      "11": {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 46
        }
      },
      "12": {
        start: {
          line: 52,
          column: 2
        },
        end: {
          line: 52,
          column: 54
        }
      },
      "13": {
        start: {
          line: 53,
          column: 2
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "14": {
        start: {
          line: 55,
          column: 15
        },
        end: {
          line: 55,
          column: 41
        }
      },
      "15": {
        start: {
          line: 56,
          column: 2
        },
        end: {
          line: 56,
          column: 53
        }
      },
      "16": {
        start: {
          line: 56,
          column: 36
        },
        end: {
          line: 56,
          column: 51
        }
      },
      "17": {
        start: {
          line: 58,
          column: 18
        },
        end: {
          line: 58,
          column: 61
        }
      },
      "18": {
        start: {
          line: 60,
          column: 23
        },
        end: {
          line: 60,
          column: 25
        }
      },
      "19": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 61,
          column: 71
        }
      },
      "20": {
        start: {
          line: 62,
          column: 2
        },
        end: {
          line: 62,
          column: 44
        }
      },
      "21": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 64,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "pathPaymentStrictSend",
        decl: {
          start: {
            line: 30,
            column: 16
          },
          end: {
            line: 30,
            column: 37
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 65,
            column: 1
          }
        },
        line: 30
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 56,
            column: 29
          },
          end: {
            line: 56,
            column: 30
          }
        },
        loc: {
          start: {
            line: 56,
            column: 36
          },
          end: {
            line: 56,
            column: 51
          }
        },
        line: 56
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 42,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 33,
            column: 51
          }
        }, {
          start: {
            line: 34,
            column: 4
          },
          end: {
            line: 35,
            column: 79
          }
        }, {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 37,
            column: 74
          }
        }, {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 39,
            column: 76
          }
        }, {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 41,
            column: 12
          }
        }],
        line: 31
      },
      "1": {
        loc: {
          start: {
            line: 55,
            column: 15
          },
          end: {
            line: 55,
            column: 41
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 55,
            column: 27
          },
          end: {
            line: 55,
            column: 36
          }
        }, {
          start: {
            line: 55,
            column: 39
          },
          end: {
            line: 55,
            column: 41
          }
        }],
        line: 55
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0, 0, 0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e5b36e42fb441014f39e8b28ac8130cbbb8d7427"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2kklzl05xe = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2kklzl05xe();



/**
 * Creates a PathPaymentStrictSend operation.
 *
 * A `PathPaymentStrictSend` operation sends the specified amount to the
 * destination account crediting at least `destMin` of `destAsset`, optionally
 * through a path. XLM payments create the destination account if it does not
 * exist.
 *
 * @function
 * @alias Operation.pathPaymentStrictSend
 * @see https://developers.stellar.org/docs/start/list-of-operations/#path-payment-strict-send
 *
 * @param {object}  opts - Options object
 * @param {Asset}   opts.sendAsset    - asset to pay with
 * @param {string}  opts.sendAmount   - amount of sendAsset to send (excluding fees)
 * @param {string}  opts.destination  - destination account to send to
 * @param {Asset}   opts.destAsset    - asset the destination will receive
 * @param {string}  opts.destMin      - minimum amount of destAsset to be receive
 * @param {Asset[]} opts.path         - array of Asset objects to use as the path
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   the resulting path payment operation
 *     (xdr.PathPaymentStrictSendOp)
 */
function pathPaymentStrictSend(opts) {
  cov_2kklzl05xe().f[0]++;
  cov_2kklzl05xe().s[0]++;
  switch (true) {
    case !opts.sendAsset:
      cov_2kklzl05xe().b[0][0]++;
      cov_2kklzl05xe().s[1]++;
      throw new Error('Must specify a send asset');
    case !this.isValidAmount(opts.sendAmount):
      cov_2kklzl05xe().b[0][1]++;
      cov_2kklzl05xe().s[2]++;
      throw new TypeError(this.constructAmountRequirementsError('sendAmount'));
    case !opts.destAsset:
      cov_2kklzl05xe().b[0][2]++;
      cov_2kklzl05xe().s[3]++;
      throw new Error('Must provide a destAsset for a payment operation');
    case !this.isValidAmount(opts.destMin):
      cov_2kklzl05xe().b[0][3]++;
      cov_2kklzl05xe().s[4]++;
      throw new TypeError(this.constructAmountRequirementsError('destMin'));
    default:
      cov_2kklzl05xe().b[0][4]++;
      cov_2kklzl05xe().s[5]++;
      break;
  }
  var attributes = (cov_2kklzl05xe().s[6]++, {});
  cov_2kklzl05xe().s[7]++;
  attributes.sendAsset = opts.sendAsset.toXDRObject();
  cov_2kklzl05xe().s[8]++;
  attributes.sendAmount = this._toXDRAmount(opts.sendAmount);
  cov_2kklzl05xe().s[9]++;
  try {
    cov_2kklzl05xe().s[10]++;
    attributes.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__.decodeAddressToMuxedAccount)(opts.destination);
  } catch (e) {
    cov_2kklzl05xe().s[11]++;
    throw new Error('destination is invalid');
  }
  cov_2kklzl05xe().s[12]++;
  attributes.destAsset = opts.destAsset.toXDRObject();
  cov_2kklzl05xe().s[13]++;
  attributes.destMin = this._toXDRAmount(opts.destMin);
  var path = (cov_2kklzl05xe().s[14]++, opts.path ? (cov_2kklzl05xe().b[1][0]++, opts.path) : (cov_2kklzl05xe().b[1][1]++, []));
  cov_2kklzl05xe().s[15]++;
  attributes.path = path.map(function (x) {
    cov_2kklzl05xe().f[1]++;
    cov_2kklzl05xe().s[16]++;
    return x.toXDRObject();
  });
  var payment = (cov_2kklzl05xe().s[17]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].PathPaymentStrictSendOp(attributes));
  var opAttributes = (cov_2kklzl05xe().s[18]++, {});
  cov_2kklzl05xe().s[19]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.pathPaymentStrictSend(payment);
  cov_2kklzl05xe().s[20]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2kklzl05xe().s[21]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/payment.js":
/*!***********************************!*\
  !*** ./src/operations/payment.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "payment": () => (/* binding */ payment)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_1nu7fwkrr9() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\payment.js";
  var hash = "65a1c0800fa91c799934e9da2c9d1343e529215b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\payment.js",
    statementMap: {
      "0": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 24,
          column: 3
        }
      },
      "1": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 69
        }
      },
      "2": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "3": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 73
        }
      },
      "4": {
        start: {
          line: 29,
          column: 21
        },
        end: {
          line: 29,
          column: 23
        }
      },
      "5": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 34,
          column: 3
        }
      },
      "6": {
        start: {
          line: 31,
          column: 4
        },
        end: {
          line: 31,
          column: 75
        }
      },
      "7": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 33,
          column: 46
        }
      },
      "8": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 36,
          column: 46
        }
      },
      "9": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 53
        }
      },
      "10": {
        start: {
          line: 38,
          column: 20
        },
        end: {
          line: 38,
          column: 49
        }
      },
      "11": {
        start: {
          line: 40,
          column: 23
        },
        end: {
          line: 40,
          column: 25
        }
      },
      "12": {
        start: {
          line: 41,
          column: 2
        },
        end: {
          line: 41,
          column: 59
        }
      },
      "13": {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 44
        }
      },
      "14": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 44,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "payment",
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 23
          }
        },
        loc: {
          start: {
            line: 21,
            column: 30
          },
          end: {
            line: 45,
            column: 1
          }
        },
        line: 21
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 24,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 22
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "65a1c0800fa91c799934e9da2c9d1343e529215b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1nu7fwkrr9 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1nu7fwkrr9();



/**
 * Create a payment operation.
 *
 * @function
 * @alias Operation.payment
 * @see https://developers.stellar.org/docs/start/list-of-operations/#payment
 *
 * @param {object}  opts - Options object
 * @param {string}  opts.destination  - destination account ID
 * @param {Asset}   opts.asset        - asset to send
 * @param {string}  opts.amount       - amount to send
 *
 * @param {string}  [opts.source]     - The source account for the payment.
 *     Defaults to the transaction's source account.
 *
 * @returns {xdr.Operation}   The resulting payment operation (xdr.PaymentOp)
 */
function payment(opts) {
  cov_1nu7fwkrr9().f[0]++;
  cov_1nu7fwkrr9().s[0]++;
  if (!opts.asset) {
    cov_1nu7fwkrr9().b[0][0]++;
    cov_1nu7fwkrr9().s[1]++;
    throw new Error('Must provide an asset for a payment operation');
  } else {
    cov_1nu7fwkrr9().b[0][1]++;
  }
  cov_1nu7fwkrr9().s[2]++;
  if (!this.isValidAmount(opts.amount)) {
    cov_1nu7fwkrr9().b[1][0]++;
    cov_1nu7fwkrr9().s[3]++;
    throw new TypeError(this.constructAmountRequirementsError('amount'));
  } else {
    cov_1nu7fwkrr9().b[1][1]++;
  }
  var attributes = (cov_1nu7fwkrr9().s[4]++, {});
  cov_1nu7fwkrr9().s[5]++;
  try {
    cov_1nu7fwkrr9().s[6]++;
    attributes.destination = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_1__.decodeAddressToMuxedAccount)(opts.destination);
  } catch (e) {
    cov_1nu7fwkrr9().s[7]++;
    throw new Error('destination is invalid');
  }
  cov_1nu7fwkrr9().s[8]++;
  attributes.asset = opts.asset.toXDRObject();
  cov_1nu7fwkrr9().s[9]++;
  attributes.amount = this._toXDRAmount(opts.amount);
  var paymentOp = (cov_1nu7fwkrr9().s[10]++, new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].PaymentOp(attributes));
  var opAttributes = (cov_1nu7fwkrr9().s[11]++, {});
  cov_1nu7fwkrr9().s[12]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.payment(paymentOp);
  cov_1nu7fwkrr9().s[13]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1nu7fwkrr9().s[14]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/revoke_sponsorship.js":
/*!**********************************************!*\
  !*** ./src/operations/revoke_sponsorship.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "revokeAccountSponsorship": () => (/* binding */ revokeAccountSponsorship),
/* harmony export */   "revokeClaimableBalanceSponsorship": () => (/* binding */ revokeClaimableBalanceSponsorship),
/* harmony export */   "revokeDataSponsorship": () => (/* binding */ revokeDataSponsorship),
/* harmony export */   "revokeLiquidityPoolSponsorship": () => (/* binding */ revokeLiquidityPoolSponsorship),
/* harmony export */   "revokeOfferSponsorship": () => (/* binding */ revokeOfferSponsorship),
/* harmony export */   "revokeSignerSponsorship": () => (/* binding */ revokeSignerSponsorship),
/* harmony export */   "revokeTrustlineSponsorship": () => (/* binding */ revokeTrustlineSponsorship)
/* harmony export */ });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
/* harmony import */ var _asset__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../asset */ "./src/asset.js");
/* harmony import */ var _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../liquidity_pool_id */ "./src/liquidity_pool_id.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_2g9vyalfml() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\revoke_sponsorship.js";
  var hash = "bad8e1ad82d3c88ddafacd9a5e23735194b04705";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\revoke_sponsorship.js",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 2
        },
        end: {
          line: 27,
          column: 3
        }
      },
      "1": {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 42
        }
      },
      "2": {
        start: {
          line: 29,
          column: 20
        },
        end: {
          line: 33,
          column: 3
        }
      },
      "3": {
        start: {
          line: 34,
          column: 13
        },
        end: {
          line: 34,
          column: 76
        }
      },
      "4": {
        start: {
          line: 35,
          column: 23
        },
        end: {
          line: 35,
          column: 25
        }
      },
      "5": {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 36,
          column: 62
        }
      },
      "6": {
        start: {
          line: 37,
          column: 2
        },
        end: {
          line: 37,
          column: 44
        }
      },
      "7": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 39,
          column: 41
        }
      },
      "8": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 66,
          column: 3
        }
      },
      "9": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 42
        }
      },
      "10": {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 75,
          column: 3
        }
      },
      "11": {
        start: {
          line: 70,
          column: 4
        },
        end: {
          line: 70,
          column: 46
        }
      },
      "12": {
        start: {
          line: 71,
          column: 9
        },
        end: {
          line: 75,
          column: 3
        }
      },
      "13": {
        start: {
          line: 72,
          column: 4
        },
        end: {
          line: 72,
          column: 37
        }
      },
      "14": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 69
        }
      },
      "15": {
        start: {
          line: 77,
          column: 20
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "16": {
        start: {
          line: 83,
          column: 13
        },
        end: {
          line: 83,
          column: 76
        }
      },
      "17": {
        start: {
          line: 84,
          column: 23
        },
        end: {
          line: 84,
          column: 25
        }
      },
      "18": {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 85,
          column: 62
        }
      },
      "19": {
        start: {
          line: 86,
          column: 2
        },
        end: {
          line: 86,
          column: 44
        }
      },
      "20": {
        start: {
          line: 88,
          column: 2
        },
        end: {
          line: 88,
          column: 41
        }
      },
      "21": {
        start: {
          line: 110,
          column: 2
        },
        end: {
          line: 112,
          column: 3
        }
      },
      "22": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 111,
          column: 41
        }
      },
      "23": {
        start: {
          line: 113,
          column: 2
        },
        end: {
          line: 115,
          column: 3
        }
      },
      "24": {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 42
        }
      },
      "25": {
        start: {
          line: 117,
          column: 20
        },
        end: {
          line: 122,
          column: 3
        }
      },
      "26": {
        start: {
          line: 123,
          column: 13
        },
        end: {
          line: 123,
          column: 76
        }
      },
      "27": {
        start: {
          line: 124,
          column: 23
        },
        end: {
          line: 124,
          column: 25
        }
      },
      "28": {
        start: {
          line: 125,
          column: 2
        },
        end: {
          line: 125,
          column: 62
        }
      },
      "29": {
        start: {
          line: 126,
          column: 2
        },
        end: {
          line: 126,
          column: 44
        }
      },
      "30": {
        start: {
          line: 128,
          column: 2
        },
        end: {
          line: 128,
          column: 41
        }
      },
      "31": {
        start: {
          line: 150,
          column: 2
        },
        end: {
          line: 152,
          column: 3
        }
      },
      "32": {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 42
        }
      },
      "33": {
        start: {
          line: 153,
          column: 2
        },
        end: {
          line: 155,
          column: 3
        }
      },
      "34": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 66
        }
      },
      "35": {
        start: {
          line: 157,
          column: 20
        },
        end: {
          line: 162,
          column: 3
        }
      },
      "36": {
        start: {
          line: 163,
          column: 13
        },
        end: {
          line: 163,
          column: 76
        }
      },
      "37": {
        start: {
          line: 164,
          column: 23
        },
        end: {
          line: 164,
          column: 25
        }
      },
      "38": {
        start: {
          line: 165,
          column: 2
        },
        end: {
          line: 165,
          column: 62
        }
      },
      "39": {
        start: {
          line: 166,
          column: 2
        },
        end: {
          line: 166,
          column: 44
        }
      },
      "40": {
        start: {
          line: 168,
          column: 2
        },
        end: {
          line: 168,
          column: 41
        }
      },
      "41": {
        start: {
          line: 188,
          column: 2
        },
        end: {
          line: 190,
          column: 3
        }
      },
      "42": {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 189,
          column: 44
        }
      },
      "43": {
        start: {
          line: 192,
          column: 20
        },
        end: {
          line: 196,
          column: 3
        }
      },
      "44": {
        start: {
          line: 197,
          column: 13
        },
        end: {
          line: 197,
          column: 76
        }
      },
      "45": {
        start: {
          line: 198,
          column: 23
        },
        end: {
          line: 198,
          column: 25
        }
      },
      "46": {
        start: {
          line: 199,
          column: 2
        },
        end: {
          line: 199,
          column: 62
        }
      },
      "47": {
        start: {
          line: 200,
          column: 2
        },
        end: {
          line: 200,
          column: 44
        }
      },
      "48": {
        start: {
          line: 202,
          column: 2
        },
        end: {
          line: 202,
          column: 41
        }
      },
      "49": {
        start: {
          line: 222,
          column: 2
        },
        end: {
          line: 224,
          column: 3
        }
      },
      "50": {
        start: {
          line: 223,
          column: 4
        },
        end: {
          line: 223,
          column: 50
        }
      },
      "51": {
        start: {
          line: 226,
          column: 20
        },
        end: {
          line: 230,
          column: 3
        }
      },
      "52": {
        start: {
          line: 232,
          column: 13
        },
        end: {
          line: 232,
          column: 76
        }
      },
      "53": {
        start: {
          line: 233,
          column: 23
        },
        end: {
          line: 235,
          column: 3
        }
      },
      "54": {
        start: {
          line: 236,
          column: 2
        },
        end: {
          line: 236,
          column: 44
        }
      },
      "55": {
        start: {
          line: 238,
          column: 2
        },
        end: {
          line: 238,
          column: 41
        }
      },
      "56": {
        start: {
          line: 265,
          column: 2
        },
        end: {
          line: 267,
          column: 3
        }
      },
      "57": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 42
        }
      },
      "58": {
        start: {
          line: 269,
          column: 2
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "59": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 272,
          column: 5
        }
      },
      "60": {
        start: {
          line: 271,
          column: 6
        },
        end: {
          line: 271,
          column: 61
        }
      },
      "61": {
        start: {
          line: 273,
          column: 19
        },
        end: {
          line: 273,
          column: 78
        }
      },
      "62": {
        start: {
          line: 275,
          column: 4
        },
        end: {
          line: 275,
          column: 57
        }
      },
      "63": {
        start: {
          line: 276,
          column: 9
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "64": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 282,
          column: 5
        }
      },
      "65": {
        start: {
          line: 279,
          column: 6
        },
        end: {
          line: 279,
          column: 64
        }
      },
      "66": {
        start: {
          line: 281,
          column: 6
        },
        end: {
          line: 281,
          column: 37
        }
      },
      "67": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 286,
          column: 5
        }
      },
      "68": {
        start: {
          line: 285,
          column: 6
        },
        end: {
          line: 285,
          column: 74
        }
      },
      "69": {
        start: {
          line: 288,
          column: 4
        },
        end: {
          line: 288,
          column: 59
        }
      },
      "70": {
        start: {
          line: 289,
          column: 9
        },
        end: {
          line: 304,
          column: 3
        }
      },
      "71": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 295,
          column: 5
        }
      },
      "72": {
        start: {
          line: 292,
          column: 6
        },
        end: {
          line: 292,
          column: 65
        }
      },
      "73": {
        start: {
          line: 294,
          column: 6
        },
        end: {
          line: 294,
          column: 38
        }
      },
      "74": {
        start: {
          line: 297,
          column: 4
        },
        end: {
          line: 299,
          column: 5
        }
      },
      "75": {
        start: {
          line: 298,
          column: 6
        },
        end: {
          line: 298,
          column: 75
        }
      },
      "76": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 301,
          column: 55
        }
      },
      "77": {
        start: {
          line: 303,
          column: 4
        },
        end: {
          line: 303,
          column: 41
        }
      },
      "78": {
        start: {
          line: 306,
          column: 17
        },
        end: {
          line: 309,
          column: 4
        }
      },
      "79": {
        start: {
          line: 311,
          column: 13
        },
        end: {
          line: 311,
          column: 68
        }
      },
      "80": {
        start: {
          line: 312,
          column: 23
        },
        end: {
          line: 312,
          column: 25
        }
      },
      "81": {
        start: {
          line: 313,
          column: 2
        },
        end: {
          line: 313,
          column: 62
        }
      },
      "82": {
        start: {
          line: 314,
          column: 2
        },
        end: {
          line: 314,
          column: 44
        }
      },
      "83": {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 316,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "revokeAccountSponsorship",
        decl: {
          start: {
            line: 24,
            column: 16
          },
          end: {
            line: 24,
            column: 40
          }
        },
        loc: {
          start: {
            line: 24,
            column: 52
          },
          end: {
            line: 40,
            column: 1
          }
        },
        line: 24
      },
      "1": {
        name: "revokeTrustlineSponsorship",
        decl: {
          start: {
            line: 63,
            column: 16
          },
          end: {
            line: 63,
            column: 42
          }
        },
        loc: {
          start: {
            line: 63,
            column: 54
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 63
      },
      "2": {
        name: "revokeOfferSponsorship",
        decl: {
          start: {
            line: 109,
            column: 16
          },
          end: {
            line: 109,
            column: 38
          }
        },
        loc: {
          start: {
            line: 109,
            column: 50
          },
          end: {
            line: 129,
            column: 1
          }
        },
        line: 109
      },
      "3": {
        name: "revokeDataSponsorship",
        decl: {
          start: {
            line: 149,
            column: 16
          },
          end: {
            line: 149,
            column: 37
          }
        },
        loc: {
          start: {
            line: 149,
            column: 49
          },
          end: {
            line: 169,
            column: 1
          }
        },
        line: 149
      },
      "4": {
        name: "revokeClaimableBalanceSponsorship",
        decl: {
          start: {
            line: 187,
            column: 16
          },
          end: {
            line: 187,
            column: 49
          }
        },
        loc: {
          start: {
            line: 187,
            column: 61
          },
          end: {
            line: 203,
            column: 1
          }
        },
        line: 187
      },
      "5": {
        name: "revokeLiquidityPoolSponsorship",
        decl: {
          start: {
            line: 221,
            column: 16
          },
          end: {
            line: 221,
            column: 46
          }
        },
        loc: {
          start: {
            line: 221,
            column: 58
          },
          end: {
            line: 239,
            column: 1
          }
        },
        line: 221
      },
      "6": {
        name: "revokeSignerSponsorship",
        decl: {
          start: {
            line: 264,
            column: 16
          },
          end: {
            line: 264,
            column: 39
          }
        },
        loc: {
          start: {
            line: 264,
            column: 51
          },
          end: {
            line: 317,
            column: 1
          }
        },
        line: 264
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 24,
            column: 41
          },
          end: {
            line: 24,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 24,
            column: 48
          },
          end: {
            line: 24,
            column: 50
          }
        }],
        line: 24
      },
      "1": {
        loc: {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "2": {
        loc: {
          start: {
            line: 63,
            column: 43
          },
          end: {
            line: 63,
            column: 52
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 63,
            column: 50
          },
          end: {
            line: 63,
            column: 52
          }
        }],
        line: 63
      },
      "3": {
        loc: {
          start: {
            line: 64,
            column: 2
          },
          end: {
            line: 66,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 64,
            column: 2
          },
          end: {
            line: 66,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 64
      },
      "4": {
        loc: {
          start: {
            line: 69,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 69,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        }, {
          start: {
            line: 71,
            column: 9
          },
          end: {
            line: 75,
            column: 3
          }
        }],
        line: 69
      },
      "5": {
        loc: {
          start: {
            line: 71,
            column: 9
          },
          end: {
            line: 75,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 71,
            column: 9
          },
          end: {
            line: 75,
            column: 3
          }
        }, {
          start: {
            line: 73,
            column: 9
          },
          end: {
            line: 75,
            column: 3
          }
        }],
        line: 71
      },
      "6": {
        loc: {
          start: {
            line: 109,
            column: 39
          },
          end: {
            line: 109,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 109,
            column: 46
          },
          end: {
            line: 109,
            column: 48
          }
        }],
        line: 109
      },
      "7": {
        loc: {
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 110,
            column: 2
          },
          end: {
            line: 112,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 110
      },
      "8": {
        loc: {
          start: {
            line: 113,
            column: 2
          },
          end: {
            line: 115,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 2
          },
          end: {
            line: 115,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "9": {
        loc: {
          start: {
            line: 149,
            column: 38
          },
          end: {
            line: 149,
            column: 47
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 45
          },
          end: {
            line: 149,
            column: 47
          }
        }],
        line: 149
      },
      "10": {
        loc: {
          start: {
            line: 150,
            column: 2
          },
          end: {
            line: 152,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 2
          },
          end: {
            line: 152,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "11": {
        loc: {
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 155,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 155,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 153
      },
      "12": {
        loc: {
          start: {
            line: 153,
            column: 6
          },
          end: {
            line: 153,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 153,
            column: 6
          },
          end: {
            line: 153,
            column: 26
          }
        }, {
          start: {
            line: 153,
            column: 30
          },
          end: {
            line: 153,
            column: 51
          }
        }],
        line: 153
      },
      "13": {
        loc: {
          start: {
            line: 187,
            column: 50
          },
          end: {
            line: 187,
            column: 59
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 187,
            column: 57
          },
          end: {
            line: 187,
            column: 59
          }
        }],
        line: 187
      },
      "14": {
        loc: {
          start: {
            line: 188,
            column: 2
          },
          end: {
            line: 190,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 188,
            column: 2
          },
          end: {
            line: 190,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 188
      },
      "15": {
        loc: {
          start: {
            line: 221,
            column: 47
          },
          end: {
            line: 221,
            column: 56
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 221,
            column: 54
          },
          end: {
            line: 221,
            column: 56
          }
        }],
        line: 221
      },
      "16": {
        loc: {
          start: {
            line: 222,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 222,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 222
      },
      "17": {
        loc: {
          start: {
            line: 264,
            column: 40
          },
          end: {
            line: 264,
            column: 49
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 264,
            column: 47
          },
          end: {
            line: 264,
            column: 49
          }
        }],
        line: 264
      },
      "18": {
        loc: {
          start: {
            line: 265,
            column: 2
          },
          end: {
            line: 267,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 265,
            column: 2
          },
          end: {
            line: 267,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 265
      },
      "19": {
        loc: {
          start: {
            line: 269,
            column: 2
          },
          end: {
            line: 304,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 269,
            column: 2
          },
          end: {
            line: 304,
            column: 3
          }
        }, {
          start: {
            line: 276,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        }],
        line: 269
      },
      "20": {
        loc: {
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 270,
            column: 4
          },
          end: {
            line: 272,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 270
      },
      "21": {
        loc: {
          start: {
            line: 276,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 276,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        }, {
          start: {
            line: 289,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        }],
        line: 276
      },
      "22": {
        loc: {
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 278,
            column: 4
          },
          end: {
            line: 282,
            column: 5
          }
        }, {
          start: {
            line: 280,
            column: 11
          },
          end: {
            line: 282,
            column: 5
          }
        }],
        line: 278
      },
      "23": {
        loc: {
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 284,
            column: 4
          },
          end: {
            line: 286,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 284
      },
      "24": {
        loc: {
          start: {
            line: 284,
            column: 10
          },
          end: {
            line: 284,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 284,
            column: 10
          },
          end: {
            line: 284,
            column: 40
          }
        }, {
          start: {
            line: 284,
            column: 44
          },
          end: {
            line: 284,
            column: 64
          }
        }],
        line: 284
      },
      "25": {
        loc: {
          start: {
            line: 289,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        }, {
          start: {
            line: 302,
            column: 9
          },
          end: {
            line: 304,
            column: 3
          }
        }],
        line: 289
      },
      "26": {
        loc: {
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 291,
            column: 4
          },
          end: {
            line: 295,
            column: 5
          }
        }, {
          start: {
            line: 293,
            column: 11
          },
          end: {
            line: 295,
            column: 5
          }
        }],
        line: 291
      },
      "27": {
        loc: {
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 297,
            column: 4
          },
          end: {
            line: 299,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 297
      },
      "28": {
        loc: {
          start: {
            line: 297,
            column: 10
          },
          end: {
            line: 297,
            column: 64
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 297,
            column: 10
          },
          end: {
            line: 297,
            column: 40
          }
        }, {
          start: {
            line: 297,
            column: 44
          },
          end: {
            line: 297,
            column: 64
          }
        }],
        line: 297
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0],
      "14": [0, 0],
      "15": [0],
      "16": [0, 0],
      "17": [0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "bad8e1ad82d3c88ddafacd9a5e23735194b04705"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2g9vyalfml = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2g9vyalfml();







/**
 * Create a "revoke sponsorship" operation for an account.
 *
 * @function
 * @alias Operation.revokeAccountSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The sponsored account ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeAccountSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 * });
 *
 */
function revokeAccountSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[0][0]++, {});
  cov_2g9vyalfml().f[0]++;
  cov_2g9vyalfml().s[0]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.account)) {
    cov_2g9vyalfml().b[1][0]++;
    cov_2g9vyalfml().s[1]++;
    throw new Error('account is invalid');
  } else {
    cov_2g9vyalfml().b[1][1]++;
  }
  var ledgerKey = (cov_2g9vyalfml().s[2]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.account(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyAccount({
    accountId: _keypair__WEBPACK_IMPORTED_MODULE_3__.Keypair.fromPublicKey(opts.account).xdrAccountId()
  })));
  var op = (cov_2g9vyalfml().s[3]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[4]++, {});
  cov_2g9vyalfml().s[5]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[6]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[7]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Create a "revoke sponsorship" operation for a trustline.
 *
 * @function
 * @alias Operation.revokeTrustlineSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID which owns the trustline.
 * @param {Asset | LiquidityPoolId} opts.asset - The trustline asset.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeTrustlineSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   asset: new StellarBase.LiquidityPoolId(
 *     'USDUSD',
 *     'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7'
 *   )
 * });
 *
 */
function revokeTrustlineSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[2][0]++, {});
  cov_2g9vyalfml().f[1]++;
  cov_2g9vyalfml().s[8]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.account)) {
    cov_2g9vyalfml().b[3][0]++;
    cov_2g9vyalfml().s[9]++;
    throw new Error('account is invalid');
  } else {
    cov_2g9vyalfml().b[3][1]++;
  }
  var asset;
  cov_2g9vyalfml().s[10]++;
  if (opts.asset instanceof _asset__WEBPACK_IMPORTED_MODULE_4__.Asset) {
    cov_2g9vyalfml().b[4][0]++;
    cov_2g9vyalfml().s[11]++;
    asset = opts.asset.toTrustLineXDRObject();
  } else {
    cov_2g9vyalfml().b[4][1]++;
    cov_2g9vyalfml().s[12]++;
    if (opts.asset instanceof _liquidity_pool_id__WEBPACK_IMPORTED_MODULE_5__.LiquidityPoolId) {
      cov_2g9vyalfml().b[5][0]++;
      cov_2g9vyalfml().s[13]++;
      asset = opts.asset.toXDRObject();
    } else {
      cov_2g9vyalfml().b[5][1]++;
      cov_2g9vyalfml().s[14]++;
      throw new TypeError('asset must be an Asset or LiquidityPoolId');
    }
  }
  var ledgerKey = (cov_2g9vyalfml().s[15]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.trustline(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyTrustLine({
    accountId: _keypair__WEBPACK_IMPORTED_MODULE_3__.Keypair.fromPublicKey(opts.account).xdrAccountId(),
    asset: asset
  })));
  var op = (cov_2g9vyalfml().s[16]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[17]++, {});
  cov_2g9vyalfml().s[18]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[19]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[20]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Create a "revoke sponsorship" operation for an offer.
 *
 * @function
 * @alias Operation.revokeOfferSponsorship
 * @param {object} opts Options object
 * @param {string} opts.seller - The account ID which created the offer.
 * @param {string} opts.offerId - The offer ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeOfferSponsorship({
 *   seller: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   offerId: '1234'
 * });
 *
 */
function revokeOfferSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[6][0]++, {});
  cov_2g9vyalfml().f[2]++;
  cov_2g9vyalfml().s[21]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.seller)) {
    cov_2g9vyalfml().b[7][0]++;
    cov_2g9vyalfml().s[22]++;
    throw new Error('seller is invalid');
  } else {
    cov_2g9vyalfml().b[7][1]++;
  }
  cov_2g9vyalfml().s[23]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.offerId)) {
    cov_2g9vyalfml().b[8][0]++;
    cov_2g9vyalfml().s[24]++;
    throw new Error('offerId is invalid');
  } else {
    cov_2g9vyalfml().b[8][1]++;
  }
  var ledgerKey = (cov_2g9vyalfml().s[25]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.offer(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyOffer({
    sellerId: _keypair__WEBPACK_IMPORTED_MODULE_3__.Keypair.fromPublicKey(opts.seller).xdrAccountId(),
    offerId: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Int64.fromString(opts.offerId)
  })));
  var op = (cov_2g9vyalfml().s[26]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[27]++, {});
  cov_2g9vyalfml().s[28]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[29]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[30]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Create a "revoke sponsorship" operation for a data entry.
 *
 * @function
 * @alias Operation.revokeDataSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID which owns the data entry.
 * @param {string} opts.name - The name of the data entry
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeDataSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   name: 'foo'
 * });
 *
 */
function revokeDataSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[9][0]++, {});
  cov_2g9vyalfml().f[3]++;
  cov_2g9vyalfml().s[31]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.account)) {
    cov_2g9vyalfml().b[10][0]++;
    cov_2g9vyalfml().s[32]++;
    throw new Error('account is invalid');
  } else {
    cov_2g9vyalfml().b[10][1]++;
  }
  cov_2g9vyalfml().s[33]++;
  if ((cov_2g9vyalfml().b[12][0]++, !lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.name)) || (cov_2g9vyalfml().b[12][1]++, opts.name.length > 64)) {
    cov_2g9vyalfml().b[11][0]++;
    cov_2g9vyalfml().s[34]++;
    throw new Error('name must be a string, up to 64 characters');
  } else {
    cov_2g9vyalfml().b[11][1]++;
  }
  var ledgerKey = (cov_2g9vyalfml().s[35]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.data(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyData({
    accountId: _keypair__WEBPACK_IMPORTED_MODULE_3__.Keypair.fromPublicKey(opts.account).xdrAccountId(),
    dataName: opts.name
  })));
  var op = (cov_2g9vyalfml().s[36]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[37]++, {});
  cov_2g9vyalfml().s[38]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[39]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[40]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Create a "revoke sponsorship" operation for a claimable balance.
 *
 * @function
 * @alias Operation.revokeClaimableBalanceSponsorship
 * @param {object} opts Options object
 * @param {string} opts.balanceId - The sponsored claimable balance ID.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeClaimableBalanceSponsorship({
 *   balanceId: '00000000da0d57da7d4850e7fc10d2a9d0ebc731f7afb40574c03395b17d49149b91f5be',
 * });
 *
 */
function revokeClaimableBalanceSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[13][0]++, {});
  cov_2g9vyalfml().f[4]++;
  cov_2g9vyalfml().s[41]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.balanceId)) {
    cov_2g9vyalfml().b[14][0]++;
    cov_2g9vyalfml().s[42]++;
    throw new Error('balanceId is invalid');
  } else {
    cov_2g9vyalfml().b[14][1]++;
  }
  var ledgerKey = (cov_2g9vyalfml().s[43]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.claimableBalance(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyClaimableBalance({
    balanceId: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].ClaimableBalanceId.fromXDR(opts.balanceId, 'hex')
  })));
  var op = (cov_2g9vyalfml().s[44]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[45]++, {});
  cov_2g9vyalfml().s[46]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[47]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[48]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Creates a "revoke sponsorship" operation for a liquidity pool.
 *
 * @function
 * @alias Operation.revokeLiquidityPoolSponsorship
 * @param {object} opts – Options object.
 * @param {string} opts.liquidityPoolId - The sponsored liquidity pool ID in 'hex' string.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr Operation.
 *
 * @example
 * const op = Operation.revokeLiquidityPoolSponsorship({
 *   liquidityPoolId: 'dd7b1ab831c273310ddbec6f97870aa83c2fbd78ce22aded37ecbf4f3380fac7',
 * });
 *
 */
function revokeLiquidityPoolSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[15][0]++, {});
  cov_2g9vyalfml().f[5]++;
  cov_2g9vyalfml().s[49]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.liquidityPoolId)) {
    cov_2g9vyalfml().b[16][0]++;
    cov_2g9vyalfml().s[50]++;
    throw new Error('liquidityPoolId is invalid');
  } else {
    cov_2g9vyalfml().b[16][1]++;
  }
  var ledgerKey = (cov_2g9vyalfml().s[51]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKey.liquidityPool(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].LedgerKeyLiquidityPool({
    liquidityPoolId: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PoolId.fromXDR(opts.liquidityPoolId, 'hex')
  })));
  var op = (cov_2g9vyalfml().s[52]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipLedgerEntry(ledgerKey));
  var opAttributes = (cov_2g9vyalfml().s[53]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op)
  });
  cov_2g9vyalfml().s[54]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[55]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/**
 * Create a "revoke sponsorship" operation for a signer.
 *
 * @function
 * @alias Operation.revokeSignerSponsorship
 * @param {object} opts Options object
 * @param {string} opts.account - The account ID where the signer sponsorship is being removed from.
 * @param {object} opts.signer - The signer whose sponsorship is being removed.
 * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.
 * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string).
 * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction.
 * @param {string} [opts.source] - The source account for the operation. Defaults to the transaction's source account.
 * @returns {xdr.Operation} xdr operation
 *
 * @example
 * const op = Operation.revokeSignerSponsorship({
 *   account: 'GDGU5OAPHNPU5UCLE5RDJHG7PXZFQYWKCFOEXSXNMR6KRQRI5T6XXCD7
 *   signer: {
 *     ed25519PublicKey: 'GCEZWKCA5VLDNRLN3RPRJMRZOX3Z6G5CHCGSNFHEYVXM3XOJMDS674JZ'
 *   }
 * })
 *
 */
function revokeSignerSponsorship() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2g9vyalfml().b[17][0]++, {});
  cov_2g9vyalfml().f[6]++;
  cov_2g9vyalfml().s[56]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.account)) {
    cov_2g9vyalfml().b[18][0]++;
    cov_2g9vyalfml().s[57]++;
    throw new Error('account is invalid');
  } else {
    cov_2g9vyalfml().b[18][1]++;
  }
  var key;
  cov_2g9vyalfml().s[58]++;
  if (opts.signer.ed25519PublicKey) {
    cov_2g9vyalfml().b[19][0]++;
    cov_2g9vyalfml().s[59]++;
    if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {
      cov_2g9vyalfml().b[20][0]++;
      cov_2g9vyalfml().s[60]++;
      throw new Error('signer.ed25519PublicKey is invalid.');
    } else {
      cov_2g9vyalfml().b[20][1]++;
    }
    var rawKey = (cov_2g9vyalfml().s[61]++, _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey));
    cov_2g9vyalfml().s[62]++;
    key = new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].SignerKey.signerKeyTypeEd25519(rawKey);
  } else {
    cov_2g9vyalfml().b[19][1]++;
    cov_2g9vyalfml().s[63]++;
    if (opts.signer.preAuthTx) {
      cov_2g9vyalfml().b[21][0]++;
      var buffer;
      cov_2g9vyalfml().s[64]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.signer.preAuthTx)) {
        cov_2g9vyalfml().b[22][0]++;
        cov_2g9vyalfml().s[65]++;
        buffer = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(opts.signer.preAuthTx, 'hex');
      } else {
        cov_2g9vyalfml().b[22][1]++;
        cov_2g9vyalfml().s[66]++;
        buffer = opts.signer.preAuthTx;
      }
      cov_2g9vyalfml().s[67]++;
      if (!((cov_2g9vyalfml().b[24][0]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].isBuffer(buffer)) && (cov_2g9vyalfml().b[24][1]++, buffer.length === 32))) {
        cov_2g9vyalfml().b[23][0]++;
        cov_2g9vyalfml().s[68]++;
        throw new Error('signer.preAuthTx must be 32 bytes BrowserBuffer.');
      } else {
        cov_2g9vyalfml().b[23][1]++;
      }
      cov_2g9vyalfml().s[69]++;
      key = new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].SignerKey.signerKeyTypePreAuthTx(buffer);
    } else {
      cov_2g9vyalfml().b[21][1]++;
      cov_2g9vyalfml().s[70]++;
      if (opts.signer.sha256Hash) {
        cov_2g9vyalfml().b[25][0]++;
        var _buffer;
        cov_2g9vyalfml().s[71]++;
        if (lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(opts.signer.sha256Hash)) {
          cov_2g9vyalfml().b[26][0]++;
          cov_2g9vyalfml().s[72]++;
          _buffer = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(opts.signer.sha256Hash, 'hex');
        } else {
          cov_2g9vyalfml().b[26][1]++;
          cov_2g9vyalfml().s[73]++;
          _buffer = opts.signer.sha256Hash;
        }
        cov_2g9vyalfml().s[74]++;
        if (!((cov_2g9vyalfml().b[28][0]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].isBuffer(_buffer)) && (cov_2g9vyalfml().b[28][1]++, _buffer.length === 32))) {
          cov_2g9vyalfml().b[27][0]++;
          cov_2g9vyalfml().s[75]++;
          throw new Error('signer.sha256Hash must be 32 bytes BrowserBuffer.');
        } else {
          cov_2g9vyalfml().b[27][1]++;
        }
        cov_2g9vyalfml().s[76]++;
        key = new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].SignerKey.signerKeyTypeHashX(_buffer);
      } else {
        cov_2g9vyalfml().b[25][1]++;
        cov_2g9vyalfml().s[77]++;
        throw new Error('signer is invalid');
      }
    }
  }
  var signer = (cov_2g9vyalfml().s[78]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOpSigner({
    accountId: _keypair__WEBPACK_IMPORTED_MODULE_3__.Keypair.fromPublicKey(opts.account).xdrAccountId(),
    signerKey: key
  }));
  var op = (cov_2g9vyalfml().s[79]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].RevokeSponsorshipOp.revokeSponsorshipSigner(signer));
  var opAttributes = (cov_2g9vyalfml().s[80]++, {});
  cov_2g9vyalfml().s[81]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].OperationBody.revokeSponsorship(op);
  cov_2g9vyalfml().s[82]++;
  this.setSourceAccount(opAttributes, opts);
  cov_2g9vyalfml().s[83]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/set_options.js":
/*!***************************************!*\
  !*** ./src/operations/set_options.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setOptions": () => (/* binding */ setOptions)
/* harmony export */ });
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
function cov_dkdc7d38o() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\set_options.js";
  var hash = "cf509673bc6d21b554dd0c84c5bf5ac86f5565e2";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\set_options.js",
    statementMap: {
      "0": {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "1": {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 16
        }
      },
      "2": {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 61
        }
      },
      "3": {
        start: {
          line: 54,
          column: 21
        },
        end: {
          line: 54,
          column: 23
        }
      },
      "4": {
        start: {
          line: 56,
          column: 2
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "5": {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 59,
          column: 5
        }
      },
      "6": {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 58,
          column: 50
        }
      },
      "7": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 62,
          column: 21
        }
      },
      "8": {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 68,
          column: 4
        }
      },
      "9": {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 69,
          column: 79
        }
      },
      "10": {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 74,
          column: 4
        }
      },
      "11": {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 79,
          column: 4
        }
      },
      "12": {
        start: {
          line: 80,
          column: 2
        },
        end: {
          line: 84,
          column: 4
        }
      },
      "13": {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 89,
          column: 4
        }
      },
      "14": {
        start: {
          line: 91,
          column: 2
        },
        end: {
          line: 93,
          column: 3
        }
      },
      "15": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 70
        }
      },
      "16": {
        start: {
          line: 94,
          column: 2
        },
        end: {
          line: 94,
          column: 42
        }
      },
      "17": {
        start: {
          line: 96,
          column: 2
        },
        end: {
          line: 179,
          column: 3
        }
      },
      "18": {
        start: {
          line: 97,
          column: 19
        },
        end: {
          line: 101,
          column: 5
        }
      },
      "19": {
        start: {
          line: 104,
          column: 20
        },
        end: {
          line: 104,
          column: 21
        }
      },
      "20": {
        start: {
          line: 106,
          column: 4
        },
        end: {
          line: 117,
          column: 5
        }
      },
      "21": {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 109,
          column: 7
        }
      },
      "22": {
        start: {
          line: 108,
          column: 8
        },
        end: {
          line: 108,
          column: 63
        }
      },
      "23": {
        start: {
          line: 110,
          column: 21
        },
        end: {
          line: 112,
          column: 7
        }
      },
      "24": {
        start: {
          line: 115,
          column: 6
        },
        end: {
          line: 115,
          column: 59
        }
      },
      "25": {
        start: {
          line: 116,
          column: 6
        },
        end: {
          line: 116,
          column: 21
        }
      },
      "26": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 136,
          column: 5
        }
      },
      "27": {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 122,
          column: 7
        }
      },
      "28": {
        start: {
          line: 121,
          column: 8
        },
        end: {
          line: 121,
          column: 81
        }
      },
      "29": {
        start: {
          line: 124,
          column: 6
        },
        end: {
          line: 131,
          column: 7
        }
      },
      "30": {
        start: {
          line: 130,
          column: 8
        },
        end: {
          line: 130,
          column: 76
        }
      },
      "31": {
        start: {
          line: 134,
          column: 6
        },
        end: {
          line: 134,
          column: 76
        }
      },
      "32": {
        start: {
          line: 135,
          column: 6
        },
        end: {
          line: 135,
          column: 21
        }
      },
      "33": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 155,
          column: 5
        }
      },
      "34": {
        start: {
          line: 139,
          column: 6
        },
        end: {
          line: 141,
          column: 7
        }
      },
      "35": {
        start: {
          line: 140,
          column: 8
        },
        end: {
          line: 140,
          column: 83
        }
      },
      "36": {
        start: {
          line: 143,
          column: 6
        },
        end: {
          line: 150,
          column: 7
        }
      },
      "37": {
        start: {
          line: 149,
          column: 8
        },
        end: {
          line: 149,
          column: 77
        }
      },
      "38": {
        start: {
          line: 153,
          column: 6
        },
        end: {
          line: 153,
          column: 73
        }
      },
      "39": {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 154,
          column: 21
        }
      },
      "40": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 170,
          column: 5
        }
      },
      "41": {
        start: {
          line: 158,
          column: 6
        },
        end: {
          line: 160,
          column: 7
        }
      },
      "42": {
        start: {
          line: 159,
          column: 8
        },
        end: {
          line: 159,
          column: 67
        }
      },
      "43": {
        start: {
          line: 161,
          column: 21
        },
        end: {
          line: 163,
          column: 7
        }
      },
      "44": {
        start: {
          line: 165,
          column: 8
        },
        end: {
          line: 165,
          column: 57
        }
      },
      "45": {
        start: {
          line: 168,
          column: 6
        },
        end: {
          line: 168,
          column: 78
        }
      },
      "46": {
        start: {
          line: 169,
          column: 6
        },
        end: {
          line: 169,
          column: 21
        }
      },
      "47": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 176,
          column: 5
        }
      },
      "48": {
        start: {
          line: 173,
          column: 6
        },
        end: {
          line: 175,
          column: 8
        }
      },
      "49": {
        start: {
          line: 178,
          column: 4
        },
        end: {
          line: 178,
          column: 56
        }
      },
      "50": {
        start: {
          line: 181,
          column: 23
        },
        end: {
          line: 181,
          column: 55
        }
      },
      "51": {
        start: {
          line: 183,
          column: 23
        },
        end: {
          line: 183,
          column: 25
        }
      },
      "52": {
        start: {
          line: 184,
          column: 2
        },
        end: {
          line: 184,
          column: 65
        }
      },
      "53": {
        start: {
          line: 185,
          column: 2
        },
        end: {
          line: 185,
          column: 44
        }
      },
      "54": {
        start: {
          line: 187,
          column: 2
        },
        end: {
          line: 187,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "weightCheckFunction",
        decl: {
          start: {
            line: 11,
            column: 9
          },
          end: {
            line: 11,
            column: 28
          }
        },
        loc: {
          start: {
            line: 11,
            column: 42
          },
          end: {
            line: 16,
            column: 1
          }
        },
        line: 11
      },
      "1": {
        name: "setOptions",
        decl: {
          start: {
            line: 53,
            column: 16
          },
          end: {
            line: 53,
            column: 26
          }
        },
        loc: {
          start: {
            line: 53,
            column: 33
          },
          end: {
            line: 188,
            column: 1
          }
        },
        line: 53
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 12
      },
      "1": {
        loc: {
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 32
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 16
          }
        }, {
          start: {
            line: 12,
            column: 20
          },
          end: {
            line: 12,
            column: 32
          }
        }],
        line: 12
      },
      "2": {
        loc: {
          start: {
            line: 56,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 56,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 56
      },
      "3": {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 59,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 57
      },
      "4": {
        loc: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 93,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 93,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 91
      },
      "5": {
        loc: {
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 91,
            column: 65
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 91,
            column: 6
          },
          end: {
            line: 91,
            column: 35
          }
        }, {
          start: {
            line: 91,
            column: 39
          },
          end: {
            line: 91,
            column: 65
          }
        }],
        line: 91
      },
      "6": {
        loc: {
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 179,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 179,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 96
      },
      "7": {
        loc: {
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 106,
            column: 4
          },
          end: {
            line: 117,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 106
      },
      "8": {
        loc: {
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 107,
            column: 6
          },
          end: {
            line: 109,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 107
      },
      "9": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 136,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "10": {
        loc: {
          start: {
            line: 120,
            column: 6
          },
          end: {
            line: 122,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 6
          },
          end: {
            line: 122,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "11": {
        loc: {
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 131,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 124,
            column: 6
          },
          end: {
            line: 131,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 124
      },
      "12": {
        loc: {
          start: {
            line: 126,
            column: 10
          },
          end: {
            line: 127,
            column: 45
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 126,
            column: 10
          },
          end: {
            line: 126,
            column: 55
          }
        }, {
          start: {
            line: 127,
            column: 10
          },
          end: {
            line: 127,
            column: 45
          }
        }],
        line: 126
      },
      "13": {
        loc: {
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 138,
            column: 4
          },
          end: {
            line: 155,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 138
      },
      "14": {
        loc: {
          start: {
            line: 139,
            column: 6
          },
          end: {
            line: 141,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 139,
            column: 6
          },
          end: {
            line: 141,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 139
      },
      "15": {
        loc: {
          start: {
            line: 143,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 143,
            column: 6
          },
          end: {
            line: 150,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 143
      },
      "16": {
        loc: {
          start: {
            line: 145,
            column: 10
          },
          end: {
            line: 146,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 145,
            column: 10
          },
          end: {
            line: 145,
            column: 56
          }
        }, {
          start: {
            line: 146,
            column: 10
          },
          end: {
            line: 146,
            column: 46
          }
        }],
        line: 145
      },
      "17": {
        loc: {
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 157,
            column: 4
          },
          end: {
            line: 170,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 157
      },
      "18": {
        loc: {
          start: {
            line: 158,
            column: 6
          },
          end: {
            line: 160,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 158,
            column: 6
          },
          end: {
            line: 160,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 158
      },
      "19": {
        loc: {
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 172,
            column: 4
          },
          end: {
            line: 176,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 172
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cf509673bc6d21b554dd0c84c5bf5ac86f5565e2"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_dkdc7d38o = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_dkdc7d38o();
/* eslint-disable no-param-reassign */







function weightCheckFunction(value, name) {
  cov_dkdc7d38o().f[0]++;
  cov_dkdc7d38o().s[0]++;
  if ((cov_dkdc7d38o().b[1][0]++, value >= 0) && (cov_dkdc7d38o().b[1][1]++, value <= 255)) {
    cov_dkdc7d38o().b[0][0]++;
    cov_dkdc7d38o().s[1]++;
    return true;
  } else {
    cov_dkdc7d38o().b[0][1]++;
  }
  cov_dkdc7d38o().s[2]++;
  throw new Error("".concat(name, " value must be between 0 and 255"));
}

/**
 * Returns an XDR SetOptionsOp. A "set options" operations set or clear account flags,
 * set the account's inflation destination, and/or add new signers to the account.
 * The flags used in `opts.clearFlags` and `opts.setFlags` can be the following:
 *   - `{@link AuthRequiredFlag}`
 *   - `{@link AuthRevocableFlag}`
 *   - `{@link AuthImmutableFlag}`
 *   - `{@link AuthClawbackEnabledFlag}`
 *
 * It's possible to set/clear multiple flags at once using logical or.
 *
 * @function
 * @alias Operation.setOptions
 *
 * @param {object} opts Options object
 * @param {string} [opts.inflationDest] - Set this account ID as the account's inflation destination.
 * @param {(number|string)} [opts.clearFlags] - Bitmap integer for which account flags to clear.
 * @param {(number|string)} [opts.setFlags] - Bitmap integer for which account flags to set.
 * @param {number|string} [opts.masterWeight] - The master key weight.
 * @param {number|string} [opts.lowThreshold] - The sum weight for the low threshold.
 * @param {number|string} [opts.medThreshold] - The sum weight for the medium threshold.
 * @param {number|string} [opts.highThreshold] - The sum weight for the high threshold.
 * @param {object} [opts.signer] - Add or remove a signer from the account. The signer is
 *                                 deleted if the weight is 0. Only one of `ed25519PublicKey`, `sha256Hash`, `preAuthTx` should be defined.
 * @param {string} [opts.signer.ed25519PublicKey] - The ed25519 public key of the signer.
 * @param {Buffer|string} [opts.signer.sha256Hash] - sha256 hash (Buffer or hex string) of preimage that will unlock funds. Preimage should be used as signature of future transaction.
 * @param {Buffer|string} [opts.signer.preAuthTx] - Hash (Buffer or hex string) of transaction that will unlock funds.
 * @param {string} [opts.signer.ed25519SignedPayload] - Signed payload signer (ed25519 public key + raw payload) for atomic transaction signature disclosure.
 * @param {number|string} [opts.signer.weight] - The weight of the new signer (0 to delete or 1-255)
 * @param {string} [opts.homeDomain] - sets the home domain used for reverse federation lookup.
 * @param {string} [opts.source] - The source account (defaults to transaction source).
 *
 * @returns {xdr.SetOptionsOp}  XDR operation
 * @see [Account flags](https://developers.stellar.org/docs/glossary/accounts/#flags)
 */
function setOptions(opts) {
  cov_dkdc7d38o().f[1]++;
  var attributes = (cov_dkdc7d38o().s[3]++, {});
  cov_dkdc7d38o().s[4]++;
  if (opts.inflationDest) {
    cov_dkdc7d38o().b[2][0]++;
    cov_dkdc7d38o().s[5]++;
    if (!_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidEd25519PublicKey(opts.inflationDest)) {
      cov_dkdc7d38o().b[3][0]++;
      cov_dkdc7d38o().s[6]++;
      throw new Error('inflationDest is invalid');
    } else {
      cov_dkdc7d38o().b[3][1]++;
    }
    cov_dkdc7d38o().s[7]++;
    attributes.inflationDest = _keypair__WEBPACK_IMPORTED_MODULE_4__.Keypair.fromPublicKey(opts.inflationDest).xdrAccountId();
  } else {
    cov_dkdc7d38o().b[2][1]++;
  }
  cov_dkdc7d38o().s[8]++;
  attributes.clearFlags = this._checkUnsignedIntValue('clearFlags', opts.clearFlags);
  cov_dkdc7d38o().s[9]++;
  attributes.setFlags = this._checkUnsignedIntValue('setFlags', opts.setFlags);
  cov_dkdc7d38o().s[10]++;
  attributes.masterWeight = this._checkUnsignedIntValue('masterWeight', opts.masterWeight, weightCheckFunction);
  cov_dkdc7d38o().s[11]++;
  attributes.lowThreshold = this._checkUnsignedIntValue('lowThreshold', opts.lowThreshold, weightCheckFunction);
  cov_dkdc7d38o().s[12]++;
  attributes.medThreshold = this._checkUnsignedIntValue('medThreshold', opts.medThreshold, weightCheckFunction);
  cov_dkdc7d38o().s[13]++;
  attributes.highThreshold = this._checkUnsignedIntValue('highThreshold', opts.highThreshold, weightCheckFunction);
  cov_dkdc7d38o().s[14]++;
  if ((cov_dkdc7d38o().b[5][0]++, !lodash_isUndefined__WEBPACK_IMPORTED_MODULE_0___default()(opts.homeDomain)) && (cov_dkdc7d38o().b[5][1]++, !lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(opts.homeDomain))) {
    cov_dkdc7d38o().b[4][0]++;
    cov_dkdc7d38o().s[15]++;
    throw new TypeError('homeDomain argument must be of type String');
  } else {
    cov_dkdc7d38o().b[4][1]++;
  }
  cov_dkdc7d38o().s[16]++;
  attributes.homeDomain = opts.homeDomain;
  cov_dkdc7d38o().s[17]++;
  if (opts.signer) {
    cov_dkdc7d38o().b[6][0]++;
    var weight = (cov_dkdc7d38o().s[18]++, this._checkUnsignedIntValue('signer.weight', opts.signer.weight, weightCheckFunction));
    var key;
    var setValues = (cov_dkdc7d38o().s[19]++, 0);
    cov_dkdc7d38o().s[20]++;
    if (opts.signer.ed25519PublicKey) {
      cov_dkdc7d38o().b[7][0]++;
      cov_dkdc7d38o().s[21]++;
      if (!_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidEd25519PublicKey(opts.signer.ed25519PublicKey)) {
        cov_dkdc7d38o().b[8][0]++;
        cov_dkdc7d38o().s[22]++;
        throw new Error('signer.ed25519PublicKey is invalid.');
      } else {
        cov_dkdc7d38o().b[8][1]++;
      }
      var rawKey = (cov_dkdc7d38o().s[23]++, _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.decodeEd25519PublicKey(opts.signer.ed25519PublicKey));

      // eslint-disable-next-line new-cap
      cov_dkdc7d38o().s[24]++;
      key = new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SignerKey.signerKeyTypeEd25519(rawKey);
      cov_dkdc7d38o().s[25]++;
      setValues += 1;
    } else {
      cov_dkdc7d38o().b[7][1]++;
    }
    cov_dkdc7d38o().s[26]++;
    if (opts.signer.preAuthTx) {
      cov_dkdc7d38o().b[9][0]++;
      cov_dkdc7d38o().s[27]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(opts.signer.preAuthTx)) {
        cov_dkdc7d38o().b[10][0]++;
        cov_dkdc7d38o().s[28]++;
        opts.signer.preAuthTx = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].from(opts.signer.preAuthTx, 'hex');
      } else {
        cov_dkdc7d38o().b[10][1]++;
      }
      cov_dkdc7d38o().s[29]++;
      if (!((cov_dkdc7d38o().b[12][0]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(opts.signer.preAuthTx)) && (cov_dkdc7d38o().b[12][1]++, opts.signer.preAuthTx.length === 32))) {
        cov_dkdc7d38o().b[11][0]++;
        cov_dkdc7d38o().s[30]++;
        throw new Error('signer.preAuthTx must be 32 bytes BrowserBuffer.');
      } else {
        cov_dkdc7d38o().b[11][1]++;
      }

      // eslint-disable-next-line new-cap
      cov_dkdc7d38o().s[31]++;
      key = new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SignerKey.signerKeyTypePreAuthTx(opts.signer.preAuthTx);
      cov_dkdc7d38o().s[32]++;
      setValues += 1;
    } else {
      cov_dkdc7d38o().b[9][1]++;
    }
    cov_dkdc7d38o().s[33]++;
    if (opts.signer.sha256Hash) {
      cov_dkdc7d38o().b[13][0]++;
      cov_dkdc7d38o().s[34]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_1___default()(opts.signer.sha256Hash)) {
        cov_dkdc7d38o().b[14][0]++;
        cov_dkdc7d38o().s[35]++;
        opts.signer.sha256Hash = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].from(opts.signer.sha256Hash, 'hex');
      } else {
        cov_dkdc7d38o().b[14][1]++;
      }
      cov_dkdc7d38o().s[36]++;
      if (!((cov_dkdc7d38o().b[16][0]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_2__["default"].isBuffer(opts.signer.sha256Hash)) && (cov_dkdc7d38o().b[16][1]++, opts.signer.sha256Hash.length === 32))) {
        cov_dkdc7d38o().b[15][0]++;
        cov_dkdc7d38o().s[37]++;
        throw new Error('signer.sha256Hash must be 32 bytes BrowserBuffer.');
      } else {
        cov_dkdc7d38o().b[15][1]++;
      }

      // eslint-disable-next-line new-cap
      cov_dkdc7d38o().s[38]++;
      key = new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SignerKey.signerKeyTypeHashX(opts.signer.sha256Hash);
      cov_dkdc7d38o().s[39]++;
      setValues += 1;
    } else {
      cov_dkdc7d38o().b[13][1]++;
    }
    cov_dkdc7d38o().s[40]++;
    if (opts.signer.ed25519SignedPayload) {
      cov_dkdc7d38o().b[17][0]++;
      cov_dkdc7d38o().s[41]++;
      if (!_strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.isValidSignedPayload(opts.signer.ed25519SignedPayload)) {
        cov_dkdc7d38o().b[18][0]++;
        cov_dkdc7d38o().s[42]++;
        throw new Error('signer.ed25519SignedPayload is invalid.');
      } else {
        cov_dkdc7d38o().b[18][1]++;
      }
      var _rawKey = (cov_dkdc7d38o().s[43]++, _strkey__WEBPACK_IMPORTED_MODULE_5__.StrKey.decodeSignedPayload(opts.signer.ed25519SignedPayload));
      var signedPayloadXdr = (cov_dkdc7d38o().s[44]++, _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SignerKeyEd25519SignedPayload.fromXDR(_rawKey));

      // eslint-disable-next-line new-cap
      cov_dkdc7d38o().s[45]++;
      key = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SignerKey.signerKeyTypeEd25519SignedPayload(signedPayloadXdr);
      cov_dkdc7d38o().s[46]++;
      setValues += 1;
    } else {
      cov_dkdc7d38o().b[17][1]++;
    }
    cov_dkdc7d38o().s[47]++;
    if (setValues !== 1) {
      cov_dkdc7d38o().b[19][0]++;
      cov_dkdc7d38o().s[48]++;
      throw new Error('Signer object must contain exactly one of signer.ed25519PublicKey, signer.sha256Hash, signer.preAuthTx.');
    } else {
      cov_dkdc7d38o().b[19][1]++;
    }
    cov_dkdc7d38o().s[49]++;
    attributes.signer = new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Signer({
      key: key,
      weight: weight
    });
  } else {
    cov_dkdc7d38o().b[6][1]++;
  }
  var setOptionsOp = (cov_dkdc7d38o().s[50]++, new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].SetOptionsOp(attributes));
  var opAttributes = (cov_dkdc7d38o().s[51]++, {});
  cov_dkdc7d38o().s[52]++;
  opAttributes.body = _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].OperationBody.setOptions(setOptionsOp);
  cov_dkdc7d38o().s[53]++;
  this.setSourceAccount(opAttributes, opts);
  cov_dkdc7d38o().s[54]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_3__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/operations/set_trustline_flags.js":
/*!***********************************************!*\
  !*** ./src/operations/set_trustline_flags.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "setTrustLineFlags": () => (/* binding */ setTrustLineFlags)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../keypair */ "./src/keypair.js");
function cov_1pd4gw8hy7() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\operations\\set_trustline_flags.js";
  var hash = "872cae68ea434140f8f76f16c77e2831e9d1e5ec";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\operations\\set_trustline_flags.js",
    statementMap: {
      "0": {
        start: {
          line: 42,
          column: 21
        },
        end: {
          line: 42,
          column: 23
        }
      },
      "1": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "2": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 75
        }
      },
      "3": {
        start: {
          line: 48,
          column: 18
        },
        end: {
          line: 53,
          column: 3
        }
      },
      "4": {
        start: {
          line: 56,
          column: 18
        },
        end: {
          line: 56,
          column: 19
        }
      },
      "5": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 17
        }
      },
      "6": {
        start: {
          line: 59,
          column: 2
        },
        end: {
          line: 71,
          column: 5
        }
      },
      "7": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 62,
          column: 5
        }
      },
      "8": {
        start: {
          line: 61,
          column: 6
        },
        end: {
          line: 61,
          column: 70
        }
      },
      "9": {
        start: {
          line: 64,
          column: 22
        },
        end: {
          line: 64,
          column: 42
        }
      },
      "10": {
        start: {
          line: 65,
          column: 16
        },
        end: {
          line: 65,
          column: 39
        }
      },
      "11": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "12": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 67,
          column: 21
        }
      },
      "13": {
        start: {
          line: 68,
          column: 11
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "14": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 23
        }
      },
      "15": {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 73,
          column: 74
        }
      },
      "16": {
        start: {
          line: 74,
          column: 2
        },
        end: {
          line: 74,
          column: 46
        }
      },
      "17": {
        start: {
          line: 75,
          column: 2
        },
        end: {
          line: 75,
          column: 36
        }
      },
      "18": {
        start: {
          line: 76,
          column: 2
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "19": {
        start: {
          line: 78,
          column: 23
        },
        end: {
          line: 82,
          column: 3
        }
      },
      "20": {
        start: {
          line: 83,
          column: 2
        },
        end: {
          line: 83,
          column: 44
        }
      },
      "21": {
        start: {
          line: 85,
          column: 2
        },
        end: {
          line: 85,
          column: 41
        }
      }
    },
    fnMap: {
      "0": {
        name: "setTrustLineFlags",
        decl: {
          start: {
            line: 41,
            column: 16
          },
          end: {
            line: 41,
            column: 33
          }
        },
        loc: {
          start: {
            line: 41,
            column: 45
          },
          end: {
            line: 86,
            column: 1
          }
        },
        line: 41
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 59,
            column: 34
          },
          end: {
            line: 59,
            column: 35
          }
        },
        loc: {
          start: {
            line: 59,
            column: 48
          },
          end: {
            line: 71,
            column: 3
          }
        },
        line: 59
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 41,
            column: 34
          },
          end: {
            line: 41,
            column: 43
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 41,
            column: 41
          },
          end: {
            line: 41,
            column: 43
          }
        }],
        line: 41
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 44,
            column: 76
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 44,
            column: 36
          }
        }, {
          start: {
            line: 44,
            column: 40
          },
          end: {
            line: 44,
            column: 76
          }
        }],
        line: 44
      },
      "3": {
        loc: {
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 60,
            column: 4
          },
          end: {
            line: 62,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 60
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 11
          },
          end: {
            line: 70,
            column: 5
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 68,
            column: 11
          },
          end: {
            line: 70,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 68,
            column: 11
          },
          end: {
            line: 70,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 68
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "872cae68ea434140f8f76f16c77e2831e9d1e5ec"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1pd4gw8hy7 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1pd4gw8hy7();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }



/**
 * Creates a trustline flag configuring operation.
 *
 * For the flags, set them to true to enable them and false to disable them. Any
 * unmodified operations will be marked `undefined` in the result.
 *
 * Note that you can only **clear** the clawbackEnabled flag set; it must be set
 * account-wide via operations.SetOptions (setting
 * xdr.AccountFlags.clawbackEnabled).
 *
 * @function
 * @alias Operation.setTrustLineFlags
 *
 * @param {object} opts - Options object
 * @param {string} opts.trustor     - the account whose trustline this is
 * @param {Asset}  opts.asset       - the asset on the trustline
 * @param {object} opts.flags       - the set of flags to modify
 *
 * @param {bool}   [opts.flags.authorized]  - authorize account to perform
 *     transactions with its credit
 * @param {bool}   [opts.flags.authorizedToMaintainLiabilities] - authorize
 *     account to maintain and reduce liabilities for its credit
 * @param {bool}   [opts.flags.clawbackEnabled] - stop claimable balances on
 *     this trustlines from having clawbacks enabled (this flag can only be set
 *     to false!)
 * @param {string} [opts.source] - The source account for the operation.
 *                                 Defaults to the transaction's source account.
 *
 * @note You must include at least one flag.
 *
 * @return {xdr.SetTrustLineFlagsOp}
 *
 * @link xdr.AccountFlags
 * @link xdr.TrustLineFlags
 * @see https://github.com/stellar/stellar-protocol/blob/master/core/cap-0035.md#set-trustline-flags-operation
 * @see https://developers.stellar.org/docs/start/list-of-operations/#set-options
 */
function setTrustLineFlags() {
  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_1pd4gw8hy7().b[0][0]++, {});
  cov_1pd4gw8hy7().f[0]++;
  var attributes = (cov_1pd4gw8hy7().s[0]++, {});
  cov_1pd4gw8hy7().s[1]++;
  if ((cov_1pd4gw8hy7().b[2][0]++, _typeof(opts.flags) !== 'object') || (cov_1pd4gw8hy7().b[2][1]++, Object.keys(opts.flags).length === 0)) {
    cov_1pd4gw8hy7().b[1][0]++;
    cov_1pd4gw8hy7().s[2]++;
    throw new Error('opts.flags must be a map of boolean flags to modify');
  } else {
    cov_1pd4gw8hy7().b[1][1]++;
  }
  var mapping = (cov_1pd4gw8hy7().s[3]++, {
    authorized: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TrustLineFlags.authorizedFlag(),
    authorizedToMaintainLiabilities: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TrustLineFlags.authorizedToMaintainLiabilitiesFlag(),
    clawbackEnabled: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].TrustLineFlags.trustlineClawbackEnabledFlag()
  });

  /* eslint no-bitwise: "off" */
  var clearFlag = (cov_1pd4gw8hy7().s[4]++, 0);
  var setFlag = (cov_1pd4gw8hy7().s[5]++, 0);
  cov_1pd4gw8hy7().s[6]++;
  Object.keys(opts.flags).forEach(function (flagName) {
    cov_1pd4gw8hy7().f[1]++;
    cov_1pd4gw8hy7().s[7]++;
    if (!Object.prototype.hasOwnProperty.call(mapping, flagName)) {
      cov_1pd4gw8hy7().b[3][0]++;
      cov_1pd4gw8hy7().s[8]++;
      throw new Error("unsupported flag name specified: ".concat(flagName));
    } else {
      cov_1pd4gw8hy7().b[3][1]++;
    }
    var flagValue = (cov_1pd4gw8hy7().s[9]++, opts.flags[flagName]);
    var bit = (cov_1pd4gw8hy7().s[10]++, mapping[flagName].value);
    cov_1pd4gw8hy7().s[11]++;
    if (flagValue === true) {
      cov_1pd4gw8hy7().b[4][0]++;
      cov_1pd4gw8hy7().s[12]++;
      setFlag |= bit;
    } else {
      cov_1pd4gw8hy7().b[4][1]++;
      cov_1pd4gw8hy7().s[13]++;
      if (flagValue === false) {
        cov_1pd4gw8hy7().b[5][0]++;
        cov_1pd4gw8hy7().s[14]++;
        clearFlag |= bit;
      } else {
        cov_1pd4gw8hy7().b[5][1]++;
      }
    }
  });
  cov_1pd4gw8hy7().s[15]++;
  attributes.trustor = _keypair__WEBPACK_IMPORTED_MODULE_1__.Keypair.fromPublicKey(opts.trustor).xdrAccountId();
  cov_1pd4gw8hy7().s[16]++;
  attributes.asset = opts.asset.toXDRObject();
  cov_1pd4gw8hy7().s[17]++;
  attributes.clearFlags = clearFlag;
  cov_1pd4gw8hy7().s[18]++;
  attributes.setFlags = setFlag;
  var opAttributes = (cov_1pd4gw8hy7().s[19]++, {
    body: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].OperationBody.setTrustLineFlags(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SetTrustLineFlagsOp(attributes))
  });
  cov_1pd4gw8hy7().s[20]++;
  this.setSourceAccount(opAttributes, opts);
  cov_1pd4gw8hy7().s[21]++;
  return new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].Operation(opAttributes);
}

/***/ }),

/***/ "./src/signerkey.js":
/*!**************************!*\
  !*** ./src/signerkey.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SignerKey": () => (/* binding */ SignerKey)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
function cov_1sqbjacexy() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\signerkey.js";
  var hash = "83f82867159a745faff6bcb308a61c750b99a065";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\signerkey.js",
    statementMap: {
      "0": {
        start: {
          line: 24,
          column: 25
        },
        end: {
          line: 29,
          column: 5
        }
      },
      "1": {
        start: {
          line: 31,
          column: 15
        },
        end: {
          line: 31,
          column: 54
        }
      },
      "2": {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 36
        }
      },
      "3": {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 35,
          column: 5
        }
      },
      "4": {
        start: {
          line: 34,
          column: 6
        },
        end: {
          line: 34,
          column: 57
        }
      },
      "5": {
        start: {
          line: 37,
          column: 16
        },
        end: {
          line: 37,
          column: 40
        }
      },
      "6": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 52,
          column: 5
        }
      },
      "7": {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 45,
          column: 10
        }
      },
      "8": {
        start: {
          line: 51,
          column: 8
        },
        end: {
          line: 51,
          column: 28
        }
      },
      "9": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 88,
          column: 5
        }
      },
      "10": {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 40
        }
      },
      "11": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 32
        }
      },
      "12": {
        start: {
          line: 69,
          column: 8
        },
        end: {
          line: 69,
          column: 14
        }
      },
      "13": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 33
        }
      },
      "14": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 32
        }
      },
      "15": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "16": {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 34
        }
      },
      "17": {
        start: {
          line: 78,
          column: 8
        },
        end: {
          line: 78,
          column: 32
        }
      },
      "18": {
        start: {
          line: 79,
          column: 8
        },
        end: {
          line: 79,
          column: 14
        }
      },
      "19": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 37
        }
      },
      "20": {
        start: {
          line: 83,
          column: 8
        },
        end: {
          line: 83,
          column: 60
        }
      },
      "21": {
        start: {
          line: 84,
          column: 8
        },
        end: {
          line: 84,
          column: 14
        }
      },
      "22": {
        start: {
          line: 87,
          column: 8
        },
        end: {
          line: 87,
          column: 75
        }
      },
      "23": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 23,
            column: 2
          },
          end: {
            line: 23,
            column: 3
          }
        },
        loc: {
          start: {
            line: 23,
            column: 32
          },
          end: {
            line: 53,
            column: 3
          }
        },
        line: 23
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 61,
            column: 3
          }
        },
        loc: {
          start: {
            line: 61,
            column: 36
          },
          end: {
            line: 91,
            column: 3
          }
        },
        line: 61
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 35,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 33
      },
      "1": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 52,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 45,
            column: 10
          }
        }, {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 30
          }
        }, {
          start: {
            line: 48,
            column: 6
          },
          end: {
            line: 48,
            column: 23
          }
        }, {
          start: {
            line: 49,
            column: 6
          },
          end: {
            line: 49,
            column: 24
          }
        }, {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 51,
            column: 28
          }
        }],
        line: 38
      },
      "2": {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 88,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 69,
            column: 14
          }
        }, {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 74,
            column: 14
          }
        }, {
          start: {
            line: 76,
            column: 6
          },
          end: {
            line: 79,
            column: 14
          }
        }, {
          start: {
            line: 81,
            column: 6
          },
          end: {
            line: 84,
            column: 14
          }
        }, {
          start: {
            line: 86,
            column: 6
          },
          end: {
            line: 87,
            column: 75
          }
        }],
        line: 65
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0],
      "2": [0, 0, 0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "83f82867159a745faff6bcb308a61c750b99a065"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1sqbjacexy = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1sqbjacexy();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



/**
 * A container class with helpers to convert between signer keys
 * (`xdr.SignerKey`) and {@link StrKey}s.
 *
 * It's primarly used for manipulating the `extraSigners` precondition on a
 * {@link Transaction}.
 *
 * @see {@link TransactionBuilder.setExtraSigners}
 */
var SignerKey = /*#__PURE__*/function () {
  function SignerKey() {
    _classCallCheck(this, SignerKey);
  }
  _createClass(SignerKey, null, [{
    key: "decodeAddress",
    value:
    /**
     * Decodes a StrKey address into an xdr.SignerKey instance.
     *
     * Only ED25519 public keys (G...), pre-auth transactions (T...), hashes
     * (H...), and signed payloads (P...) can be signer keys.
     *
     * @param   {string} address  a StrKey-encoded signer address
     * @returns {xdr.SignerKey}
     */
    function decodeAddress(address) {
      cov_1sqbjacexy().f[0]++;
      var signerKeyMap = (cov_1sqbjacexy().s[0]++, {
        ed25519PublicKey: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKey.signerKeyTypeEd25519,
        preAuthTx: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKey.signerKeyTypePreAuthTx,
        sha256Hash: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKey.signerKeyTypeHashX,
        signedPayload: _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKey.signerKeyTypeEd25519SignedPayload
      });
      var vb = (cov_1sqbjacexy().s[1]++, _strkey__WEBPACK_IMPORTED_MODULE_1__.StrKey.getVersionByteForPrefix(address));
      var encoder = (cov_1sqbjacexy().s[2]++, signerKeyMap[vb]);
      cov_1sqbjacexy().s[3]++;
      if (!encoder) {
        cov_1sqbjacexy().b[0][0]++;
        cov_1sqbjacexy().s[4]++;
        throw new Error("invalid signer key type (".concat(vb, ")"));
      } else {
        cov_1sqbjacexy().b[0][1]++;
      }
      var raw = (cov_1sqbjacexy().s[5]++, (0,_strkey__WEBPACK_IMPORTED_MODULE_1__.decodeCheck)(vb, address));
      cov_1sqbjacexy().s[6]++;
      switch (vb) {
        case 'signedPayload':
          cov_1sqbjacexy().b[1][0]++;
          cov_1sqbjacexy().s[7]++;
          return encoder(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKeyEd25519SignedPayload({
            ed25519: raw.slice(0, 32),
            payload: raw.slice(32 + 4)
          }));
        case 'ed25519PublicKey':
          cov_1sqbjacexy().b[1][1]++;
        // falls through
        case 'preAuthTx':
          cov_1sqbjacexy().b[1][2]++;
        // falls through
        case 'sha256Hash':
          cov_1sqbjacexy().b[1][3]++;
        // falls through
        default:
          cov_1sqbjacexy().b[1][4]++;
          cov_1sqbjacexy().s[8]++;
          return encoder(raw);
      }
    }

    /**
     * Encodes a signer key into its StrKey equivalent.
     *
     * @param   {xdr.SignerKey} signerKey   the signer
     * @returns {string} the StrKey representation of the signer
     */
  }, {
    key: "encodeSignerKey",
    value: function encodeSignerKey(signerKey) {
      cov_1sqbjacexy().f[1]++;
      var strkeyType;
      var raw;
      cov_1sqbjacexy().s[9]++;
      switch (signerKey["switch"]()) {
        case _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKeyType.signerKeyTypeEd25519():
          cov_1sqbjacexy().b[2][0]++;
          cov_1sqbjacexy().s[10]++;
          strkeyType = 'ed25519PublicKey';
          cov_1sqbjacexy().s[11]++;
          raw = signerKey.value();
          cov_1sqbjacexy().s[12]++;
          break;
        case _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKeyType.signerKeyTypePreAuthTx():
          cov_1sqbjacexy().b[2][1]++;
          cov_1sqbjacexy().s[13]++;
          strkeyType = 'preAuthTx';
          cov_1sqbjacexy().s[14]++;
          raw = signerKey.value();
          cov_1sqbjacexy().s[15]++;
          break;
        case _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKeyType.signerKeyTypeHashX():
          cov_1sqbjacexy().b[2][2]++;
          cov_1sqbjacexy().s[16]++;
          strkeyType = 'sha256Hash';
          cov_1sqbjacexy().s[17]++;
          raw = signerKey.value();
          cov_1sqbjacexy().s[18]++;
          break;
        case _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].SignerKeyType.signerKeyTypeEd25519SignedPayload():
          cov_1sqbjacexy().b[2][3]++;
          cov_1sqbjacexy().s[19]++;
          strkeyType = 'signedPayload';
          cov_1sqbjacexy().s[20]++;
          raw = signerKey.ed25519SignedPayload().toXDR('raw');
          cov_1sqbjacexy().s[21]++;
          break;
        default:
          cov_1sqbjacexy().b[2][4]++;
          cov_1sqbjacexy().s[22]++;
          throw new Error("invalid SignerKey (type: ".concat(signerKey["switch"](), ")"));
      }
      cov_1sqbjacexy().s[23]++;
      return (0,_strkey__WEBPACK_IMPORTED_MODULE_1__.encodeCheck)(strkeyType, raw);
    }
  }]);
  return SignerKey;
}();

/***/ }),

/***/ "./src/signing.js":
/*!************************!*\
  !*** ./src/signing.js ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FastSigning": () => (/* binding */ FastSigning),
/* harmony export */   "generate": () => (/* binding */ generate),
/* harmony export */   "sign": () => (/* binding */ sign),
/* harmony export */   "verify": () => (/* binding */ verify)
/* harmony export */ });
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_2bubcqbflb() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\signing.js";
  var hash = "341b52c5ddd591bae336d3b74bbfb23b61e9771f";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\signing.js",
    statementMap: {
      "0": {
        start: {
          line: 8,
          column: 22
        },
        end: {
          line: 8,
          column: 24
        }
      },
      "1": {
        start: {
          line: 15,
          column: 27
        },
        end: {
          line: 15,
          column: 45
        }
      },
      "2": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 45
        }
      },
      "3": {
        start: {
          line: 22,
          column: 2
        },
        end: {
          line: 22,
          column: 58
        }
      },
      "4": {
        start: {
          line: 26,
          column: 2
        },
        end: {
          line: 26,
          column: 43
        }
      },
      "5": {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "6": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "7": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 41,
          column: 38
        }
      },
      "8": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 37
        }
      },
      "9": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 48,
          column: 3
        }
      },
      "10": {
        start: {
          line: 47,
          column: 4
        },
        end: {
          line: 47,
          column: 37
        }
      },
      "11": {
        start: {
          line: 50,
          column: 2
        },
        end: {
          line: 55,
          column: 4
        }
      },
      "12": {
        start: {
          line: 51,
          column: 15
        },
        end: {
          line: 51,
          column: 69
        }
      },
      "13": {
        start: {
          line: 52,
          column: 15
        },
        end: {
          line: 52,
          column: 69
        }
      },
      "14": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 53,
          column: 55
        }
      },
      "15": {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 14
        }
      },
      "16": {
        start: {
          line: 57,
          column: 2
        },
        end: {
          line: 62,
          column: 4
        }
      },
      "17": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 58,
          column: 36
        }
      },
      "18": {
        start: {
          line: 59,
          column: 22
        },
        end: {
          line: 59,
          column: 67
        }
      },
      "19": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 60
        }
      },
      "20": {
        start: {
          line: 61,
          column: 4
        },
        end: {
          line: 61,
          column: 21
        }
      },
      "21": {
        start: {
          line: 64,
          column: 2
        },
        end: {
          line: 71,
          column: 4
        }
      },
      "22": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 36
        }
      },
      "23": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 70,
          column: 5
        }
      },
      "24": {
        start: {
          line: 67,
          column: 6
        },
        end: {
          line: 67,
          column: 76
        }
      },
      "25": {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 19
        }
      },
      "26": {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 73,
          column: 14
        }
      },
      "27": {
        start: {
          line: 80,
          column: 15
        },
        end: {
          line: 80,
          column: 35
        }
      },
      "28": {
        start: {
          line: 82,
          column: 2
        },
        end: {
          line: 86,
          column: 4
        }
      },
      "29": {
        start: {
          line: 83,
          column: 27
        },
        end: {
          line: 83,
          column: 55
        }
      },
      "30": {
        start: {
          line: 84,
          column: 21
        },
        end: {
          line: 84,
          column: 63
        }
      },
      "31": {
        start: {
          line: 85,
          column: 4
        },
        end: {
          line: 85,
          column: 50
        }
      },
      "32": {
        start: {
          line: 88,
          column: 2
        },
        end: {
          line: 96,
          column: 4
        }
      },
      "33": {
        start: {
          line: 89,
          column: 4
        },
        end: {
          line: 89,
          column: 36
        }
      },
      "34": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 90,
          column: 49
        }
      },
      "35": {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 59
        }
      },
      "36": {
        start: {
          line: 93,
          column: 22
        },
        end: {
          line: 93,
          column: 57
        }
      },
      "37": {
        start: {
          line: 95,
          column: 4
        },
        end: {
          line: 95,
          column: 41
        }
      },
      "38": {
        start: {
          line: 98,
          column: 2
        },
        end: {
          line: 105,
          column: 4
        }
      },
      "39": {
        start: {
          line: 99,
          column: 4
        },
        end: {
          line: 99,
          column: 36
        }
      },
      "40": {
        start: {
          line: 100,
          column: 4
        },
        end: {
          line: 100,
          column: 49
        }
      },
      "41": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 59
        }
      },
      "42": {
        start: {
          line: 102,
          column: 4
        },
        end: {
          line: 102,
          column: 59
        }
      },
      "43": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 104,
          column: 65
        }
      },
      "44": {
        start: {
          line: 107,
          column: 2
        },
        end: {
          line: 107,
          column: 15
        }
      }
    },
    fnMap: {
      "0": {
        name: "sign",
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 20
          }
        },
        loc: {
          start: {
            line: 17,
            column: 38
          },
          end: {
            line: 19,
            column: 1
          }
        },
        line: 17
      },
      "1": {
        name: "verify",
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 22
          }
        },
        loc: {
          start: {
            line: 21,
            column: 51
          },
          end: {
            line: 23,
            column: 1
          }
        },
        line: 21
      },
      "2": {
        name: "generate",
        decl: {
          start: {
            line: 25,
            column: 16
          },
          end: {
            line: 25,
            column: 24
          }
        },
        loc: {
          start: {
            line: 25,
            column: 36
          },
          end: {
            line: 27,
            column: 1
          }
        },
        line: 25
      },
      "3": {
        name: "checkFastSigning",
        decl: {
          start: {
            line: 29,
            column: 9
          },
          end: {
            line: 29,
            column: 25
          }
        },
        loc: {
          start: {
            line: 29,
            column: 28
          },
          end: {
            line: 33,
            column: 1
          }
        },
        line: 29
      },
      "4": {
        name: "checkFastSigningNode",
        decl: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 29
          }
        },
        loc: {
          start: {
            line: 35,
            column: 32
          },
          end: {
            line: 74,
            column: 1
          }
        },
        line: 35
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 50,
            column: 27
          },
          end: {
            line: 50,
            column: 28
          }
        },
        loc: {
          start: {
            line: 50,
            column: 42
          },
          end: {
            line: 55,
            column: 3
          }
        },
        line: 50
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 57,
            column: 23
          },
          end: {
            line: 57,
            column: 24
          }
        },
        loc: {
          start: {
            line: 57,
            column: 44
          },
          end: {
            line: 62,
            column: 3
          }
        },
        line: 57
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 64,
            column: 25
          },
          end: {
            line: 64,
            column: 26
          }
        },
        loc: {
          start: {
            line: 64,
            column: 57
          },
          end: {
            line: 71,
            column: 3
          }
        },
        line: 64
      },
      "8": {
        name: "checkFastSigningBrowser",
        decl: {
          start: {
            line: 76,
            column: 9
          },
          end: {
            line: 76,
            column: 32
          }
        },
        loc: {
          start: {
            line: 76,
            column: 35
          },
          end: {
            line: 108,
            column: 1
          }
        },
        line: 76
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 82,
            column: 27
          },
          end: {
            line: 82,
            column: 28
          }
        },
        loc: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 86,
            column: 3
          }
        },
        line: 82
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 88,
            column: 23
          },
          end: {
            line: 88,
            column: 24
          }
        },
        loc: {
          start: {
            line: 88,
            column: 44
          },
          end: {
            line: 96,
            column: 3
          }
        },
        line: 88
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 98,
            column: 25
          },
          end: {
            line: 98,
            column: 26
          }
        },
        loc: {
          start: {
            line: 98,
            column: 57
          },
          end: {
            line: 105,
            column: 3
          }
        },
        line: 98
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 30,
            column: 9
          },
          end: {
            line: 32,
            column: 31
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 31,
            column: 28
          }
        }, {
          start: {
            line: 32,
            column: 6
          },
          end: {
            line: 32,
            column: 31
          }
        }],
        line: 30
      },
      "1": {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 48,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 46
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "341b52c5ddd591bae336d3b74bbfb23b61e9771f"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2bubcqbflb = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2bubcqbflb();

//  This module provides the signing functionality used by the stellar network
//  The code below may look a little strange... this is because we try to provide
//  the most efficient signing method possible.  First, we try to load the
//  native `sodium-native` package for node.js environments, and if that fails we
//  fallback to `tweetnacl`

var actualMethods = (cov_2bubcqbflb().s[0]++, {});

/**
 * Use this flag to check if fast signing (provided by `sodium-native` package) is available.
 * If your app is signing a large number of transaction or verifying a large number
 * of signatures make sure `sodium-native` package is installed.
 */
var FastSigning = (cov_2bubcqbflb().s[1]++, checkFastSigning());
function sign(data, secretKey) {
  cov_2bubcqbflb().f[0]++;
  cov_2bubcqbflb().s[2]++;
  return actualMethods.sign(data, secretKey);
}
function verify(data, signature, publicKey) {
  cov_2bubcqbflb().f[1]++;
  cov_2bubcqbflb().s[3]++;
  return actualMethods.verify(data, signature, publicKey);
}
function generate(secretKey) {
  cov_2bubcqbflb().f[2]++;
  cov_2bubcqbflb().s[4]++;
  return actualMethods.generate(secretKey);
}
function checkFastSigning() {
  cov_2bubcqbflb().f[3]++;
  cov_2bubcqbflb().s[5]++;
  return typeof window === 'undefined' ? (cov_2bubcqbflb().b[0][0]++, checkFastSigningNode()) : (cov_2bubcqbflb().b[0][1]++, checkFastSigningBrowser());
}
function checkFastSigningNode() {
  cov_2bubcqbflb().f[4]++;
  // NOTE: we use commonjs style require here because es6 imports
  // can only occur at the top level.  thanks, obama.
  var sodium;
  cov_2bubcqbflb().s[6]++;
  try {
    cov_2bubcqbflb().s[7]++;
    // eslint-disable-next-line
    sodium = __webpack_require__(Object(function webpackMissingModule() { var e = new Error("Cannot find module 'sodium-native'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));
  } catch (err) {
    cov_2bubcqbflb().s[8]++;
    return checkFastSigningBrowser();
  }
  cov_2bubcqbflb().s[9]++;
  if (!Object.keys(sodium).length) {
    cov_2bubcqbflb().b[1][0]++;
    cov_2bubcqbflb().s[10]++;
    return checkFastSigningBrowser();
  } else {
    cov_2bubcqbflb().b[1][1]++;
  }
  cov_2bubcqbflb().s[11]++;
  actualMethods.generate = function (secretKey) {
    cov_2bubcqbflb().f[5]++;
    var pk = (cov_2bubcqbflb().s[12]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].alloc(sodium.crypto_sign_PUBLICKEYBYTES));
    var sk = (cov_2bubcqbflb().s[13]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].alloc(sodium.crypto_sign_SECRETKEYBYTES));
    cov_2bubcqbflb().s[14]++;
    sodium.crypto_sign_seed_keypair(pk, sk, secretKey);
    cov_2bubcqbflb().s[15]++;
    return pk;
  };
  cov_2bubcqbflb().s[16]++;
  actualMethods.sign = function (data, secretKey) {
    cov_2bubcqbflb().f[6]++;
    cov_2bubcqbflb().s[17]++;
    data = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(data);
    var signature = (cov_2bubcqbflb().s[18]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].alloc(sodium.crypto_sign_BYTES));
    cov_2bubcqbflb().s[19]++;
    sodium.crypto_sign_detached(signature, data, secretKey);
    cov_2bubcqbflb().s[20]++;
    return signature;
  };
  cov_2bubcqbflb().s[21]++;
  actualMethods.verify = function (data, signature, publicKey) {
    cov_2bubcqbflb().f[7]++;
    cov_2bubcqbflb().s[22]++;
    data = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(data);
    cov_2bubcqbflb().s[23]++;
    try {
      cov_2bubcqbflb().s[24]++;
      return sodium.crypto_sign_verify_detached(signature, data, publicKey);
    } catch (e) {
      cov_2bubcqbflb().s[25]++;
      return false;
    }
  };
  cov_2bubcqbflb().s[26]++;
  return true;
}
function checkFastSigningBrowser() {
  cov_2bubcqbflb().f[8]++;
  // fallback to `tweetnacl` if we're in the browser or
  // if there was a failure installing `sodium-native`
  // eslint-disable-next-line
  var nacl = (cov_2bubcqbflb().s[27]++, __webpack_require__(/*! tweetnacl */ "./node_modules/tweetnacl/nacl-fast.js"));
  cov_2bubcqbflb().s[28]++;
  actualMethods.generate = function (secretKey) {
    cov_2bubcqbflb().f[9]++;
    var secretKeyUint8 = (cov_2bubcqbflb().s[29]++, new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](secretKey));
    var naclKeys = (cov_2bubcqbflb().s[30]++, nacl.sign.keyPair.fromSeed(secretKeyUint8));
    cov_2bubcqbflb().s[31]++;
    return _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(naclKeys.publicKey);
  };
  cov_2bubcqbflb().s[32]++;
  actualMethods.sign = function (data, secretKey) {
    cov_2bubcqbflb().f[10]++;
    cov_2bubcqbflb().s[33]++;
    data = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(data);
    cov_2bubcqbflb().s[34]++;
    data = new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](data.toJSON().data);
    cov_2bubcqbflb().s[35]++;
    secretKey = new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](secretKey.toJSON().data);
    var signature = (cov_2bubcqbflb().s[36]++, nacl.sign.detached(data, secretKey));
    cov_2bubcqbflb().s[37]++;
    return _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(signature);
  };
  cov_2bubcqbflb().s[38]++;
  actualMethods.verify = function (data, signature, publicKey) {
    cov_2bubcqbflb().f[11]++;
    cov_2bubcqbflb().s[39]++;
    data = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"].from(data);
    cov_2bubcqbflb().s[40]++;
    data = new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](data.toJSON().data);
    cov_2bubcqbflb().s[41]++;
    signature = new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](signature.toJSON().data);
    cov_2bubcqbflb().s[42]++;
    publicKey = new _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_0__["default"](publicKey.toJSON().data);
    cov_2bubcqbflb().s[43]++;
    return nacl.sign.detached.verify(data, signature, publicKey);
  };
  cov_2bubcqbflb().s[44]++;
  return false;
}

/***/ }),

/***/ "./src/strkey.js":
/*!***********************!*\
  !*** ./src/strkey.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StrKey": () => (/* binding */ StrKey),
/* harmony export */   "decodeCheck": () => (/* binding */ decodeCheck),
/* harmony export */   "encodeCheck": () => (/* binding */ encodeCheck)
/* harmony export */ });
/* harmony import */ var base32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! base32.js */ "./node_modules/base32.js/base32.js");
/* harmony import */ var crc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crc */ "./node_modules/crc/mjs/index.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_isNull__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isNull */ "./node_modules/lodash/isNull.js");
/* harmony import */ var lodash_isNull__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isNull__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _util_checksum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./util/checksum */ "./src/util/checksum.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
function cov_2gr7gos3mq() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\strkey.js";
  var hash = "2fd8a4320e7660eb6afe61de3ae84f68d60b81e1";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\strkey.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 21
        },
        end: {
          line: 18,
          column: 1
        }
      },
      "1": {
        start: {
          line: 20,
          column: 20
        },
        end: {
          line: 27,
          column: 1
        }
      },
      "2": {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 42,
          column: 49
        }
      },
      "3": {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 55,
          column: 49
        }
      },
      "4": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 66
        }
      },
      "5": {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 65,
          column: 50
        }
      },
      "6": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 74,
          column: 50
        }
      },
      "7": {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 53
        }
      },
      "8": {
        start: {
          line: 92,
          column: 4
        },
        end: {
          line: 92,
          column: 46
        }
      },
      "9": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 50
        }
      },
      "10": {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 53
        }
      },
      "11": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 51
        }
      },
      "12": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 42
        }
      },
      "13": {
        start: {
          line: 137,
          column: 4
        },
        end: {
          line: 137,
          column: 45
        }
      },
      "14": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 43
        }
      },
      "15": {
        start: {
          line: 155,
          column: 4
        },
        end: {
          line: 155,
          column: 46
        }
      },
      "16": {
        start: {
          line: 164,
          column: 4
        },
        end: {
          line: 164,
          column: 46
        }
      },
      "17": {
        start: {
          line: 173,
          column: 4
        },
        end: {
          line: 173,
          column: 49
        }
      },
      "18": {
        start: {
          line: 182,
          column: 4
        },
        end: {
          line: 182,
          column: 45
        }
      },
      "19": {
        start: {
          line: 186,
          column: 4
        },
        end: {
          line: 186,
          column: 35
        }
      },
      "20": {
        start: {
          line: 204,
          column: 2
        },
        end: {
          line: 204,
          column: 44
        }
      },
      "21": {
        start: {
          line: 205,
          column: 2
        },
        end: {
          line: 207,
          column: 3
        }
      },
      "22": {
        start: {
          line: 206,
          column: 4
        },
        end: {
          line: 206,
          column: 17
        }
      },
      "23": {
        start: {
          line: 210,
          column: 2
        },
        end: {
          line: 234,
          column: 3
        }
      },
      "24": {
        start: {
          line: 215,
          column: 6
        },
        end: {
          line: 217,
          column: 7
        }
      },
      "25": {
        start: {
          line: 216,
          column: 8
        },
        end: {
          line: 216,
          column: 21
        }
      },
      "26": {
        start: {
          line: 218,
          column: 6
        },
        end: {
          line: 218,
          column: 12
        }
      },
      "27": {
        start: {
          line: 221,
          column: 6
        },
        end: {
          line: 223,
          column: 7
        }
      },
      "28": {
        start: {
          line: 222,
          column: 8
        },
        end: {
          line: 222,
          column: 21
        }
      },
      "29": {
        start: {
          line: 224,
          column: 6
        },
        end: {
          line: 224,
          column: 12
        }
      },
      "30": {
        start: {
          line: 227,
          column: 6
        },
        end: {
          line: 229,
          column: 7
        }
      },
      "31": {
        start: {
          line: 228,
          column: 8
        },
        end: {
          line: 228,
          column: 21
        }
      },
      "32": {
        start: {
          line: 230,
          column: 6
        },
        end: {
          line: 230,
          column: 12
        }
      },
      "33": {
        start: {
          line: 233,
          column: 6
        },
        end: {
          line: 233,
          column: 19
        }
      },
      "34": {
        start: {
          line: 236,
          column: 16
        },
        end: {
          line: 236,
          column: 18
        }
      },
      "35": {
        start: {
          line: 237,
          column: 2
        },
        end: {
          line: 241,
          column: 3
        }
      },
      "36": {
        start: {
          line: 238,
          column: 4
        },
        end: {
          line: 238,
          column: 52
        }
      },
      "37": {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 240,
          column: 17
        }
      },
      "38": {
        start: {
          line: 244,
          column: 2
        },
        end: {
          line: 263,
          column: 3
        }
      },
      "39": {
        start: {
          line: 249,
          column: 6
        },
        end: {
          line: 249,
          column: 35
        }
      },
      "40": {
        start: {
          line: 252,
          column: 6
        },
        end: {
          line: 252,
          column: 35
        }
      },
      "41": {
        start: {
          line: 255,
          column: 6
        },
        end: {
          line: 259,
          column: 8
        }
      },
      "42": {
        start: {
          line: 262,
          column: 6
        },
        end: {
          line: 262,
          column: 19
        }
      },
      "43": {
        start: {
          line: 267,
          column: 2
        },
        end: {
          line: 269,
          column: 3
        }
      },
      "44": {
        start: {
          line: 268,
          column: 4
        },
        end: {
          line: 268,
          column: 67
        }
      },
      "45": {
        start: {
          line: 271,
          column: 18
        },
        end: {
          line: 271,
          column: 40
        }
      },
      "46": {
        start: {
          line: 272,
          column: 22
        },
        end: {
          line: 272,
          column: 32
        }
      },
      "47": {
        start: {
          line: 273,
          column: 18
        },
        end: {
          line: 273,
          column: 38
        }
      },
      "48": {
        start: {
          line: 274,
          column: 15
        },
        end: {
          line: 274,
          column: 31
        }
      },
      "49": {
        start: {
          line: 275,
          column: 19
        },
        end: {
          line: 275,
          column: 36
        }
      },
      "50": {
        start: {
          line: 277,
          column: 2
        },
        end: {
          line: 279,
          column: 3
        }
      },
      "51": {
        start: {
          line: 278,
          column: 4
        },
        end: {
          line: 278,
          column: 46
        }
      },
      "52": {
        start: {
          line: 281,
          column: 26
        },
        end: {
          line: 281,
          column: 55
        }
      },
      "53": {
        start: {
          line: 283,
          column: 2
        },
        end: {
          line: 288,
          column: 3
        }
      },
      "54": {
        start: {
          line: 284,
          column: 4
        },
        end: {
          line: 287,
          column: 6
        }
      },
      "55": {
        start: {
          line: 290,
          column: 2
        },
        end: {
          line: 294,
          column: 3
        }
      },
      "56": {
        start: {
          line: 291,
          column: 4
        },
        end: {
          line: 293,
          column: 6
        }
      },
      "57": {
        start: {
          line: 296,
          column: 27
        },
        end: {
          line: 296,
          column: 53
        }
      },
      "58": {
        start: {
          line: 298,
          column: 2
        },
        end: {
          line: 300,
          column: 3
        }
      },
      "59": {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 299,
          column: 40
        }
      },
      "60": {
        start: {
          line: 302,
          column: 2
        },
        end: {
          line: 302,
          column: 34
        }
      },
      "61": {
        start: {
          line: 306,
          column: 2
        },
        end: {
          line: 308,
          column: 3
        }
      },
      "62": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 307,
          column: 47
        }
      },
      "63": {
        start: {
          line: 310,
          column: 22
        },
        end: {
          line: 310,
          column: 51
        }
      },
      "64": {
        start: {
          line: 312,
          column: 2
        },
        end: {
          line: 317,
          column: 3
        }
      },
      "65": {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 316,
          column: 6
        }
      },
      "66": {
        start: {
          line: 318,
          column: 2
        },
        end: {
          line: 318,
          column: 34
        }
      },
      "67": {
        start: {
          line: 320,
          column: 24
        },
        end: {
          line: 320,
          column: 57
        }
      },
      "68": {
        start: {
          line: 321,
          column: 18
        },
        end: {
          line: 321,
          column: 61
        }
      },
      "69": {
        start: {
          line: 322,
          column: 19
        },
        end: {
          line: 322,
          column: 45
        }
      },
      "70": {
        start: {
          line: 323,
          column: 20
        },
        end: {
          line: 323,
          column: 61
        }
      },
      "71": {
        start: {
          line: 325,
          column: 2
        },
        end: {
          line: 325,
          column: 34
        }
      },
      "72": {
        start: {
          line: 330,
          column: 19
        },
        end: {
          line: 330,
          column: 41
        }
      },
      "73": {
        start: {
          line: 331,
          column: 2
        },
        end: {
          line: 331,
          column: 54
        }
      },
      "74": {
        start: {
          line: 332,
          column: 2
        },
        end: {
          line: 332,
          column: 18
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        loc: {
          start: {
            line: 41,
            column: 38
          },
          end: {
            line: 43,
            column: 3
          }
        },
        line: 41
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 54,
            column: 3
          }
        },
        loc: {
          start: {
            line: 54,
            column: 38
          },
          end: {
            line: 56,
            column: 3
          }
        },
        line: 54
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 44
          },
          end: {
            line: 66,
            column: 3
          }
        },
        line: 63
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 73,
            column: 3
          }
        },
        loc: {
          start: {
            line: 73,
            column: 39
          },
          end: {
            line: 75,
            column: 3
          }
        },
        line: 73
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 42
          },
          end: {
            line: 84,
            column: 3
          }
        },
        line: 82
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 91,
            column: 2
          },
          end: {
            line: 91,
            column: 3
          }
        },
        loc: {
          start: {
            line: 91,
            column: 40
          },
          end: {
            line: 93,
            column: 3
          }
        },
        line: 91
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 100,
            column: 3
          }
        },
        loc: {
          start: {
            line: 100,
            column: 39
          },
          end: {
            line: 102,
            column: 3
          }
        },
        line: 100
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 109,
            column: 2
          },
          end: {
            line: 109,
            column: 3
          }
        },
        loc: {
          start: {
            line: 109,
            column: 42
          },
          end: {
            line: 111,
            column: 3
          }
        },
        line: 109
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 45
          },
          end: {
            line: 120,
            column: 3
          }
        },
        line: 118
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 127,
            column: 2
          },
          end: {
            line: 127,
            column: 3
          }
        },
        loc: {
          start: {
            line: 127,
            column: 31
          },
          end: {
            line: 129,
            column: 3
          }
        },
        line: 127
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 136,
            column: 2
          },
          end: {
            line: 136,
            column: 3
          }
        },
        loc: {
          start: {
            line: 136,
            column: 34
          },
          end: {
            line: 138,
            column: 3
          }
        },
        line: 136
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 145,
            column: 2
          },
          end: {
            line: 145,
            column: 3
          }
        },
        loc: {
          start: {
            line: 145,
            column: 32
          },
          end: {
            line: 147,
            column: 3
          }
        },
        line: 145
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 154,
            column: 2
          },
          end: {
            line: 154,
            column: 3
          }
        },
        loc: {
          start: {
            line: 154,
            column: 35
          },
          end: {
            line: 156,
            column: 3
          }
        },
        line: 154
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 163,
            column: 2
          },
          end: {
            line: 163,
            column: 3
          }
        },
        loc: {
          start: {
            line: 163,
            column: 35
          },
          end: {
            line: 165,
            column: 3
          }
        },
        line: 163
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 172,
            column: 2
          },
          end: {
            line: 172,
            column: 3
          }
        },
        loc: {
          start: {
            line: 172,
            column: 38
          },
          end: {
            line: 174,
            column: 3
          }
        },
        line: 172
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 181,
            column: 2
          },
          end: {
            line: 181,
            column: 3
          }
        },
        loc: {
          start: {
            line: 181,
            column: 39
          },
          end: {
            line: 183,
            column: 3
          }
        },
        line: 181
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 185,
            column: 2
          },
          end: {
            line: 185,
            column: 3
          }
        },
        loc: {
          start: {
            line: 185,
            column: 42
          },
          end: {
            line: 187,
            column: 3
          }
        },
        line: 185
      },
      "17": {
        name: "isValid",
        decl: {
          start: {
            line: 203,
            column: 9
          },
          end: {
            line: 203,
            column: 16
          }
        },
        loc: {
          start: {
            line: 203,
            column: 43
          },
          end: {
            line: 264,
            column: 1
          }
        },
        line: 203
      },
      "18": {
        name: "decodeCheck",
        decl: {
          start: {
            line: 266,
            column: 16
          },
          end: {
            line: 266,
            column: 27
          }
        },
        loc: {
          start: {
            line: 266,
            column: 54
          },
          end: {
            line: 303,
            column: 1
          }
        },
        line: 266
      },
      "19": {
        name: "encodeCheck",
        decl: {
          start: {
            line: 305,
            column: 16
          },
          end: {
            line: 305,
            column: 27
          }
        },
        loc: {
          start: {
            line: 305,
            column: 51
          },
          end: {
            line: 326,
            column: 1
          }
        },
        line: 305
      },
      "20": {
        name: "calculateChecksum",
        decl: {
          start: {
            line: 329,
            column: 9
          },
          end: {
            line: 329,
            column: 26
          }
        },
        loc: {
          start: {
            line: 329,
            column: 36
          },
          end: {
            line: 333,
            column: 1
          }
        },
        line: 329
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 205,
            column: 2
          },
          end: {
            line: 207,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 2
          },
          end: {
            line: 207,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 205
      },
      "1": {
        loc: {
          start: {
            line: 210,
            column: 2
          },
          end: {
            line: 234,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 211,
            column: 4
          },
          end: {
            line: 211,
            column: 28
          }
        }, {
          start: {
            line: 212,
            column: 4
          },
          end: {
            line: 212,
            column: 29
          }
        }, {
          start: {
            line: 213,
            column: 4
          },
          end: {
            line: 213,
            column: 21
          }
        }, {
          start: {
            line: 214,
            column: 4
          },
          end: {
            line: 218,
            column: 12
          }
        }, {
          start: {
            line: 220,
            column: 4
          },
          end: {
            line: 224,
            column: 12
          }
        }, {
          start: {
            line: 226,
            column: 4
          },
          end: {
            line: 230,
            column: 12
          }
        }, {
          start: {
            line: 232,
            column: 4
          },
          end: {
            line: 233,
            column: 19
          }
        }],
        line: 210
      },
      "2": {
        loc: {
          start: {
            line: 215,
            column: 6
          },
          end: {
            line: 217,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 215,
            column: 6
          },
          end: {
            line: 217,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 215
      },
      "3": {
        loc: {
          start: {
            line: 221,
            column: 6
          },
          end: {
            line: 223,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 221,
            column: 6
          },
          end: {
            line: 223,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 221
      },
      "4": {
        loc: {
          start: {
            line: 227,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 227,
            column: 6
          },
          end: {
            line: 229,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 227
      },
      "5": {
        loc: {
          start: {
            line: 227,
            column: 10
          },
          end: {
            line: 227,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 227,
            column: 10
          },
          end: {
            line: 227,
            column: 29
          }
        }, {
          start: {
            line: 227,
            column: 33
          },
          end: {
            line: 227,
            column: 53
          }
        }],
        line: 227
      },
      "6": {
        loc: {
          start: {
            line: 244,
            column: 2
          },
          end: {
            line: 263,
            column: 3
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 245,
            column: 28
          }
        }, {
          start: {
            line: 246,
            column: 4
          },
          end: {
            line: 246,
            column: 29
          }
        }, {
          start: {
            line: 247,
            column: 4
          },
          end: {
            line: 247,
            column: 21
          }
        }, {
          start: {
            line: 248,
            column: 4
          },
          end: {
            line: 249,
            column: 35
          }
        }, {
          start: {
            line: 251,
            column: 4
          },
          end: {
            line: 252,
            column: 35
          }
        }, {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 259,
            column: 8
          }
        }, {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 262,
            column: 19
          }
        }],
        line: 244
      },
      "7": {
        loc: {
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 258,
            column: 69
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 258,
            column: 8
          },
          end: {
            line: 258,
            column: 36
          }
        }, {
          start: {
            line: 258,
            column: 40
          },
          end: {
            line: 258,
            column: 69
          }
        }],
        line: 258
      },
      "8": {
        loc: {
          start: {
            line: 267,
            column: 2
          },
          end: {
            line: 269,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 267,
            column: 2
          },
          end: {
            line: 269,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 267
      },
      "9": {
        loc: {
          start: {
            line: 277,
            column: 2
          },
          end: {
            line: 279,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 277,
            column: 2
          },
          end: {
            line: 279,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 277
      },
      "10": {
        loc: {
          start: {
            line: 283,
            column: 2
          },
          end: {
            line: 288,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 283,
            column: 2
          },
          end: {
            line: 288,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 283
      },
      "11": {
        loc: {
          start: {
            line: 290,
            column: 2
          },
          end: {
            line: 294,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 290,
            column: 2
          },
          end: {
            line: 294,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 290
      },
      "12": {
        loc: {
          start: {
            line: 298,
            column: 2
          },
          end: {
            line: 300,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 2
          },
          end: {
            line: 300,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "13": {
        loc: {
          start: {
            line: 306,
            column: 2
          },
          end: {
            line: 308,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 306,
            column: 2
          },
          end: {
            line: 308,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 306
      },
      "14": {
        loc: {
          start: {
            line: 306,
            column: 6
          },
          end: {
            line: 306,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 306,
            column: 6
          },
          end: {
            line: 306,
            column: 18
          }
        }, {
          start: {
            line: 306,
            column: 22
          },
          end: {
            line: 306,
            column: 39
          }
        }],
        line: 306
      },
      "15": {
        loc: {
          start: {
            line: 312,
            column: 2
          },
          end: {
            line: 317,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 312,
            column: 2
          },
          end: {
            line: 317,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 312
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0, 0, 0, 0, 0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0, 0, 0, 0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "2fd8a4320e7660eb6afe61de3ae84f68d60b81e1"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2gr7gos3mq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2gr7gos3mq();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint no-bitwise: ["error", {"allow": ["<<"]}] */








var versionBytes = (cov_2gr7gos3mq().s[0]++, {
  ed25519PublicKey: 6 << 3,
  // G (when encoded in base32)
  ed25519SecretSeed: 18 << 3,
  // S
  med25519PublicKey: 12 << 3,
  // M
  preAuthTx: 19 << 3,
  // T
  sha256Hash: 23 << 3,
  // X
  signedPayload: 15 << 3 // P
});

var strkeyTypes = (cov_2gr7gos3mq().s[1]++, {
  G: 'ed25519PublicKey',
  S: 'ed25519SecretSeed',
  M: 'med25519PublicKey',
  T: 'preAuthTx',
  X: 'sha256Hash',
  P: 'signedPayload'
});

/**
 * StrKey is a helper class that allows encoding and decoding Stellar keys
 * to/from strings, i.e. between their binary (Buffer, xdr.PublicKey, etc.) and
 * string (i.e. "GABCD...", etc.) representations.
 */
var StrKey = /*#__PURE__*/function () {
  function StrKey() {
    _classCallCheck(this, StrKey);
  }
  _createClass(StrKey, null, [{
    key: "encodeEd25519PublicKey",
    value:
    /**
     * Encodes `data` to strkey ed25519 public key.
     *
     * @param   {Buffer} data   raw data to encode
     * @returns {string}        "G..." representation of the key
     */
    function encodeEd25519PublicKey(data) {
      cov_2gr7gos3mq().f[0]++;
      cov_2gr7gos3mq().s[2]++;
      return encodeCheck('ed25519PublicKey', data);
    }

    /**
     * Decodes strkey ed25519 public key to raw data.
     *
     * If the parameter is a muxed account key ("M..."), this will only encode it
     * as a basic Ed25519 key (as if in "G..." format).
     *
     * @param   {string} data   "G..." (or "M...") key representation to decode
     * @returns {Buffer}        raw key
     */
  }, {
    key: "decodeEd25519PublicKey",
    value: function decodeEd25519PublicKey(data) {
      cov_2gr7gos3mq().f[1]++;
      cov_2gr7gos3mq().s[3]++;
      return decodeCheck('ed25519PublicKey', data);
    }

    /**
     * Returns true if the given Stellar public key is a valid ed25519 public key.
     * @param {string} publicKey public key to check
     * @returns {boolean}
     */
  }, {
    key: "isValidEd25519PublicKey",
    value: function isValidEd25519PublicKey(publicKey) {
      cov_2gr7gos3mq().f[2]++;
      cov_2gr7gos3mq().s[4]++;
      console.log(publicKey, 'publicKey in isvalidEd25519PublicKey');
      cov_2gr7gos3mq().s[5]++;
      return isValid('ed25519PublicKey', publicKey);
    }

    /**
     * Encodes data to strkey ed25519 seed.
     * @param {Buffer} data data to encode
     * @returns {string}
     */
  }, {
    key: "encodeEd25519SecretSeed",
    value: function encodeEd25519SecretSeed(data) {
      cov_2gr7gos3mq().f[3]++;
      cov_2gr7gos3mq().s[6]++;
      return encodeCheck('ed25519SecretSeed', data);
    }

    /**
     * Decodes strkey ed25519 seed to raw data.
     * @param {string} address data to decode
     * @returns {Buffer}
     */
  }, {
    key: "decodeEd25519SecretSeed",
    value: function decodeEd25519SecretSeed(address) {
      cov_2gr7gos3mq().f[4]++;
      cov_2gr7gos3mq().s[7]++;
      return decodeCheck('ed25519SecretSeed', address);
    }

    /**
     * Returns true if the given Stellar secret key is a valid ed25519 secret seed.
     * @param {string} seed seed to check
     * @returns {boolean}
     */
  }, {
    key: "isValidEd25519SecretSeed",
    value: function isValidEd25519SecretSeed(seed) {
      cov_2gr7gos3mq().f[5]++;
      cov_2gr7gos3mq().s[8]++;
      return isValid('ed25519SecretSeed', seed);
    }

    /**
     * Encodes data to strkey med25519 public key.
     * @param {Buffer} data data to encode
     * @returns {string}
     */
  }, {
    key: "encodeMed25519PublicKey",
    value: function encodeMed25519PublicKey(data) {
      cov_2gr7gos3mq().f[6]++;
      cov_2gr7gos3mq().s[9]++;
      return encodeCheck('med25519PublicKey', data);
    }

    /**
     * Decodes strkey med25519 public key to raw data.
     * @param {string} address data to decode
     * @returns {Buffer}
     */
  }, {
    key: "decodeMed25519PublicKey",
    value: function decodeMed25519PublicKey(address) {
      cov_2gr7gos3mq().f[7]++;
      cov_2gr7gos3mq().s[10]++;
      return decodeCheck('med25519PublicKey', address);
    }

    /**
     * Returns true if the given Stellar public key is a valid med25519 public key.
     * @param {string} publicKey public key to check
     * @returns {boolean}
     */
  }, {
    key: "isValidMed25519PublicKey",
    value: function isValidMed25519PublicKey(publicKey) {
      cov_2gr7gos3mq().f[8]++;
      cov_2gr7gos3mq().s[11]++;
      return isValid('med25519PublicKey', publicKey);
    }

    /**
     * Encodes data to strkey preAuthTx.
     * @param {Buffer} data data to encode
     * @returns {string}
     */
  }, {
    key: "encodePreAuthTx",
    value: function encodePreAuthTx(data) {
      cov_2gr7gos3mq().f[9]++;
      cov_2gr7gos3mq().s[12]++;
      return encodeCheck('preAuthTx', data);
    }

    /**
     * Decodes strkey PreAuthTx to raw data.
     * @param {string} address data to decode
     * @returns {Buffer}
     */
  }, {
    key: "decodePreAuthTx",
    value: function decodePreAuthTx(address) {
      cov_2gr7gos3mq().f[10]++;
      cov_2gr7gos3mq().s[13]++;
      return decodeCheck('preAuthTx', address);
    }

    /**
     * Encodes data to strkey sha256 hash.
     * @param {Buffer} data data to encode
     * @returns {string}
     */
  }, {
    key: "encodeSha256Hash",
    value: function encodeSha256Hash(data) {
      cov_2gr7gos3mq().f[11]++;
      cov_2gr7gos3mq().s[14]++;
      return encodeCheck('sha256Hash', data);
    }

    /**
     * Decodes strkey sha256 hash to raw data.
     * @param {string} address data to decode
     * @returns {Buffer}
     */
  }, {
    key: "decodeSha256Hash",
    value: function decodeSha256Hash(address) {
      cov_2gr7gos3mq().f[12]++;
      cov_2gr7gos3mq().s[15]++;
      return decodeCheck('sha256Hash', address);
    }

    /**
     * Encodes raw data to strkey signed payload (P...).
     * @param   {Buffer} data  data to encode
     * @returns {string}
     */
  }, {
    key: "encodeSignedPayload",
    value: function encodeSignedPayload(data) {
      cov_2gr7gos3mq().f[13]++;
      cov_2gr7gos3mq().s[16]++;
      return encodeCheck('signedPayload', data);
    }

    /**
     * Decodes strkey signed payload (P...) to raw data.
     * @param   {string} address  address to decode
     * @returns {Buffer}
     */
  }, {
    key: "decodeSignedPayload",
    value: function decodeSignedPayload(address) {
      cov_2gr7gos3mq().f[14]++;
      cov_2gr7gos3mq().s[17]++;
      return decodeCheck('signedPayload', address);
    }

    /**
     * Checks validity of alleged signed payload (P...) strkey address.
     * @param   {string} address  signer key to check
     * @returns {boolean}
     */
  }, {
    key: "isValidSignedPayload",
    value: function isValidSignedPayload(address) {
      cov_2gr7gos3mq().f[15]++;
      cov_2gr7gos3mq().s[18]++;
      return isValid('signedPayload', address);
    }
  }, {
    key: "getVersionByteForPrefix",
    value: function getVersionByteForPrefix(address) {
      cov_2gr7gos3mq().f[16]++;
      cov_2gr7gos3mq().s[19]++;
      return strkeyTypes[address[0]];
    }
  }]);
  return StrKey;
}();

/**
 * Sanity-checks whether or not a strkey *appears* valid.
 *
 * @param  {string}  versionByteName the type of strkey to expect in `encoded`
 * @param  {string}  encoded         the strkey to validate
 *
 * @return {Boolean} whether or not the `encoded` strkey appears valid for the
 *     `versionByteName` strkey type (see `versionBytes`, above).
 *
 * @note This isn't a *definitive* check of validity, but rather a best-effort
 *     check based on (a) input length, (b) whether or not it can be decoded,
 *     and (c) output length.
 */
function isValid(versionByteName, encoded) {
  cov_2gr7gos3mq().f[17]++;
  cov_2gr7gos3mq().s[20]++;
  console.log(encoded, 'encoded in isValid');
  cov_2gr7gos3mq().s[21]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(encoded)) {
    cov_2gr7gos3mq().b[0][0]++;
    cov_2gr7gos3mq().s[22]++;
    return false;
  } else {
    cov_2gr7gos3mq().b[0][1]++;
  }

  // basic length checks on the strkey lengths
  cov_2gr7gos3mq().s[23]++;
  switch (versionByteName) {
    case 'ed25519PublicKey':
      cov_2gr7gos3mq().b[1][0]++;
    // falls through
    case 'ed25519SecretSeed':
      cov_2gr7gos3mq().b[1][1]++;
    // falls through
    case 'preAuthTx':
      cov_2gr7gos3mq().b[1][2]++;
    // falls through
    case 'sha256Hash':
      cov_2gr7gos3mq().b[1][3]++;
      cov_2gr7gos3mq().s[24]++;
      if (encoded.length !== 56) {
        cov_2gr7gos3mq().b[2][0]++;
        cov_2gr7gos3mq().s[25]++;
        return false;
      } else {
        cov_2gr7gos3mq().b[2][1]++;
      }
      cov_2gr7gos3mq().s[26]++;
      break;
    case 'med25519PublicKey':
      cov_2gr7gos3mq().b[1][4]++;
      cov_2gr7gos3mq().s[27]++;
      if (encoded.length !== 69) {
        cov_2gr7gos3mq().b[3][0]++;
        cov_2gr7gos3mq().s[28]++;
        return false;
      } else {
        cov_2gr7gos3mq().b[3][1]++;
      }
      cov_2gr7gos3mq().s[29]++;
      break;
    case 'signedPayload':
      cov_2gr7gos3mq().b[1][5]++;
      cov_2gr7gos3mq().s[30]++;
      if ((cov_2gr7gos3mq().b[5][0]++, encoded.length < 56) || (cov_2gr7gos3mq().b[5][1]++, encoded.length > 165)) {
        cov_2gr7gos3mq().b[4][0]++;
        cov_2gr7gos3mq().s[31]++;
        return false;
      } else {
        cov_2gr7gos3mq().b[4][1]++;
      }
      cov_2gr7gos3mq().s[32]++;
      break;
    default:
      cov_2gr7gos3mq().b[1][6]++;
      cov_2gr7gos3mq().s[33]++;
      return false;
  }
  var decoded = (cov_2gr7gos3mq().s[34]++, '');
  cov_2gr7gos3mq().s[35]++;
  try {
    cov_2gr7gos3mq().s[36]++;
    decoded = decodeCheck(versionByteName, encoded);
  } catch (err) {
    cov_2gr7gos3mq().s[37]++;
    return false;
  }

  // basic length checks on the resulting buffer sizes
  cov_2gr7gos3mq().s[38]++;
  switch (versionByteName) {
    case 'ed25519PublicKey':
      cov_2gr7gos3mq().b[6][0]++;
    // falls through
    case 'ed25519SecretSeed':
      cov_2gr7gos3mq().b[6][1]++;
    // falls through
    case 'preAuthTx':
      cov_2gr7gos3mq().b[6][2]++;
    // falls through
    case 'sha256Hash':
      cov_2gr7gos3mq().b[6][3]++;
      cov_2gr7gos3mq().s[39]++;
      return decoded.length === 32;
    case 'med25519PublicKey':
      cov_2gr7gos3mq().b[6][4]++;
      cov_2gr7gos3mq().s[40]++;
      return decoded.length === 40;
    // +8 bytes for the ID

    case 'signedPayload':
      cov_2gr7gos3mq().b[6][5]++;
      cov_2gr7gos3mq().s[41]++;
      return (
        // 32 for the signer, +4 for the payload size, then either +4 for the
        // min or +64 for the max payload
        (cov_2gr7gos3mq().b[7][0]++, decoded.length >= 32 + 4 + 4) && (cov_2gr7gos3mq().b[7][1]++, decoded.length <= 32 + 4 + 64)
      );
    default:
      cov_2gr7gos3mq().b[6][6]++;
      cov_2gr7gos3mq().s[42]++;
      return false;
  }
}
function decodeCheck(versionByteName, encoded) {
  cov_2gr7gos3mq().f[18]++;
  cov_2gr7gos3mq().s[43]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(encoded)) {
    cov_2gr7gos3mq().b[8][0]++;
    cov_2gr7gos3mq().s[44]++;
    throw new TypeError('encoded argument must be of type String');
  } else {
    cov_2gr7gos3mq().b[8][1]++;
  }
  var decoded = (cov_2gr7gos3mq().s[45]++, base32_js__WEBPACK_IMPORTED_MODULE_0__.decode(encoded));
  var versionByte = (cov_2gr7gos3mq().s[46]++, decoded[0]);
  var payload = (cov_2gr7gos3mq().s[47]++, decoded.slice(0, -2));
  var data = (cov_2gr7gos3mq().s[48]++, payload.slice(1));
  var checksum = (cov_2gr7gos3mq().s[49]++, decoded.slice(-2));
  cov_2gr7gos3mq().s[50]++;
  if (encoded !== base32_js__WEBPACK_IMPORTED_MODULE_0__.encode(decoded)) {
    cov_2gr7gos3mq().b[9][0]++;
    cov_2gr7gos3mq().s[51]++;
    throw new Error('invalid encoded string');
  } else {
    cov_2gr7gos3mq().b[9][1]++;
  }
  var expectedVersion = (cov_2gr7gos3mq().s[52]++, versionBytes[versionByteName]);
  cov_2gr7gos3mq().s[53]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(expectedVersion)) {
    cov_2gr7gos3mq().b[10][0]++;
    cov_2gr7gos3mq().s[54]++;
    throw new Error("".concat(versionByteName, " is not a valid version byte name. ") + "Expected one of ".concat(Object.keys(versionBytes).join(', ')));
  } else {
    cov_2gr7gos3mq().b[10][1]++;
  }
  cov_2gr7gos3mq().s[55]++;
  if (versionByte !== expectedVersion) {
    cov_2gr7gos3mq().b[11][0]++;
    cov_2gr7gos3mq().s[56]++;
    throw new Error("invalid version byte. expected ".concat(expectedVersion, ", got ").concat(versionByte));
  } else {
    cov_2gr7gos3mq().b[11][1]++;
  }
  var expectedChecksum = (cov_2gr7gos3mq().s[57]++, calculateChecksum(payload));
  cov_2gr7gos3mq().s[58]++;
  if (!(0,_util_checksum__WEBPACK_IMPORTED_MODULE_5__.verifyChecksum)(expectedChecksum, checksum)) {
    cov_2gr7gos3mq().b[12][0]++;
    cov_2gr7gos3mq().s[59]++;
    throw new Error("invalid checksum");
  } else {
    cov_2gr7gos3mq().b[12][1]++;
  }
  cov_2gr7gos3mq().s[60]++;
  return _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(data);
}
function encodeCheck(versionByteName, data) {
  cov_2gr7gos3mq().f[19]++;
  cov_2gr7gos3mq().s[61]++;
  if ((cov_2gr7gos3mq().b[14][0]++, lodash_isNull__WEBPACK_IMPORTED_MODULE_3___default()(data)) || (cov_2gr7gos3mq().b[14][1]++, lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(data))) {
    cov_2gr7gos3mq().b[13][0]++;
    cov_2gr7gos3mq().s[62]++;
    throw new Error('cannot encode null data');
  } else {
    cov_2gr7gos3mq().b[13][1]++;
  }
  var versionByte = (cov_2gr7gos3mq().s[63]++, versionBytes[versionByteName]);
  cov_2gr7gos3mq().s[64]++;
  if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_2___default()(versionByte)) {
    cov_2gr7gos3mq().b[15][0]++;
    cov_2gr7gos3mq().s[65]++;
    throw new Error("".concat(versionByteName, " is not a valid version byte name. ") + "Expected one of ".concat(Object.keys(versionBytes).join(', ')));
  } else {
    cov_2gr7gos3mq().b[15][1]++;
  }
  cov_2gr7gos3mq().s[66]++;
  data = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from(data);
  var versionBuffer = (cov_2gr7gos3mq().s[67]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].from([versionByte]));
  var payload = (cov_2gr7gos3mq().s[68]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].concat([versionBuffer, data]));
  var checksum = (cov_2gr7gos3mq().s[69]++, calculateChecksum(payload));
  var unencoded = (cov_2gr7gos3mq().s[70]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].concat([payload, checksum]));
  cov_2gr7gos3mq().s[71]++;
  return base32_js__WEBPACK_IMPORTED_MODULE_0__.encode(unencoded);
}

// Computes the CRC16-XModem checksum of `payload` in little-endian order
function calculateChecksum(payload) {
  cov_2gr7gos3mq().f[20]++;
  var checksum = (cov_2gr7gos3mq().s[72]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_6__["default"].alloc(2));
  cov_2gr7gos3mq().s[73]++;
  checksum.writeUInt16LE(crc__WEBPACK_IMPORTED_MODULE_1__["default"].crc16xmodem(payload), 0);
  cov_2gr7gos3mq().s[74]++;
  return checksum;
}

/***/ }),

/***/ "./src/transaction.js":
/*!****************************!*\
  !*** ./src/transaction.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Transaction": () => (/* binding */ Transaction)
/* harmony export */ });
/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/map */ "./node_modules/lodash/map.js");
/* harmony import */ var lodash_map__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_map__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./strkey */ "./src/strkey.js");
/* harmony import */ var _operation__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./operation */ "./src/operation.js");
/* harmony import */ var _memo__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./memo */ "./src/memo.js");
/* harmony import */ var _transaction_base__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./transaction_base */ "./src/transaction_base.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function cov_1wxmir8xki() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\transaction.js";
  var hash = "711f66f0bb3283cb42d3a0479d524191bc363e44";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\transaction.js",
    statementMap: {
      "0": {
        start: {
          line: 38,
          column: 4
        },
        end: {
          line: 41,
          column: 5
        }
      },
      "1": {
        start: {
          line: 39,
          column: 21
        },
        end: {
          line: 39,
          column: 59
        }
      },
      "2": {
        start: {
          line: 40,
          column: 6
        },
        end: {
          line: 40,
          column: 57
        }
      },
      "3": {
        start: {
          line: 43,
          column: 25
        },
        end: {
          line: 43,
          column: 42
        }
      },
      "4": {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 53,
          column: 5
        }
      },
      "5": {
        start: {
          line: 50,
          column: 6
        },
        end: {
          line: 52,
          column: 8
        }
      },
      "6": {
        start: {
          line: 55,
          column: 23
        },
        end: {
          line: 55,
          column: 39
        }
      },
      "7": {
        start: {
          line: 56,
          column: 15
        },
        end: {
          line: 56,
          column: 30
        }
      },
      "8": {
        start: {
          line: 57,
          column: 16
        },
        end: {
          line: 57,
          column: 35
        }
      },
      "9": {
        start: {
          line: 58,
          column: 23
        },
        end: {
          line: 58,
          column: 62
        }
      },
      "10": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 50
        }
      },
      "11": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 38
        }
      },
      "12": {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 27
        }
      },
      "13": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 44
        }
      },
      "14": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "15": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 70,
          column: 10
        }
      },
      "16": {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 14
        }
      },
      "17": {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 76
        }
      },
      "18": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 14
        }
      },
      "19": {
        start: {
          line: 77,
          column: 15
        },
        end: {
          line: 77,
          column: 19
        }
      },
      "20": {
        start: {
          line: 78,
          column: 21
        },
        end: {
          line: 78,
          column: 25
        }
      },
      "21": {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 102,
          column: 5
        }
      },
      "22": {
        start: {
          line: 81,
          column: 8
        },
        end: {
          line: 81,
          column: 37
        }
      },
      "23": {
        start: {
          line: 82,
          column: 8
        },
        end: {
          line: 82,
          column: 14
        }
      },
      "24": {
        start: {
          line: 85,
          column: 8
        },
        end: {
          line: 97,
          column: 9
        }
      },
      "25": {
        start: {
          line: 87,
          column: 12
        },
        end: {
          line: 87,
          column: 48
        }
      },
      "26": {
        start: {
          line: 88,
          column: 12
        },
        end: {
          line: 88,
          column: 18
        }
      },
      "27": {
        start: {
          line: 91,
          column: 12
        },
        end: {
          line: 91,
          column: 34
        }
      },
      "28": {
        start: {
          line: 92,
          column: 12
        },
        end: {
          line: 92,
          column: 43
        }
      },
      "29": {
        start: {
          line: 93,
          column: 12
        },
        end: {
          line: 93,
          column: 18
        }
      },
      "30": {
        start: {
          line: 96,
          column: 12
        },
        end: {
          line: 96,
          column: 18
        }
      },
      "31": {
        start: {
          line: 98,
          column: 8
        },
        end: {
          line: 98,
          column: 14
        }
      },
      "32": {
        start: {
          line: 101,
          column: 8
        },
        end: {
          line: 101,
          column: 14
        }
      },
      "33": {
        start: {
          line: 104,
          column: 4
        },
        end: {
          line: 109,
          column: 5
        }
      },
      "34": {
        start: {
          line: 105,
          column: 6
        },
        end: {
          line: 108,
          column: 8
        }
      },
      "35": {
        start: {
          line: 111,
          column: 4
        },
        end: {
          line: 128,
          column: 5
        }
      },
      "36": {
        start: {
          line: 112,
          column: 27
        },
        end: {
          line: 112,
          column: 46
        }
      },
      "37": {
        start: {
          line: 113,
          column: 6
        },
        end: {
          line: 118,
          column: 7
        }
      },
      "38": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 117,
          column: 10
        }
      },
      "39": {
        start: {
          line: 120,
          column: 21
        },
        end: {
          line: 120,
          column: 37
        }
      },
      "40": {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 123,
          column: 7
        }
      },
      "41": {
        start: {
          line: 122,
          column: 8
        },
        end: {
          line: 122,
          column: 53
        }
      },
      "42": {
        start: {
          line: 125,
          column: 6
        },
        end: {
          line: 125,
          column: 53
        }
      },
      "43": {
        start: {
          line: 126,
          column: 6
        },
        end: {
          line: 126,
          column: 65
        }
      },
      "44": {
        start: {
          line: 127,
          column: 6
        },
        end: {
          line: 127,
          column: 47
        }
      },
      "45": {
        start: {
          line: 130,
          column: 23
        },
        end: {
          line: 130,
          column: 44
        }
      },
      "46": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 76
        }
      },
      "47": {
        start: {
          line: 131,
          column: 47
        },
        end: {
          line: 131,
          column: 74
        }
      },
      "48": {
        start: {
          line: 141,
          column: 4
        },
        end: {
          line: 141,
          column: 28
        }
      },
      "49": {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 144,
          column: 48
        }
      },
      "50": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 154,
          column: 30
        }
      },
      "51": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 48
        }
      },
      "52": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 165,
          column: 36
        }
      },
      "53": {
        start: {
          line: 168,
          column: 4
        },
        end: {
          line: 168,
          column: 48
        }
      },
      "54": {
        start: {
          line: 176,
          column: 4
        },
        end: {
          line: 176,
          column: 39
        }
      },
      "55": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 48
        }
      },
      "56": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 187,
          column: 45
        }
      },
      "57": {
        start: {
          line: 190,
          column: 4
        },
        end: {
          line: 190,
          column: 48
        }
      },
      "58": {
        start: {
          line: 198,
          column: 4
        },
        end: {
          line: 198,
          column: 30
        }
      },
      "59": {
        start: {
          line: 201,
          column: 4
        },
        end: {
          line: 201,
          column: 48
        }
      },
      "60": {
        start: {
          line: 209,
          column: 4
        },
        end: {
          line: 209,
          column: 26
        }
      },
      "61": {
        start: {
          line: 213,
          column: 4
        },
        end: {
          line: 213,
          column: 48
        }
      },
      "62": {
        start: {
          line: 221,
          column: 4
        },
        end: {
          line: 221,
          column: 24
        }
      },
      "63": {
        start: {
          line: 225,
          column: 4
        },
        end: {
          line: 225,
          column: 48
        }
      },
      "64": {
        start: {
          line: 233,
          column: 4
        },
        end: {
          line: 233,
          column: 28
        }
      },
      "65": {
        start: {
          line: 237,
          column: 4
        },
        end: {
          line: 237,
          column: 48
        }
      },
      "66": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 245,
          column: 42
        }
      },
      "67": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 249,
          column: 48
        }
      },
      "68": {
        start: {
          line: 262,
          column: 13
        },
        end: {
          line: 262,
          column: 20
        }
      },
      "69": {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 276,
          column: 5
        }
      },
      "70": {
        start: {
          line: 267,
          column: 6
        },
        end: {
          line: 275,
          column: 8
        }
      },
      "71": {
        start: {
          line: 279,
          column: 6
        },
        end: {
          line: 279,
          column: 77
        }
      },
      "72": {
        start: {
          line: 281,
          column: 24
        },
        end: {
          line: 284,
          column: 6
        }
      },
      "73": {
        start: {
          line: 286,
          column: 4
        },
        end: {
          line: 286,
          column: 31
        }
      },
      "74": {
        start: {
          line: 294,
          column: 18
        },
        end: {
          line: 294,
          column: 33
        }
      },
      "75": {
        start: {
          line: 295,
          column: 23
        },
        end: {
          line: 295,
          column: 46
        }
      },
      "76": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 319,
          column: 5
        }
      },
      "77": {
        start: {
          line: 300,
          column: 8
        },
        end: {
          line: 305,
          column: 10
        }
      },
      "78": {
        start: {
          line: 306,
          column: 8
        },
        end: {
          line: 306,
          column: 14
        }
      },
      "79": {
        start: {
          line: 308,
          column: 8
        },
        end: {
          line: 313,
          column: 10
        }
      },
      "80": {
        start: {
          line: 314,
          column: 8
        },
        end: {
          line: 314,
          column: 14
        }
      },
      "81": {
        start: {
          line: 316,
          column: 8
        },
        end: {
          line: 318,
          column: 10
        }
      },
      "82": {
        start: {
          line: 321,
          column: 4
        },
        end: {
          line: 321,
          column: 20
        }
      },
      "83": {
        start: {
          line: 339,
          column: 4
        },
        end: {
          line: 345,
          column: 5
        }
      },
      "84": {
        start: {
          line: 344,
          column: 6
        },
        end: {
          line: 344,
          column: 54
        }
      },
      "85": {
        start: {
          line: 347,
          column: 13
        },
        end: {
          line: 347,
          column: 37
        }
      },
      "86": {
        start: {
          line: 348,
          column: 4
        },
        end: {
          line: 354,
          column: 5
        }
      },
      "87": {
        start: {
          line: 349,
          column: 6
        },
        end: {
          line: 349,
          column: 48
        }
      },
      "88": {
        start: {
          line: 351,
          column: 6
        },
        end: {
          line: 353,
          column: 8
        }
      },
      "89": {
        start: {
          line: 357,
          column: 20
        },
        end: {
          line: 359,
          column: 5
        }
      },
      "90": {
        start: {
          line: 360,
          column: 24
        },
        end: {
          line: 366,
          column: 5
        }
      },
      "91": {
        start: {
          line: 368,
          column: 21
        },
        end: {
          line: 368,
          column: 51
        }
      },
      "92": {
        start: {
          line: 369,
          column: 22
        },
        end: {
          line: 369,
          column: 79
        }
      },
      "93": {
        start: {
          line: 370,
          column: 4
        },
        end: {
          line: 370,
          column: 34
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 37,
            column: 3
          }
        },
        loc: {
          start: {
            line: 37,
            column: 43
          },
          end: {
            line: 132,
            column: 3
          }
        },
        line: 37
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 131,
            column: 39
          },
          end: {
            line: 131,
            column: 40
          }
        },
        loc: {
          start: {
            line: 131,
            column: 47
          },
          end: {
            line: 131,
            column: 74
          }
        },
        line: 131
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 140,
            column: 2
          },
          end: {
            line: 140,
            column: 3
          }
        },
        loc: {
          start: {
            line: 140,
            column: 19
          },
          end: {
            line: 142,
            column: 3
          }
        },
        line: 140
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 143,
            column: 2
          },
          end: {
            line: 143,
            column: 3
          }
        },
        loc: {
          start: {
            line: 143,
            column: 24
          },
          end: {
            line: 145,
            column: 3
          }
        },
        line: 143
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 153,
            column: 3
          }
        },
        loc: {
          start: {
            line: 153,
            column: 21
          },
          end: {
            line: 155,
            column: 3
          }
        },
        line: 153
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 156,
            column: 2
          },
          end: {
            line: 156,
            column: 3
          }
        },
        loc: {
          start: {
            line: 156,
            column: 26
          },
          end: {
            line: 158,
            column: 3
          }
        },
        line: 156
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 164,
            column: 2
          },
          end: {
            line: 164,
            column: 3
          }
        },
        loc: {
          start: {
            line: 164,
            column: 27
          },
          end: {
            line: 166,
            column: 3
          }
        },
        line: 164
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 167,
            column: 2
          },
          end: {
            line: 167,
            column: 3
          }
        },
        loc: {
          start: {
            line: 167,
            column: 32
          },
          end: {
            line: 169,
            column: 3
          }
        },
        line: 167
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 175,
            column: 2
          },
          end: {
            line: 175,
            column: 3
          }
        },
        loc: {
          start: {
            line: 175,
            column: 30
          },
          end: {
            line: 177,
            column: 3
          }
        },
        line: 175
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 178,
            column: 2
          },
          end: {
            line: 178,
            column: 3
          }
        },
        loc: {
          start: {
            line: 178,
            column: 35
          },
          end: {
            line: 180,
            column: 3
          }
        },
        line: 178
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 186,
            column: 2
          },
          end: {
            line: 186,
            column: 3
          }
        },
        loc: {
          start: {
            line: 186,
            column: 36
          },
          end: {
            line: 188,
            column: 3
          }
        },
        line: 186
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 189,
            column: 2
          },
          end: {
            line: 189,
            column: 3
          }
        },
        loc: {
          start: {
            line: 189,
            column: 41
          },
          end: {
            line: 191,
            column: 3
          }
        },
        line: 189
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 197,
            column: 2
          },
          end: {
            line: 197,
            column: 3
          }
        },
        loc: {
          start: {
            line: 197,
            column: 21
          },
          end: {
            line: 199,
            column: 3
          }
        },
        line: 197
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 200,
            column: 2
          },
          end: {
            line: 200,
            column: 3
          }
        },
        loc: {
          start: {
            line: 200,
            column: 26
          },
          end: {
            line: 202,
            column: 3
          }
        },
        line: 200
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 208,
            column: 2
          },
          end: {
            line: 208,
            column: 3
          }
        },
        loc: {
          start: {
            line: 208,
            column: 17
          },
          end: {
            line: 210,
            column: 3
          }
        },
        line: 208
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 212,
            column: 2
          },
          end: {
            line: 212,
            column: 3
          }
        },
        loc: {
          start: {
            line: 212,
            column: 22
          },
          end: {
            line: 214,
            column: 3
          }
        },
        line: 212
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 220,
            column: 2
          },
          end: {
            line: 220,
            column: 3
          }
        },
        loc: {
          start: {
            line: 220,
            column: 15
          },
          end: {
            line: 222,
            column: 3
          }
        },
        line: 220
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 224,
            column: 2
          },
          end: {
            line: 224,
            column: 3
          }
        },
        loc: {
          start: {
            line: 224,
            column: 20
          },
          end: {
            line: 226,
            column: 3
          }
        },
        line: 224
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 232,
            column: 2
          },
          end: {
            line: 232,
            column: 3
          }
        },
        loc: {
          start: {
            line: 232,
            column: 19
          },
          end: {
            line: 234,
            column: 3
          }
        },
        line: 232
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 236,
            column: 2
          },
          end: {
            line: 236,
            column: 3
          }
        },
        loc: {
          start: {
            line: 236,
            column: 24
          },
          end: {
            line: 238,
            column: 3
          }
        },
        line: 236
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 244,
            column: 2
          },
          end: {
            line: 244,
            column: 3
          }
        },
        loc: {
          start: {
            line: 244,
            column: 13
          },
          end: {
            line: 246,
            column: 3
          }
        },
        line: 244
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 248,
            column: 2
          },
          end: {
            line: 248,
            column: 3
          }
        },
        loc: {
          start: {
            line: 248,
            column: 18
          },
          end: {
            line: 250,
            column: 3
          }
        },
        line: 248
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 261,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        },
        loc: {
          start: {
            line: 261,
            column: 18
          },
          end: {
            line: 287,
            column: 3
          }
        },
        line: 261
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 293,
            column: 2
          },
          end: {
            line: 293,
            column: 3
          }
        },
        loc: {
          start: {
            line: 293,
            column: 15
          },
          end: {
            line: 322,
            column: 3
          }
        },
        line: 293
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 337,
            column: 2
          },
          end: {
            line: 337,
            column: 3
          }
        },
        loc: {
          start: {
            line: 337,
            column: 33
          },
          end: {
            line: 371,
            column: 3
          }
        },
        line: 337
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 41,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 38
      },
      "1": {
        loc: {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 53,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "2": {
        loc: {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 47,
            column: 58
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 60
          }
        }, {
          start: {
            line: 47,
            column: 8
          },
          end: {
            line: 47,
            column: 58
          }
        }],
        line: 46
      },
      "3": {
        loc: {
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 58,
            column: 53
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 58,
            column: 47
          }
        }, {
          start: {
            line: 58,
            column: 51
          },
          end: {
            line: 58,
            column: 53
          }
        }],
        line: 58
      },
      "4": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 71,
            column: 14
          }
        }, {
          start: {
            line: 72,
            column: 6
          },
          end: {
            line: 74,
            column: 14
          }
        }],
        line: 66
      },
      "5": {
        loc: {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 80,
            column: 6
          },
          end: {
            line: 82,
            column: 14
          }
        }, {
          start: {
            line: 84,
            column: 6
          },
          end: {
            line: 98,
            column: 14
          }
        }, {
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 101,
            column: 14
          }
        }],
        line: 79
      },
      "6": {
        loc: {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 97,
            column: 9
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 86,
            column: 10
          },
          end: {
            line: 88,
            column: 18
          }
        }, {
          start: {
            line: 90,
            column: 10
          },
          end: {
            line: 93,
            column: 18
          }
        }, {
          start: {
            line: 95,
            column: 10
          },
          end: {
            line: 96,
            column: 18
          }
        }],
        line: 85
      },
      "7": {
        loc: {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 109,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 104
      },
      "8": {
        loc: {
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 111,
            column: 4
          },
          end: {
            line: 128,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 111
      },
      "9": {
        loc: {
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 118,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 118,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 113
      },
      "10": {
        loc: {
          start: {
            line: 121,
            column: 6
          },
          end: {
            line: 123,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 121,
            column: 6
          },
          end: {
            line: 123,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 121
      },
      "11": {
        loc: {
          start: {
            line: 130,
            column: 23
          },
          end: {
            line: 130,
            column: 44
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 23
          },
          end: {
            line: 130,
            column: 38
          }
        }, {
          start: {
            line: 130,
            column: 42
          },
          end: {
            line: 130,
            column: 44
          }
        }],
        line: 130
      },
      "12": {
        loc: {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 276,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 266
      },
      "13": {
        loc: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 319,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 299,
            column: 6
          },
          end: {
            line: 306,
            column: 14
          }
        }, {
          start: {
            line: 307,
            column: 6
          },
          end: {
            line: 314,
            column: 14
          }
        }, {
          start: {
            line: 315,
            column: 6
          },
          end: {
            line: 318,
            column: 10
          }
        }],
        line: 298
      },
      "14": {
        loc: {
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 339,
            column: 4
          },
          end: {
            line: 345,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 339
      },
      "15": {
        loc: {
          start: {
            line: 340,
            column: 6
          },
          end: {
            line: 342,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 340,
            column: 6
          },
          end: {
            line: 340,
            column: 32
          }
        }, {
          start: {
            line: 341,
            column: 6
          },
          end: {
            line: 341,
            column: 17
          }
        }, {
          start: {
            line: 342,
            column: 6
          },
          end: {
            line: 342,
            column: 39
          }
        }],
        line: 340
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0, 0],
      "6": [0, 0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0, 0],
      "14": [0, 0],
      "15": [0, 0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "711f66f0bb3283cb42d3a0479d524191bc363e44"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_1wxmir8xki = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1wxmir8xki();
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }










/**
 * Use {@link TransactionBuilder} to build a transaction object. If you have an
 * object or base64-encoded string of the transaction envelope XDR, use {@link
 * TransactionBuilder.fromXDR}.
 *
 * Once a Transaction has been created, its attributes and operations should not
 * be changed. You should only add signatures (using {@link Transaction#sign})
 * to a Transaction object before submitting to the network or forwarding on to
 * additional signers.
 *
 * @constructor
 *
 * @param {string|xdr.TransactionEnvelope} envelope - transaction envelope
 *     object or base64 encoded string
 * @param {string}  [networkPassphrase] - passphrase of the target stellar
 *     network (e.g. "Public Global Stellar Network ; September 2015")
 *
 * @extends TransactionBase
 */
var Transaction = /*#__PURE__*/function (_TransactionBase) {
  _inherits(Transaction, _TransactionBase);
  var _super = _createSuper(Transaction);
  function Transaction(envelope, networkPassphrase) {
    var _this;
    _classCallCheck(this, Transaction);
    cov_1wxmir8xki().f[0]++;
    cov_1wxmir8xki().s[0]++;
    if (typeof envelope === 'string') {
      cov_1wxmir8xki().b[0][0]++;
      var buffer = (cov_1wxmir8xki().s[1]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_8__["default"].from(envelope, 'base64'));
      cov_1wxmir8xki().s[2]++;
      envelope = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionEnvelope.fromXDR(buffer);
    } else {
      cov_1wxmir8xki().b[0][1]++;
    }
    var envelopeType = (cov_1wxmir8xki().s[3]++, envelope["switch"]());
    cov_1wxmir8xki().s[4]++;
    if (!((cov_1wxmir8xki().b[2][0]++, envelopeType === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTxV0()) || (cov_1wxmir8xki().b[2][1]++, envelopeType === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTx()))) {
      cov_1wxmir8xki().b[1][0]++;
      cov_1wxmir8xki().s[5]++;
      throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ".concat(envelopeType.name, "."));
    } else {
      cov_1wxmir8xki().b[1][1]++;
    }
    var txEnvelope = (cov_1wxmir8xki().s[6]++, envelope.value());
    var tx = (cov_1wxmir8xki().s[7]++, txEnvelope.tx());
    var fee = (cov_1wxmir8xki().s[8]++, tx.fee().toString());
    var signatures = (cov_1wxmir8xki().s[9]++, ((cov_1wxmir8xki().b[3][0]++, txEnvelope.signatures()) || (cov_1wxmir8xki().b[3][1]++, [])).slice());
    cov_1wxmir8xki().s[10]++;
    _this = _super.call(this, tx, signatures, fee, networkPassphrase);
    cov_1wxmir8xki().s[11]++;
    _this._envelopeType = envelopeType;
    cov_1wxmir8xki().s[12]++;
    _this._memo = tx.memo();
    cov_1wxmir8xki().s[13]++;
    _this._sequence = tx.seqNum().toString();
    cov_1wxmir8xki().s[14]++;
    switch (_this._envelopeType) {
      case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTxV0():
        cov_1wxmir8xki().b[4][0]++;
        cov_1wxmir8xki().s[15]++;
        _this._source = _strkey__WEBPACK_IMPORTED_MODULE_3__.StrKey.encodeEd25519PublicKey(_this.tx.sourceAccountEd25519());
        cov_1wxmir8xki().s[16]++;
        break;
      default:
        cov_1wxmir8xki().b[4][1]++;
        cov_1wxmir8xki().s[17]++;
        _this._source = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_7__.encodeMuxedAccountToAddress)(_this.tx.sourceAccount());
        cov_1wxmir8xki().s[18]++;
        break;
    }
    var cond = (cov_1wxmir8xki().s[19]++, null);
    var timeBounds = (cov_1wxmir8xki().s[20]++, null);
    cov_1wxmir8xki().s[21]++;
    switch (_this._envelopeType) {
      case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTxV0():
        cov_1wxmir8xki().b[5][0]++;
        cov_1wxmir8xki().s[22]++;
        timeBounds = tx.timeBounds();
        cov_1wxmir8xki().s[23]++;
        break;
      case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTx():
        cov_1wxmir8xki().b[5][1]++;
        cov_1wxmir8xki().s[24]++;
        switch (tx.cond()["switch"]()) {
          case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PreconditionType.precondTime():
            cov_1wxmir8xki().b[6][0]++;
            cov_1wxmir8xki().s[25]++;
            timeBounds = tx.cond().timeBounds();
            cov_1wxmir8xki().s[26]++;
            break;
          case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PreconditionType.precondV2():
            cov_1wxmir8xki().b[6][1]++;
            cov_1wxmir8xki().s[27]++;
            cond = tx.cond().v2();
            cov_1wxmir8xki().s[28]++;
            timeBounds = cond.timeBounds();
            cov_1wxmir8xki().s[29]++;
            break;
          default:
            cov_1wxmir8xki().b[6][2]++;
            cov_1wxmir8xki().s[30]++;
            break;
        }
        cov_1wxmir8xki().s[31]++;
        break;
      default:
        cov_1wxmir8xki().b[5][2]++;
        cov_1wxmir8xki().s[32]++;
        break;
    }
    cov_1wxmir8xki().s[33]++;
    if (timeBounds) {
      cov_1wxmir8xki().b[7][0]++;
      cov_1wxmir8xki().s[34]++;
      _this._timeBounds = {
        minTime: timeBounds.minTime().toString(),
        maxTime: timeBounds.maxTime().toString()
      };
    } else {
      cov_1wxmir8xki().b[7][1]++;
    }
    cov_1wxmir8xki().s[35]++;
    if (cond) {
      cov_1wxmir8xki().b[8][0]++;
      var ledgerBounds = (cov_1wxmir8xki().s[36]++, cond.ledgerBounds());
      cov_1wxmir8xki().s[37]++;
      if (ledgerBounds) {
        cov_1wxmir8xki().b[9][0]++;
        cov_1wxmir8xki().s[38]++;
        _this._ledgerBounds = {
          minLedger: ledgerBounds.minLedger(),
          maxLedger: ledgerBounds.maxLedger()
        };
      } else {
        cov_1wxmir8xki().b[9][1]++;
      }
      var minSeq = (cov_1wxmir8xki().s[39]++, cond.minSeqNum());
      cov_1wxmir8xki().s[40]++;
      if (minSeq) {
        cov_1wxmir8xki().b[10][0]++;
        cov_1wxmir8xki().s[41]++;
        _this._minAccountSequence = minSeq.toString();
      } else {
        cov_1wxmir8xki().b[10][1]++;
      }
      cov_1wxmir8xki().s[42]++;
      _this._minAccountSequenceAge = cond.minSeqAge();
      cov_1wxmir8xki().s[43]++;
      _this._minAccountSequenceLedgerGap = cond.minSeqLedgerGap();
      cov_1wxmir8xki().s[44]++;
      _this._extraSigners = cond.extraSigners();
    } else {
      cov_1wxmir8xki().b[8][1]++;
    }
    var operations = (cov_1wxmir8xki().s[45]++, (cov_1wxmir8xki().b[11][0]++, tx.operations()) || (cov_1wxmir8xki().b[11][1]++, []));
    cov_1wxmir8xki().s[46]++;
    _this._operations = lodash_map__WEBPACK_IMPORTED_MODULE_0___default()(operations, function (op) {
      cov_1wxmir8xki().f[1]++;
      cov_1wxmir8xki().s[47]++;
      return _operation__WEBPACK_IMPORTED_MODULE_4__.Operation.fromXDRObject(op);
    });
    return _this;
  }

  /**
   * @type {object}
   * @property {string} 64 bit unix timestamp
   * @property {string} 64 bit unix timestamp
   * @readonly
   */
  _createClass(Transaction, [{
    key: "timeBounds",
    get: function get() {
      cov_1wxmir8xki().f[2]++;
      cov_1wxmir8xki().s[48]++;
      return this._timeBounds;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[3]++;
      cov_1wxmir8xki().s[49]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {object}
     * @property {number} minLedger - smallest ledger bound (uint32)
     * @property {number} maxLedger - largest ledger bound (or 0 for inf)
     * @readonly
     */
  }, {
    key: "ledgerBounds",
    get: function get() {
      cov_1wxmir8xki().f[4]++;
      cov_1wxmir8xki().s[50]++;
      return this._ledgerBounds;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[5]++;
      cov_1wxmir8xki().s[51]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string} 64 bit account sequence
     * @readonly
     */
  }, {
    key: "minAccountSequence",
    get: function get() {
      cov_1wxmir8xki().f[6]++;
      cov_1wxmir8xki().s[52]++;
      return this._minAccountSequence;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[7]++;
      cov_1wxmir8xki().s[53]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {number} 64 bit number of seconds
     * @readonly
     */
  }, {
    key: "minAccountSequenceAge",
    get: function get() {
      cov_1wxmir8xki().f[8]++;
      cov_1wxmir8xki().s[54]++;
      return this._minAccountSequenceAge;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[9]++;
      cov_1wxmir8xki().s[55]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {number} 32 bit number of ledgers
     * @readonly
     */
  }, {
    key: "minAccountSequenceLedgerGap",
    get: function get() {
      cov_1wxmir8xki().f[10]++;
      cov_1wxmir8xki().s[56]++;
      return this._minAccountSequenceLedgerGap;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[11]++;
      cov_1wxmir8xki().s[57]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string[]}   array of extra signers (@{link StrKey}s)
     * @readonly
     */
  }, {
    key: "extraSigners",
    get: function get() {
      cov_1wxmir8xki().f[12]++;
      cov_1wxmir8xki().s[58]++;
      return this._extraSigners;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[13]++;
      cov_1wxmir8xki().s[59]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "sequence",
    get: function get() {
      cov_1wxmir8xki().f[14]++;
      cov_1wxmir8xki().s[60]++;
      return this._sequence;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[15]++;
      cov_1wxmir8xki().s[61]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "source",
    get: function get() {
      cov_1wxmir8xki().f[16]++;
      cov_1wxmir8xki().s[62]++;
      return this._source;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[17]++;
      cov_1wxmir8xki().s[63]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {Array.<xdr.Operation>}
     * @readonly
     */
  }, {
    key: "operations",
    get: function get() {
      cov_1wxmir8xki().f[18]++;
      cov_1wxmir8xki().s[64]++;
      return this._operations;
    },
    set: function set(value) {
      cov_1wxmir8xki().f[19]++;
      cov_1wxmir8xki().s[65]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "memo",
    get: function get() {
      cov_1wxmir8xki().f[20]++;
      cov_1wxmir8xki().s[66]++;
      return _memo__WEBPACK_IMPORTED_MODULE_5__.Memo.fromXDRObject(this._memo);
    },
    set: function set(value) {
      cov_1wxmir8xki().f[21]++;
      cov_1wxmir8xki().s[67]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * Returns the "signature base" of this transaction, which is the value
     * that, when hashed, should be signed to create a signature that
     * validators on the Stellar Network will accept.
     *
     * It is composed of a 4 prefix bytes followed by the xdr-encoded form
     * of this transaction.
     * @returns {Buffer}
     */
  }, {
    key: "signatureBase",
    value: function signatureBase() {
      cov_1wxmir8xki().f[22]++;
      var tx = (cov_1wxmir8xki().s[68]++, this.tx);

      // Backwards Compatibility: Use ENVELOPE_TYPE_TX to sign ENVELOPE_TYPE_TX_V0
      // we need a Transaction to generate the signature base
      cov_1wxmir8xki().s[69]++;
      if (this._envelopeType === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTxV0()) {
        cov_1wxmir8xki().b[12][0]++;
        cov_1wxmir8xki().s[70]++;
        tx = _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Transaction.fromXDR(_util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_8__["default"].concat([
        // TransactionV0 is a transaction with the AccountID discriminant
        // stripped off, we need to put it back to build a valid transaction
        // which we can use to build a TransactionSignaturePayloadTaggedTransaction
        _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].PublicKeyType.publicKeyTypeEd25519().toXDR(), tx.toXDR()]));
      } else {
        cov_1wxmir8xki().b[12][1]++;
      }
      var taggedTransaction = (cov_1wxmir8xki().s[71]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionSignaturePayloadTaggedTransaction.envelopeTypeTx(tx));
      var txSignature = (cov_1wxmir8xki().s[72]++, new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionSignaturePayload({
        networkId: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Hash.fromXDR((0,_hashing__WEBPACK_IMPORTED_MODULE_2__.hash)(this.networkPassphrase)),
        taggedTransaction: taggedTransaction
      }));
      cov_1wxmir8xki().s[73]++;
      return txSignature.toXDR();
    }

    /**
     * To envelope returns a xdr.TransactionEnvelope which can be submitted to the network.
     * @returns {xdr.TransactionEnvelope}
     */
  }, {
    key: "toEnvelope",
    value: function toEnvelope() {
      cov_1wxmir8xki().f[23]++;
      var rawTx = (cov_1wxmir8xki().s[74]++, this.tx.toXDR());
      var signatures = (cov_1wxmir8xki().s[75]++, this.signatures.slice()); // make a copy of the signatures

      var envelope;
      cov_1wxmir8xki().s[76]++;
      switch (this._envelopeType) {
        case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTxV0():
          cov_1wxmir8xki().b[13][0]++;
          cov_1wxmir8xki().s[77]++;
          envelope = new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionEnvelope.envelopeTypeTxV0(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionV0Envelope({
            tx: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionV0.fromXDR(rawTx),
            // make a copy of tx
            signatures: signatures
          }));
          cov_1wxmir8xki().s[78]++;
          break;
        case _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].EnvelopeType.envelopeTypeTx():
          cov_1wxmir8xki().b[13][1]++;
          cov_1wxmir8xki().s[79]++;
          envelope = new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionEnvelope.envelopeTypeTx(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].TransactionV1Envelope({
            tx: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Transaction.fromXDR(rawTx),
            // make a copy of tx
            signatures: signatures
          }));
          cov_1wxmir8xki().s[80]++;
          break;
        default:
          cov_1wxmir8xki().b[13][2]++;
          cov_1wxmir8xki().s[81]++;
          throw new Error("Invalid TransactionEnvelope: expected an envelopeTypeTxV0 or envelopeTypeTx but received an ".concat(this._envelopeType.name, "."));
      }
      cov_1wxmir8xki().s[82]++;
      return envelope;
    }

    /**
     * Calculate the claimable balance ID for an operation within the transaction.
     *
     * @param   {integer}  opIndex   the index of the CreateClaimableBalance op
     * @returns {string}   a hex string representing the claimable balance ID
     *
     * @throws {RangeError}   for invalid `opIndex` value
     * @throws {TypeError}    if op at `opIndex` is not `CreateClaimableBalance`
     * @throws for general XDR un/marshalling failures
     *
     * @see https://github.com/stellar/go/blob/d712346e61e288d450b0c08038c158f8848cc3e4/txnbuild/transaction.go#L392-L435
     *
     */
  }, {
    key: "getClaimableBalanceId",
    value: function getClaimableBalanceId(opIndex) {
      cov_1wxmir8xki().f[24]++;
      cov_1wxmir8xki().s[83]++;
      // Validate and then extract the operation from the transaction.
      if ((cov_1wxmir8xki().b[15][0]++, !Number.isInteger(opIndex)) || (cov_1wxmir8xki().b[15][1]++, opIndex < 0) || (cov_1wxmir8xki().b[15][2]++, opIndex >= this.operations.length)) {
        cov_1wxmir8xki().b[14][0]++;
        cov_1wxmir8xki().s[84]++;
        throw new RangeError('invalid operation index');
      } else {
        cov_1wxmir8xki().b[14][1]++;
      }
      var op = (cov_1wxmir8xki().s[85]++, this.operations[opIndex]);
      cov_1wxmir8xki().s[86]++;
      try {
        cov_1wxmir8xki().s[87]++;
        op = _operation__WEBPACK_IMPORTED_MODULE_4__.Operation.createClaimableBalance(op);
      } catch (err) {
        cov_1wxmir8xki().s[88]++;
        throw new TypeError("expected createClaimableBalance, got ".concat(op.type, ": ").concat(err));
      }

      // Always use the transaction's *unmuxed* source.
      var account = (cov_1wxmir8xki().s[89]++, _strkey__WEBPACK_IMPORTED_MODULE_3__.StrKey.decodeEd25519PublicKey((0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_7__.extractBaseAddress)(this.source)));
      var operationId = (cov_1wxmir8xki().s[90]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].HashIdPreimage.envelopeTypeOpId(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].HashIdPreimageOperationId({
        sourceAccount: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].AccountId.publicKeyTypeEd25519(account),
        seqNum: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].SequenceNumber.fromString(this.sequence),
        opNum: opIndex
      })));
      var opIdHash = (cov_1wxmir8xki().s[91]++, (0,_hashing__WEBPACK_IMPORTED_MODULE_2__.hash)(operationId.toXDR('raw')));
      var balanceId = (cov_1wxmir8xki().s[92]++, _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].ClaimableBalanceId.claimableBalanceIdTypeV0(opIdHash));
      cov_1wxmir8xki().s[93]++;
      return balanceId.toXDR('hex');
    }
  }]);
  return Transaction;
}(_transaction_base__WEBPACK_IMPORTED_MODULE_6__.TransactionBase);

/***/ }),

/***/ "./src/transaction_base.js":
/*!*********************************!*\
  !*** ./src/transaction_base.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TransactionBase": () => (/* binding */ TransactionBase)
/* harmony export */ });
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _hashing__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./hashing */ "./src/hashing.js");
/* harmony import */ var _keypair__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./keypair */ "./src/keypair.js");
/* harmony import */ var _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./util/BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_2qrmp2lcrq() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\transaction_base.js";
  var hash = "ef72f361a5e9a27617b7768a2f75c1acea00cd82";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\transaction_base.js",
    statementMap: {
      "0": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 15,
          column: 5
        }
      },
      "1": {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 14,
          column: 8
        }
      },
      "2": {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 48
        }
      },
      "3": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 18
        }
      },
      "4": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 34
        }
      },
      "5": {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 20
        }
      },
      "6": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 28
        }
      },
      "7": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 32,
          column: 48
        }
      },
      "8": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 20
        }
      },
      "9": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 48
        }
      },
      "10": {
        start: {
          line: 48,
          column: 4
        },
        end: {
          line: 48,
          column: 21
        }
      },
      "11": {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 48
        }
      },
      "12": {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 35
        }
      },
      "13": {
        start: {
          line: 64,
          column: 4
        },
        end: {
          line: 64,
          column: 48
        }
      },
      "14": {
        start: {
          line: 73,
          column: 19
        },
        end: {
          line: 73,
          column: 30
        }
      },
      "15": {
        start: {
          line: 74,
          column: 4
        },
        end: {
          line: 77,
          column: 7
        }
      },
      "16": {
        start: {
          line: 75,
          column: 18
        },
        end: {
          line: 75,
          column: 42
        }
      },
      "17": {
        start: {
          line: 76,
          column: 6
        },
        end: {
          line: 76,
          column: 32
        }
      },
      "18": {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 56
        }
      },
      "19": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 133,
          column: 5
        }
      },
      "20": {
        start: {
          line: 132,
          column: 6
        },
        end: {
          line: 132,
          column: 43
        }
      },
      "21": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 137,
          column: 5
        }
      },
      "22": {
        start: {
          line: 136,
          column: 6
        },
        end: {
          line: 136,
          column: 43
        }
      },
      "23": {
        start: {
          line: 141,
          column: 28
        },
        end: {
          line: 141,
          column: 67
        }
      },
      "24": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 148,
          column: 5
        }
      },
      "25": {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 144,
          column: 49
        }
      },
      "26": {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 37
        }
      },
      "27": {
        start: {
          line: 147,
          column: 6
        },
        end: {
          line: 147,
          column: 43
        }
      },
      "28": {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 152,
          column: 5
        }
      },
      "29": {
        start: {
          line: 151,
          column: 6
        },
        end: {
          line: 151,
          column: 43
        }
      },
      "30": {
        start: {
          line: 154,
          column: 4
        },
        end: {
          line: 159,
          column: 6
        }
      },
      "31": {
        start: {
          line: 172,
          column: 4
        },
        end: {
          line: 172,
          column: 36
        }
      },
      "32": {
        start: {
          line: 181,
          column: 4
        },
        end: {
          line: 183,
          column: 5
        }
      },
      "33": {
        start: {
          line: 182,
          column: 6
        },
        end: {
          line: 182,
          column: 53
        }
      },
      "34": {
        start: {
          line: 185,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      "35": {
        start: {
          line: 186,
          column: 6
        },
        end: {
          line: 186,
          column: 66
        }
      },
      "36": {
        start: {
          line: 189,
          column: 22
        },
        end: {
          line: 189,
          column: 30
        }
      },
      "37": {
        start: {
          line: 190,
          column: 18
        },
        end: {
          line: 190,
          column: 32
        }
      },
      "38": {
        start: {
          line: 191,
          column: 17
        },
        end: {
          line: 191,
          column: 46
        }
      },
      "39": {
        start: {
          line: 192,
          column: 4
        },
        end: {
          line: 192,
          column: 74
        }
      },
      "40": {
        start: {
          line: 200,
          column: 4
        },
        end: {
          line: 200,
          column: 38
        }
      },
      "41": {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 204,
          column: 45
        }
      },
      "42": {
        start: {
          line: 208,
          column: 4
        },
        end: {
          line: 208,
          column: 45
        }
      },
      "43": {
        start: {
          line: 216,
          column: 4
        },
        end: {
          line: 216,
          column: 56
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 10,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        loc: {
          start: {
            line: 10,
            column: 54
          },
          end: {
            line: 21,
            column: 3
          }
        },
        line: 10
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 27,
            column: 2
          },
          end: {
            line: 27,
            column: 3
          }
        },
        loc: {
          start: {
            line: 27,
            column: 19
          },
          end: {
            line: 29,
            column: 3
          }
        },
        line: 27
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 31,
            column: 2
          },
          end: {
            line: 31,
            column: 3
          }
        },
        loc: {
          start: {
            line: 31,
            column: 24
          },
          end: {
            line: 33,
            column: 3
          }
        },
        line: 31
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 35,
            column: 2
          },
          end: {
            line: 35,
            column: 3
          }
        },
        loc: {
          start: {
            line: 35,
            column: 11
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 35
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        loc: {
          start: {
            line: 39,
            column: 16
          },
          end: {
            line: 41,
            column: 3
          }
        },
        line: 39
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 47,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        loc: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 49,
            column: 3
          }
        },
        line: 47
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 51,
            column: 3
          }
        },
        loc: {
          start: {
            line: 51,
            column: 17
          },
          end: {
            line: 53,
            column: 3
          }
        },
        line: 51
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 59,
            column: 2
          },
          end: {
            line: 59,
            column: 3
          }
        },
        loc: {
          start: {
            line: 59,
            column: 26
          },
          end: {
            line: 61,
            column: 3
          }
        },
        line: 59
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 43
          },
          end: {
            line: 65,
            column: 3
          }
        },
        line: 63
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 72,
            column: 2
          },
          end: {
            line: 72,
            column: 3
          }
        },
        loc: {
          start: {
            line: 72,
            column: 20
          },
          end: {
            line: 78,
            column: 3
          }
        },
        line: 72
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 74,
            column: 21
          },
          end: {
            line: 74,
            column: 22
          }
        },
        loc: {
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 77,
            column: 5
          }
        },
        line: 74
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 102,
            column: 2
          },
          end: {
            line: 102,
            column: 3
          }
        },
        loc: {
          start: {
            line: 102,
            column: 31
          },
          end: {
            line: 104,
            column: 3
          }
        },
        line: 102
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 130,
            column: 2
          },
          end: {
            line: 130,
            column: 3
          }
        },
        loc: {
          start: {
            line: 130,
            column: 47
          },
          end: {
            line: 160,
            column: 3
          }
        },
        line: 130
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 171,
            column: 2
          },
          end: {
            line: 171,
            column: 3
          }
        },
        loc: {
          start: {
            line: 171,
            column: 35
          },
          end: {
            line: 173,
            column: 3
          }
        },
        line: 171
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 180,
            column: 2
          },
          end: {
            line: 180,
            column: 3
          }
        },
        loc: {
          start: {
            line: 180,
            column: 22
          },
          end: {
            line: 193,
            column: 3
          }
        },
        line: 180
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 199,
            column: 2
          },
          end: {
            line: 199,
            column: 3
          }
        },
        loc: {
          start: {
            line: 199,
            column: 9
          },
          end: {
            line: 201,
            column: 3
          }
        },
        line: 199
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 203,
            column: 2
          },
          end: {
            line: 203,
            column: 3
          }
        },
        loc: {
          start: {
            line: 203,
            column: 18
          },
          end: {
            line: 205,
            column: 3
          }
        },
        line: 203
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 207,
            column: 2
          },
          end: {
            line: 207,
            column: 3
          }
        },
        loc: {
          start: {
            line: 207,
            column: 15
          },
          end: {
            line: 209,
            column: 3
          }
        },
        line: 207
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 215,
            column: 2
          },
          end: {
            line: 215,
            column: 3
          }
        },
        loc: {
          start: {
            line: 215,
            column: 10
          },
          end: {
            line: 217,
            column: 3
          }
        },
        line: 215
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 15,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      },
      "1": {
        loc: {
          start: {
            line: 130,
            column: 15
          },
          end: {
            line: 130,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 27
          },
          end: {
            line: 130,
            column: 29
          }
        }],
        line: 130
      },
      "2": {
        loc: {
          start: {
            line: 130,
            column: 31
          },
          end: {
            line: 130,
            column: 45
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 130,
            column: 43
          },
          end: {
            line: 130,
            column: 45
          }
        }],
        line: 130
      },
      "3": {
        loc: {
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 131,
            column: 4
          },
          end: {
            line: 133,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 131
      },
      "4": {
        loc: {
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 131,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 8
          },
          end: {
            line: 131,
            column: 18
          }
        }, {
          start: {
            line: 131,
            column: 22
          },
          end: {
            line: 131,
            column: 51
          }
        }],
        line: 131
      },
      "5": {
        loc: {
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 135,
            column: 4
          },
          end: {
            line: 137,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 135
      },
      "6": {
        loc: {
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 51
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 8
          },
          end: {
            line: 135,
            column: 18
          }
        }, {
          start: {
            line: 135,
            column: 22
          },
          end: {
            line: 135,
            column: 51
          }
        }],
        line: 135
      },
      "7": {
        loc: {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 152,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 150
      },
      "8": {
        loc: {
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 181,
            column: 4
          },
          end: {
            line: 183,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 181
      },
      "9": {
        loc: {
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 185,
            column: 4
          },
          end: {
            line: 187,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 185
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0
    },
    b: {
      "0": [0, 0],
      "1": [0],
      "2": [0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "ef72f361a5e9a27617b7768a2f75c1acea00cd82"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2qrmp2lcrq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2qrmp2lcrq();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }





/**
 * @ignore
 */
var TransactionBase = /*#__PURE__*/function () {
  function TransactionBase(tx, signatures, fee, networkPassphrase) {
    _classCallCheck(this, TransactionBase);
    cov_2qrmp2lcrq().f[0]++;
    cov_2qrmp2lcrq().s[0]++;
    if (typeof networkPassphrase !== 'string') {
      cov_2qrmp2lcrq().b[0][0]++;
      cov_2qrmp2lcrq().s[1]++;
      throw new Error("Invalid passphrase provided to Transaction: expected a string but got a ".concat(_typeof(networkPassphrase)));
    } else {
      cov_2qrmp2lcrq().b[0][1]++;
    }
    cov_2qrmp2lcrq().s[2]++;
    this._networkPassphrase = networkPassphrase;
    cov_2qrmp2lcrq().s[3]++;
    this._tx = tx;
    cov_2qrmp2lcrq().s[4]++;
    this._signatures = signatures;
    cov_2qrmp2lcrq().s[5]++;
    this._fee = fee;
  }

  /**
   * @type {Array.<xdr.DecoratedSignature>}
   * @readonly
   */
  _createClass(TransactionBase, [{
    key: "signatures",
    get: function get() {
      cov_2qrmp2lcrq().f[1]++;
      cov_2qrmp2lcrq().s[6]++;
      return this._signatures;
    },
    set: function set(value) {
      cov_2qrmp2lcrq().f[2]++;
      cov_2qrmp2lcrq().s[7]++;
      throw new Error('Transaction is immutable');
    }
  }, {
    key: "tx",
    get: function get() {
      cov_2qrmp2lcrq().f[3]++;
      cov_2qrmp2lcrq().s[8]++;
      return this._tx;
    },
    set: function set(value) {
      cov_2qrmp2lcrq().f[4]++;
      cov_2qrmp2lcrq().s[9]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "fee",
    get: function get() {
      cov_2qrmp2lcrq().f[5]++;
      cov_2qrmp2lcrq().s[10]++;
      return this._fee;
    },
    set: function set(value) {
      cov_2qrmp2lcrq().f[6]++;
      cov_2qrmp2lcrq().s[11]++;
      throw new Error('Transaction is immutable');
    }

    /**
     * @type {string}
     * @readonly
     */
  }, {
    key: "networkPassphrase",
    get: function get() {
      cov_2qrmp2lcrq().f[7]++;
      cov_2qrmp2lcrq().s[12]++;
      return this._networkPassphrase;
    },
    set: function set(networkPassphrase) {
      cov_2qrmp2lcrq().f[8]++;
      cov_2qrmp2lcrq().s[13]++;
      this._networkPassphrase = networkPassphrase;
    }

    /**
     * Signs the transaction with the given {@link Keypair}.
     * @param {...Keypair} keypairs Keypairs of signers
     * @returns {void}
     */
  }, {
    key: "sign",
    value: function sign() {
      var _this = this;
      cov_2qrmp2lcrq().f[9]++;
      var txHash = (cov_2qrmp2lcrq().s[14]++, this.hash());
      cov_2qrmp2lcrq().s[15]++;
      for (var _len = arguments.length, keypairs = new Array(_len), _key = 0; _key < _len; _key++) {
        keypairs[_key] = arguments[_key];
      }
      keypairs.forEach(function (kp) {
        cov_2qrmp2lcrq().f[10]++;
        var sig = (cov_2qrmp2lcrq().s[16]++, kp.signDecorated(txHash));
        cov_2qrmp2lcrq().s[17]++;
        _this.signatures.push(sig);
      });
    }

    /**
     * Signs a transaction with the given {@link Keypair}. Useful if someone sends
     * you a transaction XDR for you to sign and return (see
     * [addSignature](#addSignature) for more information).
     *
     * When you get a transaction XDR to sign....
     * - Instantiate a `Transaction` object with the XDR
     * - Use {@link Keypair} to generate a keypair object for your Stellar seed.
     * - Run `getKeypairSignature` with that keypair
     * - Send back the signature along with your publicKey (not your secret seed!)
     *
     * Example:
     * ```javascript
     * // `transactionXDR` is a string from the person generating the transaction
     * const transaction = new Transaction(transactionXDR, networkPassphrase);
     * const keypair = Keypair.fromSecret(myStellarSeed);
     * return transaction.getKeypairSignature(keypair);
     * ```
     *
     * @param {Keypair} keypair Keypair of signer
     * @returns {string} Signature string
     */
  }, {
    key: "getKeypairSignature",
    value: function getKeypairSignature(keypair) {
      cov_2qrmp2lcrq().f[11]++;
      cov_2qrmp2lcrq().s[18]++;
      return keypair.sign(this.hash()).toString('base64');
    }

    /**
     * Add a signature to the transaction. Useful when a party wants to pre-sign
     * a transaction but doesn't want to give access to their secret keys.
     * This will also verify whether the signature is valid.
     *
     * Here's how you would use this feature to solicit multiple signatures.
     * - Use `TransactionBuilder` to build a new transaction.
     * - Make sure to set a long enough timeout on that transaction to give your
     * signers enough time to sign!
     * - Once you build the transaction, use `transaction.toXDR()` to get the
     * base64-encoded XDR string.
     * - _Warning!_ Once you've built this transaction, don't submit any other
     * transactions onto your account! Doing so will invalidate this pre-compiled
     * transaction!
     * - Send this XDR string to your other parties. They can use the instructions
     * for [getKeypairSignature](#getKeypairSignature) to sign the transaction.
     * - They should send you back their `publicKey` and the `signature` string
     * from [getKeypairSignature](#getKeypairSignature), both of which you pass to
     * this function.
     *
     * @param {string} publicKey The public key of the signer
     * @param {string} signature The base64 value of the signature XDR
     * @returns {void}
     */
  }, {
    key: "addSignature",
    value: function addSignature() {
      var publicKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_2qrmp2lcrq().b[1][0]++, '');
      var signature = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_2qrmp2lcrq().b[2][0]++, '');
      cov_2qrmp2lcrq().f[12]++;
      cov_2qrmp2lcrq().s[19]++;
      if ((cov_2qrmp2lcrq().b[4][0]++, !signature) || (cov_2qrmp2lcrq().b[4][1]++, typeof signature !== 'string')) {
        cov_2qrmp2lcrq().b[3][0]++;
        cov_2qrmp2lcrq().s[20]++;
        throw new Error('Invalid signature');
      } else {
        cov_2qrmp2lcrq().b[3][1]++;
      }
      cov_2qrmp2lcrq().s[21]++;
      if ((cov_2qrmp2lcrq().b[6][0]++, !publicKey) || (cov_2qrmp2lcrq().b[6][1]++, typeof publicKey !== 'string')) {
        cov_2qrmp2lcrq().b[5][0]++;
        cov_2qrmp2lcrq().s[22]++;
        throw new Error('Invalid publicKey');
      } else {
        cov_2qrmp2lcrq().b[5][1]++;
      }
      var keypair;
      var hint;
      var signatureBuffer = (cov_2qrmp2lcrq().s[23]++, _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(signature, 'base64'));
      cov_2qrmp2lcrq().s[24]++;
      try {
        cov_2qrmp2lcrq().s[25]++;
        keypair = _keypair__WEBPACK_IMPORTED_MODULE_2__.Keypair.fromPublicKey(publicKey);
        cov_2qrmp2lcrq().s[26]++;
        hint = keypair.signatureHint();
      } catch (e) {
        cov_2qrmp2lcrq().s[27]++;
        throw new Error('Invalid publicKey');
      }
      cov_2qrmp2lcrq().s[28]++;
      if (!keypair.verify(this.hash(), signatureBuffer)) {
        cov_2qrmp2lcrq().b[7][0]++;
        cov_2qrmp2lcrq().s[29]++;
        throw new Error('Invalid signature');
      } else {
        cov_2qrmp2lcrq().b[7][1]++;
      }
      cov_2qrmp2lcrq().s[30]++;
      this.signatures.push(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].DecoratedSignature({
        hint: hint,
        signature: signatureBuffer
      }));
    }

    /**
     * Add a decorated signature directly to the transaction envelope.
     *
     * @param {xdr.DecoratedSignature} signature    raw signature to add
     * @returns {void}
     *
     * @see Keypair.signDecorated
     * @see Keypair.signPayloadDecorated
     */
  }, {
    key: "addDecoratedSignature",
    value: function addDecoratedSignature(signature) {
      cov_2qrmp2lcrq().f[13]++;
      cov_2qrmp2lcrq().s[31]++;
      this.signatures.push(signature);
    }

    /**
     * Add `hashX` signer preimage as signature.
     * @param {Buffer|String} preimage Preimage of hash used as signer
     * @returns {void}
     */
  }, {
    key: "signHashX",
    value: function signHashX(preimage) {
      cov_2qrmp2lcrq().f[14]++;
      cov_2qrmp2lcrq().s[32]++;
      if (typeof preimage === 'string') {
        cov_2qrmp2lcrq().b[8][0]++;
        cov_2qrmp2lcrq().s[33]++;
        preimage = _util_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].from(preimage, 'hex');
      } else {
        cov_2qrmp2lcrq().b[8][1]++;
      }
      cov_2qrmp2lcrq().s[34]++;
      if (preimage.length > 64) {
        cov_2qrmp2lcrq().b[9][0]++;
        cov_2qrmp2lcrq().s[35]++;
        throw new Error('preimage cannnot be longer than 64 bytes');
      } else {
        cov_2qrmp2lcrq().b[9][1]++;
      }
      var signature = (cov_2qrmp2lcrq().s[36]++, preimage);
      var hashX = (cov_2qrmp2lcrq().s[37]++, (0,_hashing__WEBPACK_IMPORTED_MODULE_1__.hash)(preimage));
      var hint = (cov_2qrmp2lcrq().s[38]++, hashX.slice(hashX.length - 4));
      cov_2qrmp2lcrq().s[39]++;
      this.signatures.push(new _xdr__WEBPACK_IMPORTED_MODULE_0__["default"].DecoratedSignature({
        hint: hint,
        signature: signature
      }));
    }

    /**
     * Returns a hash for this transaction, suitable for signing.
     * @returns {Buffer}
     */
  }, {
    key: "hash",
    value: function hash() {
      cov_2qrmp2lcrq().f[15]++;
      cov_2qrmp2lcrq().s[40]++;
      return (0,_hashing__WEBPACK_IMPORTED_MODULE_1__.hash)(this.signatureBase());
    }
  }, {
    key: "signatureBase",
    value: function signatureBase() {
      cov_2qrmp2lcrq().f[16]++;
      cov_2qrmp2lcrq().s[41]++;
      throw new Error('Implement in subclass');
    }
  }, {
    key: "toEnvelope",
    value: function toEnvelope() {
      cov_2qrmp2lcrq().f[17]++;
      cov_2qrmp2lcrq().s[42]++;
      throw new Error('Implement in subclass');
    }

    /**
     * Get the transaction envelope as a base64-encoded string
     * @returns {string} XDR string
     */
  }, {
    key: "toXDR",
    value: function toXDR() {
      cov_2qrmp2lcrq().f[18]++;
      cov_2qrmp2lcrq().s[43]++;
      return this.toEnvelope().toXDR().toString('base64');
    }
  }]);
  return TransactionBase;
}();

/***/ }),

/***/ "./src/transaction_builder.js":
/*!************************************!*\
  !*** ./src/transaction_builder.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BASE_FEE": () => (/* binding */ BASE_FEE),
/* harmony export */   "TimeoutInfinite": () => (/* binding */ TimeoutInfinite),
/* harmony export */   "TransactionBuilder": () => (/* binding */ TransactionBuilder),
/* harmony export */   "isValidDate": () => (/* binding */ isValidDate)
/* harmony export */ });
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-xdr */ "./node_modules/js-xdr/dist/xdr.js");
/* harmony import */ var js_xdr__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_xdr__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lodash/clone */ "./node_modules/lodash/clone.js");
/* harmony import */ var lodash_clone__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lodash_clone__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! lodash/isUndefined */ "./node_modules/lodash/isUndefined.js");
/* harmony import */ var lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! lodash/isArray */ "./node_modules/lodash/isArray.js");
/* harmony import */ var lodash_isArray__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(lodash_isArray__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./xdr */ "./src/xdr.js");
/* harmony import */ var _transaction__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./transaction */ "./src/transaction.js");
/* harmony import */ var _fee_bump_transaction__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./fee_bump_transaction */ "./src/fee_bump_transaction.js");
/* harmony import */ var _signerkey__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./signerkey */ "./src/signerkey.js");
/* harmony import */ var _memo__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./memo */ "./src/memo.js");
/* harmony import */ var _util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./util/decode_encode_muxed_account */ "./src/util/decode_encode_muxed_account.js");
function cov_47gaomomq() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\transaction_builder.js";
  var hash = "b562684671b1c6fd90adbfcf3ac4836c4c02829b";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\transaction_builder.js",
    statementMap: {
      "0": {
        start: {
          line: 25,
          column: 24
        },
        end: {
          line: 25,
          column: 29
        }
      },
      "1": {
        start: {
          line: 32,
          column: 31
        },
        end: {
          line: 32,
          column: 32
        }
      },
      "2": {
        start: {
          line: 116,
          column: 4
        },
        end: {
          line: 118,
          column: 5
        }
      },
      "3": {
        start: {
          line: 117,
          column: 6
        },
        end: {
          line: 117,
          column: 73
        }
      },
      "4": {
        start: {
          line: 120,
          column: 4
        },
        end: {
          line: 122,
          column: 5
        }
      },
      "5": {
        start: {
          line: 121,
          column: 6
        },
        end: {
          line: 121,
          column: 75
        }
      },
      "6": {
        start: {
          line: 124,
          column: 4
        },
        end: {
          line: 124,
          column: 32
        }
      },
      "7": {
        start: {
          line: 125,
          column: 4
        },
        end: {
          line: 125,
          column: 25
        }
      },
      "8": {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 28
        }
      },
      "9": {
        start: {
          line: 128,
          column: 4
        },
        end: {
          line: 128,
          column: 53
        }
      },
      "10": {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 129,
          column: 57
        }
      },
      "11": {
        start: {
          line: 130,
          column: 4
        },
        end: {
          line: 130,
          column: 62
        }
      },
      "12": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 68
        }
      },
      "13": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 80
        }
      },
      "14": {
        start: {
          line: 133,
          column: 4
        },
        end: {
          line: 133,
          column: 57
        }
      },
      "15": {
        start: {
          line: 134,
          column: 4
        },
        end: {
          line: 134,
          column: 41
        }
      },
      "16": {
        start: {
          line: 135,
          column: 4
        },
        end: {
          line: 135,
          column: 60
        }
      },
      "17": {
        start: {
          line: 147,
          column: 4
        },
        end: {
          line: 147,
          column: 36
        }
      },
      "18": {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 16
        }
      },
      "19": {
        start: {
          line: 157,
          column: 4
        },
        end: {
          line: 157,
          column: 21
        }
      },
      "20": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 16
        }
      },
      "21": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 197,
          column: 5
        }
      },
      "22": {
        start: {
          line: 194,
          column: 6
        },
        end: {
          line: 196,
          column: 8
        }
      },
      "23": {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 201,
          column: 5
        }
      },
      "24": {
        start: {
          line: 200,
          column: 6
        },
        end: {
          line: 200,
          column: 52
        }
      },
      "25": {
        start: {
          line: 203,
          column: 4
        },
        end: {
          line: 218,
          column: 5
        }
      },
      "26": {
        start: {
          line: 204,
          column: 31
        },
        end: {
          line: 204,
          column: 77
        }
      },
      "27": {
        start: {
          line: 205,
          column: 6
        },
        end: {
          line: 212,
          column: 7
        }
      },
      "28": {
        start: {
          line: 206,
          column: 8
        },
        end: {
          line: 206,
          column: 68
        }
      },
      "29": {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 211,
          column: 10
        }
      },
      "30": {
        start: {
          line: 214,
          column: 6
        },
        end: {
          line: 217,
          column: 8
        }
      },
      "31": {
        start: {
          line: 220,
          column: 4
        },
        end: {
          line: 220,
          column: 16
        }
      },
      "32": {
        start: {
          line: 242,
          column: 4
        },
        end: {
          line: 244,
          column: 5
        }
      },
      "33": {
        start: {
          line: 243,
          column: 6
        },
        end: {
          line: 243,
          column: 55
        }
      },
      "34": {
        start: {
          line: 245,
          column: 4
        },
        end: {
          line: 247,
          column: 5
        }
      },
      "35": {
        start: {
          line: 246,
          column: 6
        },
        end: {
          line: 246,
          column: 55
        }
      },
      "36": {
        start: {
          line: 249,
          column: 4
        },
        end: {
          line: 253,
          column: 5
        }
      },
      "37": {
        start: {
          line: 250,
          column: 6
        },
        end: {
          line: 252,
          column: 8
        }
      },
      "38": {
        start: {
          line: 256,
          column: 20
        },
        end: {
          line: 256,
          column: 63
        }
      },
      "39": {
        start: {
          line: 257,
          column: 20
        },
        end: {
          line: 257,
          column: 63
        }
      },
      "40": {
        start: {
          line: 258,
          column: 4
        },
        end: {
          line: 260,
          column: 5
        }
      },
      "41": {
        start: {
          line: 259,
          column: 6
        },
        end: {
          line: 259,
          column: 53
        }
      },
      "42": {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 263,
          column: 5
        }
      },
      "43": {
        start: {
          line: 262,
          column: 6
        },
        end: {
          line: 262,
          column: 53
        }
      },
      "44": {
        start: {
          line: 264,
          column: 4
        },
        end: {
          line: 266,
          column: 5
        }
      },
      "45": {
        start: {
          line: 265,
          column: 6
        },
        end: {
          line: 265,
          column: 66
        }
      },
      "46": {
        start: {
          line: 268,
          column: 4
        },
        end: {
          line: 268,
          column: 43
        }
      },
      "47": {
        start: {
          line: 270,
          column: 4
        },
        end: {
          line: 270,
          column: 16
        }
      },
      "48": {
        start: {
          line: 289,
          column: 4
        },
        end: {
          line: 293,
          column: 5
        }
      },
      "49": {
        start: {
          line: 290,
          column: 6
        },
        end: {
          line: 292,
          column: 8
        }
      },
      "50": {
        start: {
          line: 295,
          column: 4
        },
        end: {
          line: 297,
          column: 5
        }
      },
      "51": {
        start: {
          line: 296,
          column: 6
        },
        end: {
          line: 296,
          column: 55
        }
      },
      "52": {
        start: {
          line: 298,
          column: 4
        },
        end: {
          line: 300,
          column: 5
        }
      },
      "53": {
        start: {
          line: 299,
          column: 6
        },
        end: {
          line: 299,
          column: 55
        }
      },
      "54": {
        start: {
          line: 301,
          column: 4
        },
        end: {
          line: 303,
          column: 5
        }
      },
      "55": {
        start: {
          line: 302,
          column: 6
        },
        end: {
          line: 302,
          column: 70
        }
      },
      "56": {
        start: {
          line: 305,
          column: 4
        },
        end: {
          line: 305,
          column: 49
        }
      },
      "57": {
        start: {
          line: 307,
          column: 4
        },
        end: {
          line: 307,
          column: 16
        }
      },
      "58": {
        start: {
          line: 328,
          column: 4
        },
        end: {
          line: 332,
          column: 5
        }
      },
      "59": {
        start: {
          line: 329,
          column: 6
        },
        end: {
          line: 331,
          column: 8
        }
      },
      "60": {
        start: {
          line: 334,
          column: 4
        },
        end: {
          line: 334,
          column: 49
        }
      },
      "61": {
        start: {
          line: 336,
          column: 4
        },
        end: {
          line: 336,
          column: 16
        }
      },
      "62": {
        start: {
          line: 352,
          column: 4
        },
        end: {
          line: 354,
          column: 5
        }
      },
      "63": {
        start: {
          line: 353,
          column: 6
        },
        end: {
          line: 353,
          column: 67
        }
      },
      "64": {
        start: {
          line: 355,
          column: 4
        },
        end: {
          line: 359,
          column: 5
        }
      },
      "65": {
        start: {
          line: 356,
          column: 6
        },
        end: {
          line: 358,
          column: 8
        }
      },
      "66": {
        start: {
          line: 361,
          column: 4
        },
        end: {
          line: 363,
          column: 5
        }
      },
      "67": {
        start: {
          line: 362,
          column: 6
        },
        end: {
          line: 362,
          column: 69
        }
      },
      "68": {
        start: {
          line: 365,
          column: 4
        },
        end: {
          line: 365,
          column: 51
        }
      },
      "69": {
        start: {
          line: 367,
          column: 4
        },
        end: {
          line: 367,
          column: 16
        }
      },
      "70": {
        start: {
          line: 383,
          column: 4
        },
        end: {
          line: 387,
          column: 5
        }
      },
      "71": {
        start: {
          line: 384,
          column: 6
        },
        end: {
          line: 386,
          column: 8
        }
      },
      "72": {
        start: {
          line: 389,
          column: 4
        },
        end: {
          line: 391,
          column: 5
        }
      },
      "73": {
        start: {
          line: 390,
          column: 6
        },
        end: {
          line: 390,
          column: 76
        }
      },
      "74": {
        start: {
          line: 393,
          column: 4
        },
        end: {
          line: 393,
          column: 43
        }
      },
      "75": {
        start: {
          line: 395,
          column: 4
        },
        end: {
          line: 395,
          column: 16
        }
      },
      "76": {
        start: {
          line: 409,
          column: 4
        },
        end: {
          line: 411,
          column: 5
        }
      },
      "77": {
        start: {
          line: 410,
          column: 6
        },
        end: {
          line: 410,
          column: 68
        }
      },
      "78": {
        start: {
          line: 413,
          column: 4
        },
        end: {
          line: 417,
          column: 5
        }
      },
      "79": {
        start: {
          line: 414,
          column: 6
        },
        end: {
          line: 416,
          column: 8
        }
      },
      "80": {
        start: {
          line: 419,
          column: 4
        },
        end: {
          line: 421,
          column: 5
        }
      },
      "81": {
        start: {
          line: 420,
          column: 6
        },
        end: {
          line: 420,
          column: 73
        }
      },
      "82": {
        start: {
          line: 423,
          column: 4
        },
        end: {
          line: 423,
          column: 44
        }
      },
      "83": {
        start: {
          line: 425,
          column: 4
        },
        end: {
          line: 425,
          column: 16
        }
      },
      "84": {
        start: {
          line: 437,
          column: 4
        },
        end: {
          line: 437,
          column: 47
        }
      },
      "85": {
        start: {
          line: 438,
          column: 4
        },
        end: {
          line: 438,
          column: 16
        }
      },
      "86": {
        start: {
          line: 447,
          column: 27
        },
        end: {
          line: 447,
          column: 78
        }
      },
      "87": {
        start: {
          line: 448,
          column: 16
        },
        end: {
          line: 450,
          column: 17
        }
      },
      "88": {
        start: {
          line: 451,
          column: 18
        },
        end: {
          line: 455,
          column: 5
        }
      },
      "89": {
        start: {
          line: 457,
          column: 4
        },
        end: {
          line: 465,
          column: 5
        }
      },
      "90": {
        start: {
          line: 462,
          column: 6
        },
        end: {
          line: 464,
          column: 8
        }
      },
      "91": {
        start: {
          line: 467,
          column: 4
        },
        end: {
          line: 469,
          column: 5
        }
      },
      "92": {
        start: {
          line: 468,
          column: 6
        },
        end: {
          line: 468,
          column: 73
        }
      },
      "93": {
        start: {
          line: 470,
          column: 4
        },
        end: {
          line: 472,
          column: 5
        }
      },
      "94": {
        start: {
          line: 471,
          column: 6
        },
        end: {
          line: 471,
          column: 73
        }
      },
      "95": {
        start: {
          line: 474,
          column: 4
        },
        end: {
          line: 476,
          column: 6
        }
      },
      "96": {
        start: {
          line: 477,
          column: 4
        },
        end: {
          line: 479,
          column: 6
        }
      },
      "97": {
        start: {
          line: 481,
          column: 23
        },
        end: {
          line: 481,
          column: 58
        }
      },
      "98": {
        start: {
          line: 483,
          column: 4
        },
        end: {
          line: 517,
          column: 5
        }
      },
      "99": {
        start: {
          line: 484,
          column: 25
        },
        end: {
          line: 484,
          column: 29
        }
      },
      "100": {
        start: {
          line: 485,
          column: 6
        },
        end: {
          line: 487,
          column: 7
        }
      },
      "101": {
        start: {
          line: 486,
          column: 8
        },
        end: {
          line: 486,
          column: 63
        }
      },
      "102": {
        start: {
          line: 489,
          column: 22
        },
        end: {
          line: 489,
          column: 52
        }
      },
      "103": {
        start: {
          line: 490,
          column: 6
        },
        end: {
          line: 490,
          column: 59
        }
      },
      "104": {
        start: {
          line: 492,
          column: 24
        },
        end: {
          line: 496,
          column: 7
        }
      },
      "105": {
        start: {
          line: 498,
          column: 30
        },
        end: {
          line: 498,
          column: 67
        }
      },
      "106": {
        start: {
          line: 501,
          column: 8
        },
        end: {
          line: 503,
          column: 14
        }
      },
      "107": {
        start: {
          line: 505,
          column: 6
        },
        end: {
          line: 514,
          column: 8
        }
      },
      "108": {
        start: {
          line: 516,
          column: 6
        },
        end: {
          line: 516,
          column: 61
        }
      },
      "109": {
        start: {
          line: 519,
          column: 4
        },
        end: {
          line: 519,
          column: 79
        }
      },
      "110": {
        start: {
          line: 520,
          column: 4
        },
        end: {
          line: 520,
          column: 42
        }
      },
      "111": {
        start: {
          line: 522,
          column: 16
        },
        end: {
          line: 522,
          column: 42
        }
      },
      "112": {
        start: {
          line: 523,
          column: 4
        },
        end: {
          line: 523,
          column: 36
        }
      },
      "113": {
        start: {
          line: 524,
          column: 23
        },
        end: {
          line: 526,
          column: 5
        }
      },
      "114": {
        start: {
          line: 528,
          column: 15
        },
        end: {
          line: 528,
          column: 66
        }
      },
      "115": {
        start: {
          line: 530,
          column: 4
        },
        end: {
          line: 530,
          column: 42
        }
      },
      "116": {
        start: {
          line: 532,
          column: 4
        },
        end: {
          line: 532,
          column: 14
        }
      },
      "117": {
        start: {
          line: 536,
          column: 4
        },
        end: {
          line: 542,
          column: 6
        }
      },
      "118": {
        start: {
          line: 575,
          column: 21
        },
        end: {
          line: 575,
          column: 46
        }
      },
      "119": {
        start: {
          line: 576,
          column: 29
        },
        end: {
          line: 576,
          column: 69
        }
      },
      "120": {
        start: {
          line: 577,
          column: 17
        },
        end: {
          line: 577,
          column: 39
        }
      },
      "121": {
        start: {
          line: 580,
          column: 4
        },
        end: {
          line: 584,
          column: 5
        }
      },
      "122": {
        start: {
          line: 581,
          column: 6
        },
        end: {
          line: 583,
          column: 8
        }
      },
      "123": {
        start: {
          line: 586,
          column: 23
        },
        end: {
          line: 586,
          column: 46
        }
      },
      "124": {
        start: {
          line: 589,
          column: 4
        },
        end: {
          line: 593,
          column: 5
        }
      },
      "125": {
        start: {
          line: 590,
          column: 6
        },
        end: {
          line: 592,
          column: 8
        }
      },
      "126": {
        start: {
          line: 595,
          column: 26
        },
        end: {
          line: 595,
          column: 46
        }
      },
      "127": {
        start: {
          line: 596,
          column: 4
        },
        end: {
          line: 615,
          column: 5
        }
      },
      "128": {
        start: {
          line: 597,
          column: 19
        },
        end: {
          line: 597,
          column: 44
        }
      },
      "129": {
        start: {
          line: 598,
          column: 19
        },
        end: {
          line: 608,
          column: 8
        }
      },
      "130": {
        start: {
          line: 609,
          column: 6
        },
        end: {
          line: 614,
          column: 8
        }
      },
      "131": {
        start: {
          line: 618,
          column: 4
        },
        end: {
          line: 622,
          column: 5
        }
      },
      "132": {
        start: {
          line: 619,
          column: 6
        },
        end: {
          line: 619,
          column: 64
        }
      },
      "133": {
        start: {
          line: 621,
          column: 6
        },
        end: {
          line: 621,
          column: 53
        }
      },
      "134": {
        start: {
          line: 624,
          column: 15
        },
        end: {
          line: 631,
          column: 6
        }
      },
      "135": {
        start: {
          line: 632,
          column: 30
        },
        end: {
          line: 635,
          column: 6
        }
      },
      "136": {
        start: {
          line: 636,
          column: 21
        },
        end: {
          line: 638,
          column: 5
        }
      },
      "137": {
        start: {
          line: 640,
          column: 4
        },
        end: {
          line: 640,
          column: 63
        }
      },
      "138": {
        start: {
          line: 656,
          column: 4
        },
        end: {
          line: 658,
          column: 5
        }
      },
      "139": {
        start: {
          line: 657,
          column: 6
        },
        end: {
          line: 657,
          column: 69
        }
      },
      "140": {
        start: {
          line: 660,
          column: 4
        },
        end: {
          line: 662,
          column: 5
        }
      },
      "141": {
        start: {
          line: 661,
          column: 6
        },
        end: {
          line: 661,
          column: 65
        }
      },
      "142": {
        start: {
          line: 664,
          column: 4
        },
        end: {
          line: 664,
          column: 56
        }
      },
      "143": {
        start: {
          line: 676,
          column: 2
        },
        end: {
          line: 676,
          column: 40
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 115,
            column: 2
          },
          end: {
            line: 115,
            column: 3
          }
        },
        loc: {
          start: {
            line: 115,
            column: 40
          },
          end: {
            line: 136,
            column: 3
          }
        },
        line: 115
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 146,
            column: 2
          },
          end: {
            line: 146,
            column: 3
          }
        },
        loc: {
          start: {
            line: 146,
            column: 26
          },
          end: {
            line: 149,
            column: 3
          }
        },
        line: 146
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 156,
            column: 2
          },
          end: {
            line: 156,
            column: 3
          }
        },
        loc: {
          start: {
            line: 156,
            column: 16
          },
          end: {
            line: 159,
            column: 3
          }
        },
        line: 156
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 192,
            column: 2
          },
          end: {
            line: 192,
            column: 3
          }
        },
        loc: {
          start: {
            line: 192,
            column: 29
          },
          end: {
            line: 221,
            column: 3
          }
        },
        line: 192
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 240,
            column: 2
          },
          end: {
            line: 240,
            column: 3
          }
        },
        loc: {
          start: {
            line: 240,
            column: 48
          },
          end: {
            line: 271,
            column: 3
          }
        },
        line: 240
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 288,
            column: 2
          },
          end: {
            line: 288,
            column: 3
          }
        },
        loc: {
          start: {
            line: 288,
            column: 40
          },
          end: {
            line: 308,
            column: 3
          }
        },
        line: 288
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 327,
            column: 2
          },
          end: {
            line: 327,
            column: 3
          }
        },
        loc: {
          start: {
            line: 327,
            column: 44
          },
          end: {
            line: 337,
            column: 3
          }
        },
        line: 327
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 351,
            column: 2
          },
          end: {
            line: 351,
            column: 3
          }
        },
        loc: {
          start: {
            line: 351,
            column: 46
          },
          end: {
            line: 368,
            column: 3
          }
        },
        line: 351
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 382,
            column: 2
          },
          end: {
            line: 382,
            column: 3
          }
        },
        loc: {
          start: {
            line: 382,
            column: 38
          },
          end: {
            line: 396,
            column: 3
          }
        },
        line: 382
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 408,
            column: 2
          },
          end: {
            line: 408,
            column: 3
          }
        },
        loc: {
          start: {
            line: 408,
            column: 32
          },
          end: {
            line: 426,
            column: 3
          }
        },
        line: 408
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 436,
            column: 2
          },
          end: {
            line: 436,
            column: 3
          }
        },
        loc: {
          start: {
            line: 436,
            column: 42
          },
          end: {
            line: 439,
            column: 3
          }
        },
        line: 436
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 446,
            column: 2
          },
          end: {
            line: 446,
            column: 3
          }
        },
        loc: {
          start: {
            line: 446,
            column: 10
          },
          end: {
            line: 533,
            column: 3
          }
        },
        line: 446
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 535,
            column: 2
          },
          end: {
            line: 535,
            column: 3
          }
        },
        loc: {
          start: {
            line: 535,
            column: 23
          },
          end: {
            line: 543,
            column: 3
          }
        },
        line: 535
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 569,
            column: 2
          },
          end: {
            line: 569,
            column: 3
          }
        },
        loc: {
          start: {
            line: 574,
            column: 4
          },
          end: {
            line: 641,
            column: 3
          }
        },
        line: 574
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 655,
            column: 2
          },
          end: {
            line: 655,
            column: 3
          }
        },
        loc: {
          start: {
            line: 655,
            column: 46
          },
          end: {
            line: 665,
            column: 3
          }
        },
        line: 655
      },
      "15": {
        name: "isValidDate",
        decl: {
          start: {
            line: 673,
            column: 16
          },
          end: {
            line: 673,
            column: 27
          }
        },
        loc: {
          start: {
            line: 673,
            column: 31
          },
          end: {
            line: 677,
            column: 1
          }
        },
        line: 673
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 115,
            column: 29
          },
          end: {
            line: 115,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 115,
            column: 36
          },
          end: {
            line: 115,
            column: 38
          }
        }],
        line: 115
      },
      "1": {
        loc: {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 118,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 116
      },
      "2": {
        loc: {
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 120,
            column: 4
          },
          end: {
            line: 122,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 120
      },
      "3": {
        loc: {
          start: {
            line: 128,
            column: 22
          },
          end: {
            line: 128,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 128,
            column: 22
          },
          end: {
            line: 128,
            column: 44
          }
        }, {
          start: {
            line: 128,
            column: 48
          },
          end: {
            line: 128,
            column: 52
          }
        }],
        line: 128
      },
      "4": {
        loc: {
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 129,
            column: 24
          },
          end: {
            line: 129,
            column: 48
          }
        }, {
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 129,
            column: 56
          }
        }],
        line: 129
      },
      "5": {
        loc: {
          start: {
            line: 130,
            column: 30
          },
          end: {
            line: 130,
            column: 61
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 130,
            column: 30
          },
          end: {
            line: 130,
            column: 53
          }
        }, {
          start: {
            line: 130,
            column: 57
          },
          end: {
            line: 130,
            column: 61
          }
        }],
        line: 130
      },
      "6": {
        loc: {
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 131,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 131,
            column: 33
          },
          end: {
            line: 131,
            column: 59
          }
        }, {
          start: {
            line: 131,
            column: 63
          },
          end: {
            line: 131,
            column: 67
          }
        }],
        line: 131
      },
      "7": {
        loc: {
          start: {
            line: 132,
            column: 39
          },
          end: {
            line: 132,
            column: 79
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 132,
            column: 39
          },
          end: {
            line: 132,
            column: 71
          }
        }, {
          start: {
            line: 132,
            column: 75
          },
          end: {
            line: 132,
            column: 79
          }
        }],
        line: 132
      },
      "8": {
        loc: {
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 56
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 133,
            column: 24
          },
          end: {
            line: 133,
            column: 48
          }
        }, {
          start: {
            line: 133,
            column: 52
          },
          end: {
            line: 133,
            column: 56
          }
        }],
        line: 133
      },
      "9": {
        loc: {
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 134,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 134,
            column: 16
          },
          end: {
            line: 134,
            column: 25
          }
        }, {
          start: {
            line: 134,
            column: 29
          },
          end: {
            line: 134,
            column: 40
          }
        }],
        line: 134
      },
      "10": {
        loc: {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 135,
            column: 59
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 135,
            column: 51
          }
        }, {
          start: {
            line: 135,
            column: 55
          },
          end: {
            line: 135,
            column: 59
          }
        }],
        line: 135
      },
      "11": {
        loc: {
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 193,
            column: 4
          },
          end: {
            line: 197,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 193
      },
      "12": {
        loc: {
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 63
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 193,
            column: 8
          },
          end: {
            line: 193,
            column: 32
          }
        }, {
          start: {
            line: 193,
            column: 36
          },
          end: {
            line: 193,
            column: 63
          }
        }],
        line: 193
      },
      "13": {
        loc: {
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 199,
            column: 4
          },
          end: {
            line: 201,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 199
      },
      "14": {
        loc: {
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 203,
            column: 4
          },
          end: {
            line: 218,
            column: 5
          }
        }, {
          start: {
            line: 213,
            column: 11
          },
          end: {
            line: 218,
            column: 5
          }
        }],
        line: 203
      },
      "15": {
        loc: {
          start: {
            line: 205,
            column: 6
          },
          end: {
            line: 212,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 205,
            column: 6
          },
          end: {
            line: 212,
            column: 7
          }
        }, {
          start: {
            line: 207,
            column: 13
          },
          end: {
            line: 212,
            column: 7
          }
        }],
        line: 205
      },
      "16": {
        loc: {
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 242,
            column: 4
          },
          end: {
            line: 244,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 242
      },
      "17": {
        loc: {
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 245,
            column: 4
          },
          end: {
            line: 247,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 245
      },
      "18": {
        loc: {
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 249,
            column: 4
          },
          end: {
            line: 253,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 249
      },
      "19": {
        loc: {
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 258,
            column: 4
          },
          end: {
            line: 260,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 258
      },
      "20": {
        loc: {
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 261,
            column: 4
          },
          end: {
            line: 263,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 261
      },
      "21": {
        loc: {
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 264,
            column: 4
          },
          end: {
            line: 266,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 264
      },
      "22": {
        loc: {
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 264,
            column: 40
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 264,
            column: 8
          },
          end: {
            line: 264,
            column: 19
          }
        }, {
          start: {
            line: 264,
            column: 23
          },
          end: {
            line: 264,
            column: 40
          }
        }],
        line: 264
      },
      "23": {
        loc: {
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 289,
            column: 4
          },
          end: {
            line: 293,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 289
      },
      "24": {
        loc: {
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 295,
            column: 4
          },
          end: {
            line: 297,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 295
      },
      "25": {
        loc: {
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 298,
            column: 4
          },
          end: {
            line: 300,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 298
      },
      "26": {
        loc: {
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 301,
            column: 4
          },
          end: {
            line: 303,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 301
      },
      "27": {
        loc: {
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 301,
            column: 46
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 301,
            column: 8
          },
          end: {
            line: 301,
            column: 21
          }
        }, {
          start: {
            line: 301,
            column: 25
          },
          end: {
            line: 301,
            column: 46
          }
        }],
        line: 301
      },
      "28": {
        loc: {
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 328,
            column: 4
          },
          end: {
            line: 332,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 328
      },
      "29": {
        loc: {
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 352,
            column: 4
          },
          end: {
            line: 354,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 352
      },
      "30": {
        loc: {
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 355,
            column: 4
          },
          end: {
            line: 359,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 355
      },
      "31": {
        loc: {
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 361,
            column: 4
          },
          end: {
            line: 363,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 361
      },
      "32": {
        loc: {
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 383,
            column: 4
          },
          end: {
            line: 387,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 383
      },
      "33": {
        loc: {
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 389,
            column: 4
          },
          end: {
            line: 391,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 389
      },
      "34": {
        loc: {
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 409,
            column: 4
          },
          end: {
            line: 411,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 409
      },
      "35": {
        loc: {
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 413,
            column: 4
          },
          end: {
            line: 417,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 413
      },
      "36": {
        loc: {
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 419,
            column: 4
          },
          end: {
            line: 421,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 419
      },
      "37": {
        loc: {
          start: {
            line: 454,
            column: 12
          },
          end: {
            line: 454,
            column: 54
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 454,
            column: 24
          },
          end: {
            line: 454,
            column: 47
          }
        }, {
          start: {
            line: 454,
            column: 50
          },
          end: {
            line: 454,
            column: 54
          }
        }],
        line: 454
      },
      "38": {
        loc: {
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 457,
            column: 4
          },
          end: {
            line: 465,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 457
      },
      "39": {
        loc: {
          start: {
            line: 458,
            column: 6
          },
          end: {
            line: 460,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 458,
            column: 6
          },
          end: {
            line: 458,
            column: 30
          }
        }, {
          start: {
            line: 459,
            column: 6
          },
          end: {
            line: 459,
            column: 52
          }
        }, {
          start: {
            line: 460,
            column: 6
          },
          end: {
            line: 460,
            column: 52
          }
        }],
        line: 458
      },
      "40": {
        loc: {
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 467,
            column: 4
          },
          end: {
            line: 469,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 467
      },
      "41": {
        loc: {
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 470,
            column: 4
          },
          end: {
            line: 472,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 470
      },
      "42": {
        loc: {
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 483,
            column: 4
          },
          end: {
            line: 517,
            column: 5
          }
        }, {
          start: {
            line: 515,
            column: 11
          },
          end: {
            line: 517,
            column: 5
          }
        }],
        line: 483
      },
      "43": {
        loc: {
          start: {
            line: 485,
            column: 6
          },
          end: {
            line: 487,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 485,
            column: 6
          },
          end: {
            line: 487,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 485
      },
      "44": {
        loc: {
          start: {
            line: 489,
            column: 22
          },
          end: {
            line: 489,
            column: 52
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 489,
            column: 22
          },
          end: {
            line: 489,
            column: 45
          }
        }, {
          start: {
            line: 489,
            column: 49
          },
          end: {
            line: 489,
            column: 52
          }
        }],
        line: 489
      },
      "45": {
        loc: {
          start: {
            line: 493,
            column: 8
          },
          end: {
            line: 495,
            column: 15
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 494,
            column: 12
          },
          end: {
            line: 494,
            column: 49
          }
        }, {
          start: {
            line: 495,
            column: 12
          },
          end: {
            line: 495,
            column: 15
          }
        }],
        line: 493
      },
      "46": {
        loc: {
          start: {
            line: 498,
            column: 30
          },
          end: {
            line: 498,
            column: 67
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 498,
            column: 30
          },
          end: {
            line: 498,
            column: 62
          }
        }, {
          start: {
            line: 498,
            column: 66
          },
          end: {
            line: 498,
            column: 67
          }
        }],
        line: 498
      },
      "47": {
        loc: {
          start: {
            line: 501,
            column: 8
          },
          end: {
            line: 503,
            column: 14
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 502,
            column: 12
          },
          end: {
            line: 502,
            column: 58
          }
        }, {
          start: {
            line: 503,
            column: 12
          },
          end: {
            line: 503,
            column: 14
          }
        }],
        line: 501
      },
      "48": {
        loc: {
          start: {
            line: 537,
            column: 6
          },
          end: {
            line: 541,
            column: 66
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 537,
            column: 6
          },
          end: {
            line: 537,
            column: 32
          }
        }, {
          start: {
            line: 538,
            column: 6
          },
          end: {
            line: 538,
            column: 38
          }
        }, {
          start: {
            line: 539,
            column: 6
          },
          end: {
            line: 539,
            column: 41
          }
        }, {
          start: {
            line: 540,
            column: 6
          },
          end: {
            line: 540,
            column: 47
          }
        }, {
          start: {
            line: 541,
            column: 7
          },
          end: {
            line: 541,
            column: 33
          }
        }, {
          start: {
            line: 541,
            column: 37
          },
          end: {
            line: 541,
            column: 65
          }
        }],
        line: 537
      },
      "49": {
        loc: {
          start: {
            line: 580,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 580,
            column: 4
          },
          end: {
            line: 584,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 580
      },
      "50": {
        loc: {
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 589,
            column: 4
          },
          end: {
            line: 593,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 589
      },
      "51": {
        loc: {
          start: {
            line: 596,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 596,
            column: 4
          },
          end: {
            line: 615,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 596
      },
      "52": {
        loc: {
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 618,
            column: 4
          },
          end: {
            line: 622,
            column: 5
          }
        }, {
          start: {
            line: 620,
            column: 11
          },
          end: {
            line: 622,
            column: 5
          }
        }],
        line: 618
      },
      "53": {
        loc: {
          start: {
            line: 656,
            column: 4
          },
          end: {
            line: 658,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 656,
            column: 4
          },
          end: {
            line: 658,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 656
      },
      "54": {
        loc: {
          start: {
            line: 660,
            column: 4
          },
          end: {
            line: 662,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 660,
            column: 4
          },
          end: {
            line: 662,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 660
      },
      "55": {
        loc: {
          start: {
            line: 676,
            column: 9
          },
          end: {
            line: 676,
            column: 39
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 676,
            column: 9
          },
          end: {
            line: 676,
            column: 26
          }
        }, {
          start: {
            line: 676,
            column: 30
          },
          end: {
            line: 676,
            column: 39
          }
        }],
        line: 676
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0,
      "109": 0,
      "110": 0,
      "111": 0,
      "112": 0,
      "113": 0,
      "114": 0,
      "115": 0,
      "116": 0,
      "117": 0,
      "118": 0,
      "119": 0,
      "120": 0,
      "121": 0,
      "122": 0,
      "123": 0,
      "124": 0,
      "125": 0,
      "126": 0,
      "127": 0,
      "128": 0,
      "129": 0,
      "130": 0,
      "131": 0,
      "132": 0,
      "133": 0,
      "134": 0,
      "135": 0,
      "136": 0,
      "137": 0,
      "138": 0,
      "139": 0,
      "140": 0,
      "141": 0,
      "142": 0,
      "143": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0
    },
    b: {
      "0": [0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0],
      "8": [0, 0],
      "9": [0, 0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0],
      "13": [0, 0],
      "14": [0, 0],
      "15": [0, 0],
      "16": [0, 0],
      "17": [0, 0],
      "18": [0, 0],
      "19": [0, 0],
      "20": [0, 0],
      "21": [0, 0],
      "22": [0, 0],
      "23": [0, 0],
      "24": [0, 0],
      "25": [0, 0],
      "26": [0, 0],
      "27": [0, 0],
      "28": [0, 0],
      "29": [0, 0],
      "30": [0, 0],
      "31": [0, 0],
      "32": [0, 0],
      "33": [0, 0],
      "34": [0, 0],
      "35": [0, 0],
      "36": [0, 0],
      "37": [0, 0],
      "38": [0, 0],
      "39": [0, 0, 0],
      "40": [0, 0],
      "41": [0, 0],
      "42": [0, 0],
      "43": [0, 0],
      "44": [0, 0],
      "45": [0, 0],
      "46": [0, 0],
      "47": [0, 0],
      "48": [0, 0, 0, 0, 0, 0],
      "49": [0, 0],
      "50": [0, 0],
      "51": [0, 0],
      "52": [0, 0],
      "53": [0, 0],
      "54": [0, 0],
      "55": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "b562684671b1c6fd90adbfcf3ac4836c4c02829b"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_47gaomomq = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_47gaomomq();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }













/**
 * Minimum base fee for transactions. If this fee is below the network
 * minimum, the transaction will fail. The more operations in the
 * transaction, the greater the required fee. Use {@link
 * Server#fetchBaseFee} to get an accurate value of minimum transaction
 * fee on the network.
 *
 * @constant
 * @see [Fees](https://developers.stellar.org/docs/glossary/fees/)
 */
var BASE_FEE = (cov_47gaomomq().s[0]++, '100'); // Stroops

/**
 * @constant
 * @see {@link TransactionBuilder#setTimeout}
 * @see [Timeout](https://developers.stellar.org/api/resources/transactions/post/)
 */
var TimeoutInfinite = (cov_47gaomomq().s[1]++, 0);

/**
 * <p>Transaction builder helps constructs a new `{@link Transaction}` using the
 * given {@link Account} as the transaction's "source account". The transaction
 * will use the current sequence number of the given account as its sequence
 * number and increment the given account's sequence number by one. The given
 * source account must include a private key for signing the transaction or an
 * error will be thrown.</p>
 *
 * <p>Operations can be added to the transaction via their corresponding builder
 * methods, and each returns the TransactionBuilder object so they can be
 * chained together. After adding the desired operations, call the `build()`
 * method on the `TransactionBuilder` to return a fully constructed `{@link
 * Transaction}` that can be signed. The returned transaction will contain the
 * sequence number of the source account and include the signature from the
 * source account.</p>
 *
 * <p><strong>Be careful about unsubmitted transactions!</strong> When you build
 * a transaction, stellar-sdk automatically increments the source account's
 * sequence number. If you end up not submitting this transaction and submitting
 * another one instead, it'll fail due to the sequence number being wrong. So if
 * you decide not to use a built transaction, make sure to update the source
 * account's sequence number with
 * [Server.loadAccount](https://stellar.github.io/js-stellar-sdk/Server.html#loadAccount)
 * before creating another transaction.</p>
 *
 * <p>The following code example creates a new transaction with {@link
 * Operation.createAccount} and {@link Operation.payment} operations. The
 * Transaction's source account first funds `destinationA`, then sends a payment
 * to `destinationB`. The built transaction is then signed by
 * `sourceKeypair`.</p>
 *
 * ```
 * var transaction = new TransactionBuilder(source, { fee, networkPassphrase: Networks.TESTNET })
 * .addOperation(Operation.createAccount({
 *     destination: destinationA,
 *     startingBalance: "20"
 * })) // <- funds and creates destinationA
 * .addOperation(Operation.payment({
 *     destination: destinationB,
 *     amount: "100",
 *     asset: Asset.native()
 * })) // <- sends 100 XLM to destinationB
 * .setTimeout(30)
 * .build();
 *
 * transaction.sign(sourceKeypair);
 * ```
 *
 * @constructor
 *
 * @param {Account} sourceAccount - source account for this transaction
 * @param {object}  opts          - Options object
 * @param {string}  opts.fee      - max fee you're willing to pay per
 *     operation in this transaction (**in stroops**)
 *
 * @param {object}              [opts.timebounds] - timebounds for the
 *     validity of this transaction
 * @param {number|string|Date}  [opts.timebounds.minTime] - 64-bit UNIX
 *     timestamp or Date object
 * @param {number|string|Date}  [opts.timebounds.maxTime] - 64-bit UNIX
 *     timestamp or Date object
 * @param {object}              [opts.ledgerbounds] - ledger bounds for the
 *     validity of this transaction
 * @param {number}              [opts.ledgerbounds.minLedger] - number of the minimum
 *     ledger sequence
 * @param {number}              [opts.ledgerbounds.maxLedger] - number of the maximum
 *     ledger sequence
 * @param {string}              [opts.minAccountSequence] - number for
 *     the minimum account sequence
 * @param {number}              [opts.minAccountSequenceAge] - number of
 *     seconds for the minimum account sequence age
 * @param {number}              [opts.minAccountSequenceLedgerGap] - number of
 *     ledgers for the minimum account sequence ledger gap
 * @param {string[]}            [opts.extraSigners] - list of the extra signers
 *     required for this transaction
 * @param {Memo}                [opts.memo] - memo for the transaction
 * @param {string}              [opts.networkPassphrase] passphrase of the
 *     target Stellar network (e.g. "Public Global Stellar Network ; September
 *     2015" for the pubnet)
 */
var TransactionBuilder = /*#__PURE__*/function () {
  function TransactionBuilder(sourceAccount) {
    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_47gaomomq().b[0][0]++, {});
    _classCallCheck(this, TransactionBuilder);
    cov_47gaomomq().f[0]++;
    cov_47gaomomq().s[2]++;
    if (!sourceAccount) {
      cov_47gaomomq().b[1][0]++;
      cov_47gaomomq().s[3]++;
      throw new Error('must specify source account for the transaction');
    } else {
      cov_47gaomomq().b[1][1]++;
    }
    cov_47gaomomq().s[4]++;
    if (lodash_isUndefined__WEBPACK_IMPORTED_MODULE_3___default()(opts.fee)) {
      cov_47gaomomq().b[2][0]++;
      cov_47gaomomq().s[5]++;
      throw new Error('must specify fee for the transaction (in stroops)');
    } else {
      cov_47gaomomq().b[2][1]++;
    }
    cov_47gaomomq().s[6]++;
    this.source = sourceAccount;
    cov_47gaomomq().s[7]++;
    this.operations = [];
    cov_47gaomomq().s[8]++;
    this.baseFee = opts.fee;
    cov_47gaomomq().s[9]++;
    this.timebounds = (cov_47gaomomq().b[3][0]++, lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(opts.timebounds)) || (cov_47gaomomq().b[3][1]++, null);
    cov_47gaomomq().s[10]++;
    this.ledgerbounds = (cov_47gaomomq().b[4][0]++, lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(opts.ledgerbounds)) || (cov_47gaomomq().b[4][1]++, null);
    cov_47gaomomq().s[11]++;
    this.minAccountSequence = (cov_47gaomomq().b[5][0]++, opts.minAccountSequence) || (cov_47gaomomq().b[5][1]++, null);
    cov_47gaomomq().s[12]++;
    this.minAccountSequenceAge = (cov_47gaomomq().b[6][0]++, opts.minAccountSequenceAge) || (cov_47gaomomq().b[6][1]++, null);
    cov_47gaomomq().s[13]++;
    this.minAccountSequenceLedgerGap = (cov_47gaomomq().b[7][0]++, opts.minAccountSequenceLedgerGap) || (cov_47gaomomq().b[7][1]++, null);
    cov_47gaomomq().s[14]++;
    this.extraSigners = (cov_47gaomomq().b[8][0]++, lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(opts.extraSigners)) || (cov_47gaomomq().b[8][1]++, null);
    cov_47gaomomq().s[15]++;
    this.memo = (cov_47gaomomq().b[9][0]++, opts.memo) || (cov_47gaomomq().b[9][1]++, _memo__WEBPACK_IMPORTED_MODULE_10__.Memo.none());
    cov_47gaomomq().s[16]++;
    this.networkPassphrase = (cov_47gaomomq().b[10][0]++, opts.networkPassphrase) || (cov_47gaomomq().b[10][1]++, null);
  }

  /**
   * Adds an operation to the transaction.
   *
   * @param {xdr.Operation} operation   The xdr operation object, use {@link
   *     Operation} static methods.
   *
   * @returns {TransactionBuilder}
   */
  _createClass(TransactionBuilder, [{
    key: "addOperation",
    value: function addOperation(operation) {
      cov_47gaomomq().f[1]++;
      cov_47gaomomq().s[17]++;
      this.operations.push(operation);
      cov_47gaomomq().s[18]++;
      return this;
    }

    /**
     * Adds a memo to the transaction.
     * @param {Memo} memo {@link Memo} object
     * @returns {TransactionBuilder}
     */
  }, {
    key: "addMemo",
    value: function addMemo(memo) {
      cov_47gaomomq().f[2]++;
      cov_47gaomomq().s[19]++;
      this.memo = memo;
      cov_47gaomomq().s[20]++;
      return this;
    }

    /**
     * Sets a timeout precondition on the transaction.
     *
     *  Because of the distributed nature of the Stellar network it is possible
     *  that the status of your transaction will be determined after a long time
     *  if the network is highly congested. If you want to be sure to receive the
     *  status of the transaction within a given period you should set the {@link
     *  TimeBounds} with `maxTime` on the transaction (this is what `setTimeout`
     *  does internally; if there's `minTime` set but no `maxTime` it will be
     *  added).
     *
     *  A call to `TransactionBuilder.setTimeout` is **required** if Transaction
     *  does not have `max_time` set. If you don't want to set timeout, use
     *  `{@link TimeoutInfinite}`. In general you should set `{@link
     *  TimeoutInfinite}` only in smart contracts.
     *
     *  Please note that Horizon may still return <code>504 Gateway Timeout</code>
     *  error, even for short timeouts. In such case you need to resubmit the same
     *  transaction again without making any changes to receive a status. This
     *  method is using the machine system time (UTC), make sure it is set
     *  correctly.
     *
     * @param {number} timeoutSeconds   Number of seconds the transaction is good.
     *     Can't be negative. If the value is {@link TimeoutInfinite}, the
     *     transaction is good indefinitely.
     *
     * @returns {TransactionBuilder}
     *
     * @see {@link TimeoutInfinite}
     * @see https://developers.stellar.org/docs/tutorials/handling-errors/
     */
  }, {
    key: "setTimeout",
    value: function setTimeout(timeoutSeconds) {
      cov_47gaomomq().f[3]++;
      cov_47gaomomq().s[21]++;
      if ((cov_47gaomomq().b[12][0]++, this.timebounds !== null) && (cov_47gaomomq().b[12][1]++, this.timebounds.maxTime > 0)) {
        cov_47gaomomq().b[11][0]++;
        cov_47gaomomq().s[22]++;
        throw new Error('TimeBounds.max_time has been already set - setting timeout would overwrite it.');
      } else {
        cov_47gaomomq().b[11][1]++;
      }
      cov_47gaomomq().s[23]++;
      if (timeoutSeconds < 0) {
        cov_47gaomomq().b[13][0]++;
        cov_47gaomomq().s[24]++;
        throw new Error('timeout cannot be negative');
      } else {
        cov_47gaomomq().b[13][1]++;
      }
      cov_47gaomomq().s[25]++;
      if (timeoutSeconds > 0) {
        cov_47gaomomq().b[14][0]++;
        var timeoutTimestamp = (cov_47gaomomq().s[26]++, Math.floor(Date.now() / 1000) + timeoutSeconds);
        cov_47gaomomq().s[27]++;
        if (this.timebounds === null) {
          cov_47gaomomq().b[15][0]++;
          cov_47gaomomq().s[28]++;
          this.timebounds = {
            minTime: 0,
            maxTime: timeoutTimestamp
          };
        } else {
          cov_47gaomomq().b[15][1]++;
          cov_47gaomomq().s[29]++;
          this.timebounds = {
            minTime: this.timebounds.minTime,
            maxTime: timeoutTimestamp
          };
        }
      } else {
        cov_47gaomomq().b[14][1]++;
        cov_47gaomomq().s[30]++;
        this.timebounds = {
          minTime: 0,
          maxTime: 0
        };
      }
      cov_47gaomomq().s[31]++;
      return this;
    }

    /**
     * If you want to prepare a transaction which will become valid at some point
     * in the future, or be invalid after some time, you can set a timebounds
     * precondition. Internally this will set the `minTime`, and `maxTime`
     * preconditions. Conflicts with `setTimeout`, so use one or the other.
     *
     * @param {Date|number} minEpochOrDate  Either a JS Date object, or a number
     *     of UNIX epoch seconds. The transaction is valid after this timestamp.
     *     Can't be negative. If the value is `0`, the transaction is valid
     *     immediately.
     * @param {Date|number} maxEpochOrDate  Either a JS Date object, or a number
     *     of UNIX epoch seconds. The transaction is valid until this timestamp.
     *     Can't be negative. If the value is `0`, the transaction is valid
     *     indefinitely.
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setTimebounds",
    value: function setTimebounds(minEpochOrDate, maxEpochOrDate) {
      cov_47gaomomq().f[4]++;
      cov_47gaomomq().s[32]++;
      // Force it to a date type
      if (typeof minEpochOrDate === 'number') {
        cov_47gaomomq().b[16][0]++;
        cov_47gaomomq().s[33]++;
        minEpochOrDate = new Date(minEpochOrDate * 1000);
      } else {
        cov_47gaomomq().b[16][1]++;
      }
      cov_47gaomomq().s[34]++;
      if (typeof maxEpochOrDate === 'number') {
        cov_47gaomomq().b[17][0]++;
        cov_47gaomomq().s[35]++;
        maxEpochOrDate = new Date(maxEpochOrDate * 1000);
      } else {
        cov_47gaomomq().b[17][1]++;
      }
      cov_47gaomomq().s[36]++;
      if (this.timebounds !== null) {
        cov_47gaomomq().b[18][0]++;
        cov_47gaomomq().s[37]++;
        throw new Error('TimeBounds has been already set - setting timebounds would overwrite it.');
      } else {
        cov_47gaomomq().b[18][1]++;
      }

      // Convert that date to the epoch seconds
      var minTime = (cov_47gaomomq().s[38]++, Math.floor(minEpochOrDate.valueOf() / 1000));
      var maxTime = (cov_47gaomomq().s[39]++, Math.floor(maxEpochOrDate.valueOf() / 1000));
      cov_47gaomomq().s[40]++;
      if (minTime < 0) {
        cov_47gaomomq().b[19][0]++;
        cov_47gaomomq().s[41]++;
        throw new Error('min_time cannot be negative');
      } else {
        cov_47gaomomq().b[19][1]++;
      }
      cov_47gaomomq().s[42]++;
      if (maxTime < 0) {
        cov_47gaomomq().b[20][0]++;
        cov_47gaomomq().s[43]++;
        throw new Error('max_time cannot be negative');
      } else {
        cov_47gaomomq().b[20][1]++;
      }
      cov_47gaomomq().s[44]++;
      if ((cov_47gaomomq().b[22][0]++, maxTime > 0) && (cov_47gaomomq().b[22][1]++, minTime > maxTime)) {
        cov_47gaomomq().b[21][0]++;
        cov_47gaomomq().s[45]++;
        throw new Error('min_time cannot be greater than max_time');
      } else {
        cov_47gaomomq().b[21][1]++;
      }
      cov_47gaomomq().s[46]++;
      this.timebounds = {
        minTime: minTime,
        maxTime: maxTime
      };
      cov_47gaomomq().s[47]++;
      return this;
    }

    /**
     * If you want to prepare a transaction which will only be valid within some
     * range of ledgers, you can set a ledgerbounds precondition.
     * Internally this will set the `minLedger` and `maxLedger` preconditions.
     *
     * @param {number} minLedger  The minimum ledger this transaction is valid at
     *     or after. Cannot be negative. If the value is `0` (the default), the
     *     transaction is valid immediately.
     *
     * @param {number} maxLedger  The maximum ledger this transaction is valid
     *     before. Cannot be negative. If the value is `0`, the transaction is
     *     valid indefinitely.
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setLedgerbounds",
    value: function setLedgerbounds(minLedger, maxLedger) {
      cov_47gaomomq().f[5]++;
      cov_47gaomomq().s[48]++;
      if (this.ledgerbounds !== null) {
        cov_47gaomomq().b[23][0]++;
        cov_47gaomomq().s[49]++;
        throw new Error('LedgerBounds has been already set - setting ledgerbounds would overwrite it.');
      } else {
        cov_47gaomomq().b[23][1]++;
      }
      cov_47gaomomq().s[50]++;
      if (minLedger < 0) {
        cov_47gaomomq().b[24][0]++;
        cov_47gaomomq().s[51]++;
        throw new Error('min_ledger cannot be negative');
      } else {
        cov_47gaomomq().b[24][1]++;
      }
      cov_47gaomomq().s[52]++;
      if (maxLedger < 0) {
        cov_47gaomomq().b[25][0]++;
        cov_47gaomomq().s[53]++;
        throw new Error('max_ledger cannot be negative');
      } else {
        cov_47gaomomq().b[25][1]++;
      }
      cov_47gaomomq().s[54]++;
      if ((cov_47gaomomq().b[27][0]++, maxLedger > 0) && (cov_47gaomomq().b[27][1]++, minLedger > maxLedger)) {
        cov_47gaomomq().b[26][0]++;
        cov_47gaomomq().s[55]++;
        throw new Error('min_ledger cannot be greater than max_ledger');
      } else {
        cov_47gaomomq().b[26][1]++;
      }
      cov_47gaomomq().s[56]++;
      this.ledgerbounds = {
        minLedger: minLedger,
        maxLedger: maxLedger
      };
      cov_47gaomomq().s[57]++;
      return this;
    }

    /**
     * If you want to prepare a transaction which will be valid only while the
     * account sequence number is
     *
     *     minAccountSequence <= sourceAccountSequence < tx.seqNum
     *
     * Note that after execution the account's sequence number is always raised to
     * `tx.seqNum`. Internally this will set the `minAccountSequence`
     * precondition.
     *
     * @param {string} minAccountSequence   The minimum source account sequence
     *     number this transaction is valid for. If the value is `0` (the
     *     default), the transaction is valid when `sourceAccount's sequence
     *     number == tx.seqNum- 1`.
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setMinAccountSequence",
    value: function setMinAccountSequence(minAccountSequence) {
      cov_47gaomomq().f[6]++;
      cov_47gaomomq().s[58]++;
      if (this.minAccountSequence !== null) {
        cov_47gaomomq().b[28][0]++;
        cov_47gaomomq().s[59]++;
        throw new Error('min_account_sequence has been already set - setting min_account_sequence would overwrite it.');
      } else {
        cov_47gaomomq().b[28][1]++;
      }
      cov_47gaomomq().s[60]++;
      this.minAccountSequence = minAccountSequence;
      cov_47gaomomq().s[61]++;
      return this;
    }

    /**
     * For the transaction to be valid, the current ledger time must be at least
     * `minAccountSequenceAge` greater than sourceAccount's `sequenceTime`.
     * Internally this will set the `minAccountSequenceAge` precondition.
     *
     * @param {number} durationInSeconds  The minimum amount of time between
     *     source account sequence time and the ledger time when this transaction
     *     will become valid. If the value is `0`, the transaction is unrestricted
     *     by the account sequence age. Cannot be negative.
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setMinAccountSequenceAge",
    value: function setMinAccountSequenceAge(durationInSeconds) {
      cov_47gaomomq().f[7]++;
      cov_47gaomomq().s[62]++;
      if (typeof durationInSeconds !== 'number') {
        cov_47gaomomq().b[29][0]++;
        cov_47gaomomq().s[63]++;
        throw new Error('min_account_sequence_age must be a number');
      } else {
        cov_47gaomomq().b[29][1]++;
      }
      cov_47gaomomq().s[64]++;
      if (this.minAccountSequenceAge !== null) {
        cov_47gaomomq().b[30][0]++;
        cov_47gaomomq().s[65]++;
        throw new Error('min_account_sequence_age has been already set - setting min_account_sequence_age would overwrite it.');
      } else {
        cov_47gaomomq().b[30][1]++;
      }
      cov_47gaomomq().s[66]++;
      if (durationInSeconds < 0) {
        cov_47gaomomq().b[31][0]++;
        cov_47gaomomq().s[67]++;
        throw new Error('min_account_sequence_age cannot be negative');
      } else {
        cov_47gaomomq().b[31][1]++;
      }
      cov_47gaomomq().s[68]++;
      this.minAccountSequenceAge = durationInSeconds;
      cov_47gaomomq().s[69]++;
      return this;
    }

    /**
     * For the transaction to be valid, the current ledger number must be at least
     * `minAccountSequenceLedgerGap` greater than sourceAccount's ledger sequence.
     * Internally this will set the `minAccountSequenceLedgerGap` precondition.
     *
     * @param {number} gap  The minimum number of ledgers between source account
     *     sequence and the ledger number when this transaction will become valid.
     *     If the value is `0`, the transaction is unrestricted by the account
     *     sequence ledger. Cannot be negative.
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setMinAccountSequenceLedgerGap",
    value: function setMinAccountSequenceLedgerGap(gap) {
      cov_47gaomomq().f[8]++;
      cov_47gaomomq().s[70]++;
      if (this.minAccountSequenceLedgerGap !== null) {
        cov_47gaomomq().b[32][0]++;
        cov_47gaomomq().s[71]++;
        throw new Error('min_account_sequence_ledger_gap has been already set - setting min_account_sequence_ledger_gap would overwrite it.');
      } else {
        cov_47gaomomq().b[32][1]++;
      }
      cov_47gaomomq().s[72]++;
      if (gap < 0) {
        cov_47gaomomq().b[33][0]++;
        cov_47gaomomq().s[73]++;
        throw new Error('min_account_sequence_ledger_gap cannot be negative');
      } else {
        cov_47gaomomq().b[33][1]++;
      }
      cov_47gaomomq().s[74]++;
      this.minAccountSequenceLedgerGap = gap;
      cov_47gaomomq().s[75]++;
      return this;
    }

    /**
     * For the transaction to be valid, there must be a signature corresponding to
     * every Signer in this array, even if the signature is not otherwise required
     * by the sourceAccount or operations. Internally this will set the
     * `extraSigners` precondition.
     *
     * @param {string[]} extraSigners   required extra signers (as {@link StrKey}s)
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setExtraSigners",
    value: function setExtraSigners(extraSigners) {
      cov_47gaomomq().f[9]++;
      cov_47gaomomq().s[76]++;
      if (!lodash_isArray__WEBPACK_IMPORTED_MODULE_5___default()(extraSigners)) {
        cov_47gaomomq().b[34][0]++;
        cov_47gaomomq().s[77]++;
        throw new Error('extra_signers must be an array of strings.');
      } else {
        cov_47gaomomq().b[34][1]++;
      }
      cov_47gaomomq().s[78]++;
      if (this.extraSigners !== null) {
        cov_47gaomomq().b[35][0]++;
        cov_47gaomomq().s[79]++;
        throw new Error('extra_signers has been already set - setting extra_signers would overwrite it.');
      } else {
        cov_47gaomomq().b[35][1]++;
      }
      cov_47gaomomq().s[80]++;
      if (extraSigners.length > 2) {
        cov_47gaomomq().b[36][0]++;
        cov_47gaomomq().s[81]++;
        throw new Error('extra_signers cannot be longer than 2 elements.');
      } else {
        cov_47gaomomq().b[36][1]++;
      }
      cov_47gaomomq().s[82]++;
      this.extraSigners = lodash_clone__WEBPACK_IMPORTED_MODULE_2___default()(extraSigners);
      cov_47gaomomq().s[83]++;
      return this;
    }

    /**
     * Set network nassphrase for the Transaction that will be built.
     *
     * @param {string} networkPassphrase    passphrase of the target Stellar
     *     network (e.g. "Public Global Stellar Network ; September 2015").
     *
     * @returns {TransactionBuilder}
     */
  }, {
    key: "setNetworkPassphrase",
    value: function setNetworkPassphrase(networkPassphrase) {
      cov_47gaomomq().f[10]++;
      cov_47gaomomq().s[84]++;
      this.networkPassphrase = networkPassphrase;
      cov_47gaomomq().s[85]++;
      return this;
    }

    /**
     * This will build the transaction.
     * It will also increment the source account's sequence number by 1.
     * @returns {Transaction} This method will return the built {@link Transaction}.
     */
  }, {
    key: "build",
    value: function build() {
      cov_47gaomomq().f[11]++;
      var sequenceNumber = (cov_47gaomomq().s[86]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](this.source.sequenceNumber()).plus(1));
      var fee = (cov_47gaomomq().s[87]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](this.baseFee).times(this.operations.length).toNumber());
      var attrs = (cov_47gaomomq().s[88]++, {
        fee: fee,
        seqNum: _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].SequenceNumber.fromString(sequenceNumber.toString()),
        memo: this.memo ? (cov_47gaomomq().b[37][0]++, this.memo.toXDRObject()) : (cov_47gaomomq().b[37][1]++, null)
      });
      cov_47gaomomq().s[89]++;
      if ((cov_47gaomomq().b[39][0]++, this.timebounds === null) || (cov_47gaomomq().b[39][1]++, typeof this.timebounds.minTime === 'undefined') || (cov_47gaomomq().b[39][2]++, typeof this.timebounds.maxTime === 'undefined')) {
        cov_47gaomomq().b[38][0]++;
        cov_47gaomomq().s[90]++;
        throw new Error('TimeBounds has to be set or you must call setTimeout(TimeoutInfinite).');
      } else {
        cov_47gaomomq().b[38][1]++;
      }
      cov_47gaomomq().s[91]++;
      if (isValidDate(this.timebounds.minTime)) {
        cov_47gaomomq().b[40][0]++;
        cov_47gaomomq().s[92]++;
        this.timebounds.minTime = this.timebounds.minTime.getTime() / 1000;
      } else {
        cov_47gaomomq().b[40][1]++;
      }
      cov_47gaomomq().s[93]++;
      if (isValidDate(this.timebounds.maxTime)) {
        cov_47gaomomq().b[41][0]++;
        cov_47gaomomq().s[94]++;
        this.timebounds.maxTime = this.timebounds.maxTime.getTime() / 1000;
      } else {
        cov_47gaomomq().b[41][1]++;
      }
      cov_47gaomomq().s[95]++;
      this.timebounds.minTime = js_xdr__WEBPACK_IMPORTED_MODULE_0__.UnsignedHyper.fromString(this.timebounds.minTime.toString());
      cov_47gaomomq().s[96]++;
      this.timebounds.maxTime = js_xdr__WEBPACK_IMPORTED_MODULE_0__.UnsignedHyper.fromString(this.timebounds.maxTime.toString());
      var timeBounds = (cov_47gaomomq().s[97]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TimeBounds(this.timebounds));
      cov_47gaomomq().s[98]++;
      if (this.hasV2Preconditions()) {
        cov_47gaomomq().b[42][0]++;
        var ledgerBounds = (cov_47gaomomq().s[99]++, null);
        cov_47gaomomq().s[100]++;
        if (this.ledgerbounds !== null) {
          cov_47gaomomq().b[43][0]++;
          cov_47gaomomq().s[101]++;
          ledgerBounds = new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].LedgerBounds(this.ledgerbounds);
        } else {
          cov_47gaomomq().b[43][1]++;
        }
        var minSeqNum = (cov_47gaomomq().s[102]++, (cov_47gaomomq().b[44][0]++, this.minAccountSequence) || (cov_47gaomomq().b[44][1]++, '0'));
        cov_47gaomomq().s[103]++;
        minSeqNum = _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].SequenceNumber.fromString(minSeqNum);
        var minSeqAge = (cov_47gaomomq().s[104]++, js_xdr__WEBPACK_IMPORTED_MODULE_0__.UnsignedHyper.fromString(this.minAccountSequenceAge !== null ? (cov_47gaomomq().b[45][0]++, this.minAccountSequenceAge.toString()) : (cov_47gaomomq().b[45][1]++, '0')));
        var minSeqLedgerGap = (cov_47gaomomq().s[105]++, (cov_47gaomomq().b[46][0]++, this.minAccountSequenceLedgerGap) || (cov_47gaomomq().b[46][1]++, 0));
        var extraSigners = (cov_47gaomomq().s[106]++, this.extraSigners !== null ? (cov_47gaomomq().b[47][0]++, this.extraSigners.map(_signerkey__WEBPACK_IMPORTED_MODULE_9__.SignerKey.decodeAddress)) : (cov_47gaomomq().b[47][1]++, []));
        cov_47gaomomq().s[107]++;
        attrs.cond = _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Preconditions.precondV2(new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].PreconditionsV2({
          timeBounds: timeBounds,
          ledgerBounds: ledgerBounds,
          minSeqNum: minSeqNum,
          minSeqAge: minSeqAge,
          minSeqLedgerGap: minSeqLedgerGap,
          extraSigners: extraSigners
        }));
      } else {
        cov_47gaomomq().b[42][1]++;
        cov_47gaomomq().s[108]++;
        attrs.cond = _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Preconditions.precondTime(timeBounds);
      }
      cov_47gaomomq().s[109]++;
      attrs.sourceAccount = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_11__.decodeAddressToMuxedAccount)(this.source.accountId());
      cov_47gaomomq().s[110]++;
      attrs.ext = new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionExt(0);
      var xtx = (cov_47gaomomq().s[111]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Transaction(attrs));
      cov_47gaomomq().s[112]++;
      xtx.operations(this.operations);
      var txEnvelope = (cov_47gaomomq().s[113]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionEnvelope.envelopeTypeTx(new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionV1Envelope({
        tx: xtx
      })));
      var tx = (cov_47gaomomq().s[114]++, new _transaction__WEBPACK_IMPORTED_MODULE_7__.Transaction(txEnvelope, this.networkPassphrase));
      cov_47gaomomq().s[115]++;
      this.source.incrementSequenceNumber();
      cov_47gaomomq().s[116]++;
      return tx;
    }
  }, {
    key: "hasV2Preconditions",
    value: function hasV2Preconditions() {
      cov_47gaomomq().f[12]++;
      cov_47gaomomq().s[117]++;
      return (cov_47gaomomq().b[48][0]++, this.ledgerbounds !== null) || (cov_47gaomomq().b[48][1]++, this.minAccountSequence !== null) || (cov_47gaomomq().b[48][2]++, this.minAccountSequenceAge !== null) || (cov_47gaomomq().b[48][3]++, this.minAccountSequenceLedgerGap !== null) || (cov_47gaomomq().b[48][4]++, this.extraSigners !== null) && (cov_47gaomomq().b[48][5]++, this.extraSigners.length > 0);
    }

    /**
     * Builds a {@link FeeBumpTransaction}, enabling you to resubmit an existing
     * transaction with a higher fee.
     *
     * @param {Keypair|string}  feeSource - account paying for the transaction,
     *     in the form of either a Keypair (only the public key is used) or
     *     an account ID (in G... or M... form, but refer to `withMuxing`)
     * @param {string}          baseFee   - max fee willing to pay per operation
     *     in inner transaction (**in stroops**)
     * @param {Transaction}     innerTx   - {@link Transaction} to be bumped by
     *     the fee bump transaction
     * @param {string}          networkPassphrase - passphrase of the target
     *     Stellar network (e.g. "Public Global Stellar Network ; September 2015",
     *     see {@link Networks})
     *
     * @todo Alongside the next major version bump, this type signature can be
     *       changed to be less awkward: accept a MuxedAccount as the `feeSource`
     *       rather than a keypair or string.
     *
     * @note Your fee-bump amount should be >= 10x the original fee.
     * @see  https://developers.stellar.org/docs/glossary/fee-bumps/#replace-by-fee
     *
     * @returns {FeeBumpTransaction}
     */
  }], [{
    key: "buildFeeBumpTransaction",
    value: function buildFeeBumpTransaction(feeSource, baseFee, innerTx, networkPassphrase) {
      cov_47gaomomq().f[13]++;
      var innerOps = (cov_47gaomomq().s[118]++, innerTx.operations.length);
      var innerBaseFeeRate = (cov_47gaomomq().s[119]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](innerTx.fee).div(innerOps));
      var base = (cov_47gaomomq().s[120]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](baseFee));

      // The fee rate for fee bump is at least the fee rate of the inner transaction
      cov_47gaomomq().s[121]++;
      if (base.lt(innerBaseFeeRate)) {
        cov_47gaomomq().b[49][0]++;
        cov_47gaomomq().s[122]++;
        throw new Error("Invalid baseFee, it should be at least ".concat(innerBaseFeeRate, " stroops."));
      } else {
        cov_47gaomomq().b[49][1]++;
      }
      var minBaseFee = (cov_47gaomomq().s[123]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_1__["default"](BASE_FEE));

      // The fee rate is at least the minimum fee
      cov_47gaomomq().s[124]++;
      if (base.lt(minBaseFee)) {
        cov_47gaomomq().b[50][0]++;
        cov_47gaomomq().s[125]++;
        throw new Error("Invalid baseFee, it should be at least ".concat(minBaseFee, " stroops."));
      } else {
        cov_47gaomomq().b[50][1]++;
      }
      var innerTxEnvelope = (cov_47gaomomq().s[126]++, innerTx.toEnvelope());
      cov_47gaomomq().s[127]++;
      if (innerTxEnvelope["switch"]() === _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].EnvelopeType.envelopeTypeTxV0()) {
        cov_47gaomomq().b[51][0]++;
        var v0Tx = (cov_47gaomomq().s[128]++, innerTxEnvelope.v0().tx());
        var v1Tx = (cov_47gaomomq().s[129]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Transaction({
          sourceAccount: new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].MuxedAccount.keyTypeEd25519(v0Tx.sourceAccountEd25519()),
          fee: v0Tx.fee(),
          seqNum: v0Tx.seqNum(),
          cond: _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Preconditions.precondTime(v0Tx.timeBounds()),
          memo: v0Tx.memo(),
          operations: v0Tx.operations(),
          ext: new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionExt(0)
        }));
        cov_47gaomomq().s[130]++;
        innerTxEnvelope = new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionEnvelope.envelopeTypeTx(new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionV1Envelope({
          tx: v1Tx,
          signatures: innerTxEnvelope.v0().signatures()
        }));
      } else {
        cov_47gaomomq().b[51][1]++;
      }
      var feeSourceAccount;
      cov_47gaomomq().s[131]++;
      if (lodash_isString__WEBPACK_IMPORTED_MODULE_4___default()(feeSource)) {
        cov_47gaomomq().b[52][0]++;
        cov_47gaomomq().s[132]++;
        feeSourceAccount = (0,_util_decode_encode_muxed_account__WEBPACK_IMPORTED_MODULE_11__.decodeAddressToMuxedAccount)(feeSource);
      } else {
        cov_47gaomomq().b[52][1]++;
        cov_47gaomomq().s[133]++;
        feeSourceAccount = feeSource.xdrMuxedAccount();
      }
      var tx = (cov_47gaomomq().s[134]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].FeeBumpTransaction({
        feeSource: feeSourceAccount,
        fee: _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].Int64.fromString(base.times(innerOps + 1).toString()),
        innerTx: _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].FeeBumpTransactionInnerTx.envelopeTypeTx(innerTxEnvelope.v1()),
        ext: new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].FeeBumpTransactionExt(0)
      }));
      var feeBumpTxEnvelope = (cov_47gaomomq().s[135]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].FeeBumpTransactionEnvelope({
        tx: tx,
        signatures: []
      }));
      var envelope = (cov_47gaomomq().s[136]++, new _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionEnvelope.envelopeTypeTxFeeBump(feeBumpTxEnvelope));
      cov_47gaomomq().s[137]++;
      return new _fee_bump_transaction__WEBPACK_IMPORTED_MODULE_8__.FeeBumpTransaction(envelope, networkPassphrase);
    }

    /**
     * Build a {@link Transaction} or {@link FeeBumpTransaction} from an
     * xdr.TransactionEnvelope.
     *
     * @param {string|xdr.TransactionEnvelope} envelope - The transaction envelope
     *     object or base64 encoded string.
     * @param {string} networkPassphrase - The network passphrase of the target
     *     Stellar network (e.g. "Public Global Stellar Network ; September
     *     2015"), see {@link Networks}.
     *
     * @returns {Transaction|FeeBumpTransaction}
     */
  }, {
    key: "fromXDR",
    value: function fromXDR(envelope, networkPassphrase) {
      cov_47gaomomq().f[14]++;
      cov_47gaomomq().s[138]++;
      if (typeof envelope === 'string') {
        cov_47gaomomq().b[53][0]++;
        cov_47gaomomq().s[139]++;
        envelope = _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].TransactionEnvelope.fromXDR(envelope, 'base64');
      } else {
        cov_47gaomomq().b[53][1]++;
      }
      cov_47gaomomq().s[140]++;
      if (envelope["switch"]() === _xdr__WEBPACK_IMPORTED_MODULE_6__["default"].EnvelopeType.envelopeTypeTxFeeBump()) {
        cov_47gaomomq().b[54][0]++;
        cov_47gaomomq().s[141]++;
        return new _fee_bump_transaction__WEBPACK_IMPORTED_MODULE_8__.FeeBumpTransaction(envelope, networkPassphrase);
      } else {
        cov_47gaomomq().b[54][1]++;
      }
      cov_47gaomomq().s[142]++;
      return new _transaction__WEBPACK_IMPORTED_MODULE_7__.Transaction(envelope, networkPassphrase);
    }
  }]);
  return TransactionBuilder;
}();

/**
 * Checks whether a provided object is a valid Date.
 * @argument {Date} d date object
 * @returns {boolean}
 */
function isValidDate(d) {
  cov_47gaomomq().f[15]++;
  cov_47gaomomq().s[143]++;
  // isnan is okay here because it correctly checks for invalid date objects
  // eslint-disable-next-line no-restricted-globals
  return (cov_47gaomomq().b[55][0]++, d instanceof Date) && (cov_47gaomomq().b[55][1]++, !isNaN(d));
}

/***/ }),

/***/ "./src/util/BrowserBuffer.js":
/*!***********************************!*\
  !*** ./src/util/BrowserBuffer.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function cov_toyl8h1bc() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\util\\BrowserBuffer.js";
  var hash = "515ae01e4abf022881c09f008854cf49d4dbb907";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\util\\BrowserBuffer.js",
    statementMap: {
      "0": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 16,
          column: 5
        }
      },
      "1": {
        start: {
          line: 4,
          column: 6
        },
        end: {
          line: 4,
          column: 40
        }
      },
      "2": {
        start: {
          line: 5,
          column: 6
        },
        end: {
          line: 5,
          column: 24
        }
      },
      "3": {
        start: {
          line: 6,
          column: 11
        },
        end: {
          line: 16,
          column: 5
        }
      },
      "4": {
        start: {
          line: 7,
          column: 6
        },
        end: {
          line: 11,
          column: 7
        }
      },
      "5": {
        start: {
          line: 8,
          column: 8
        },
        end: {
          line: 8,
          column: 66
        }
      },
      "6": {
        start: {
          line: 10,
          column: 8
        },
        end: {
          line: 10,
          column: 52
        }
      },
      "7": {
        start: {
          line: 12,
          column: 11
        },
        end: {
          line: 16,
          column: 5
        }
      },
      "8": {
        start: {
          line: 13,
          column: 6
        },
        end: {
          line: 13,
          column: 66
        }
      },
      "9": {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 47
        }
      },
      "10": {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 36
        }
      },
      "11": {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      "12": {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 56
        }
      },
      "13": {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "14": {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 32,
          column: 7
        }
      },
      "15": {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 38
        }
      },
      "16": {
        start: {
          line: 30,
          column: 26
        },
        end: {
          line: 30,
          column: 50
        }
      },
      "17": {
        start: {
          line: 31,
          column: 8
        },
        end: {
          line: 31,
          column: 44
        }
      },
      "18": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 64
        }
      },
      "19": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 36,
          column: 45
        }
      },
      "20": {
        start: {
          line: 40,
          column: 19
        },
        end: {
          line: 40,
          column: 42
        }
      },
      "21": {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 48,
          column: 5
        }
      },
      "22": {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 57
        }
      },
      "23": {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 45,
          column: 7
        }
      },
      "24": {
        start: {
          line: 43,
          column: 19
        },
        end: {
          line: 43,
          column: 20
        }
      },
      "25": {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 54
        }
      },
      "26": {
        start: {
          line: 47,
          column: 6
        },
        end: {
          line: 47,
          column: 24
        }
      },
      "27": {
        start: {
          line: 49,
          column: 4
        },
        end: {
          line: 49,
          column: 18
        }
      },
      "28": {
        start: {
          line: 53,
          column: 4
        },
        end: {
          line: 55,
          column: 5
        }
      },
      "29": {
        start: {
          line: 54,
          column: 6
        },
        end: {
          line: 54,
          column: 71
        }
      },
      "30": {
        start: {
          line: 54,
          column: 48
        },
        end: {
          line: 54,
          column: 66
        }
      },
      "31": {
        start: {
          line: 56,
          column: 19
        },
        end: {
          line: 56,
          column: 51
        }
      },
      "32": {
        start: {
          line: 57,
          column: 17
        },
        end: {
          line: 57,
          column: 18
        }
      },
      "33": {
        start: {
          line: 58,
          column: 4
        },
        end: {
          line: 61,
          column: 7
        }
      },
      "34": {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 59,
          column: 30
        }
      },
      "35": {
        start: {
          line: 60,
          column: 6
        },
        end: {
          line: 60,
          column: 27
        }
      },
      "36": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 18
        }
      },
      "37": {
        start: {
          line: 66,
          column: 4
        },
        end: {
          line: 75,
          column: 5
        }
      },
      "38": {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 48
        }
      },
      "39": {
        start: {
          line: 70,
          column: 8
        },
        end: {
          line: 70,
          column: 41
        }
      },
      "40": {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 38
        }
      },
      "41": {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 53
        }
      },
      "42": {
        start: {
          line: 79,
          column: 25
        },
        end: {
          line: 79,
          column: 37
        }
      },
      "43": {
        start: {
          line: 80,
          column: 18
        },
        end: {
          line: 80,
          column: 53
        }
      },
      "44": {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 83,
          column: 5
        }
      },
      "45": {
        start: {
          line: 81,
          column: 17
        },
        end: {
          line: 81,
          column: 18
        }
      },
      "46": {
        start: {
          line: 82,
          column: 6
        },
        end: {
          line: 82,
          column: 44
        }
      },
      "47": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 17
        }
      },
      "48": {
        start: {
          line: 88,
          column: 17
        },
        end: {
          line: 88,
          column: 34
        }
      },
      "49": {
        start: {
          line: 89,
          column: 18
        },
        end: {
          line: 89,
          column: 38
        }
      },
      "50": {
        start: {
          line: 90,
          column: 4
        },
        end: {
          line: 92,
          column: 5
        }
      },
      "51": {
        start: {
          line: 90,
          column: 17
        },
        end: {
          line: 90,
          column: 18
        }
      },
      "52": {
        start: {
          line: 91,
          column: 6
        },
        end: {
          line: 91,
          column: 55
        }
      },
      "53": {
        start: {
          line: 93,
          column: 4
        },
        end: {
          line: 93,
          column: 17
        }
      },
      "54": {
        start: {
          line: 97,
          column: 4
        },
        end: {
          line: 97,
          column: 28
        }
      },
      "55": {
        start: {
          line: 101,
          column: 4
        },
        end: {
          line: 101,
          column: 69
        }
      },
      "56": {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 115,
          column: 5
        }
      },
      "57": {
        start: {
          line: 107,
          column: 8
        },
        end: {
          line: 107,
          column: 28
        }
      },
      "58": {
        start: {
          line: 110,
          column: 8
        },
        end: {
          line: 110,
          column: 46
        }
      },
      "59": {
        start: {
          line: 112,
          column: 8
        },
        end: {
          line: 112,
          column: 31
        }
      },
      "60": {
        start: {
          line: 114,
          column: 8
        },
        end: {
          line: 114,
          column: 53
        }
      },
      "61": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 121,
          column: 5
        }
      },
      "62": {
        start: {
          line: 120,
          column: 6
        },
        end: {
          line: 120,
          column: 58
        }
      },
      "63": {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 122,
          column: 72
        }
      },
      "64": {
        start: {
          line: 122,
          column: 41
        },
        end: {
          line: 122,
          column: 70
        }
      },
      "65": {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 58
        }
      },
      "66": {
        start: {
          line: 130,
          column: 23
        },
        end: {
          line: 130,
          column: 62
        }
      },
      "67": {
        start: {
          line: 131,
          column: 4
        },
        end: {
          line: 131,
          column: 51
        }
      },
      "68": {
        start: {
          line: 132,
          column: 4
        },
        end: {
          line: 132,
          column: 29
        }
      },
      "69": {
        start: {
          line: 136,
          column: 23
        },
        end: {
          line: 136,
          column: 69
        }
      },
      "70": {
        start: {
          line: 137,
          column: 23
        },
        end: {
          line: 137,
          column: 62
        }
      },
      "71": {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 75
        }
      },
      "72": {
        start: {
          line: 138,
          column: 42
        },
        end: {
          line: 138,
          column: 65
        }
      },
      "73": {
        start: {
          line: 142,
          column: 23
        },
        end: {
          line: 142,
          column: 58
        }
      },
      "74": {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 145,
          column: 5
        }
      },
      "75": {
        start: {
          line: 143,
          column: 17
        },
        end: {
          line: 143,
          column: 23
        }
      },
      "76": {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 144,
          column: 55
        }
      },
      "77": {
        start: {
          line: 146,
          column: 4
        },
        end: {
          line: 146,
          column: 16
        }
      },
      "78": {
        start: {
          line: 150,
          column: 25
        },
        end: {
          line: 150,
          column: 60
        }
      },
      "79": {
        start: {
          line: 151,
          column: 25
        },
        end: {
          line: 151,
          column: 44
        }
      },
      "80": {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 157,
          column: 5
        }
      },
      "81": {
        start: {
          line: 153,
          column: 17
        },
        end: {
          line: 153,
          column: 27
        }
      },
      "82": {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 156,
          column: 7
        }
      },
      "83": {
        start: {
          line: 155,
          column: 8
        },
        end: {
          line: 155,
          column: 17
        }
      },
      "84": {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 14
        }
      },
      "85": {
        start: {
          line: 162,
          column: 25
        },
        end: {
          line: 162,
          column: 60
        }
      },
      "86": {
        start: {
          line: 163,
          column: 25
        },
        end: {
          line: 163,
          column: 44
        }
      },
      "87": {
        start: {
          line: 165,
          column: 4
        },
        end: {
          line: 169,
          column: 5
        }
      },
      "88": {
        start: {
          line: 165,
          column: 17
        },
        end: {
          line: 165,
          column: 27
        }
      },
      "89": {
        start: {
          line: 166,
          column: 6
        },
        end: {
          line: 168,
          column: 7
        }
      },
      "90": {
        start: {
          line: 167,
          column: 8
        },
        end: {
          line: 167,
          column: 36
        }
      },
      "91": {
        start: {
          line: 170,
          column: 4
        },
        end: {
          line: 170,
          column: 14
        }
      },
      "92": {
        start: {
          line: 174,
          column: 4
        },
        end: {
          line: 178,
          column: 5
        }
      },
      "93": {
        start: {
          line: 174,
          column: 17
        },
        end: {
          line: 174,
          column: 18
        }
      },
      "94": {
        start: {
          line: 175,
          column: 6
        },
        end: {
          line: 177,
          column: 7
        }
      },
      "95": {
        start: {
          line: 176,
          column: 8
        },
        end: {
          line: 176,
          column: 21
        }
      },
      "96": {
        start: {
          line: 179,
          column: 4
        },
        end: {
          line: 179,
          column: 16
        }
      },
      "97": {
        start: {
          line: 182,
          column: 14
        },
        end: {
          line: 182,
          column: 16
        }
      },
      "98": {
        start: {
          line: 183,
          column: 4
        },
        end: {
          line: 186,
          column: 5
        }
      },
      "99": {
        start: {
          line: 183,
          column: 17
        },
        end: {
          line: 183,
          column: 18
        }
      },
      "100": {
        start: {
          line: 184,
          column: 19
        },
        end: {
          line: 184,
          column: 39
        }
      },
      "101": {
        start: {
          line: 185,
          column: 6
        },
        end: {
          line: 185,
          column: 49
        }
      },
      "102": {
        start: {
          line: 187,
          column: 4
        },
        end: {
          line: 187,
          column: 15
        }
      },
      "103": {
        start: {
          line: 191,
          column: 17
        },
        end: {
          line: 191,
          column: 19
        }
      },
      "104": {
        start: {
          line: 192,
          column: 16
        },
        end: {
          line: 192,
          column: 31
        }
      },
      "105": {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 195,
          column: 5
        }
      },
      "106": {
        start: {
          line: 193,
          column: 17
        },
        end: {
          line: 193,
          column: 18
        }
      },
      "107": {
        start: {
          line: 194,
          column: 6
        },
        end: {
          line: 194,
          column: 45
        }
      },
      "108": {
        start: {
          line: 196,
          column: 4
        },
        end: {
          line: 196,
          column: 24
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 2,
            column: 3
          }
        },
        loc: {
          start: {
            line: 2,
            column: 47
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 2
      },
      "1": {
        name: "(anonymous_1)",
        decl: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 3
          }
        },
        loc: {
          start: {
            line: 18,
            column: 22
          },
          end: {
            line: 20,
            column: 3
          }
        },
        line: 18
      },
      "2": {
        name: "(anonymous_2)",
        decl: {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 22,
            column: 3
          }
        },
        loc: {
          start: {
            line: 22,
            column: 47
          },
          end: {
            line: 37,
            column: 3
          }
        },
        line: 22
      },
      "3": {
        name: "(anonymous_3)",
        decl: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        loc: {
          start: {
            line: 39,
            column: 31
          },
          end: {
            line: 50,
            column: 3
          }
        },
        line: 39
      },
      "4": {
        name: "(anonymous_4)",
        decl: {
          start: {
            line: 52,
            column: 2
          },
          end: {
            line: 52,
            column: 3
          }
        },
        loc: {
          start: {
            line: 52,
            column: 35
          },
          end: {
            line: 63,
            column: 3
          }
        },
        line: 52
      },
      "5": {
        name: "(anonymous_5)",
        decl: {
          start: {
            line: 54,
            column: 32
          },
          end: {
            line: 54,
            column: 33
          }
        },
        loc: {
          start: {
            line: 54,
            column: 48
          },
          end: {
            line: 54,
            column: 66
          }
        },
        line: 54
      },
      "6": {
        name: "(anonymous_6)",
        decl: {
          start: {
            line: 58,
            column: 17
          },
          end: {
            line: 58,
            column: 18
          }
        },
        loc: {
          start: {
            line: 58,
            column: 24
          },
          end: {
            line: 61,
            column: 5
          }
        },
        line: 58
      },
      "7": {
        name: "(anonymous_7)",
        decl: {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 65,
            column: 3
          }
        },
        loc: {
          start: {
            line: 65,
            column: 34
          },
          end: {
            line: 76,
            column: 3
          }
        },
        line: 65
      },
      "8": {
        name: "(anonymous_8)",
        decl: {
          start: {
            line: 78,
            column: 2
          },
          end: {
            line: 78,
            column: 3
          }
        },
        loc: {
          start: {
            line: 78,
            column: 30
          },
          end: {
            line: 85,
            column: 3
          }
        },
        line: 78
      },
      "9": {
        name: "(anonymous_9)",
        decl: {
          start: {
            line: 87,
            column: 2
          },
          end: {
            line: 87,
            column: 3
          }
        },
        loc: {
          start: {
            line: 87,
            column: 27
          },
          end: {
            line: 94,
            column: 3
          }
        },
        line: 87
      },
      "10": {
        name: "(anonymous_10)",
        decl: {
          start: {
            line: 96,
            column: 2
          },
          end: {
            line: 96,
            column: 3
          }
        },
        loc: {
          start: {
            line: 96,
            column: 15
          },
          end: {
            line: 98,
            column: 3
          }
        },
        line: 96
      },
      "11": {
        name: "(anonymous_11)",
        decl: {
          start: {
            line: 100,
            column: 2
          },
          end: {
            line: 100,
            column: 3
          }
        },
        loc: {
          start: {
            line: 100,
            column: 23
          },
          end: {
            line: 102,
            column: 3
          }
        },
        line: 100
      },
      "12": {
        name: "(anonymous_12)",
        decl: {
          start: {
            line: 104,
            column: 2
          },
          end: {
            line: 104,
            column: 3
          }
        },
        loc: {
          start: {
            line: 104,
            column: 30
          },
          end: {
            line: 116,
            column: 3
          }
        },
        line: 104
      },
      "13": {
        name: "(anonymous_13)",
        decl: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 118,
            column: 3
          }
        },
        loc: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 123,
            column: 3
          }
        },
        line: 118
      },
      "14": {
        name: "(anonymous_14)",
        decl: {
          start: {
            line: 122,
            column: 27
          },
          end: {
            line: 122,
            column: 28
          }
        },
        loc: {
          start: {
            line: 122,
            column: 41
          },
          end: {
            line: 122,
            column: 70
          }
        },
        line: 122
      },
      "15": {
        name: "(anonymous_15)",
        decl: {
          start: {
            line: 125,
            column: 2
          },
          end: {
            line: 125,
            column: 3
          }
        },
        loc: {
          start: {
            line: 125,
            column: 43
          },
          end: {
            line: 127,
            column: 3
          }
        },
        line: 125
      },
      "16": {
        name: "(anonymous_16)",
        decl: {
          start: {
            line: 129,
            column: 2
          },
          end: {
            line: 129,
            column: 3
          }
        },
        loc: {
          start: {
            line: 129,
            column: 85
          },
          end: {
            line: 133,
            column: 3
          }
        },
        line: 129
      },
      "17": {
        name: "(anonymous_17)",
        decl: {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 3
          }
        },
        loc: {
          start: {
            line: 135,
            column: 124
          },
          end: {
            line: 139,
            column: 3
          }
        },
        line: 135
      },
      "18": {
        name: "(anonymous_18)",
        decl: {
          start: {
            line: 138,
            column: 28
          },
          end: {
            line: 138,
            column: 29
          }
        },
        loc: {
          start: {
            line: 138,
            column: 42
          },
          end: {
            line: 138,
            column: 65
          }
        },
        line: 138
      },
      "19": {
        name: "(anonymous_19)",
        decl: {
          start: {
            line: 141,
            column: 2
          },
          end: {
            line: 141,
            column: 3
          }
        },
        loc: {
          start: {
            line: 141,
            column: 69
          },
          end: {
            line: 147,
            column: 3
          }
        },
        line: 141
      },
      "20": {
        name: "(anonymous_20)",
        decl: {
          start: {
            line: 149,
            column: 2
          },
          end: {
            line: 149,
            column: 3
          }
        },
        loc: {
          start: {
            line: 149,
            column: 52
          },
          end: {
            line: 159,
            column: 3
          }
        },
        line: 149
      },
      "21": {
        name: "(anonymous_21)",
        decl: {
          start: {
            line: 161,
            column: 2
          },
          end: {
            line: 161,
            column: 3
          }
        },
        loc: {
          start: {
            line: 161,
            column: 75
          },
          end: {
            line: 171,
            column: 3
          }
        },
        line: 161
      },
      "22": {
        name: "(anonymous_22)",
        decl: {
          start: {
            line: 173,
            column: 2
          },
          end: {
            line: 173,
            column: 3
          }
        },
        loc: {
          start: {
            line: 173,
            column: 73
          },
          end: {
            line: 180,
            column: 3
          }
        },
        line: 173
      },
      "23": {
        name: "(anonymous_23)",
        decl: {
          start: {
            line: 181,
            column: 2
          },
          end: {
            line: 181,
            column: 3
          }
        },
        loc: {
          start: {
            line: 181,
            column: 10
          },
          end: {
            line: 188,
            column: 3
          }
        },
        line: 181
      },
      "24": {
        name: "(anonymous_24)",
        decl: {
          start: {
            line: 190,
            column: 2
          },
          end: {
            line: 190,
            column: 3
          }
        },
        loc: {
          start: {
            line: 190,
            column: 13
          },
          end: {
            line: 197,
            column: 3
          }
        },
        line: 190
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        }, {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 3
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        }, {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 7,
            column: 6
          },
          end: {
            line: 11,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 6
          },
          end: {
            line: 11,
            column: 7
          }
        }, {
          start: {
            line: 9,
            column: 13
          },
          end: {
            line: 11,
            column: 7
          }
        }],
        line: 7
      },
      "3": {
        loc: {
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 12,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        }, {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 16,
            column: 5
          }
        }],
        line: 12
      },
      "4": {
        loc: {
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 72
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 12,
            column: 15
          },
          end: {
            line: 12,
            column: 40
          }
        }, {
          start: {
            line: 12,
            column: 44
          },
          end: {
            line: 12,
            column: 72
          }
        }],
        line: 12
      },
      "5": {
        loc: {
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 23,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 23
      },
      "6": {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 27
      },
      "7": {
        loc: {
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 91
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 27,
            column: 8
          },
          end: {
            line: 27,
            column: 33
          }
        }, {
          start: {
            line: 27,
            column: 38
          },
          end: {
            line: 27,
            column: 58
          }
        }, {
          start: {
            line: 27,
            column: 62
          },
          end: {
            line: 27,
            column: 90
          }
        }],
        line: 27
      },
      "8": {
        loc: {
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 32,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 28,
            column: 6
          },
          end: {
            line: 32,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 28
      },
      "9": {
        loc: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 29
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 39,
            column: 28
          },
          end: {
            line: 39,
            column: 29
          }
        }],
        line: 39
      },
      "10": {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 48,
            column: 5
          }
        }, {
          start: {
            line: 46,
            column: 11
          },
          end: {
            line: 48,
            column: 5
          }
        }],
        line: 41
      },
      "11": {
        loc: {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 53
      },
      "12": {
        loc: {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 75,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 68,
            column: 48
          }
        }, {
          start: {
            line: 69,
            column: 6
          },
          end: {
            line: 70,
            column: 41
          }
        }, {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 72,
            column: 38
          }
        }, {
          start: {
            line: 73,
            column: 6
          },
          end: {
            line: 74,
            column: 53
          }
        }],
        line: 66
      },
      "13": {
        loc: {
          start: {
            line: 101,
            column: 11
          },
          end: {
            line: 101,
            column: 68
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 101,
            column: 11
          },
          end: {
            line: 101,
            column: 39
          }
        }, {
          start: {
            line: 101,
            column: 43
          },
          end: {
            line: 101,
            column: 68
          }
        }],
        line: 101
      },
      "14": {
        loc: {
          start: {
            line: 104,
            column: 11
          },
          end: {
            line: 104,
            column: 28
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 104,
            column: 22
          },
          end: {
            line: 104,
            column: 28
          }
        }],
        line: 104
      },
      "15": {
        loc: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        type: "switch",
        locations: [{
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 107,
            column: 28
          }
        }, {
          start: {
            line: 108,
            column: 6
          },
          end: {
            line: 108,
            column: 18
          }
        }, {
          start: {
            line: 109,
            column: 6
          },
          end: {
            line: 110,
            column: 46
          }
        }, {
          start: {
            line: 111,
            column: 6
          },
          end: {
            line: 112,
            column: 31
          }
        }, {
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 114,
            column: 53
          }
        }],
        line: 105
      },
      "16": {
        loc: {
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 119,
            column: 4
          },
          end: {
            line: 121,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 119
      },
      "17": {
        loc: {
          start: {
            line: 125,
            column: 8
          },
          end: {
            line: 125,
            column: 17
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 16
          },
          end: {
            line: 125,
            column: 17
          }
        }],
        line: 125
      },
      "18": {
        loc: {
          start: {
            line: 125,
            column: 19
          },
          end: {
            line: 125,
            column: 41
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 125,
            column: 25
          },
          end: {
            line: 125,
            column: 41
          }
        }],
        line: 125
      },
      "19": {
        loc: {
          start: {
            line: 129,
            column: 21
          },
          end: {
            line: 129,
            column: 36
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 35
          },
          end: {
            line: 129,
            column: 36
          }
        }],
        line: 129
      },
      "20": {
        loc: {
          start: {
            line: 129,
            column: 38
          },
          end: {
            line: 129,
            column: 53
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 52
          },
          end: {
            line: 129,
            column: 53
          }
        }],
        line: 129
      },
      "21": {
        loc: {
          start: {
            line: 129,
            column: 55
          },
          end: {
            line: 129,
            column: 83
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 129,
            column: 67
          },
          end: {
            line: 129,
            column: 83
          }
        }],
        line: 129
      },
      "22": {
        loc: {
          start: {
            line: 135,
            column: 23
          },
          end: {
            line: 135,
            column: 38
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 37
          },
          end: {
            line: 135,
            column: 38
          }
        }],
        line: 135
      },
      "23": {
        loc: {
          start: {
            line: 135,
            column: 40
          },
          end: {
            line: 135,
            column: 75
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 52
          },
          end: {
            line: 135,
            column: 75
          }
        }],
        line: 135
      },
      "24": {
        loc: {
          start: {
            line: 135,
            column: 77
          },
          end: {
            line: 135,
            column: 92
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 91
          },
          end: {
            line: 135,
            column: 92
          }
        }],
        line: 135
      },
      "25": {
        loc: {
          start: {
            line: 135,
            column: 94
          },
          end: {
            line: 135,
            column: 122
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 135,
            column: 106
          },
          end: {
            line: 135,
            column: 122
          }
        }],
        line: 135
      },
      "26": {
        loc: {
          start: {
            line: 138,
            column: 11
          },
          end: {
            line: 138,
            column: 74
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 138,
            column: 69
          },
          end: {
            line: 138,
            column: 70
          }
        }, {
          start: {
            line: 138,
            column: 73
          },
          end: {
            line: 138,
            column: 74
          }
        }],
        line: 138
      },
      "27": {
        loc: {
          start: {
            line: 141,
            column: 14
          },
          end: {
            line: 141,
            column: 24
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 141,
            column: 23
          },
          end: {
            line: 141,
            column: 24
          }
        }],
        line: 141
      },
      "28": {
        loc: {
          start: {
            line: 141,
            column: 26
          },
          end: {
            line: 141,
            column: 48
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 141,
            column: 32
          },
          end: {
            line: 141,
            column: 48
          }
        }],
        line: 141
      },
      "29": {
        loc: {
          start: {
            line: 141,
            column: 50
          },
          end: {
            line: 141,
            column: 67
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 141,
            column: 61
          },
          end: {
            line: 141,
            column: 67
          }
        }],
        line: 141
      },
      "30": {
        loc: {
          start: {
            line: 149,
            column: 17
          },
          end: {
            line: 149,
            column: 31
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 30
          },
          end: {
            line: 149,
            column: 31
          }
        }],
        line: 149
      },
      "31": {
        loc: {
          start: {
            line: 149,
            column: 33
          },
          end: {
            line: 149,
            column: 50
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 149,
            column: 44
          },
          end: {
            line: 149,
            column: 50
          }
        }],
        line: 149
      },
      "32": {
        loc: {
          start: {
            line: 154,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 154,
            column: 6
          },
          end: {
            line: 156,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 154
      },
      "33": {
        loc: {
          start: {
            line: 161,
            column: 21
          },
          end: {
            line: 161,
            column: 54
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 161,
            column: 34
          },
          end: {
            line: 161,
            column: 54
          }
        }],
        line: 161
      },
      "34": {
        loc: {
          start: {
            line: 161,
            column: 56
          },
          end: {
            line: 161,
            column: 73
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 161,
            column: 67
          },
          end: {
            line: 161,
            column: 73
          }
        }],
        line: 161
      },
      "35": {
        loc: {
          start: {
            line: 166,
            column: 6
          },
          end: {
            line: 168,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 166,
            column: 6
          },
          end: {
            line: 168,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 166
      },
      "36": {
        loc: {
          start: {
            line: 173,
            column: 37
          },
          end: {
            line: 173,
            column: 71
          }
        },
        type: "default-arg",
        locations: [{
          start: {
            line: 173,
            column: 52
          },
          end: {
            line: 173,
            column: 71
          }
        }],
        line: 173
      },
      "37": {
        loc: {
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 177,
            column: 7
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 175,
            column: 6
          },
          end: {
            line: 177,
            column: 7
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 175
      },
      "38": {
        loc: {
          start: {
            line: 185,
            column: 13
          },
          end: {
            line: 185,
            column: 48
          }
        },
        type: "cond-expr",
        locations: [{
          start: {
            line: 185,
            column: 31
          },
          end: {
            line: 185,
            column: 41
          }
        }, {
          start: {
            line: 185,
            column: 44
          },
          end: {
            line: 185,
            column: 48
          }
        }],
        line: 185
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0,
      "25": 0,
      "26": 0,
      "27": 0,
      "28": 0,
      "29": 0,
      "30": 0,
      "31": 0,
      "32": 0,
      "33": 0,
      "34": 0,
      "35": 0,
      "36": 0,
      "37": 0,
      "38": 0,
      "39": 0,
      "40": 0,
      "41": 0,
      "42": 0,
      "43": 0,
      "44": 0,
      "45": 0,
      "46": 0,
      "47": 0,
      "48": 0,
      "49": 0,
      "50": 0,
      "51": 0,
      "52": 0,
      "53": 0,
      "54": 0,
      "55": 0,
      "56": 0,
      "57": 0,
      "58": 0,
      "59": 0,
      "60": 0,
      "61": 0,
      "62": 0,
      "63": 0,
      "64": 0,
      "65": 0,
      "66": 0,
      "67": 0,
      "68": 0,
      "69": 0,
      "70": 0,
      "71": 0,
      "72": 0,
      "73": 0,
      "74": 0,
      "75": 0,
      "76": 0,
      "77": 0,
      "78": 0,
      "79": 0,
      "80": 0,
      "81": 0,
      "82": 0,
      "83": 0,
      "84": 0,
      "85": 0,
      "86": 0,
      "87": 0,
      "88": 0,
      "89": 0,
      "90": 0,
      "91": 0,
      "92": 0,
      "93": 0,
      "94": 0,
      "95": 0,
      "96": 0,
      "97": 0,
      "98": 0,
      "99": 0,
      "100": 0,
      "101": 0,
      "102": 0,
      "103": 0,
      "104": 0,
      "105": 0,
      "106": 0,
      "107": 0,
      "108": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0,
      "23": 0,
      "24": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0],
      "7": [0, 0, 0],
      "8": [0, 0],
      "9": [0],
      "10": [0, 0],
      "11": [0, 0],
      "12": [0, 0, 0, 0],
      "13": [0, 0],
      "14": [0],
      "15": [0, 0, 0, 0, 0],
      "16": [0, 0],
      "17": [0],
      "18": [0],
      "19": [0],
      "20": [0],
      "21": [0],
      "22": [0],
      "23": [0],
      "24": [0],
      "25": [0],
      "26": [0, 0],
      "27": [0],
      "28": [0],
      "29": [0],
      "30": [0],
      "31": [0],
      "32": [0, 0],
      "33": [0],
      "34": [0],
      "35": [0, 0],
      "36": [0],
      "37": [0, 0],
      "38": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "515ae01e4abf022881c09f008854cf49d4dbb907"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_toyl8h1bc = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_toyl8h1bc();
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var BrowserBuffer = /*#__PURE__*/function () {
  function BrowserBuffer(input, encodingOrOffset, length) {
    _classCallCheck(this, BrowserBuffer);
    cov_toyl8h1bc().f[0]++;
    cov_toyl8h1bc().s[0]++;
    if (typeof input === 'number') {
      cov_toyl8h1bc().b[0][0]++;
      cov_toyl8h1bc().s[1]++;
      this.data = new Uint8Array(input);
      cov_toyl8h1bc().s[2]++;
      this.data.fill(0);
    } else {
      cov_toyl8h1bc().b[0][1]++;
      cov_toyl8h1bc().s[3]++;
      if (typeof input === 'string') {
        cov_toyl8h1bc().b[1][0]++;
        cov_toyl8h1bc().s[4]++;
        if (typeof encodingOrOffset === 'string') {
          cov_toyl8h1bc().b[2][0]++;
          cov_toyl8h1bc().s[5]++;
          this.data = BrowserBuffer.decode(input, encodingOrOffset);
        } else {
          cov_toyl8h1bc().b[2][1]++;
          cov_toyl8h1bc().s[6]++;
          this.data = new TextEncoder().encode(input);
        }
      } else {
        cov_toyl8h1bc().b[1][1]++;
        cov_toyl8h1bc().s[7]++;
        if ((cov_toyl8h1bc().b[4][0]++, _typeof(input) === 'object') && (cov_toyl8h1bc().b[4][1]++, input instanceof ArrayBuffer)) {
          cov_toyl8h1bc().b[3][0]++;
          cov_toyl8h1bc().s[8]++;
          this.data = new Uint8Array(input, encodingOrOffset, length);
        } else {
          cov_toyl8h1bc().b[3][1]++;
          cov_toyl8h1bc().s[9]++;
          throw new Error('Unsupported data type');
        }
      }
    }
  }
  _createClass(BrowserBuffer, [{
    key: "length",
    get: function get() {
      cov_toyl8h1bc().f[10]++;
      cov_toyl8h1bc().s[54]++;
      return this.data.length;
    }
  }, {
    key: "toString",
    value: function toString() {
      var encoding = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_toyl8h1bc().b[14][0]++, 'utf8');
      cov_toyl8h1bc().f[12]++;
      cov_toyl8h1bc().s[56]++;
      switch (encoding) {
        case 'hex':
          cov_toyl8h1bc().b[15][0]++;
          cov_toyl8h1bc().s[57]++;
          return this.toHex();
        case 'utf8':
          cov_toyl8h1bc().b[15][1]++;
        case 'ascii':
          cov_toyl8h1bc().b[15][2]++;
          cov_toyl8h1bc().s[58]++;
          // Treat 'ascii' encoding the same as 'utf8'
          return new TextDecoder().decode(this);
        case 'base64':
          cov_toyl8h1bc().b[15][3]++;
          cov_toyl8h1bc().s[59]++;
          return this.toBase64();
        default:
          cov_toyl8h1bc().b[15][4]++;
          cov_toyl8h1bc().s[60]++;
          throw new Error('Unsupported encoding type');
      }
    }
  }, {
    key: "equals",
    value: function equals(otherBuffer) {
      cov_toyl8h1bc().f[13]++;
      cov_toyl8h1bc().s[61]++;
      if (!(otherBuffer instanceof BrowserBuffer)) {
        cov_toyl8h1bc().b[16][0]++;
        cov_toyl8h1bc().s[62]++;
        throw new Error('Argument must be a BrowserBuffer');
      } else {
        cov_toyl8h1bc().b[16][1]++;
      }
      cov_toyl8h1bc().s[63]++;
      return this.data.every(function (value, i) {
        cov_toyl8h1bc().f[14]++;
        cov_toyl8h1bc().s[64]++;
        return value === otherBuffer.data[i];
      });
    }
  }, {
    key: "slice",
    value: function slice() {
      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (cov_toyl8h1bc().b[17][0]++, 0);
      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[18][0]++, this.data.length);
      cov_toyl8h1bc().f[15]++;
      cov_toyl8h1bc().s[65]++;
      return new BrowserBuffer(this.data.slice(start, end));
    }
  }, {
    key: "copy",
    value: function copy(targetBuffer) {
      var targetStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[19][0]++, 0);
      var sourceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[20][0]++, 0);
      var sourceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (cov_toyl8h1bc().b[21][0]++, this.data.length);
      cov_toyl8h1bc().f[16]++;
      var sourceData = (cov_toyl8h1bc().s[66]++, this.data.slice(sourceStart, sourceEnd));
      cov_toyl8h1bc().s[67]++;
      targetBuffer.data.set(sourceData, targetStart);
      cov_toyl8h1bc().s[68]++;
      return sourceData.length;
    }
  }, {
    key: "compare",
    value: function compare(otherBuffer) {
      var targetStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[22][0]++, 0);
      var targetEnd = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[23][0]++, otherBuffer.data.length);
      var sourceStart = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (cov_toyl8h1bc().b[24][0]++, 0);
      var sourceEnd = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : (cov_toyl8h1bc().b[25][0]++, this.data.length);
      cov_toyl8h1bc().f[17]++;
      var targetData = (cov_toyl8h1bc().s[69]++, otherBuffer.data.slice(targetStart, targetEnd));
      var sourceData = (cov_toyl8h1bc().s[70]++, this.data.slice(sourceStart, sourceEnd));
      cov_toyl8h1bc().s[71]++;
      return sourceData.every(function (value, i) {
        cov_toyl8h1bc().f[18]++;
        cov_toyl8h1bc().s[72]++;
        return value === targetData[i];
      }) ? (cov_toyl8h1bc().b[26][0]++, 0) : (cov_toyl8h1bc().b[26][1]++, 1);
    }
  }, {
    key: "fill",
    value: function fill(value) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[27][0]++, 0);
      var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[28][0]++, this.data.length);
      var encoding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : (cov_toyl8h1bc().b[29][0]++, 'utf8');
      cov_toyl8h1bc().f[19]++;
      var fillBuffer = (cov_toyl8h1bc().s[73]++, BrowserBuffer.from(value, encoding));
      cov_toyl8h1bc().s[74]++;
      for (var i = (cov_toyl8h1bc().s[75]++, offset); i < end; i += 1) {
        cov_toyl8h1bc().s[76]++;
        this.data[i] = fillBuffer[i % fillBuffer.length];
      }
      cov_toyl8h1bc().s[77]++;
      return this;
    }
  }, {
    key: "indexOf",
    value: function indexOf(value) {
      var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[30][0]++, 0);
      var encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[31][0]++, 'utf8');
      cov_toyl8h1bc().f[20]++;
      var searchBuffer = (cov_toyl8h1bc().s[78]++, BrowserBuffer.from(value, encoding));
      var searchLength = (cov_toyl8h1bc().s[79]++, searchBuffer.length);
      cov_toyl8h1bc().s[80]++;
      for (var i = (cov_toyl8h1bc().s[81]++, byteOffset); i < this.data.length - searchLength + 1; i += 1) {
        cov_toyl8h1bc().s[82]++;
        if (this._matchAtIndex(i, searchBuffer)) {
          cov_toyl8h1bc().b[32][0]++;
          cov_toyl8h1bc().s[83]++;
          return i;
        } else {
          cov_toyl8h1bc().b[32][1]++;
        }
      }
      cov_toyl8h1bc().s[84]++;
      return -1;
    }
  }, {
    key: "lastIndexOf",
    value: function lastIndexOf(value) {
      var byteOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[33][0]++, this.data.length - 1);
      var encoding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[34][0]++, 'utf8');
      cov_toyl8h1bc().f[21]++;
      var searchBuffer = (cov_toyl8h1bc().s[85]++, BrowserBuffer.from(value, encoding));
      var searchLength = (cov_toyl8h1bc().s[86]++, searchBuffer.length);
      cov_toyl8h1bc().s[87]++;
      for (var i = (cov_toyl8h1bc().s[88]++, byteOffset); i >= searchLength - 1; i -= 1) {
        cov_toyl8h1bc().s[89]++;
        if (this._matchAtIndex(i, searchBuffer, searchLength)) {
          cov_toyl8h1bc().b[35][0]++;
          cov_toyl8h1bc().s[90]++;
          return i - searchLength + 1;
        } else {
          cov_toyl8h1bc().b[35][1]++;
        }
      }
      cov_toyl8h1bc().s[91]++;
      return -1;
    }
  }, {
    key: "_matchAtIndex",
    value: function _matchAtIndex(index, searchBuffer) {
      var searchLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (cov_toyl8h1bc().b[36][0]++, searchBuffer.length);
      cov_toyl8h1bc().f[22]++;
      cov_toyl8h1bc().s[92]++;
      for (var j = (cov_toyl8h1bc().s[93]++, 0); j < searchLength; j += 1) {
        cov_toyl8h1bc().s[94]++;
        if (this.data[index + j] !== searchBuffer[j]) {
          cov_toyl8h1bc().b[37][0]++;
          cov_toyl8h1bc().s[95]++;
          return false;
        } else {
          cov_toyl8h1bc().b[37][1]++;
        }
      }
      cov_toyl8h1bc().s[96]++;
      return true;
    }
  }, {
    key: "toHex",
    value: function toHex() {
      cov_toyl8h1bc().f[23]++;
      var hex = (cov_toyl8h1bc().s[97]++, '');
      cov_toyl8h1bc().s[98]++;
      for (var i = (cov_toyl8h1bc().s[99]++, 0); i < this.length; i += 1) {
        var part = (cov_toyl8h1bc().s[100]++, this[i].toString(16));
        cov_toyl8h1bc().s[101]++;
        hex += part.length < 2 ? (cov_toyl8h1bc().b[38][0]++, "0".concat(part)) : (cov_toyl8h1bc().b[38][1]++, part);
      }
      cov_toyl8h1bc().s[102]++;
      return hex;
    }
  }, {
    key: "toBase64",
    value: function toBase64() {
      cov_toyl8h1bc().f[24]++;
      var binary = (cov_toyl8h1bc().s[103]++, '');
      var len = (cov_toyl8h1bc().s[104]++, this.byteLength);
      cov_toyl8h1bc().s[105]++;
      for (var i = (cov_toyl8h1bc().s[106]++, 0); i < len; i += 1) {
        cov_toyl8h1bc().s[107]++;
        binary += String.fromCharCode(this[i]);
      }
      cov_toyl8h1bc().s[108]++;
      return btoa(binary);
    }
  }], [{
    key: "of",
    value: function of() {
      cov_toyl8h1bc().f[1]++;
      cov_toyl8h1bc().s[10]++;
      for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {
        items[_key] = arguments[_key];
      }
      return new BrowserBuffer(items);
    }
  }, {
    key: "from",
    value: function from(input, encodingOrOffset, length) {
      cov_toyl8h1bc().f[2]++;
      cov_toyl8h1bc().s[11]++;
      if (typeof input === 'string') {
        cov_toyl8h1bc().b[5][0]++;
        cov_toyl8h1bc().s[12]++;
        return new BrowserBuffer(input, encodingOrOffset);
      } else {
        cov_toyl8h1bc().b[5][1]++;
      }
      cov_toyl8h1bc().s[13]++;
      if ((cov_toyl8h1bc().b[7][0]++, _typeof(input) === 'object') && ((cov_toyl8h1bc().b[7][1]++, Array.isArray(input)) || (cov_toyl8h1bc().b[7][2]++, input instanceof ArrayBuffer))) {
        cov_toyl8h1bc().b[6][0]++;
        cov_toyl8h1bc().s[14]++;
        if (typeof encodingOrOffset === 'function') {
          cov_toyl8h1bc().b[8][0]++;
          var mapfn = (cov_toyl8h1bc().s[15]++, encodingOrOffset);
          var arrayLike = (cov_toyl8h1bc().s[16]++, Array.from(input, mapfn));
          cov_toyl8h1bc().s[17]++;
          return new BrowserBuffer(arrayLike);
        } else {
          cov_toyl8h1bc().b[8][1]++;
        }
        cov_toyl8h1bc().s[18]++;
        return new BrowserBuffer(input, encodingOrOffset, length);
      } else {
        cov_toyl8h1bc().b[6][1]++;
      }
      cov_toyl8h1bc().s[19]++;
      throw new Error('Unsupported data type');
    }
  }, {
    key: "alloc",
    value: function alloc(size) {
      var fill = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (cov_toyl8h1bc().b[9][0]++, 0);
      cov_toyl8h1bc().f[3]++;
      var buffer = (cov_toyl8h1bc().s[20]++, new BrowserBuffer(size));
      cov_toyl8h1bc().s[21]++;
      if (typeof fill === 'string') {
        cov_toyl8h1bc().b[10][0]++;
        var fillBuffer = (cov_toyl8h1bc().s[22]++, BrowserBuffer.from(fill, 'utf8'));
        cov_toyl8h1bc().s[23]++;
        for (var i = (cov_toyl8h1bc().s[24]++, 0); i < buffer.length; i += 1) {
          cov_toyl8h1bc().s[25]++;
          buffer[i] = fillBuffer[i % fillBuffer.length];
        }
      } else {
        cov_toyl8h1bc().b[10][1]++;
        cov_toyl8h1bc().s[26]++;
        buffer.fill(fill);
      }
      cov_toyl8h1bc().s[27]++;
      return buffer;
    }
  }, {
    key: "concat",
    value: function concat(list, totalLength) {
      cov_toyl8h1bc().f[4]++;
      cov_toyl8h1bc().s[28]++;
      if (typeof totalLength === 'undefined') {
        cov_toyl8h1bc().b[11][0]++;
        cov_toyl8h1bc().s[29]++;
        totalLength = list.reduce(function (total, buf) {
          cov_toyl8h1bc().f[5]++;
          cov_toyl8h1bc().s[30]++;
          return total + buf.length;
        }, 0);
      } else {
        cov_toyl8h1bc().b[11][1]++;
      }
      var buffer = (cov_toyl8h1bc().s[31]++, BrowserBuffer.alloc(totalLength));
      var offset = (cov_toyl8h1bc().s[32]++, 0);
      cov_toyl8h1bc().s[33]++;
      list.forEach(function (buf) {
        cov_toyl8h1bc().f[6]++;
        cov_toyl8h1bc().s[34]++;
        buffer.set(buf, offset);
        cov_toyl8h1bc().s[35]++;
        offset += buf.length;
      });
      cov_toyl8h1bc().s[36]++;
      return buffer;
    }
  }, {
    key: "decode",
    value: function decode(string, encoding) {
      cov_toyl8h1bc().f[7]++;
      cov_toyl8h1bc().s[37]++;
      switch (encoding) {
        case 'utf8':
          cov_toyl8h1bc().b[12][0]++;
          cov_toyl8h1bc().s[38]++;
          return new TextEncoder().encode(string);
        case 'base64':
          cov_toyl8h1bc().b[12][1]++;
          cov_toyl8h1bc().s[39]++;
          return this.decodeBase64(string);
        case 'hex':
          cov_toyl8h1bc().b[12][2]++;
          cov_toyl8h1bc().s[40]++;
          return this.decodeHex(string);
        default:
          cov_toyl8h1bc().b[12][3]++;
          cov_toyl8h1bc().s[41]++;
          throw new Error('Unsupported encoding type');
      }
    }
  }, {
    key: "decodeBase64",
    value: function decodeBase64(string) {
      cov_toyl8h1bc().f[8]++;
      var binaryString = (cov_toyl8h1bc().s[42]++, atob(string));
      var bytes = (cov_toyl8h1bc().s[43]++, new Uint8Array(binaryString.length));
      cov_toyl8h1bc().s[44]++;
      for (var i = (cov_toyl8h1bc().s[45]++, 0); i < binaryString.length; i += 1) {
        cov_toyl8h1bc().s[46]++;
        bytes[i] = binaryString.charCodeAt(i);
      }
      cov_toyl8h1bc().s[47]++;
      return bytes;
    }
  }, {
    key: "decodeHex",
    value: function decodeHex(string) {
      cov_toyl8h1bc().f[9]++;
      var size = (cov_toyl8h1bc().s[48]++, string.length / 2);
      var array = (cov_toyl8h1bc().s[49]++, new Uint8Array(size));
      cov_toyl8h1bc().s[50]++;
      for (var i = (cov_toyl8h1bc().s[51]++, 0); i < size; i += 1) {
        cov_toyl8h1bc().s[52]++;
        array[i] = parseInt(string.substr(i * 2, 2), 16);
      }
      cov_toyl8h1bc().s[53]++;
      return array;
    }
  }, {
    key: "isBuffer",
    value: function isBuffer(obj) {
      cov_toyl8h1bc().f[11]++;
      cov_toyl8h1bc().s[55]++;
      return (cov_toyl8h1bc().b[13][0]++, obj instanceof BrowserBuffer) || (cov_toyl8h1bc().b[13][1]++, obj instanceof Uint8Array);
    }
  }]);
  return BrowserBuffer;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BrowserBuffer);

/***/ }),

/***/ "./src/util/checksum.js":
/*!******************************!*\
  !*** ./src/util/checksum.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "verifyChecksum": () => (/* binding */ verifyChecksum)
/* harmony export */ });
function cov_24znkpe4d4() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\util\\checksum.js";
  var hash = "8d97844d046c33322d900388d161ee49f726ec7c";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\util\\checksum.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 17
        }
      },
      "2": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "3": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 16
        }
      },
      "4": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      "5": {
        start: {
          line: 10,
          column: 15
        },
        end: {
          line: 10,
          column: 16
        }
      },
      "6": {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 13,
          column: 5
        }
      },
      "7": {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 12,
          column: 19
        }
      },
      "8": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 14
        }
      }
    },
    fnMap: {
      "0": {
        name: "verifyChecksum",
        decl: {
          start: {
            line: 1,
            column: 16
          },
          end: {
            line: 1,
            column: 30
          }
        },
        loc: {
          start: {
            line: 1,
            column: 49
          },
          end: {
            line: 17,
            column: 1
          }
        },
        line: 1
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 2
      },
      "1": {
        loc: {
          start: {
            line: 6,
            column: 2
          },
          end: {
            line: 8,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 6,
            column: 2
          },
          end: {
            line: 8,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 6
      },
      "2": {
        loc: {
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 11,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 11
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "8d97844d046c33322d900388d161ee49f726ec7c"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_24znkpe4d4 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_24znkpe4d4();
function verifyChecksum(expected, actual) {
  cov_24znkpe4d4().f[0]++;
  cov_24znkpe4d4().s[0]++;
  if (expected.length !== actual.length) {
    cov_24znkpe4d4().b[0][0]++;
    cov_24znkpe4d4().s[1]++;
    return false;
  } else {
    cov_24znkpe4d4().b[0][1]++;
  }
  cov_24znkpe4d4().s[2]++;
  if (expected.length === 0) {
    cov_24znkpe4d4().b[1][0]++;
    cov_24znkpe4d4().s[3]++;
    return true;
  } else {
    cov_24znkpe4d4().b[1][1]++;
  }
  cov_24znkpe4d4().s[4]++;
  for (var i = (cov_24znkpe4d4().s[5]++, 0); i < expected.length; i += 1) {
    cov_24znkpe4d4().s[6]++;
    if (expected[i] !== actual[i]) {
      cov_24znkpe4d4().b[2][0]++;
      cov_24znkpe4d4().s[7]++;
      return false;
    } else {
      cov_24znkpe4d4().b[2][1]++;
    }
  }
  cov_24znkpe4d4().s[8]++;
  return true;
}

/***/ }),

/***/ "./src/util/continued_fraction.js":
/*!****************************************!*\
  !*** ./src/util/continued_fraction.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "best_r": () => (/* binding */ best_r)
/* harmony export */ });
/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bignumber.js */ "./node_modules/bignumber.js/bignumber.mjs");
function cov_2hlg4yoewk() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\util\\continued_fraction.js";
  var hash = "cb944c1fa0c5c2d8ec5f7c6569ea16992faa39d9";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\util\\continued_fraction.js",
    statementMap: {
      "0": {
        start: {
          line: 4,
          column: 16
        },
        end: {
          line: 4,
          column: 37
        }
      },
      "1": {
        start: {
          line: 14,
          column: 15
        },
        end: {
          line: 14,
          column: 39
        }
      },
      "2": {
        start: {
          line: 17,
          column: 20
        },
        end: {
          line: 20,
          column: 3
        }
      },
      "3": {
        start: {
          line: 21,
          column: 10
        },
        end: {
          line: 21,
          column: 11
        }
      },
      "4": {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 41,
          column: 3
        }
      },
      "5": {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 27,
          column: 5
        }
      },
      "6": {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 12
        }
      },
      "7": {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 28,
          column: 51
        }
      },
      "8": {
        start: {
          line: 29,
          column: 4
        },
        end: {
          line: 29,
          column: 24
        }
      },
      "9": {
        start: {
          line: 30,
          column: 14
        },
        end: {
          line: 30,
          column: 68
        }
      },
      "10": {
        start: {
          line: 31,
          column: 14
        },
        end: {
          line: 31,
          column: 68
        }
      },
      "11": {
        start: {
          line: 32,
          column: 4
        },
        end: {
          line: 34,
          column: 5
        }
      },
      "12": {
        start: {
          line: 33,
          column: 6
        },
        end: {
          line: 33,
          column: 12
        }
      },
      "13": {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 27
        }
      },
      "14": {
        start: {
          line: 36,
          column: 4
        },
        end: {
          line: 38,
          column: 5
        }
      },
      "15": {
        start: {
          line: 37,
          column: 6
        },
        end: {
          line: 37,
          column: 12
        }
      },
      "16": {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 37
        }
      },
      "17": {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 11
        }
      },
      "18": {
        start: {
          line: 42,
          column: 17
        },
        end: {
          line: 42,
          column: 48
        }
      },
      "19": {
        start: {
          line: 44,
          column: 2
        },
        end: {
          line: 46,
          column: 3
        }
      },
      "20": {
        start: {
          line: 45,
          column: 4
        },
        end: {
          line: 45,
          column: 51
        }
      },
      "21": {
        start: {
          line: 48,
          column: 2
        },
        end: {
          line: 48,
          column: 38
        }
      }
    },
    fnMap: {
      "0": {
        name: "best_r",
        decl: {
          start: {
            line: 13,
            column: 16
          },
          end: {
            line: 13,
            column: 22
          }
        },
        loc: {
          start: {
            line: 13,
            column: 34
          },
          end: {
            line: 49,
            column: 1
          }
        },
        line: 13
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 25,
            column: 4
          },
          end: {
            line: 27,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 25
      },
      "1": {
        loc: {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 34,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 32
      },
      "2": {
        loc: {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 38
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 21
          }
        }, {
          start: {
            line: 32,
            column: 25
          },
          end: {
            line: 32,
            column: 38
          }
        }],
        line: 32
      },
      "3": {
        loc: {
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 36,
            column: 4
          },
          end: {
            line: 38,
            column: 5
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 36
      },
      "4": {
        loc: {
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 44,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 44
      },
      "5": {
        loc: {
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 44,
            column: 30
          }
        },
        type: "binary-expr",
        locations: [{
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 44,
            column: 16
          }
        }, {
          start: {
            line: 44,
            column: 20
          },
          end: {
            line: 44,
            column: 30
          }
        }],
        line: 44
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "cb944c1fa0c5c2d8ec5f7c6569ea16992faa39d9"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_2hlg4yoewk = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_2hlg4yoewk();
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"]; if (null != _i) { var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1; try { if (_x = (_i = _i.call(arr)).next, 0 === i) { if (Object(_i) !== _i) return; _n = !1; } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0); } catch (err) { _d = !0, _e = err; } finally { try { if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return; } finally { if (_d) throw _e; } } return _arr; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }


// eslint-disable-next-line no-bitwise
var MAX_INT = (cov_2hlg4yoewk().s[0]++, (1 << 31 >>> 0) - 1);

/**
 * Calculates and returns the best rational approximation of the given real number.
 * @private
 * @param {string|number|BigNumber} rawNumber Real number
 * @throws Error Throws `Error` when the best rational approximation cannot be found.
 * @returns {array} first element is n (numerator), second element is d (denominator)
 */
function best_r(rawNumber) {
  cov_2hlg4yoewk().f[0]++;
  var number = (cov_2hlg4yoewk().s[1]++, new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](rawNumber));
  var a;
  var f;
  var fractions = (cov_2hlg4yoewk().s[2]++, [[new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](0), new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](1)], [new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](1), new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](0)]]);
  var i = (cov_2hlg4yoewk().s[3]++, 2);

  // eslint-disable-next-line no-constant-condition
  cov_2hlg4yoewk().s[4]++;
  while (true) {
    cov_2hlg4yoewk().s[5]++;
    if (number.gt(MAX_INT)) {
      cov_2hlg4yoewk().b[0][0]++;
      cov_2hlg4yoewk().s[6]++;
      break;
    } else {
      cov_2hlg4yoewk().b[0][1]++;
    }
    cov_2hlg4yoewk().s[7]++;
    a = number.integerValue(bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"].ROUND_FLOOR);
    cov_2hlg4yoewk().s[8]++;
    f = number.minus(a);
    var h = (cov_2hlg4yoewk().s[9]++, a.times(fractions[i - 1][0]).plus(fractions[i - 2][0]));
    var k = (cov_2hlg4yoewk().s[10]++, a.times(fractions[i - 1][1]).plus(fractions[i - 2][1]));
    cov_2hlg4yoewk().s[11]++;
    if ((cov_2hlg4yoewk().b[2][0]++, h.gt(MAX_INT)) || (cov_2hlg4yoewk().b[2][1]++, k.gt(MAX_INT))) {
      cov_2hlg4yoewk().b[1][0]++;
      cov_2hlg4yoewk().s[12]++;
      break;
    } else {
      cov_2hlg4yoewk().b[1][1]++;
    }
    cov_2hlg4yoewk().s[13]++;
    fractions.push([h, k]);
    cov_2hlg4yoewk().s[14]++;
    if (f.eq(0)) {
      cov_2hlg4yoewk().b[3][0]++;
      cov_2hlg4yoewk().s[15]++;
      break;
    } else {
      cov_2hlg4yoewk().b[3][1]++;
    }
    cov_2hlg4yoewk().s[16]++;
    number = new bignumber_js__WEBPACK_IMPORTED_MODULE_0__["default"](1).div(f);
    cov_2hlg4yoewk().s[17]++;
    i += 1;
  }
  var _ref = (cov_2hlg4yoewk().s[18]++, fractions[fractions.length - 1]),
    _ref2 = _slicedToArray(_ref, 2),
    n = _ref2[0],
    d = _ref2[1];
  cov_2hlg4yoewk().s[19]++;
  if ((cov_2hlg4yoewk().b[5][0]++, n.isZero()) || (cov_2hlg4yoewk().b[5][1]++, d.isZero())) {
    cov_2hlg4yoewk().b[4][0]++;
    cov_2hlg4yoewk().s[20]++;
    throw new Error("Couldn't find approximation");
  } else {
    cov_2hlg4yoewk().b[4][1]++;
  }
  cov_2hlg4yoewk().s[21]++;
  return [n.toNumber(), d.toNumber()];
}

/***/ }),

/***/ "./src/util/decode_encode_muxed_account.js":
/*!*************************************************!*\
  !*** ./src/util/decode_encode_muxed_account.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "decodeAddressToMuxedAccount": () => (/* binding */ decodeAddressToMuxedAccount),
/* harmony export */   "encodeMuxedAccount": () => (/* binding */ encodeMuxedAccount),
/* harmony export */   "encodeMuxedAccountToAddress": () => (/* binding */ encodeMuxedAccountToAddress),
/* harmony export */   "extractBaseAddress": () => (/* binding */ extractBaseAddress)
/* harmony export */ });
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lodash/isString */ "./node_modules/lodash/isString.js");
/* harmony import */ var lodash_isString__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(lodash_isString__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _xdr__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../xdr */ "./src/xdr.js");
/* harmony import */ var _strkey__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../strkey */ "./src/strkey.js");
/* harmony import */ var _BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BrowserBuffer */ "./src/util/BrowserBuffer.js");
function cov_rw3r7tb9y() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\util\\decode_encode_muxed_account.js";
  var hash = "7fdbfaf95ee130c8ee70b8615d00657c619ea252";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\util\\decode_encode_muxed_account.js",
    statementMap: {
      "0": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 19,
          column: 3
        }
      },
      "1": {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 18,
          column: 54
        }
      },
      "2": {
        start: {
          line: 21,
          column: 2
        },
        end: {
          line: 23,
          column: 4
        }
      },
      "3": {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 44,
          column: 3
        }
      },
      "4": {
        start: {
          line: 43,
          column: 4
        },
        end: {
          line: 43,
          column: 59
        }
      },
      "5": {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 63
        }
      },
      "6": {
        start: {
          line: 58,
          column: 2
        },
        end: {
          line: 60,
          column: 3
        }
      },
      "7": {
        start: {
          line: 59,
          column: 4
        },
        end: {
          line: 59,
          column: 69
        }
      },
      "8": {
        start: {
          line: 61,
          column: 2
        },
        end: {
          line: 63,
          column: 3
        }
      },
      "9": {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 76
        }
      },
      "10": {
        start: {
          line: 65,
          column: 2
        },
        end: {
          line: 70,
          column: 4
        }
      },
      "11": {
        start: {
          line: 79,
          column: 2
        },
        end: {
          line: 81,
          column: 3
        }
      },
      "12": {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 19
        }
      },
      "13": {
        start: {
          line: 83,
          column: 2
        },
        end: {
          line: 85,
          column: 3
        }
      },
      "14": {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 73
        }
      },
      "15": {
        start: {
          line: 87,
          column: 23
        },
        end: {
          line: 87,
          column: 59
        }
      },
      "16": {
        start: {
          line: 88,
          column: 2
        },
        end: {
          line: 88,
          column: 74
        }
      },
      "17": {
        start: {
          line: 93,
          column: 19
        },
        end: {
          line: 93,
          column: 58
        }
      },
      "18": {
        start: {
          line: 108,
          column: 2
        },
        end: {
          line: 113,
          column: 4
        }
      },
      "19": {
        start: {
          line: 118,
          column: 2
        },
        end: {
          line: 120,
          column: 3
        }
      },
      "20": {
        start: {
          line: 119,
          column: 4
        },
        end: {
          line: 119,
          column: 53
        }
      },
      "21": {
        start: {
          line: 122,
          column: 16
        },
        end: {
          line: 122,
          column: 39
        }
      },
      "22": {
        start: {
          line: 123,
          column: 2
        },
        end: {
          line: 125,
          column: 4
        }
      }
    },
    fnMap: {
      "0": {
        name: "decodeAddressToMuxedAccount",
        decl: {
          start: {
            line: 16,
            column: 16
          },
          end: {
            line: 16,
            column: 43
          }
        },
        loc: {
          start: {
            line: 16,
            column: 53
          },
          end: {
            line: 24,
            column: 1
          }
        },
        line: 16
      },
      "1": {
        name: "encodeMuxedAccountToAddress",
        decl: {
          start: {
            line: 38,
            column: 16
          },
          end: {
            line: 38,
            column: 43
          }
        },
        loc: {
          start: {
            line: 38,
            column: 58
          },
          end: {
            line: 47,
            column: 1
          }
        },
        line: 38
      },
      "2": {
        name: "encodeMuxedAccount",
        decl: {
          start: {
            line: 57,
            column: 16
          },
          end: {
            line: 57,
            column: 34
          }
        },
        loc: {
          start: {
            line: 57,
            column: 48
          },
          end: {
            line: 71,
            column: 1
          }
        },
        line: 57
      },
      "3": {
        name: "extractBaseAddress",
        decl: {
          start: {
            line: 78,
            column: 16
          },
          end: {
            line: 78,
            column: 34
          }
        },
        loc: {
          start: {
            line: 78,
            column: 44
          },
          end: {
            line: 89,
            column: 1
          }
        },
        line: 78
      },
      "4": {
        name: "_decodeAddressFullyToMuxedAccount",
        decl: {
          start: {
            line: 92,
            column: 9
          },
          end: {
            line: 92,
            column: 42
          }
        },
        loc: {
          start: {
            line: 92,
            column: 52
          },
          end: {
            line: 114,
            column: 1
          }
        },
        line: 92
      },
      "5": {
        name: "_encodeMuxedAccountFullyToAddress",
        decl: {
          start: {
            line: 117,
            column: 9
          },
          end: {
            line: 117,
            column: 42
          }
        },
        loc: {
          start: {
            line: 117,
            column: 57
          },
          end: {
            line: 126,
            column: 1
          }
        },
        line: 117
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 17,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 17
      },
      "1": {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 44,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 39
      },
      "2": {
        loc: {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 60,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 58
      },
      "3": {
        loc: {
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 61,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 61
      },
      "4": {
        loc: {
          start: {
            line: 79,
            column: 2
          },
          end: {
            line: 81,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 79,
            column: 2
          },
          end: {
            line: 81,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 79
      },
      "5": {
        loc: {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 83
      },
      "6": {
        loc: {
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 120,
            column: 3
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 118,
            column: 2
          },
          end: {
            line: 120,
            column: 3
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }],
        line: 118
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0,
      "10": 0,
      "11": 0,
      "12": 0,
      "13": 0,
      "14": 0,
      "15": 0,
      "16": 0,
      "17": 0,
      "18": 0,
      "19": 0,
      "20": 0,
      "21": 0,
      "22": 0
    },
    f: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0],
      "2": [0, 0],
      "3": [0, 0],
      "4": [0, 0],
      "5": [0, 0],
      "6": [0, 0]
    },
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "7fdbfaf95ee130c8ee70b8615d00657c619ea252"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_rw3r7tb9y = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_rw3r7tb9y();




/**
 * Converts a Stellar address (in G... or M... form) to an `xdr.MuxedAccount`
 * structure, using the ed25519 representation when possible.
 *
 * This supports full muxed accounts, where an `M...` address will resolve to
 * both its underlying `G...` address and an integer ID.
 *
 * @param   {string}  address   G... or M... address to encode into XDR
 * @returns {xdr.MuxedAccount}  a muxed account object for this address string
 */
function decodeAddressToMuxedAccount(address) {
  cov_rw3r7tb9y().f[0]++;
  cov_rw3r7tb9y().s[0]++;
  if (_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidMed25519PublicKey(address)) {
    cov_rw3r7tb9y().b[0][0]++;
    cov_rw3r7tb9y().s[1]++;
    return _decodeAddressFullyToMuxedAccount(address);
  } else {
    cov_rw3r7tb9y().b[0][1]++;
  }
  cov_rw3r7tb9y().s[2]++;
  return _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].MuxedAccount.keyTypeEd25519(_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.decodeEd25519PublicKey(address));
}

/**
 * Converts an xdr.MuxedAccount to its StrKey representation.
 *
 * This returns its "M..." string representation if there is a muxing ID within
 * the object and returns the "G..." representation otherwise.
 *
 * @param   {xdr.MuxedAccount} muxedAccount   Raw account to stringify
 * @returns {string} Stringified G... (corresponding to the underlying pubkey)
 *     or M... address (corresponding to both the key and the muxed ID)
 *
 * @see https://stellar.org/protocol/sep-23
 */
function encodeMuxedAccountToAddress(muxedAccount) {
  cov_rw3r7tb9y().f[1]++;
  cov_rw3r7tb9y().s[3]++;
  if (muxedAccount["switch"]().value === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].CryptoKeyType.keyTypeMuxedEd25519().value) {
    cov_rw3r7tb9y().b[1][0]++;
    cov_rw3r7tb9y().s[4]++;
    return _encodeMuxedAccountFullyToAddress(muxedAccount);
  } else {
    cov_rw3r7tb9y().b[1][1]++;
  }
  cov_rw3r7tb9y().s[5]++;
  return _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.encodeEd25519PublicKey(muxedAccount.ed25519());
}

/**
 * Transform a Stellar address (G...) and an ID into its XDR representation.
 *
 * @param  {string} address   - a Stellar G... address
 * @param  {string} id        - a Uint64 ID represented as a string
 *
 * @return {xdr.MuxedAccount} - XDR representation of the above muxed account
 */
function encodeMuxedAccount(address, id) {
  cov_rw3r7tb9y().f[2]++;
  cov_rw3r7tb9y().s[6]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(address)) {
    cov_rw3r7tb9y().b[2][0]++;
    cov_rw3r7tb9y().s[7]++;
    throw new Error('address should be a Stellar account ID (G...)');
  } else {
    cov_rw3r7tb9y().b[2][1]++;
  }
  cov_rw3r7tb9y().s[8]++;
  if (!lodash_isString__WEBPACK_IMPORTED_MODULE_0___default()(id)) {
    cov_rw3r7tb9y().b[3][0]++;
    cov_rw3r7tb9y().s[9]++;
    throw new Error('id should be a string representing a number (uint64)');
  } else {
    cov_rw3r7tb9y().b[3][1]++;
  }
  cov_rw3r7tb9y().s[10]++;
  return _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].MuxedAccount.keyTypeMuxedEd25519(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].MuxedAccountMed25519({
    id: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Uint64.fromString(id),
    ed25519: _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.decodeEd25519PublicKey(address)
  }));
}

/**
 * Extracts the underlying base (G...) address from an M-address.
 * @param  {string} address   an account address (either M... or G...)
 * @return {string} a Stellar public key address (G...)
 */
function extractBaseAddress(address) {
  cov_rw3r7tb9y().f[3]++;
  cov_rw3r7tb9y().s[11]++;
  if (_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidEd25519PublicKey(address)) {
    cov_rw3r7tb9y().b[4][0]++;
    cov_rw3r7tb9y().s[12]++;
    return address;
  } else {
    cov_rw3r7tb9y().b[4][1]++;
  }
  cov_rw3r7tb9y().s[13]++;
  if (!_strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.isValidMed25519PublicKey(address)) {
    cov_rw3r7tb9y().b[5][0]++;
    cov_rw3r7tb9y().s[14]++;
    throw new TypeError("expected muxed account (M...), got ".concat(address));
  } else {
    cov_rw3r7tb9y().b[5][1]++;
  }
  var muxedAccount = (cov_rw3r7tb9y().s[15]++, decodeAddressToMuxedAccount(address));
  cov_rw3r7tb9y().s[16]++;
  return _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.encodeEd25519PublicKey(muxedAccount.med25519().ed25519());
}

// Decodes an "M..." account ID into its MuxedAccount object representation.
function _decodeAddressFullyToMuxedAccount(address) {
  cov_rw3r7tb9y().f[4]++;
  var rawBytes = (cov_rw3r7tb9y().s[17]++, _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.decodeMed25519PublicKey(address));

  // Decoding M... addresses cannot be done through a simple
  // MuxedAccountMed25519.fromXDR() call, because the definition is:
  //
  //    constructor(attributes: { id: Uint64; ed25519: BrowserBuffer });
  //
  // Note the ID is the first attribute. However, the ID comes *last* in the
  // stringified (base32-encoded) address itself (it's the last 8-byte suffix).
  // The `fromXDR()` method interprets bytes in order, so we need to parse out
  // the raw binary into its requisite parts, i.e. use the MuxedAccountMed25519
  // constructor directly.
  //
  // Refer to https://github.com/stellar/go/blob/master/xdr/muxed_account.go#L26
  // for the Golang implementation of the M... parsing.
  cov_rw3r7tb9y().s[18]++;
  return _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].MuxedAccount.keyTypeMuxedEd25519(new _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].MuxedAccountMed25519({
    id: _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].Uint64.fromXDR(rawBytes.subarray(-8)),
    ed25519: rawBytes.subarray(0, -8)
  }));
}

// Converts an xdr.MuxedAccount into its *true* "M..." string representation.
function _encodeMuxedAccountFullyToAddress(muxedAccount) {
  cov_rw3r7tb9y().f[5]++;
  cov_rw3r7tb9y().s[19]++;
  if (muxedAccount["switch"]() === _xdr__WEBPACK_IMPORTED_MODULE_1__["default"].CryptoKeyType.keyTypeEd25519()) {
    cov_rw3r7tb9y().b[6][0]++;
    cov_rw3r7tb9y().s[20]++;
    return encodeMuxedAccountToAddress(muxedAccount);
  } else {
    cov_rw3r7tb9y().b[6][1]++;
  }
  var muxed = (cov_rw3r7tb9y().s[21]++, muxedAccount.med25519());
  cov_rw3r7tb9y().s[22]++;
  return _strkey__WEBPACK_IMPORTED_MODULE_2__.StrKey.encodeMed25519PublicKey(_BrowserBuffer__WEBPACK_IMPORTED_MODULE_3__["default"].concat([muxed.ed25519(), muxed.id().toXDR('raw')]));
}

/***/ }),

/***/ "./src/xdr.js":
/*!********************!*\
  !*** ./src/xdr.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _generated_curr_generated__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./generated/curr_generated */ "./src/generated/curr_generated.js");
function cov_29ypckpr1z() {
  var path = "F:\\stellardesign\\js-stellar-base\\src\\xdr.js";
  var hash = "3ab04a652cc19ac056fcdb01d8018f929f3c6704";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "F:\\stellardesign\\js-stellar-base\\src\\xdr.js",
    statementMap: {},
    fnMap: {},
    branchMap: {},
    s: {},
    f: {},
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "3ab04a652cc19ac056fcdb01d8018f929f3c6704"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    // @ts-ignore
    cov_29ypckpr1z = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_29ypckpr1z();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_generated_curr_generated__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/base32.js/base32.js":
/*!******************************************!*\
  !*** ./node_modules/base32.js/base32.js ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


/**
 * Generate a character map.
 * @param {string} alphabet e.g. "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567"
 * @param {object} mappings map overrides from key to value
 * @method
 */

var charmap = function (alphabet, mappings) {
  mappings || (mappings = {});
  alphabet.split("").forEach(function (c, i) {
    if (!(c in mappings)) mappings[c] = i;
  });
  return mappings;
}

/**
 * The RFC 4648 base 32 alphabet and character map.
 * @see {@link https://tools.ietf.org/html/rfc4648}
 */

var rfc4648 = {
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  charmap: {
    0: 14,
    1: 8
  }
};

rfc4648.charmap = charmap(rfc4648.alphabet, rfc4648.charmap);

/**
 * The Crockford base 32 alphabet and character map.
 * @see {@link http://www.crockford.com/wrmg/base32.html}
 */

var crockford = {
  alphabet: "0123456789ABCDEFGHJKMNPQRSTVWXYZ",
  charmap: {
    O: 0,
    I: 1,
    L: 1
  }
};

crockford.charmap = charmap(crockford.alphabet, crockford.charmap);

/**
 * base32hex
 * @see {@link https://en.wikipedia.org/wiki/Base32#base32hex}
 */

var base32hex = {
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  charmap: {}
};

base32hex.charmap = charmap(base32hex.alphabet, base32hex.charmap);

/**
 * Create a new `Decoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [charmap] Override the character map used in decoding.
 * @constructor
 */

function Decoder (options) {
  this.buf = [];
  this.shift = 8;
  this.carry = 0;

  if (options) {

    switch (options.type) {
      case "rfc4648":
        this.charmap = exports.rfc4648.charmap;
        break;
      case "crockford":
        this.charmap = exports.crockford.charmap;
        break;
      case "base32hex":
        this.charmap = exports.base32hex.charmap;
        break;
      default:
        throw new Error("invalid type");
    }

    if (options.charmap) this.charmap = options.charmap;
  }
}

/**
 * The default character map coresponds to RFC4648.
 */

Decoder.prototype.charmap = rfc4648.charmap;

/**
 * Decode a string, continuing from the previous state.
 *
 * @param {string} str
 * @return {Decoder} this
 */

Decoder.prototype.write = function (str) {
  var charmap = this.charmap;
  var buf = this.buf;
  var shift = this.shift;
  var carry = this.carry;

  // decode string
  str.toUpperCase().split("").forEach(function (char) {

    // ignore padding
    if (char == "=") return;

    // lookup symbol
    var symbol = charmap[char] & 0xff;

    // 1: 00000 000
    // 2:          00 00000 0
    // 3:                    0000 0000
    // 4:                             0 00000 00
    // 5:                                       000 00000
    // 6:                                                00000 000
    // 7:                                                         00 00000 0

    shift -= 5;
    if (shift > 0) {
      carry |= symbol << shift;
    } else if (shift < 0) {
      buf.push(carry | (symbol >> -shift));
      shift += 8;
      carry = (symbol << shift) & 0xff;
    } else {
      buf.push(carry | symbol);
      shift = 8;
      carry = 0;
    }
  });

  // save state
  this.shift = shift;
  this.carry = carry;

  // for chaining
  return this;
};

/**
 * Finish decoding.
 *
 * @param {string} [str] The final string to decode.
 * @return {Array} Decoded byte array.
 */

Decoder.prototype.finalize = function (str) {
  if (str) {
    this.write(str);
  }
  if (this.shift !== 8 && this.carry !== 0) {
    this.buf.push(this.carry);
    this.shift = 8;
    this.carry = 0;
  }
  return this.buf;
};

/**
 * Create a new `Encoder` with the given options.
 *
 * @param {object} [options]
 *   @param {string} [type] Supported Base-32 variants are "rfc4648" and
 *     "crockford".
 *   @param {object} [alphabet] Override the alphabet used in encoding.
 * @constructor
 */

function Encoder (options) {
  this.buf = "";
  this.shift = 3;
  this.carry = 0;

  if (options) {

    switch (options.type) {
      case "rfc4648":
        this.alphabet = exports.rfc4648.alphabet;
        break;
      case "crockford":
        this.alphabet = exports.crockford.alphabet;
        break;
      case "base32hex":
        this.alphabet = exports.base32hex.alphabet;
        break;
      default:
        throw new Error("invalid type");
    }

    if (options.alphabet) this.alphabet = options.alphabet;
    else if (options.lc) this.alphabet = this.alphabet.toLowerCase();
  }
}

/**
 * The default alphabet coresponds to RFC4648.
 */

Encoder.prototype.alphabet = rfc4648.alphabet;

/**
 * Encode a byte array, continuing from the previous state.
 *
 * @param {byte[]} buf The byte array to encode.
 * @return {Encoder} this
 */

Encoder.prototype.write = function (buf) {
  var shift = this.shift;
  var carry = this.carry;
  var symbol;
  var byte;
  var i;

  // encode each byte in buf
  for (i = 0; i < buf.length; i++) {
    byte = buf[i];

    // 1: 00000 000
    // 2:          00 00000 0
    // 3:                    0000 0000
    // 4:                             0 00000 00
    // 5:                                       000 00000
    // 6:                                                00000 000
    // 7:                                                         00 00000 0

    symbol = carry | (byte >> shift);
    this.buf += this.alphabet[symbol & 0x1f];

    if (shift > 5) {
      shift -= 5;
      symbol = byte >> shift;
      this.buf += this.alphabet[symbol & 0x1f];
    }

    shift = 5 - shift;
    carry = byte << shift;
    shift = 8 - shift;
  }

  // save state
  this.shift = shift;
  this.carry = carry;

  // for chaining
  return this;
};

/**
 * Finish encoding.
 *
 * @param {byte[]} [buf] The final byte array to encode.
 * @return {string} The encoded byte array.
 */

Encoder.prototype.finalize = function (buf) {
  if (buf) {
    this.write(buf);
  }
  if (this.shift !== 3) {
    this.buf += this.alphabet[this.carry & 0x1f];
    this.shift = 3;
    this.carry = 0;
  }
  return this.buf;
};

/**
 * Convenience encoder.
 *
 * @param {byte[]} buf The byte array to encode.
 * @param {object} [options] Options to pass to the encoder.
 * @return {string} The encoded string.
 */

exports.encode = function (buf, options) {
  return new Encoder(options).finalize(buf);
};

/**
 * Convenience decoder.
 *
 * @param {string} str The string to decode.
 * @param {object} [options] Options to pass to the decoder.
 * @return {byte[]} The decoded byte array.
 */

exports.decode = function (str, options) {
  return new Decoder(options).finalize(str);
};

// Exports.
exports.Decoder = Decoder;
exports.Encoder = Encoder;
exports.charmap = charmap;
exports.crockford = crockford;
exports.rfc4648 = rfc4648;
exports.base32hex = base32hex;


/***/ }),

/***/ "./node_modules/base64-js/index.js":
/*!*****************************************!*\
  !*** ./node_modules/base64-js/index.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";


exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  var i
  for (i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}


/***/ }),

/***/ "./node_modules/buffer/index.js":
/*!**************************************!*\
  !*** ./node_modules/buffer/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */



const base64 = __webpack_require__(/*! base64-js */ "./node_modules/base64-js/index.js")
const ieee754 = __webpack_require__(/*! ieee754 */ "./node_modules/ieee754/index.js")
const customInspectSymbol =
  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
    : null

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

const K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    const arr = new Uint8Array(1)
    const proto = { foo: function () { return 42 } }
    Object.setPrototypeOf(proto, Uint8Array.prototype)
    Object.setPrototypeOf(arr, proto)
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

Object.defineProperty(Buffer.prototype, 'parent', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.buffer
  }
})

Object.defineProperty(Buffer.prototype, 'offset', {
  enumerable: true,
  get: function () {
    if (!Buffer.isBuffer(this)) return undefined
    return this.byteOffset
  }
})

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('The value "' + length + '" is invalid for option "size"')
  }
  // Return an augmented `Uint8Array` instance
  const buf = new Uint8Array(length)
  Object.setPrototypeOf(buf, Buffer.prototype)
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new TypeError(
        'The "string" argument must be of type string. Received type number'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  if (ArrayBuffer.isView(value)) {
    return fromArrayView(value)
  }

  if (value == null) {
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }

  if (isInstance(value, ArrayBuffer) ||
      (value && isInstance(value.buffer, ArrayBuffer))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof SharedArrayBuffer !== 'undefined' &&
      (isInstance(value, SharedArrayBuffer) ||
      (value && isInstance(value.buffer, SharedArrayBuffer)))) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'number') {
    throw new TypeError(
      'The "value" argument must not be of type number. Received type number'
    )
  }

  const valueOf = value.valueOf && value.valueOf()
  if (valueOf != null && valueOf !== value) {
    return Buffer.from(valueOf, encodingOrOffset, length)
  }

  const b = fromObject(value)
  if (b) return b

  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
      typeof value[Symbol.toPrimitive] === 'function') {
    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)
  }

  throw new TypeError(
    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
    'or Array-like Object. Received type ' + (typeof value)
  )
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
Object.setPrototypeOf(Buffer, Uint8Array)

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be of type number')
  } else if (size < 0) {
    throw new RangeError('The value "' + size + '" is invalid for option "size"')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('Unknown encoding: ' + encoding)
  }

  const length = byteLength(string, encoding) | 0
  let buf = createBuffer(length)

  const actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  const length = array.length < 0 ? 0 : checked(array.length) | 0
  const buf = createBuffer(length)
  for (let i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayView (arrayView) {
  if (isInstance(arrayView, Uint8Array)) {
    const copy = new Uint8Array(arrayView)
    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
  }
  return fromArrayLike(arrayView)
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('"offset" is outside of buffer bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('"length" is outside of buffer bounds')
  }

  let buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(buf, Buffer.prototype)

  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    const len = checked(obj.length) | 0
    const buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj.length !== undefined) {
    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
      return createBuffer(0)
    }
    return fromArrayLike(obj)
  }

  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
    return fromArrayLike(obj.data)
  }
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true &&
    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
}

Buffer.compare = function compare (a, b) {
  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError(
      'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
    )
  }

  if (a === b) return 0

  let x = a.length
  let y = b.length

  for (let i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  let i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  const buffer = Buffer.allocUnsafe(length)
  let pos = 0
  for (i = 0; i < list.length; ++i) {
    let buf = list[i]
    if (isInstance(buf, Uint8Array)) {
      if (pos + buf.length > buffer.length) {
        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)
        buf.copy(buffer, pos)
      } else {
        Uint8Array.prototype.set.call(
          buffer,
          buf,
          pos
        )
      }
    } else if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    } else {
      buf.copy(buffer, pos)
    }
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    throw new TypeError(
      'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
      'Received type ' + typeof string
    )
  }

  const len = string.length
  const mustMatch = (arguments.length > 2 && arguments[2] === true)
  if (!mustMatch && len === 0) return 0

  // Use a for loop to avoid recursion
  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) {
          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
        }
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  let loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  const i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  const len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (let i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  const len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (let i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  const len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (let i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  const length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.toLocaleString = Buffer.prototype.toString

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  let str = ''
  const max = exports.INSPECT_MAX_BYTES
  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
  if (this.length > max) str += ' ... '
  return '<Buffer ' + str + '>'
}
if (customInspectSymbol) {
  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (isInstance(target, Uint8Array)) {
    target = Buffer.from(target, target.offset, target.byteLength)
  }
  if (!Buffer.isBuffer(target)) {
    throw new TypeError(
      'The "target" argument must be one of type Buffer or Uint8Array. ' +
      'Received type ' + (typeof target)
    )
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  let x = thisEnd - thisStart
  let y = end - start
  const len = Math.min(x, y)

  const thisCopy = this.slice(thisStart, thisEnd)
  const targetCopy = target.slice(start, end)

  for (let i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  let indexSize = 1
  let arrLength = arr.length
  let valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  let i
  if (dir) {
    let foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      let found = true
      for (let j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  const remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  const strLen = string.length

  if (length > strLen / 2) {
    length = strLen / 2
  }
  let i
  for (i = 0; i < length; ++i) {
    const parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  const remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  let loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
      case 'latin1':
      case 'binary':
        return asciiWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  const res = []

  let i = start
  while (i < end) {
    const firstByte = buf[i]
    let codePoint = null
    let bytesPerSequence = (firstByte > 0xEF)
      ? 4
      : (firstByte > 0xDF)
          ? 3
          : (firstByte > 0xBF)
              ? 2
              : 1

    if (i + bytesPerSequence <= end) {
      let secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
const MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  const len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  let res = ''
  let i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  let ret = ''
  end = Math.min(buf.length, end)

  for (let i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  const len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  let out = ''
  for (let i = start; i < end; ++i) {
    out += hexSliceLookupTable[buf[i]]
  }
  return out
}

function utf16leSlice (buf, start, end) {
  const bytes = buf.slice(start, end)
  let res = ''
  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
  for (let i = 0; i < bytes.length - 1; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  const len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  const newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  Object.setPrototypeOf(newBuf, Buffer.prototype)

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUintLE =
Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUintBE =
Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  let val = this[offset + --byteLength]
  let mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUint8 =
Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUint16LE =
Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUint16BE =
Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUint32LE =
Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUint32BE =
Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const lo = first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24

  const hi = this[++offset] +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    last * 2 ** 24

  return BigInt(lo) + (BigInt(hi) << BigInt(32))
})

Buffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const hi = first * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  const lo = this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last

  return (BigInt(hi) << BigInt(32)) + BigInt(lo)
})

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let val = this[offset]
  let mul = 1
  let i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  let i = byteLength
  let mul = 1
  let val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  const val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = this[offset + 4] +
    this[offset + 5] * 2 ** 8 +
    this[offset + 6] * 2 ** 16 +
    (last << 24) // Overflow

  return (BigInt(val) << BigInt(32)) +
    BigInt(first +
    this[++offset] * 2 ** 8 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 24)
})

Buffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {
  offset = offset >>> 0
  validateNumber(offset, 'offset')
  const first = this[offset]
  const last = this[offset + 7]
  if (first === undefined || last === undefined) {
    boundsError(offset, this.length - 8)
  }

  const val = (first << 24) + // Overflow
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    this[++offset]

  return (BigInt(val) << BigInt(32)) +
    BigInt(this[++offset] * 2 ** 24 +
    this[++offset] * 2 ** 16 +
    this[++offset] * 2 ** 8 +
    last)
})

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUintLE =
Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let mul = 1
  let i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUintBE =
Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    const maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  let i = byteLength - 1
  let mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUint8 =
Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUint16LE =
Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUint16BE =
Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUint32LE =
Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUint32BE =
Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function wrtBigUInt64LE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  lo = lo >> 8
  buf[offset++] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  hi = hi >> 8
  buf[offset++] = hi
  return offset
}

function wrtBigUInt64BE (buf, value, offset, min, max) {
  checkIntBI(value, min, max, buf, offset, 7)

  let lo = Number(value & BigInt(0xffffffff))
  buf[offset + 7] = lo
  lo = lo >> 8
  buf[offset + 6] = lo
  lo = lo >> 8
  buf[offset + 5] = lo
  lo = lo >> 8
  buf[offset + 4] = lo
  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))
  buf[offset + 3] = hi
  hi = hi >> 8
  buf[offset + 2] = hi
  hi = hi >> 8
  buf[offset + 1] = hi
  hi = hi >> 8
  buf[offset] = hi
  return offset + 8
}

Buffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))
})

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = 0
  let mul = 1
  let sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    const limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  let i = byteLength - 1
  let mul = 1
  let sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {
  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

Buffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {
  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))
})

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  const len = end - start

  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
    // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end)
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, end),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
    if (val.length === 1) {
      const code = val.charCodeAt(0)
      if ((encoding === 'utf8' && code < 128) ||
          encoding === 'latin1') {
        // Fast path: If `val` fits into a single byte, use that numeric value.
        val = code
      }
    }
  } else if (typeof val === 'number') {
    val = val & 255
  } else if (typeof val === 'boolean') {
    val = Number(val)
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  let i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    const bytes = Buffer.isBuffer(val)
      ? val
      : Buffer.from(val, encoding)
    const len = bytes.length
    if (len === 0) {
      throw new TypeError('The value "' + val +
        '" is invalid for argument "value"')
    }
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// CUSTOM ERRORS
// =============

// Simplified versions from Node, changed for Buffer-only usage
const errors = {}
function E (sym, getMessage, Base) {
  errors[sym] = class NodeError extends Base {
    constructor () {
      super()

      Object.defineProperty(this, 'message', {
        value: getMessage.apply(this, arguments),
        writable: true,
        configurable: true
      })

      // Add the error code to the name to include it in the stack trace.
      this.name = `${this.name} [${sym}]`
      // Access the stack to generate the error message including the error code
      // from the name.
      this.stack // eslint-disable-line no-unused-expressions
      // Reset the name to the actual name.
      delete this.name
    }

    get code () {
      return sym
    }

    set code (value) {
      Object.defineProperty(this, 'code', {
        configurable: true,
        enumerable: true,
        value,
        writable: true
      })
    }

    toString () {
      return `${this.name} [${sym}]: ${this.message}`
    }
  }
}

E('ERR_BUFFER_OUT_OF_BOUNDS',
  function (name) {
    if (name) {
      return `${name} is outside of buffer bounds`
    }

    return 'Attempt to access memory outside buffer bounds'
  }, RangeError)
E('ERR_INVALID_ARG_TYPE',
  function (name, actual) {
    return `The "${name}" argument must be of type number. Received type ${typeof actual}`
  }, TypeError)
E('ERR_OUT_OF_RANGE',
  function (str, range, input) {
    let msg = `The value of "${str}" is out of range.`
    let received = input
    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
      received = addNumericalSeparator(String(input))
    } else if (typeof input === 'bigint') {
      received = String(input)
      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
        received = addNumericalSeparator(received)
      }
      received += 'n'
    }
    msg += ` It must be ${range}. Received ${received}`
    return msg
  }, RangeError)

function addNumericalSeparator (val) {
  let res = ''
  let i = val.length
  const start = val[0] === '-' ? 1 : 0
  for (; i >= start + 4; i -= 3) {
    res = `_${val.slice(i - 3, i)}${res}`
  }
  return `${val.slice(0, i)}${res}`
}

// CHECK FUNCTIONS
// ===============

function checkBounds (buf, offset, byteLength) {
  validateNumber(offset, 'offset')
  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {
    boundsError(offset, buf.length - (byteLength + 1))
  }
}

function checkIntBI (value, min, max, buf, offset, byteLength) {
  if (value > max || value < min) {
    const n = typeof min === 'bigint' ? 'n' : ''
    let range
    if (byteLength > 3) {
      if (min === 0 || min === BigInt(0)) {
        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`
      } else {
        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +
                `${(byteLength + 1) * 8 - 1}${n}`
      }
    } else {
      range = `>= ${min}${n} and <= ${max}${n}`
    }
    throw new errors.ERR_OUT_OF_RANGE('value', range, value)
  }
  checkBounds(buf, offset, byteLength)
}

function validateNumber (value, name) {
  if (typeof value !== 'number') {
    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)
  }
}

function boundsError (value, length, type) {
  if (Math.floor(value) !== value) {
    validateNumber(value, type)
    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)
  }

  if (length < 0) {
    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()
  }

  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',
                                    `>= ${type ? 1 : 0} and <= ${length}`,
                                    value)
}

// HELPER FUNCTIONS
// ================

const INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node takes equal signs as end of the Base64 encoding
  str = str.split('=')[0]
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  let codePoint
  const length = string.length
  let leadSurrogate = null
  const bytes = []

  for (let i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  let c, hi, lo
  const byteArray = []
  for (let i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  let i
  for (i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance (obj, type) {
  return obj instanceof type ||
    (obj != null && obj.constructor != null && obj.constructor.name != null &&
      obj.constructor.name === type.name)
}
function numberIsNaN (obj) {
  // For IE11 support
  return obj !== obj // eslint-disable-line no-self-compare
}

// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
const hexSliceLookupTable = (function () {
  const alphabet = '0123456789abcdef'
  const table = new Array(256)
  for (let i = 0; i < 16; ++i) {
    const i16 = i * 16
    for (let j = 0; j < 16; ++j) {
      table[i16 + j] = alphabet[i] + alphabet[j]
    }
  }
  return table
})()

// Return not function with Error if BigInt not supported
function defineBigIntMethod (fn) {
  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn
}

function BufferBigIntNotDefined () {
  throw new Error('BigInt not supported')
}


/***/ }),

/***/ "./node_modules/call-bind/callBound.js":
/*!*********************************************!*\
  !*** ./node_modules/call-bind/callBound.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var callBind = __webpack_require__(/*! ./ */ "./node_modules/call-bind/index.js");

var $indexOf = callBind(GetIntrinsic('String.prototype.indexOf'));

module.exports = function callBoundIntrinsic(name, allowMissing) {
	var intrinsic = GetIntrinsic(name, !!allowMissing);
	if (typeof intrinsic === 'function' && $indexOf(name, '.prototype.') > -1) {
		return callBind(intrinsic);
	}
	return intrinsic;
};


/***/ }),

/***/ "./node_modules/call-bind/index.js":
/*!*****************************************!*\
  !*** ./node_modules/call-bind/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $apply = GetIntrinsic('%Function.prototype.apply%');
var $call = GetIntrinsic('%Function.prototype.call%');
var $reflectApply = GetIntrinsic('%Reflect.apply%', true) || bind.call($call, $apply);

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);
var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);
var $max = GetIntrinsic('%Math.max%');

if ($defineProperty) {
	try {
		$defineProperty({}, 'a', { value: 1 });
	} catch (e) {
		// IE 8 has a broken defineProperty
		$defineProperty = null;
	}
}

module.exports = function callBind(originalFunction) {
	var func = $reflectApply(bind, $call, arguments);
	if ($gOPD && $defineProperty) {
		var desc = $gOPD(func, 'length');
		if (desc.configurable) {
			// original length, plus the receiver, minus any additional arguments (after the receiver)
			$defineProperty(
				func,
				'length',
				{ value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) }
			);
		}
	}
	return func;
};

var applyBind = function applyBind() {
	return $reflectApply(bind, $apply, arguments);
};

if ($defineProperty) {
	$defineProperty(module.exports, 'apply', { value: applyBind });
} else {
	module.exports.apply = applyBind;
}


/***/ }),

/***/ "./node_modules/console-browserify/index.js":
/*!**************************************************!*\
  !*** ./node_modules/console-browserify/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*global window, global*/
var util = __webpack_require__(/*! util */ "./node_modules/util/util.js")
var assert = __webpack_require__(/*! assert */ "./node_modules/assert/build/assert.js")
function now() { return new Date().getTime() }

var slice = Array.prototype.slice
var console
var times = {}

if (typeof __webpack_require__.g !== "undefined" && __webpack_require__.g.console) {
    console = __webpack_require__.g.console
} else if (typeof window !== "undefined" && window.console) {
    console = window.console
} else {
    console = {}
}

var functions = [
    [log, "log"],
    [info, "info"],
    [warn, "warn"],
    [error, "error"],
    [time, "time"],
    [timeEnd, "timeEnd"],
    [trace, "trace"],
    [dir, "dir"],
    [consoleAssert, "assert"]
]

for (var i = 0; i < functions.length; i++) {
    var tuple = functions[i]
    var f = tuple[0]
    var name = tuple[1]

    if (!console[name]) {
        console[name] = f
    }
}

module.exports = console

function log() {}

function info() {
    console.log.apply(console, arguments)
}

function warn() {
    console.log.apply(console, arguments)
}

function error() {
    console.warn.apply(console, arguments)
}

function time(label) {
    times[label] = now()
}

function timeEnd(label) {
    var time = times[label]
    if (!time) {
        throw new Error("No such label: " + label)
    }

    delete times[label]
    var duration = now() - time
    console.log(label + ": " + duration + "ms")
}

function trace() {
    var err = new Error()
    err.name = "Trace"
    err.message = util.format.apply(null, arguments)
    console.error(err.stack)
}

function dir(object) {
    console.log(util.inspect(object) + "\n")
}

function consoleAssert(expression) {
    if (!expression) {
        var arr = slice.call(arguments, 1)
        assert.ok(false, util.format.apply(null, arr))
    }
}


/***/ }),

/***/ "./node_modules/define-properties/index.js":
/*!*************************************************!*\
  !*** ./node_modules/define-properties/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keys = __webpack_require__(/*! object-keys */ "./node_modules/object-keys/index.js");
var hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';

var toStr = Object.prototype.toString;
var concat = Array.prototype.concat;
var origDefineProperty = Object.defineProperty;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var hasPropertyDescriptors = __webpack_require__(/*! has-property-descriptors */ "./node_modules/has-property-descriptors/index.js")();

var supportsDescriptors = origDefineProperty && hasPropertyDescriptors;

var defineProperty = function (object, name, value, predicate) {
	if (name in object) {
		if (predicate === true) {
			if (object[name] === value) {
				return;
			}
		} else if (!isFunction(predicate) || !predicate()) {
			return;
		}
	}
	if (supportsDescriptors) {
		origDefineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value; // eslint-disable-line no-param-reassign
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = concat.call(props, Object.getOwnPropertySymbols(map));
	}
	for (var i = 0; i < props.length; i += 1) {
		defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
	}
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),

/***/ "./node_modules/es6-object-assign/index.js":
/*!*************************************************!*\
  !*** ./node_modules/es6-object-assign/index.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */



function assign(target, firstSource) {
  if (target === undefined || target === null) {
    throw new TypeError('Cannot convert first argument to object');
  }

  var to = Object(target);
  for (var i = 1; i < arguments.length; i++) {
    var nextSource = arguments[i];
    if (nextSource === undefined || nextSource === null) {
      continue;
    }

    var keysArray = Object.keys(Object(nextSource));
    for (var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++) {
      var nextKey = keysArray[nextIndex];
      var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
      if (desc !== undefined && desc.enumerable) {
        to[nextKey] = nextSource[nextKey];
      }
    }
  }
  return to;
}

function polyfill() {
  if (!Object.assign) {
    Object.defineProperty(Object, 'assign', {
      enumerable: false,
      configurable: true,
      writable: true,
      value: assign
    });
  }
}

module.exports = {
  assign: assign,
  polyfill: polyfill
};


/***/ }),

/***/ "./node_modules/for-each/index.js":
/*!****************************************!*\
  !*** ./node_modules/for-each/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var isCallable = __webpack_require__(/*! is-callable */ "./node_modules/is-callable/index.js");

var toStr = Object.prototype.toString;
var hasOwnProperty = Object.prototype.hasOwnProperty;

var forEachArray = function forEachArray(array, iterator, receiver) {
    for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
            if (receiver == null) {
                iterator(array[i], i, array);
            } else {
                iterator.call(receiver, array[i], i, array);
            }
        }
    }
};

var forEachString = function forEachString(string, iterator, receiver) {
    for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        if (receiver == null) {
            iterator(string.charAt(i), i, string);
        } else {
            iterator.call(receiver, string.charAt(i), i, string);
        }
    }
};

var forEachObject = function forEachObject(object, iterator, receiver) {
    for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
            if (receiver == null) {
                iterator(object[k], k, object);
            } else {
                iterator.call(receiver, object[k], k, object);
            }
        }
    }
};

var forEach = function forEach(list, iterator, thisArg) {
    if (!isCallable(iterator)) {
        throw new TypeError('iterator must be a function');
    }

    var receiver;
    if (arguments.length >= 3) {
        receiver = thisArg;
    }

    if (toStr.call(list) === '[object Array]') {
        forEachArray(list, iterator, receiver);
    } else if (typeof list === 'string') {
        forEachString(list, iterator, receiver);
    } else {
        forEachObject(list, iterator, receiver);
    }
};

module.exports = forEach;


/***/ }),

/***/ "./node_modules/function-bind/implementation.js":
/*!******************************************************!*\
  !*** ./node_modules/function-bind/implementation.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";


/* eslint no-invalid-this: 1 */

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),

/***/ "./node_modules/function-bind/index.js":
/*!*********************************************!*\
  !*** ./node_modules/function-bind/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/function-bind/implementation.js");

module.exports = Function.prototype.bind || implementation;


/***/ }),

/***/ "./node_modules/get-intrinsic/index.js":
/*!*********************************************!*\
  !*** ./node_modules/get-intrinsic/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var undefined;

var $SyntaxError = SyntaxError;
var $Function = Function;
var $TypeError = TypeError;

// eslint-disable-next-line consistent-return
var getEvalledConstructor = function (expressionSyntax) {
	try {
		return $Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
	} catch (e) {}
};

var $gOPD = Object.getOwnPropertyDescriptor;
if ($gOPD) {
	try {
		$gOPD({}, '');
	} catch (e) {
		$gOPD = null; // this is IE 8, which has a broken gOPD
	}
}

var throwTypeError = function () {
	throw new $TypeError();
};
var ThrowTypeError = $gOPD
	? (function () {
		try {
			// eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
			arguments.callee; // IE 8 does not throw here
			return throwTypeError;
		} catch (calleeThrows) {
			try {
				// IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
				return $gOPD(arguments, 'callee').get;
			} catch (gOPDthrows) {
				return throwTypeError;
			}
		}
	}())
	: throwTypeError;

var hasSymbols = __webpack_require__(/*! has-symbols */ "./node_modules/has-symbols/index.js")();
var hasProto = __webpack_require__(/*! has-proto */ "./node_modules/has-proto/index.js")();

var getProto = Object.getPrototypeOf || (
	hasProto
		? function (x) { return x.__proto__; } // eslint-disable-line no-proto
		: null
);

var needsEval = {};

var TypedArray = typeof Uint8Array === 'undefined' || !getProto ? undefined : getProto(Uint8Array);

var INTRINSICS = {
	'%AggregateError%': typeof AggregateError === 'undefined' ? undefined : AggregateError,
	'%Array%': Array,
	'%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? undefined : ArrayBuffer,
	'%ArrayIteratorPrototype%': hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined,
	'%AsyncFromSyncIteratorPrototype%': undefined,
	'%AsyncFunction%': needsEval,
	'%AsyncGenerator%': needsEval,
	'%AsyncGeneratorFunction%': needsEval,
	'%AsyncIteratorPrototype%': needsEval,
	'%Atomics%': typeof Atomics === 'undefined' ? undefined : Atomics,
	'%BigInt%': typeof BigInt === 'undefined' ? undefined : BigInt,
	'%BigInt64Array%': typeof BigInt64Array === 'undefined' ? undefined : BigInt64Array,
	'%BigUint64Array%': typeof BigUint64Array === 'undefined' ? undefined : BigUint64Array,
	'%Boolean%': Boolean,
	'%DataView%': typeof DataView === 'undefined' ? undefined : DataView,
	'%Date%': Date,
	'%decodeURI%': decodeURI,
	'%decodeURIComponent%': decodeURIComponent,
	'%encodeURI%': encodeURI,
	'%encodeURIComponent%': encodeURIComponent,
	'%Error%': Error,
	'%eval%': eval, // eslint-disable-line no-eval
	'%EvalError%': EvalError,
	'%Float32Array%': typeof Float32Array === 'undefined' ? undefined : Float32Array,
	'%Float64Array%': typeof Float64Array === 'undefined' ? undefined : Float64Array,
	'%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? undefined : FinalizationRegistry,
	'%Function%': $Function,
	'%GeneratorFunction%': needsEval,
	'%Int8Array%': typeof Int8Array === 'undefined' ? undefined : Int8Array,
	'%Int16Array%': typeof Int16Array === 'undefined' ? undefined : Int16Array,
	'%Int32Array%': typeof Int32Array === 'undefined' ? undefined : Int32Array,
	'%isFinite%': isFinite,
	'%isNaN%': isNaN,
	'%IteratorPrototype%': hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined,
	'%JSON%': typeof JSON === 'object' ? JSON : undefined,
	'%Map%': typeof Map === 'undefined' ? undefined : Map,
	'%MapIteratorPrototype%': typeof Map === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Map()[Symbol.iterator]()),
	'%Math%': Math,
	'%Number%': Number,
	'%Object%': Object,
	'%parseFloat%': parseFloat,
	'%parseInt%': parseInt,
	'%Promise%': typeof Promise === 'undefined' ? undefined : Promise,
	'%Proxy%': typeof Proxy === 'undefined' ? undefined : Proxy,
	'%RangeError%': RangeError,
	'%ReferenceError%': ReferenceError,
	'%Reflect%': typeof Reflect === 'undefined' ? undefined : Reflect,
	'%RegExp%': RegExp,
	'%Set%': typeof Set === 'undefined' ? undefined : Set,
	'%SetIteratorPrototype%': typeof Set === 'undefined' || !hasSymbols || !getProto ? undefined : getProto(new Set()[Symbol.iterator]()),
	'%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? undefined : SharedArrayBuffer,
	'%String%': String,
	'%StringIteratorPrototype%': hasSymbols && getProto ? getProto(''[Symbol.iterator]()) : undefined,
	'%Symbol%': hasSymbols ? Symbol : undefined,
	'%SyntaxError%': $SyntaxError,
	'%ThrowTypeError%': ThrowTypeError,
	'%TypedArray%': TypedArray,
	'%TypeError%': $TypeError,
	'%Uint8Array%': typeof Uint8Array === 'undefined' ? undefined : Uint8Array,
	'%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? undefined : Uint8ClampedArray,
	'%Uint16Array%': typeof Uint16Array === 'undefined' ? undefined : Uint16Array,
	'%Uint32Array%': typeof Uint32Array === 'undefined' ? undefined : Uint32Array,
	'%URIError%': URIError,
	'%WeakMap%': typeof WeakMap === 'undefined' ? undefined : WeakMap,
	'%WeakRef%': typeof WeakRef === 'undefined' ? undefined : WeakRef,
	'%WeakSet%': typeof WeakSet === 'undefined' ? undefined : WeakSet
};

if (getProto) {
	try {
		null.error; // eslint-disable-line no-unused-expressions
	} catch (e) {
		// https://github.com/tc39/proposal-shadowrealm/pull/384#issuecomment-1364264229
		var errorProto = getProto(getProto(e));
		INTRINSICS['%Error.prototype%'] = errorProto;
	}
}

var doEval = function doEval(name) {
	var value;
	if (name === '%AsyncFunction%') {
		value = getEvalledConstructor('async function () {}');
	} else if (name === '%GeneratorFunction%') {
		value = getEvalledConstructor('function* () {}');
	} else if (name === '%AsyncGeneratorFunction%') {
		value = getEvalledConstructor('async function* () {}');
	} else if (name === '%AsyncGenerator%') {
		var fn = doEval('%AsyncGeneratorFunction%');
		if (fn) {
			value = fn.prototype;
		}
	} else if (name === '%AsyncIteratorPrototype%') {
		var gen = doEval('%AsyncGenerator%');
		if (gen && getProto) {
			value = getProto(gen.prototype);
		}
	}

	INTRINSICS[name] = value;

	return value;
};

var LEGACY_ALIASES = {
	'%ArrayBufferPrototype%': ['ArrayBuffer', 'prototype'],
	'%ArrayPrototype%': ['Array', 'prototype'],
	'%ArrayProto_entries%': ['Array', 'prototype', 'entries'],
	'%ArrayProto_forEach%': ['Array', 'prototype', 'forEach'],
	'%ArrayProto_keys%': ['Array', 'prototype', 'keys'],
	'%ArrayProto_values%': ['Array', 'prototype', 'values'],
	'%AsyncFunctionPrototype%': ['AsyncFunction', 'prototype'],
	'%AsyncGenerator%': ['AsyncGeneratorFunction', 'prototype'],
	'%AsyncGeneratorPrototype%': ['AsyncGeneratorFunction', 'prototype', 'prototype'],
	'%BooleanPrototype%': ['Boolean', 'prototype'],
	'%DataViewPrototype%': ['DataView', 'prototype'],
	'%DatePrototype%': ['Date', 'prototype'],
	'%ErrorPrototype%': ['Error', 'prototype'],
	'%EvalErrorPrototype%': ['EvalError', 'prototype'],
	'%Float32ArrayPrototype%': ['Float32Array', 'prototype'],
	'%Float64ArrayPrototype%': ['Float64Array', 'prototype'],
	'%FunctionPrototype%': ['Function', 'prototype'],
	'%Generator%': ['GeneratorFunction', 'prototype'],
	'%GeneratorPrototype%': ['GeneratorFunction', 'prototype', 'prototype'],
	'%Int8ArrayPrototype%': ['Int8Array', 'prototype'],
	'%Int16ArrayPrototype%': ['Int16Array', 'prototype'],
	'%Int32ArrayPrototype%': ['Int32Array', 'prototype'],
	'%JSONParse%': ['JSON', 'parse'],
	'%JSONStringify%': ['JSON', 'stringify'],
	'%MapPrototype%': ['Map', 'prototype'],
	'%NumberPrototype%': ['Number', 'prototype'],
	'%ObjectPrototype%': ['Object', 'prototype'],
	'%ObjProto_toString%': ['Object', 'prototype', 'toString'],
	'%ObjProto_valueOf%': ['Object', 'prototype', 'valueOf'],
	'%PromisePrototype%': ['Promise', 'prototype'],
	'%PromiseProto_then%': ['Promise', 'prototype', 'then'],
	'%Promise_all%': ['Promise', 'all'],
	'%Promise_reject%': ['Promise', 'reject'],
	'%Promise_resolve%': ['Promise', 'resolve'],
	'%RangeErrorPrototype%': ['RangeError', 'prototype'],
	'%ReferenceErrorPrototype%': ['ReferenceError', 'prototype'],
	'%RegExpPrototype%': ['RegExp', 'prototype'],
	'%SetPrototype%': ['Set', 'prototype'],
	'%SharedArrayBufferPrototype%': ['SharedArrayBuffer', 'prototype'],
	'%StringPrototype%': ['String', 'prototype'],
	'%SymbolPrototype%': ['Symbol', 'prototype'],
	'%SyntaxErrorPrototype%': ['SyntaxError', 'prototype'],
	'%TypedArrayPrototype%': ['TypedArray', 'prototype'],
	'%TypeErrorPrototype%': ['TypeError', 'prototype'],
	'%Uint8ArrayPrototype%': ['Uint8Array', 'prototype'],
	'%Uint8ClampedArrayPrototype%': ['Uint8ClampedArray', 'prototype'],
	'%Uint16ArrayPrototype%': ['Uint16Array', 'prototype'],
	'%Uint32ArrayPrototype%': ['Uint32Array', 'prototype'],
	'%URIErrorPrototype%': ['URIError', 'prototype'],
	'%WeakMapPrototype%': ['WeakMap', 'prototype'],
	'%WeakSetPrototype%': ['WeakSet', 'prototype']
};

var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");
var hasOwn = __webpack_require__(/*! has */ "./node_modules/has/src/index.js");
var $concat = bind.call(Function.call, Array.prototype.concat);
var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
var $replace = bind.call(Function.call, String.prototype.replace);
var $strSlice = bind.call(Function.call, String.prototype.slice);
var $exec = bind.call(Function.call, RegExp.prototype.exec);

/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */
var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */
var stringToPath = function stringToPath(string) {
	var first = $strSlice(string, 0, 1);
	var last = $strSlice(string, -1);
	if (first === '%' && last !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected closing `%`');
	} else if (last === '%' && first !== '%') {
		throw new $SyntaxError('invalid intrinsic syntax, expected opening `%`');
	}
	var result = [];
	$replace(string, rePropName, function (match, number, quote, subString) {
		result[result.length] = quote ? $replace(subString, reEscapeChar, '$1') : number || match;
	});
	return result;
};
/* end adaptation */

var getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
	var intrinsicName = name;
	var alias;
	if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
		alias = LEGACY_ALIASES[intrinsicName];
		intrinsicName = '%' + alias[0] + '%';
	}

	if (hasOwn(INTRINSICS, intrinsicName)) {
		var value = INTRINSICS[intrinsicName];
		if (value === needsEval) {
			value = doEval(intrinsicName);
		}
		if (typeof value === 'undefined' && !allowMissing) {
			throw new $TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
		}

		return {
			alias: alias,
			name: intrinsicName,
			value: value
		};
	}

	throw new $SyntaxError('intrinsic ' + name + ' does not exist!');
};

module.exports = function GetIntrinsic(name, allowMissing) {
	if (typeof name !== 'string' || name.length === 0) {
		throw new $TypeError('intrinsic name must be a non-empty string');
	}
	if (arguments.length > 1 && typeof allowMissing !== 'boolean') {
		throw new $TypeError('"allowMissing" argument must be a boolean');
	}

	if ($exec(/^%?[^%]*%?$/, name) === null) {
		throw new $SyntaxError('`%` may not be present anywhere but at the beginning and end of the intrinsic name');
	}
	var parts = stringToPath(name);
	var intrinsicBaseName = parts.length > 0 ? parts[0] : '';

	var intrinsic = getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
	var intrinsicRealName = intrinsic.name;
	var value = intrinsic.value;
	var skipFurtherCaching = false;

	var alias = intrinsic.alias;
	if (alias) {
		intrinsicBaseName = alias[0];
		$spliceApply(parts, $concat([0, 1], alias));
	}

	for (var i = 1, isOwn = true; i < parts.length; i += 1) {
		var part = parts[i];
		var first = $strSlice(part, 0, 1);
		var last = $strSlice(part, -1);
		if (
			(
				(first === '"' || first === "'" || first === '`')
				|| (last === '"' || last === "'" || last === '`')
			)
			&& first !== last
		) {
			throw new $SyntaxError('property names with quotes must have matching quotes');
		}
		if (part === 'constructor' || !isOwn) {
			skipFurtherCaching = true;
		}

		intrinsicBaseName += '.' + part;
		intrinsicRealName = '%' + intrinsicBaseName + '%';

		if (hasOwn(INTRINSICS, intrinsicRealName)) {
			value = INTRINSICS[intrinsicRealName];
		} else if (value != null) {
			if (!(part in value)) {
				if (!allowMissing) {
					throw new $TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
				}
				return void undefined;
			}
			if ($gOPD && (i + 1) >= parts.length) {
				var desc = $gOPD(value, part);
				isOwn = !!desc;

				// By convention, when a data property is converted to an accessor
				// property to emulate a data property that does not suffer from
				// the override mistake, that accessor's getter is marked with
				// an `originalValue` property. Here, when we detect this, we
				// uphold the illusion by pretending to see that original data
				// property, i.e., returning the value rather than the getter
				// itself.
				if (isOwn && 'get' in desc && !('originalValue' in desc.get)) {
					value = desc.get;
				} else {
					value = value[part];
				}
			} else {
				isOwn = hasOwn(value, part);
				value = value[part];
			}

			if (isOwn && !skipFurtherCaching) {
				INTRINSICS[intrinsicRealName] = value;
			}
		}
	}
	return value;
};


/***/ }),

/***/ "./node_modules/gopd/index.js":
/*!************************************!*\
  !*** ./node_modules/gopd/index.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $gOPD = GetIntrinsic('%Object.getOwnPropertyDescriptor%', true);

if ($gOPD) {
	try {
		$gOPD([], 'length');
	} catch (e) {
		// IE 8 has a broken gOPD
		$gOPD = null;
	}
}

module.exports = $gOPD;


/***/ }),

/***/ "./node_modules/has-property-descriptors/index.js":
/*!********************************************************!*\
  !*** ./node_modules/has-property-descriptors/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var GetIntrinsic = __webpack_require__(/*! get-intrinsic */ "./node_modules/get-intrinsic/index.js");

var $defineProperty = GetIntrinsic('%Object.defineProperty%', true);

var hasPropertyDescriptors = function hasPropertyDescriptors() {
	if ($defineProperty) {
		try {
			$defineProperty({}, 'a', { value: 1 });
			return true;
		} catch (e) {
			// IE 8 has a broken defineProperty
			return false;
		}
	}
	return false;
};

hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
	// node v0.6 has a bug where array lengths can be Set but not Defined
	if (!hasPropertyDescriptors()) {
		return null;
	}
	try {
		return $defineProperty([], 'length', { value: 1 }).length !== 1;
	} catch (e) {
		// In Firefox 4-22, defining length on an array throws an exception.
		return true;
	}
};

module.exports = hasPropertyDescriptors;


/***/ }),

/***/ "./node_modules/has-proto/index.js":
/*!*****************************************!*\
  !*** ./node_modules/has-proto/index.js ***!
  \*****************************************/
/***/ ((module) => {

"use strict";


var test = {
	foo: {}
};

var $Object = Object;

module.exports = function hasProto() {
	return { __proto__: test }.foo === test.foo && !({ __proto__: null } instanceof $Object);
};


/***/ }),

/***/ "./node_modules/has-symbols/index.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var origSymbol = typeof Symbol !== 'undefined' && Symbol;
var hasSymbolSham = __webpack_require__(/*! ./shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasNativeSymbols() {
	if (typeof origSymbol !== 'function') { return false; }
	if (typeof Symbol !== 'function') { return false; }
	if (typeof origSymbol('foo') !== 'symbol') { return false; }
	if (typeof Symbol('bar') !== 'symbol') { return false; }

	return hasSymbolSham();
};


/***/ }),

/***/ "./node_modules/has-symbols/shams.js":
/*!*******************************************!*\
  !*** ./node_modules/has-symbols/shams.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


/* eslint complexity: [2, 18], max-statements: [2, 33] */
module.exports = function hasSymbols() {
	if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') { return false; }
	if (typeof Symbol.iterator === 'symbol') { return true; }

	var obj = {};
	var sym = Symbol('test');
	var symObj = Object(sym);
	if (typeof sym === 'string') { return false; }

	if (Object.prototype.toString.call(sym) !== '[object Symbol]') { return false; }
	if (Object.prototype.toString.call(symObj) !== '[object Symbol]') { return false; }

	// temp disabled per https://github.com/ljharb/object.assign/issues/17
	// if (sym instanceof Symbol) { return false; }
	// temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
	// if (!(symObj instanceof Symbol)) { return false; }

	// if (typeof Symbol.prototype.toString !== 'function') { return false; }
	// if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }

	var symVal = 42;
	obj[sym] = symVal;
	for (sym in obj) { return false; } // eslint-disable-line no-restricted-syntax, no-unreachable-loop
	if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) { return false; }

	if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) { return false; }

	var syms = Object.getOwnPropertySymbols(obj);
	if (syms.length !== 1 || syms[0] !== sym) { return false; }

	if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) { return false; }

	if (typeof Object.getOwnPropertyDescriptor === 'function') {
		var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
		if (descriptor.value !== symVal || descriptor.enumerable !== true) { return false; }
	}

	return true;
};


/***/ }),

/***/ "./node_modules/has-tostringtag/shams.js":
/*!***********************************************!*\
  !*** ./node_modules/has-tostringtag/shams.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasSymbols = __webpack_require__(/*! has-symbols/shams */ "./node_modules/has-symbols/shams.js");

module.exports = function hasToStringTagShams() {
	return hasSymbols() && !!Symbol.toStringTag;
};


/***/ }),

/***/ "./node_modules/has/src/index.js":
/*!***************************************!*\
  !*** ./node_modules/has/src/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var bind = __webpack_require__(/*! function-bind */ "./node_modules/function-bind/index.js");

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),

/***/ "./node_modules/ieee754/index.js":
/*!***************************************!*\
  !*** ./node_modules/ieee754/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}


/***/ }),

/***/ "./node_modules/inherits/inherits_browser.js":
/*!***************************************************!*\
  !*** ./node_modules/inherits/inherits_browser.js ***!
  \***************************************************/
/***/ ((module) => {

if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      ctor.prototype = Object.create(superCtor.prototype, {
        constructor: {
          value: ctor,
          enumerable: false,
          writable: true,
          configurable: true
        }
      })
    }
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
      ctor.super_ = superCtor
      var TempCtor = function () {}
      TempCtor.prototype = superCtor.prototype
      ctor.prototype = new TempCtor()
      ctor.prototype.constructor = ctor
    }
  }
}


/***/ }),

/***/ "./node_modules/is-arguments/index.js":
/*!********************************************!*\
  !*** ./node_modules/is-arguments/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');

var isStandardArguments = function isArguments(value) {
	if (hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) {
		return false;
	}
	return $toString(value) === '[object Arguments]';
};

var isLegacyArguments = function isArguments(value) {
	if (isStandardArguments(value)) {
		return true;
	}
	return value !== null &&
		typeof value === 'object' &&
		typeof value.length === 'number' &&
		value.length >= 0 &&
		$toString(value) !== '[object Array]' &&
		$toString(value.callee) === '[object Function]';
};

var supportsStandardArguments = (function () {
	return isStandardArguments(arguments);
}());

isStandardArguments.isLegacyArguments = isLegacyArguments; // for tests

module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;


/***/ }),

/***/ "./node_modules/is-callable/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-callable/index.js ***!
  \*******************************************/
/***/ ((module) => {

"use strict";


var fnToStr = Function.prototype.toString;
var reflectApply = typeof Reflect === 'object' && Reflect !== null && Reflect.apply;
var badArrayLike;
var isCallableMarker;
if (typeof reflectApply === 'function' && typeof Object.defineProperty === 'function') {
	try {
		badArrayLike = Object.defineProperty({}, 'length', {
			get: function () {
				throw isCallableMarker;
			}
		});
		isCallableMarker = {};
		// eslint-disable-next-line no-throw-literal
		reflectApply(function () { throw 42; }, null, badArrayLike);
	} catch (_) {
		if (_ !== isCallableMarker) {
			reflectApply = null;
		}
	}
} else {
	reflectApply = null;
}

var constructorRegex = /^\s*class\b/;
var isES6ClassFn = function isES6ClassFunction(value) {
	try {
		var fnStr = fnToStr.call(value);
		return constructorRegex.test(fnStr);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionToStr(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var objectClass = '[object Object]';
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var ddaClass = '[object HTMLAllCollection]'; // IE 11
var ddaClass2 = '[object HTML document.all class]';
var ddaClass3 = '[object HTMLCollection]'; // IE 9-10
var hasToStringTag = typeof Symbol === 'function' && !!Symbol.toStringTag; // better: use `has-tostringtag`

var isIE68 = !(0 in [,]); // eslint-disable-line no-sparse-arrays, comma-spacing

var isDDA = function isDocumentDotAll() { return false; };
if (typeof document === 'object') {
	// Firefox 3 canonicalizes DDA to undefined when it's not accessed directly
	var all = document.all;
	if (toStr.call(all) === toStr.call(document.all)) {
		isDDA = function isDocumentDotAll(value) {
			/* globals document: false */
			// in IE 6-8, typeof document.all is "object" and it's truthy
			if ((isIE68 || !value) && (typeof value === 'undefined' || typeof value === 'object')) {
				try {
					var str = toStr.call(value);
					return (
						str === ddaClass
						|| str === ddaClass2
						|| str === ddaClass3 // opera 12.16
						|| str === objectClass // IE 6-8
					) && value('') == null; // eslint-disable-line eqeqeq
				} catch (e) { /**/ }
			}
			return false;
		};
	}
}

module.exports = reflectApply
	? function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		try {
			reflectApply(value, null, badArrayLike);
		} catch (e) {
			if (e !== isCallableMarker) { return false; }
		}
		return !isES6ClassFn(value) && tryFunctionObject(value);
	}
	: function isCallable(value) {
		if (isDDA(value)) { return true; }
		if (!value) { return false; }
		if (typeof value !== 'function' && typeof value !== 'object') { return false; }
		if (hasToStringTag) { return tryFunctionObject(value); }
		if (isES6ClassFn(value)) { return false; }
		var strClass = toStr.call(value);
		if (strClass !== fnClass && strClass !== genClass && !(/^\[object HTML/).test(strClass)) { return false; }
		return tryFunctionObject(value);
	};


/***/ }),

/***/ "./node_modules/is-generator-function/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/is-generator-function/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var toStr = Object.prototype.toString;
var fnToStr = Function.prototype.toString;
var isFnRegex = /^\s*(?:function)?\*/;
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var getProto = Object.getPrototypeOf;
var getGeneratorFunc = function () { // eslint-disable-line consistent-return
	if (!hasToStringTag) {
		return false;
	}
	try {
		return Function('return function*() {}')();
	} catch (e) {
	}
};
var GeneratorFunction;

module.exports = function isGeneratorFunction(fn) {
	if (typeof fn !== 'function') {
		return false;
	}
	if (isFnRegex.test(fnToStr.call(fn))) {
		return true;
	}
	if (!hasToStringTag) {
		var str = toStr.call(fn);
		return str === '[object GeneratorFunction]';
	}
	if (!getProto) {
		return false;
	}
	if (typeof GeneratorFunction === 'undefined') {
		var generatorFunc = getGeneratorFunc();
		GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
	}
	return getProto(fn) === GeneratorFunction;
};


/***/ }),

/***/ "./node_modules/is-nan/implementation.js":
/*!***********************************************!*\
  !*** ./node_modules/is-nan/implementation.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";


/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function isNaN(value) {
	return value !== value;
};


/***/ }),

/***/ "./node_modules/is-nan/index.js":
/*!**************************************!*\
  !*** ./node_modules/is-nan/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/is-nan/shim.js");

var polyfill = callBind(getPolyfill(), Number);

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/is-nan/polyfill.js":
/*!*****************************************!*\
  !*** ./node_modules/is-nan/polyfill.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/is-nan/implementation.js");

module.exports = function getPolyfill() {
	if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) {
		return Number.isNaN;
	}
	return implementation;
};


/***/ }),

/***/ "./node_modules/is-nan/shim.js":
/*!*************************************!*\
  !*** ./node_modules/is-nan/shim.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/is-nan/polyfill.js");

/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */

module.exports = function shimNumberIsNaN() {
	var polyfill = getPolyfill();
	define(Number, { isNaN: polyfill }, {
		isNaN: function testIsNaN() {
			return Number.isNaN !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/is-typed-array/index.js":
/*!**********************************************!*\
  !*** ./node_modules/is-typed-array/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(/*! for-each */ "./node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $indexOf = callBound('Array.prototype.indexOf', true) || function indexOf(array, value) {
	for (var i = 0; i < array.length; i += 1) {
		if (array[i] === value) {
			return i;
		}
	}
	return -1;
};
var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		var arr = new g[typedArray]();
		if (Symbol.toStringTag in arr) {
			var proto = getPrototypeOf(arr);
			var descriptor = gOPD(proto, Symbol.toStringTag);
			if (!descriptor) {
				var superProto = getPrototypeOf(proto);
				descriptor = gOPD(superProto, Symbol.toStringTag);
			}
			toStrTags[typedArray] = descriptor.get;
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var anyTrue = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!anyTrue) {
			try {
				anyTrue = getter.call(value) === typedArray;
			} catch (e) { /**/ }
		}
	});
	return anyTrue;
};

module.exports = function isTypedArray(value) {
	if (!value || typeof value !== 'object') { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) {
		var tag = $slice($toString(value), 8, -1);
		return $indexOf(typedArrays, tag) > -1;
	}
	if (!gOPD) { return false; }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "./node_modules/js-xdr/dist/xdr.js":
/*!*****************************************!*\
  !*** ./node_modules/js-xdr/dist/xdr.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
/*! For license information please see xdr.js.LICENSE.txt */
!function(t,e){ true?module.exports=e():0}(this,(()=>(()=>{var t={899:(t,e,r)=>{const n=r(221);t.exports=n},221:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Array:()=>j,Bool:()=>S,Double:()=>O,Enum:()=>z,Float:()=>L,Hyper:()=>I,Int:()=>v,Opaque:()=>M,Option:()=>X,Quadruple:()=>$,Reference:()=>q,String:()=>V,Struct:()=>W,Union:()=>Y,UnsignedHyper:()=>R,UnsignedInt:()=>x,VarArray:()=>P,VarOpaque:()=>D,Void:()=>k,config:()=>nt});class n extends TypeError{constructor(t){super(`XDR Write Error: ${t}`)}}class i extends TypeError{constructor(t){super(`XDR Read Error: ${t}`)}}class o extends TypeError{constructor(t){super(`XDR Type Definition Error: ${t}`)}}class s extends o{constructor(){super("method not implemented, it should be overloaded in the descendant class.")}}var u=r(764).lW;class f{constructor(t){if(!u.isBuffer(t)){if(!(t instanceof Array))throw new i("source not specified");t=u.from(t)}this._buffer=t,this._length=t.length,this._index=0}_buffer;_length;_index;get eof(){return this._index===this._length}advance(t){const e=this._index;if(this._index+=t,this._length<this._index)throw new i("attempt to read outside the boundary of the buffer");const r=4-(t%4||4);if(r>0){for(let t=0;t<r;t++)if(0!==this._buffer[this._index+t])throw new i("invalid padding");this._index+=r}return e}rewind(){this._index=0}read(t){const e=this.advance(t);return this._buffer.subarray(e,e+t)}readInt32BE(){return this._buffer.readInt32BE(this.advance(4))}readUInt32BE(){return this._buffer.readUInt32BE(this.advance(4))}readBigInt64BE(){return this._buffer.readBigInt64BE(this.advance(8))}readBigUInt64BE(){return this._buffer.readBigUInt64BE(this.advance(8))}readFloatBE(){return this._buffer.readFloatBE(this.advance(4))}readDoubleBE(){return this._buffer.readDoubleBE(this.advance(8))}ensureInputConsumed(){if(this._index!==this._length)throw new i("invalid XDR contract typecast - source buffer not entirely consumed")}}var h=r(764).lW;const a=8192;class c{constructor(t){"number"==typeof t?t=h.allocUnsafe(t):t instanceof h||(t=h.allocUnsafe(a)),this._buffer=t,this._length=t.length}_buffer;_length;_index=0;alloc(t){const e=this._index;return this._index+=t,this._length<this._index&&this.resize(this._index),e}resize(t){const e=Math.ceil(t/a)*a,r=h.allocUnsafe(e);this._buffer.copy(r,0,0,this._length),this._buffer=r,this._length=e}finalize(){return this._buffer.subarray(0,this._index)}toArray(){return[...this.finalize()]}write(t,e){if("string"==typeof t){const r=this.alloc(e);this._buffer.write(t,r,"utf8")}else{t instanceof h||(t=h.from(t));const r=this.alloc(e);t.copy(this._buffer,r,0,e)}const r=4-(e%4||4);if(r>0){const t=this.alloc(r);this._buffer.fill(0,t,this._index)}}writeInt32BE(t){const e=this.alloc(4);this._buffer.writeInt32BE(t,e)}writeUInt32BE(t){const e=this.alloc(4);this._buffer.writeUInt32BE(t,e)}writeBigInt64BE(t){const e=this.alloc(8);this._buffer.writeBigInt64BE(t,e)}writeBigUInt64BE(t){const e=this.alloc(8);this._buffer.writeBigUInt64BE(t,e)}writeFloatBE(t){const e=this.alloc(4);this._buffer.writeFloatBE(t,e)}writeDoubleBE(t){const e=this.alloc(8);this._buffer.writeDoubleBE(t,e)}static bufferChunkSize=a}var l=r(764).lW;class p{toXDR(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"raw";if(!this.write)return this.constructor.toXDR(this,t);const e=new c;return this.write(this,e),y(e.finalize(),t)}fromXDR(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"raw";if(!this.read)return this.constructor.fromXDR(t,e);const r=new f(m(t,e)),n=this.read(r);return r.ensureInputConsumed(),n}validateXDR(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"raw";try{return this.fromXDR(t,e),!0}catch(t){return!1}}static toXDR(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"raw";const r=new c;return this.write(t,r),y(r.finalize(),e)}static fromXDR(t){const e=new f(m(t,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"raw")),r=this.read(e);return e.ensureInputConsumed(),r}static validateXDR(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"raw";try{return this.fromXDR(t,e),!0}catch(t){return!1}}}class d extends p{static read(t){throw new s}static write(t,e){throw new s}static isValid(t){return!1}}class g extends p{isValid(t){return!1}}class w extends TypeError{constructor(t){super(`Invalid format ${t}, must be one of "raw", "hex", "base64"`)}}function y(t,e){switch(e){case"raw":return t;case"hex":return t.toString("hex");case"base64":return t.toString("base64");default:throw new w(e)}}function m(t,e){switch(e){case"raw":return t;case"hex":return l.from(t,"hex");case"base64":return l.from(t,"base64");default:throw new w(e)}}const b=2147483647,_=-2147483648;class v extends d{static read(t){return t.readInt32BE()}static write(t,e){if("number"!=typeof t)throw new n("not a number");if((0|t)!==t)throw new n("invalid i32 value");e.writeInt32BE(t)}static isValid(t){return"number"==typeof t&&(0|t)===t&&(t>=_&&t<=b)}}v.MAX_VALUE=b,v.MIN_VALUE=2147483648;const E=-9223372036854775808n,B=9223372036854775807n;class I extends d{constructor(t,e){if(super(),"bigint"==typeof t){if(t<E||t>B)throw new TypeError("Invalid i64 value");this._value=t}else{if((0|t)!==t||(0|e)!==e)throw new TypeError("Invalid i64 value");this._value=BigInt(e>>>0)<<32n|BigInt(t>>>0)}}get low(){return Number(0xFFFFFFFFn&this._value)<<0}get high(){return Number(this._value>>32n)>>0}get unsigned(){return!1}toString(){return this._value.toString()}toJSON(){return{_value:this._value.toString()}}static read(t){return new I(t.readBigInt64BE())}static write(t,e){if(!(t instanceof this))throw new n(`${t} is not a Hyper`);e.writeBigInt64BE(t._value)}static fromString(t){if(!/^-?\d{0,19}$/.test(t))throw new TypeError(`Invalid i64 string value: ${t}`);return new I(BigInt(t))}static fromBits(t,e){return new this(t,e)}static isValid(t){return t instanceof this}}I.MAX_VALUE=new I(B),I.MIN_VALUE=new I(E);const A=4294967295;class x extends d{static read(t){return t.readUInt32BE()}static write(t,e){if("number"!=typeof t||!(t>=0&&t<=A)||t%1!=0)throw new n("invalid u32 value");e.writeUInt32BE(t)}static isValid(t){return"number"==typeof t&&t%1==0&&(t>=0&&t<=A)}}x.MAX_VALUE=A,x.MIN_VALUE=0;const U=0n,T=0xFFFFFFFFFFFFFFFFn;class R extends d{constructor(t,e){if(super(),"bigint"==typeof t){if(t<U||t>T)throw new TypeError("Invalid u64 value");this._value=t}else{if((0|t)!==t||(0|e)!==e)throw new TypeError("Invalid u64 value");this._value=BigInt(e>>>0)<<32n|BigInt(t>>>0)}}get low(){return Number(0xFFFFFFFFn&this._value)<<0}get high(){return Number(this._value>>32n)>>0}get unsigned(){return!0}toString(){return this._value.toString()}toJSON(){return{_value:this._value.toString()}}static read(t){return new R(t.readBigUInt64BE())}static write(t,e){if(!(t instanceof this))throw new n(`${t} is not an UnsignedHyper`);e.writeBigUInt64BE(t._value)}static fromString(t){if(!/^\d{0,20}$/.test(t))throw new TypeError(`Invalid u64 string value: ${t}`);return new R(BigInt(t))}static fromBits(t,e){return new this(t,e)}static isValid(t){return t instanceof this}}R.MAX_VALUE=new R(T),R.MIN_VALUE=new R(U);class L extends d{static read(t){return t.readFloatBE()}static write(t,e){if("number"!=typeof t)throw new n("not a number");e.writeFloatBE(t)}static isValid(t){return"number"==typeof t}}class O extends d{static read(t){return t.readDoubleBE()}static write(t,e){if("number"!=typeof t)throw new n("not a number");e.writeDoubleBE(t)}static isValid(t){return"number"==typeof t}}class $ extends d{static read(){throw new o("quadruple not supported")}static write(){throw new o("quadruple not supported")}static isValid(){return!1}}class S extends d{static read(t){const e=v.read(t);switch(e){case 0:return!1;case 1:return!0;default:throw new i(`got ${e} when trying to read a bool`)}}static write(t,e){const r=t?1:0;v.write(r,e)}static isValid(t){return"boolean"==typeof t}}var F=r(764).lW;class V extends g{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:x.MAX_VALUE;super(),this._maxLength=t}read(t){const e=x.read(t);if(e>this._maxLength)throw new i(`saw ${e} length String, max allowed is ${this._maxLength}`);return t.read(e)}readString(t){return this.read(t).toString("utf8")}write(t,e){const r="string"==typeof t?F.byteLength(t,"utf8"):t.length;if(r>this._maxLength)throw new n(`got ${t.length} bytes, max allowed is ${this._maxLength}`);x.write(r,e),e.write(t,r)}isValid(t){return"string"==typeof t?F.byteLength(t,"utf8")<=this._maxLength:!!(t instanceof Array||F.isBuffer(t))&&t.length<=this._maxLength}}var N=r(764).lW;class M extends g{constructor(t){super(),this._length=t}read(t){return t.read(this._length)}write(t,e){const{length:r}=t;if(r!==this._length)throw new n(`got ${t.length} bytes, expected ${this._length}`);e.write(t,r)}isValid(t){return N.isBuffer(t)&&t.length===this._length}}var C=r(764).lW;class D extends g{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:x.MAX_VALUE;super(),this._maxLength=t}read(t){const e=x.read(t);if(e>this._maxLength)throw new i(`saw ${e} length VarOpaque, max allowed is ${this._maxLength}`);return t.read(e)}write(t,e){const{length:r}=t;if(t.length>this._maxLength)throw new n(`got ${t.length} bytes, max allowed is ${this._maxLength}`);x.write(r,e),e.write(t,r)}isValid(t){return C.isBuffer(t)&&t.length<=this._maxLength}}class j extends g{constructor(t,e){super(),this._childType=t,this._length=e}read(t){const e=new r.g.Array(this._length);for(let r=0;r<this._length;r++)e[r]=this._childType.read(t);return e}write(t,e){if(!(t instanceof r.g.Array))throw new n("value is not array");if(t.length!==this._length)throw new n(`got array of size ${t.length}, expected ${this._length}`);for(const r of t)this._childType.write(r,e)}isValid(t){if(!(t instanceof r.g.Array)||t.length!==this._length)return!1;for(const e of t)if(!this._childType.isValid(e))return!1;return!0}}class P extends g{constructor(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:x.MAX_VALUE;super(),this._childType=t,this._maxLength=e}read(t){const e=x.read(t);if(e>this._maxLength)throw new i(`saw ${e} length VarArray, max allowed is ${this._maxLength}`);const r=new Array(e);for(let n=0;n<e;n++)r[n]=this._childType.read(t);return r}write(t,e){if(!(t instanceof Array))throw new n("value is not array");if(t.length>this._maxLength)throw new n(`got array of size ${t.length}, max allowed is ${this._maxLength}`);x.write(t.length,e);for(const r of t)this._childType.write(r,e)}isValid(t){if(!(t instanceof Array)||t.length>this._maxLength)return!1;for(const e of t)if(!this._childType.isValid(e))return!1;return!0}}class X extends d{constructor(t){super(),this._childType=t}read(t){if(S.read(t))return this._childType.read(t)}write(t,e){const r=null!=t;S.write(r,e),r&&this._childType.write(t,e)}isValid(t){return null==t||this._childType.isValid(t)}}class k extends d{static read(){}static write(t){if(void 0!==t)throw new n("trying to write value to a void slot")}static isValid(t){return void 0===t}}class z extends d{constructor(t,e){super(),this.name=t,this.value=e}static read(t){const e=v.read(t),r=this._byValue[e];if(void 0===r)throw new i(`unknown ${this.enumName} member for value ${e}`);return r}static write(t,e){if(!(t instanceof this))throw new n(`unknown ${t} is not a ${this.enumName}`);v.write(t.value,e)}static isValid(t){return t instanceof this}static members(){return this._members}static values(){return Object.values(this._members)}static fromName(t){const e=this._members[t];if(!e)throw new TypeError(`${t} is not a member of ${this.enumName}`);return e}static fromValue(t){const e=this._byValue[t];if(void 0===e)throw new TypeError(`${t} is not a value of any member of ${this.enumName}`);return e}static create(t,e,r){const n=class extends z{};n.enumName=e,t.results[e]=n,n._members={},n._byValue={};for(const[t,e]of Object.entries(r)){const r=new n(t,e);n._members[t]=r,n._byValue[e]=r,n[t]=()=>r}return n}}class q extends d{resolve(){throw new o('"resolve" method should be implemented in the descendant class')}}class W extends d{constructor(t){super(),this._attributes=t||{}}static read(t){const e={};for(const[r,n]of this._fields)e[r]=n.read(t);return new this(e)}static write(t,e){if(!(t instanceof this))throw new n(`${t} is not a ${this.structName}`);for(const[r,n]of this._fields){const i=t._attributes[r];n.write(i,e)}}static isValid(t){return t instanceof this}static create(t,e,r){const n=class extends W{};n.structName=e,t.results[e]=n;const i=new Array(r.length);for(let e=0;e<r.length;e++){const o=r[e],s=o[0];let u=o[1];u instanceof q&&(u=u.resolve(t)),i[e]=[s,u],n.prototype[s]=G(s)}return n._fields=i,n}}function G(t){return function(e){return void 0!==e&&(this._attributes[t]=e),this._attributes[t]}}class Y extends g{constructor(t,e){super(),this.set(t,e)}set(t,e){"string"==typeof t&&(t=this.constructor._switchOn.fromName(t)),this._switch=t;const r=this.constructor.armForSwitch(this._switch);this._arm=r,this._armType=r===k?k:this.constructor._arms[r],this._value=e}get(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:this._arm;if(this._arm!==k&&this._arm!==t)throw new TypeError(`${t} not set`);return this._value}switch(){return this._switch}arm(){return this._arm}armType(){return this._armType}value(){return this._value}static armForSwitch(t){const e=this._switches.get(t);if(void 0!==e)return e;if(this._defaultArm)return this._defaultArm;throw new TypeError(`Bad union switch: ${t}`)}static armTypeForArm(t){return t===k?k:this._arms[t]}static read(t){const e=this._switchOn.read(t),r=this.armForSwitch(e),n=r===k?k:this._arms[r];let i;return i=void 0!==n?n.read(t):r.read(t),new this(e,i)}static write(t,e){if(!(t instanceof this))throw new n(`${t} is not a ${this.unionName}`);this._switchOn.write(t.switch(),e),t.armType().write(t.value(),e)}static isValid(t){return t instanceof this}static create(t,e,r){const n=class extends Y{};n.unionName=e,t.results[e]=n,r.switchOn instanceof q?n._switchOn=r.switchOn.resolve(t):n._switchOn=r.switchOn,n._switches=new Map,n._arms={};let i=r.defaultArm;i instanceof q&&(i=i.resolve(t)),n._defaultArm=i;for(const[t,e]of r.switches){const r="string"==typeof t?n._switchOn.fromName(t):t;n._switches.set(r,e)}if(void 0!==n._switchOn.values)for(const t of n._switchOn.values())n[t.name]=function(e){return new n(t,e)},n.prototype[t.name]=function(e){return this.set(t,e)};if(r.arms)for(const[e,i]of Object.entries(r.arms))n._arms[e]=i instanceof q?i.resolve(t):i,i!==k&&(n.prototype[e]=function(){return this.get(e)});return n}}class H extends q{constructor(t){super(),this.name=t}resolve(t){return t.definitions[this.name].resolve(t)}}class J extends q{constructor(t,e){let r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];super(),this.childReference=t,this.length=e,this.variable=r}resolve(t){let e=this.childReference,r=this.length;return e instanceof q&&(e=e.resolve(t)),r instanceof q&&(r=r.resolve(t)),this.variable?new P(e,r):new j(e,r)}}class Q extends q{constructor(t){super(),this.childReference=t,this.name=t.name}resolve(t){let e=this.childReference;return e instanceof q&&(e=e.resolve(t)),new X(e)}}class Z extends q{constructor(t,e){super(),this.sizedType=t,this.length=e}resolve(t){let e=this.length;return e instanceof q&&(e=e.resolve(t)),new this.sizedType(e)}}class K{constructor(t,e,r){this.constructor=t,this.name=e,this.config=r}resolve(t){return this.name in t.results?t.results[this.name]:this.constructor(t,this.name,this.config)}}function tt(t,e,r){return r instanceof q&&(r=r.resolve(t)),t.results[e]=r,r}function et(t,e,r){return t.results[e]=r,r}class rt{constructor(t){this._destination=t,this._definitions={}}enum(t,e){const r=new K(z.create,t,e);this.define(t,r)}struct(t,e){const r=new K(W.create,t,e);this.define(t,r)}union(t,e){const r=new K(Y.create,t,e);this.define(t,r)}typedef(t,e){const r=new K(tt,t,e);this.define(t,r)}const(t,e){const r=new K(et,t,e);this.define(t,r)}void(){return k}bool(){return S}int(){return v}hyper(){return I}uint(){return x}uhyper(){return R}float(){return L}double(){return O}quadruple(){return $}string(t){return new Z(V,t)}opaque(t){return new Z(M,t)}varOpaque(t){return new Z(D,t)}array(t,e){return new J(t,e)}varArray(t,e){return new J(t,e,!0)}option(t){return new Q(t)}define(t,e){if(void 0!==this._destination[t])throw new o(`${t} is already defined`);this._definitions[t]=e}lookup(t){return new H(t)}resolve(){for(const t of Object.values(this._definitions))t.resolve({definitions:this._definitions,results:this._destination})}}function nt(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(t){const r=new rt(e);t(r),r.resolve()}return e}},742:(t,e)=>{"use strict";e.byteLength=function(t){var e=u(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,o=u(t),s=o[0],f=o[1],h=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,f)),a=0,c=f>0?s-4:s;for(r=0;r<c;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],h[a++]=e>>16&255,h[a++]=e>>8&255,h[a++]=255&e;2===f&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,h[a++]=255&e);1===f&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,h[a++]=e>>8&255,h[a++]=255&e);return h},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=16383,u=0,h=n-i;u<h;u+=s)o.push(f(t,u,u+s>h?h:u+s));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function u(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function f(t,e,n){for(var i,o,s=[],u=e;u<n;u+=3)i=(t[u]<<16&16711680)+(t[u+1]<<8&65280)+(255&t[u+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},764:(t,e,r)=>{"use strict";const n=r(742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=f,e.h2=50;const s=2147483647;function u(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,f.prototype),e}function f(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return h(t,e,r)}function h(t,e,r){if("string"==typeof t)return function(t,e){"string"==typeof e&&""!==e||(e="utf8");if(!f.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|g(t,e);let n=u(r);const i=n.write(t,e);i!==r&&(n=n.slice(0,i));return n}(t,e);if(ArrayBuffer.isView(t))return function(t){if(H(t,Uint8Array)){const e=new Uint8Array(t);return p(e.buffer,e.byteOffset,e.byteLength)}return l(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(H(t,ArrayBuffer)||t&&H(t.buffer,ArrayBuffer))return p(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(H(t,SharedArrayBuffer)||t&&H(t.buffer,SharedArrayBuffer)))return p(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return f.from(n,e,r);const i=function(t){if(f.isBuffer(t)){const e=0|d(t.length),r=u(e);return 0===r.length||t.copy(r,0,0,e),r}if(void 0!==t.length)return"number"!=typeof t.length||J(t.length)?u(0):l(t);if("Buffer"===t.type&&Array.isArray(t.data))return l(t.data)}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return f.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function a(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return a(t),u(t<0?0:0|d(t))}function l(t){const e=t.length<0?0:0|d(t.length),r=u(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function p(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,f.prototype),n}function d(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function g(t,e){if(f.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||H(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return W(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return G(t).length;default:if(i)return n?-1:W(t).length;e=(""+e).toLowerCase(),i=!0}}function w(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return L(this,e,r);case"utf8":case"utf-8":return x(this,e,r);case"ascii":return T(this,e,r);case"latin1":case"binary":return R(this,e,r);case"base64":return A(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return O(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function y(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function m(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),J(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=f.from(e,n)),f.isBuffer(e))return 0===e.length?-1:b(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):b(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(t,e,r,n,i){let o,s=1,u=t.length,f=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,u/=2,f/=2,r/=2}function h(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let n=-1;for(o=r;o<u;o++)if(h(t,o)===h(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===f)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+f>u&&(r=u-f),o=r;o>=0;o--){let r=!0;for(let n=0;n<f;n++)if(h(t,o+n)!==h(e,n)){r=!1;break}if(r)return o}return-1}function _(t,e,r,n){r=Number(r)||0;const i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=e.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(e.substr(2*s,2),16);if(J(n))return s;t[r+s]=n}return s}function v(t,e,r,n){return Y(W(e,t.length-r),t,r,n)}function E(t,e,r,n){return Y(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function B(t,e,r,n){return Y(G(e),t,r,n)}function I(t,e,r,n){return Y(function(t,e){let r,n,i;const o=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function A(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function x(t,e,r){r=Math.min(t.length,r);const n=[];let i=e;for(;i<r;){const e=t[i];let o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=r){let r,n,u,f;switch(s){case 1:e<128&&(o=e);break;case 2:r=t[i+1],128==(192&r)&&(f=(31&e)<<6|63&r,f>127&&(o=f));break;case 3:r=t[i+1],n=t[i+2],128==(192&r)&&128==(192&n)&&(f=(15&e)<<12|(63&r)<<6|63&n,f>2047&&(f<55296||f>57343)&&(o=f));break;case 4:r=t[i+1],n=t[i+2],u=t[i+3],128==(192&r)&&128==(192&n)&&128==(192&u)&&(f=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&u,f>65535&&f<1114112&&(o=f))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(t){const e=t.length;if(e<=U)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=U));return r}(n)}f.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),f.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(f.prototype,"parent",{enumerable:!0,get:function(){if(f.isBuffer(this))return this.buffer}}),Object.defineProperty(f.prototype,"offset",{enumerable:!0,get:function(){if(f.isBuffer(this))return this.byteOffset}}),f.poolSize=8192,f.from=function(t,e,r){return h(t,e,r)},Object.setPrototypeOf(f.prototype,Uint8Array.prototype),Object.setPrototypeOf(f,Uint8Array),f.alloc=function(t,e,r){return function(t,e,r){return a(t),t<=0?u(t):void 0!==e?"string"==typeof r?u(t).fill(e,r):u(t).fill(e):u(t)}(t,e,r)},f.allocUnsafe=function(t){return c(t)},f.allocUnsafeSlow=function(t){return c(t)},f.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==f.prototype},f.compare=function(t,e){if(H(t,Uint8Array)&&(t=f.from(t,t.offset,t.byteLength)),H(e,Uint8Array)&&(e=f.from(e,e.offset,e.byteLength)),!f.isBuffer(t)||!f.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},f.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},f.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return f.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=f.allocUnsafe(e);let i=0;for(r=0;r<t.length;++r){let e=t[r];if(H(e,Uint8Array))i+e.length>n.length?(f.isBuffer(e)||(e=f.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else{if(!f.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,i)}i+=e.length}return n},f.byteLength=g,f.prototype._isBuffer=!0,f.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)y(this,e,e+1);return this},f.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)y(this,e,e+3),y(this,e+1,e+2);return this},f.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)y(this,e,e+7),y(this,e+1,e+6),y(this,e+2,e+5),y(this,e+3,e+4);return this},f.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?x(this,0,t):w.apply(this,arguments)},f.prototype.toLocaleString=f.prototype.toString,f.prototype.equals=function(t){if(!f.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===f.compare(this,t)},f.prototype.inspect=function(){let t="";const r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(f.prototype[o]=f.prototype.inspect),f.prototype.compare=function(t,e,r,n,i){if(H(t,Uint8Array)&&(t=f.from(t,t.offset,t.byteLength)),!f.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0);const u=Math.min(o,s),h=this.slice(n,i),a=t.slice(e,r);for(let t=0;t<u;++t)if(h[t]!==a[t]){o=h[t],s=a[t];break}return o<s?-1:s<o?1:0},f.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},f.prototype.indexOf=function(t,e,r){return m(this,t,e,r,!0)},f.prototype.lastIndexOf=function(t,e,r){return m(this,t,e,r,!1)},f.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return E(this,t,e,r);case"base64":return B(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},f.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const U=4096;function T(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function R(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function L(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=e;n<r;++n)i+=Q[t[n]];return i}function O(t,e,r){const n=t.slice(e,r);let i="";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}function $(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function S(t,e,r,n,i,o){if(!f.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function F(t,e,r,n,i){X(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,r}function V(t,e,r,n,i){X(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=s,s>>=8,t[r+2]=s,s>>=8,t[r+1]=s,s>>=8,t[r]=s,r+8}function N(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function C(t,e,r,n,o){return e=+e,r>>>=0,o||N(t,0,r,8),i.write(t,e,r,n,52,8),r+8}f.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,f.prototype),n},f.prototype.readUintLE=f.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||$(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},f.prototype.readUintBE=f.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||$(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},f.prototype.readUint8=f.prototype.readUInt8=function(t,e){return t>>>=0,e||$(t,1,this.length),this[t]},f.prototype.readUint16LE=f.prototype.readUInt16LE=function(t,e){return t>>>=0,e||$(t,2,this.length),this[t]|this[t+1]<<8},f.prototype.readUint16BE=f.prototype.readUInt16BE=function(t,e){return t>>>=0,e||$(t,2,this.length),this[t]<<8|this[t+1]},f.prototype.readUint32LE=f.prototype.readUInt32LE=function(t,e){return t>>>=0,e||$(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},f.prototype.readUint32BE=f.prototype.readUInt32BE=function(t,e){return t>>>=0,e||$(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},f.prototype.readBigUInt64LE=Z((function(t){k(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||z(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),f.prototype.readBigUInt64BE=Z((function(t){k(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||z(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),f.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||$(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},f.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||$(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},f.prototype.readInt8=function(t,e){return t>>>=0,e||$(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},f.prototype.readInt16LE=function(t,e){t>>>=0,e||$(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt16BE=function(t,e){t>>>=0,e||$(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},f.prototype.readInt32LE=function(t,e){return t>>>=0,e||$(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},f.prototype.readInt32BE=function(t,e){return t>>>=0,e||$(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},f.prototype.readBigInt64LE=Z((function(t){k(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||z(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),f.prototype.readBigInt64BE=Z((function(t){k(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||z(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),f.prototype.readFloatLE=function(t,e){return t>>>=0,e||$(t,4,this.length),i.read(this,t,!0,23,4)},f.prototype.readFloatBE=function(t,e){return t>>>=0,e||$(t,4,this.length),i.read(this,t,!1,23,4)},f.prototype.readDoubleLE=function(t,e){return t>>>=0,e||$(t,8,this.length),i.read(this,t,!0,52,8)},f.prototype.readDoubleBE=function(t,e){return t>>>=0,e||$(t,8,this.length),i.read(this,t,!1,52,8)},f.prototype.writeUintLE=f.prototype.writeUIntLE=function(t,e,r,n){if(t=+t,e>>>=0,r>>>=0,!n){S(this,t,e,r,Math.pow(2,8*r)-1,0)}let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},f.prototype.writeUintBE=f.prototype.writeUIntBE=function(t,e,r,n){if(t=+t,e>>>=0,r>>>=0,!n){S(this,t,e,r,Math.pow(2,8*r)-1,0)}let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},f.prototype.writeUint8=f.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,1,255,0),this[e]=255&t,e+1},f.prototype.writeUint16LE=f.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},f.prototype.writeUint16BE=f.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},f.prototype.writeUint32LE=f.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},f.prototype.writeUint32BE=f.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},f.prototype.writeBigUInt64LE=Z((function(t,e=0){return F(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),f.prototype.writeBigUInt64BE=Z((function(t,e=0){return V(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),f.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);S(this,t,e,r,n-1,-n)}let i=0,o=1,s=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},f.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);S(this,t,e,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},f.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},f.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},f.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},f.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},f.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||S(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},f.prototype.writeBigInt64LE=Z((function(t,e=0){return F(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),f.prototype.writeBigInt64BE=Z((function(t,e=0){return V(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),f.prototype.writeFloatLE=function(t,e,r){return M(this,t,e,!0,r)},f.prototype.writeFloatBE=function(t,e,r){return M(this,t,e,!1,r)},f.prototype.writeDoubleLE=function(t,e,r){return C(this,t,e,!0,r)},f.prototype.writeDoubleBE=function(t,e,r){return C(this,t,e,!1,r)},f.prototype.copy=function(t,e,r,n){if(!f.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},f.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!f.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{const o=f.isBuffer(t)?t:f.from(t,n),s=o.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=o[i%s]}return this};const D={};function j(t,e,r){D[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function P(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function X(t,e,r,n,i,o){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new D.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,r){k(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||z(e,t.length-(r+1))}(n,i,o)}function k(t,e){if("number"!=typeof t)throw new D.ERR_INVALID_ARG_TYPE(e,"number",t)}function z(t,e,r){if(Math.floor(t)!==t)throw k(t,r),new D.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new D.ERR_BUFFER_OUT_OF_BOUNDS;throw new D.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}j("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),j("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),j("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=P(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=P(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n}),RangeError);const q=/[^+/0-9A-Za-z-_]/g;function W(t,e){let r;e=e||1/0;const n=t.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=t.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function G(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(q,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Y(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function H(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function J(t){return t!=t}const Q=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function Z(t){return"undefined"==typeof BigInt?K:t}function K(){throw new Error("BigInt not supported")}},645:(t,e)=>{e.read=function(t,e,r,n,i){var o,s,u=8*i-n-1,f=(1<<u)-1,h=f>>1,a=-7,c=r?i-1:0,l=r?-1:1,p=t[e+c];for(c+=l,o=p&(1<<-a)-1,p>>=-a,a+=u;a>0;o=256*o+t[e+c],c+=l,a-=8);for(s=o&(1<<-a)-1,o>>=-a,a+=n;a>0;s=256*s+t[e+c],c+=l,a-=8);if(0===o)o=1-h;else{if(o===f)return s?NaN:1/0*(p?-1:1);s+=Math.pow(2,n),o-=h}return(p?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,u,f,h=8*o-i-1,a=(1<<h)-1,c=a>>1,l=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=n?0:o-1,d=n?1:-1,g=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(u=isNaN(e)?1:0,s=a):(s=Math.floor(Math.log(e)/Math.LN2),e*(f=Math.pow(2,-s))<1&&(s--,f*=2),(e+=s+c>=1?l/f:l*Math.pow(2,1-c))*f>=2&&(s++,f/=2),s+c>=a?(u=0,s=a):s+c>=1?(u=(e*f-1)*Math.pow(2,i),s+=c):(u=e*Math.pow(2,c-1)*Math.pow(2,i),s=0));i>=8;t[r+p]=255&u,p+=d,u/=256,i-=8);for(s=s<<i|u,h+=i;h>0;t[r+p]=255&s,p+=d,s/=256,h-=8);t[r+p-d]|=128*g}}},e={};function r(n){var i=e[n];if(void 0!==i)return i.exports;var o=e[n]={exports:{}};return t[n](o,o.exports,r),o.exports}return r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r(899)})()));
//# sourceMappingURL=xdr.js.map

/***/ }),

/***/ "./node_modules/lodash/_DataView.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_DataView.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var DataView = getNative(root, 'DataView');

module.exports = DataView;


/***/ }),

/***/ "./node_modules/lodash/_Hash.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_Hash.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hashClear = __webpack_require__(/*! ./_hashClear */ "./node_modules/lodash/_hashClear.js"),
    hashDelete = __webpack_require__(/*! ./_hashDelete */ "./node_modules/lodash/_hashDelete.js"),
    hashGet = __webpack_require__(/*! ./_hashGet */ "./node_modules/lodash/_hashGet.js"),
    hashHas = __webpack_require__(/*! ./_hashHas */ "./node_modules/lodash/_hashHas.js"),
    hashSet = __webpack_require__(/*! ./_hashSet */ "./node_modules/lodash/_hashSet.js");

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

module.exports = Hash;


/***/ }),

/***/ "./node_modules/lodash/_ListCache.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_ListCache.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var listCacheClear = __webpack_require__(/*! ./_listCacheClear */ "./node_modules/lodash/_listCacheClear.js"),
    listCacheDelete = __webpack_require__(/*! ./_listCacheDelete */ "./node_modules/lodash/_listCacheDelete.js"),
    listCacheGet = __webpack_require__(/*! ./_listCacheGet */ "./node_modules/lodash/_listCacheGet.js"),
    listCacheHas = __webpack_require__(/*! ./_listCacheHas */ "./node_modules/lodash/_listCacheHas.js"),
    listCacheSet = __webpack_require__(/*! ./_listCacheSet */ "./node_modules/lodash/_listCacheSet.js");

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

module.exports = ListCache;


/***/ }),

/***/ "./node_modules/lodash/_Map.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Map.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

module.exports = Map;


/***/ }),

/***/ "./node_modules/lodash/_MapCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_MapCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var mapCacheClear = __webpack_require__(/*! ./_mapCacheClear */ "./node_modules/lodash/_mapCacheClear.js"),
    mapCacheDelete = __webpack_require__(/*! ./_mapCacheDelete */ "./node_modules/lodash/_mapCacheDelete.js"),
    mapCacheGet = __webpack_require__(/*! ./_mapCacheGet */ "./node_modules/lodash/_mapCacheGet.js"),
    mapCacheHas = __webpack_require__(/*! ./_mapCacheHas */ "./node_modules/lodash/_mapCacheHas.js"),
    mapCacheSet = __webpack_require__(/*! ./_mapCacheSet */ "./node_modules/lodash/_mapCacheSet.js");

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

module.exports = MapCache;


/***/ }),

/***/ "./node_modules/lodash/_Promise.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_Promise.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Promise = getNative(root, 'Promise');

module.exports = Promise;


/***/ }),

/***/ "./node_modules/lodash/_Set.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/_Set.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var Set = getNative(root, 'Set');

module.exports = Set;


/***/ }),

/***/ "./node_modules/lodash/_SetCache.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_SetCache.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js"),
    setCacheAdd = __webpack_require__(/*! ./_setCacheAdd */ "./node_modules/lodash/_setCacheAdd.js"),
    setCacheHas = __webpack_require__(/*! ./_setCacheHas */ "./node_modules/lodash/_setCacheHas.js");

/**
 *
 * Creates an array cache object to store unique values.
 *
 * @private
 * @constructor
 * @param {Array} [values] The values to cache.
 */
function SetCache(values) {
  var index = -1,
      length = values == null ? 0 : values.length;

  this.__data__ = new MapCache;
  while (++index < length) {
    this.add(values[index]);
  }
}

// Add methods to `SetCache`.
SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
SetCache.prototype.has = setCacheHas;

module.exports = SetCache;


/***/ }),

/***/ "./node_modules/lodash/_Stack.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_Stack.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    stackClear = __webpack_require__(/*! ./_stackClear */ "./node_modules/lodash/_stackClear.js"),
    stackDelete = __webpack_require__(/*! ./_stackDelete */ "./node_modules/lodash/_stackDelete.js"),
    stackGet = __webpack_require__(/*! ./_stackGet */ "./node_modules/lodash/_stackGet.js"),
    stackHas = __webpack_require__(/*! ./_stackHas */ "./node_modules/lodash/_stackHas.js"),
    stackSet = __webpack_require__(/*! ./_stackSet */ "./node_modules/lodash/_stackSet.js");

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

module.exports = Stack;


/***/ }),

/***/ "./node_modules/lodash/_Symbol.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_Symbol.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Symbol = root.Symbol;

module.exports = Symbol;


/***/ }),

/***/ "./node_modules/lodash/_Uint8Array.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_Uint8Array.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

module.exports = Uint8Array;


/***/ }),

/***/ "./node_modules/lodash/_WeakMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_WeakMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js"),
    root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references that are verified to be native. */
var WeakMap = getNative(root, 'WeakMap');

module.exports = WeakMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayEach.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayEach.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.forEach` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns `array`.
 */
function arrayEach(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (iteratee(array[index], index, array) === false) {
      break;
    }
  }
  return array;
}

module.exports = arrayEach;


/***/ }),

/***/ "./node_modules/lodash/_arrayFilter.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_arrayFilter.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.filter` for arrays without support for
 * iteratee shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {Array} Returns the new filtered array.
 */
function arrayFilter(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = [];

  while (++index < length) {
    var value = array[index];
    if (predicate(value, index, array)) {
      result[resIndex++] = value;
    }
  }
  return result;
}

module.exports = arrayFilter;


/***/ }),

/***/ "./node_modules/lodash/_arrayLikeKeys.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_arrayLikeKeys.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTimes = __webpack_require__(/*! ./_baseTimes */ "./node_modules/lodash/_baseTimes.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = arrayLikeKeys;


/***/ }),

/***/ "./node_modules/lodash/_arrayMap.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_arrayMap.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function arrayMap(array, iteratee) {
  var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length);

  while (++index < length) {
    result[index] = iteratee(array[index], index, array);
  }
  return result;
}

module.exports = arrayMap;


/***/ }),

/***/ "./node_modules/lodash/_arrayPush.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arrayPush.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Appends the elements of `values` to `array`.
 *
 * @private
 * @param {Array} array The array to modify.
 * @param {Array} values The values to append.
 * @returns {Array} Returns `array`.
 */
function arrayPush(array, values) {
  var index = -1,
      length = values.length,
      offset = array.length;

  while (++index < length) {
    array[offset + index] = values[index];
  }
  return array;
}

module.exports = arrayPush;


/***/ }),

/***/ "./node_modules/lodash/_arraySome.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_arraySome.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.some` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array == null ? 0 : array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;


/***/ }),

/***/ "./node_modules/lodash/_asciiSize.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_asciiSize.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js");

/**
 * Gets the size of an ASCII `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
var asciiSize = baseProperty('length');

module.exports = asciiSize;


/***/ }),

/***/ "./node_modules/lodash/_asciiToArray.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_asciiToArray.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * Converts an ASCII `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function asciiToArray(string) {
  return string.split('');
}

module.exports = asciiToArray;


/***/ }),

/***/ "./node_modules/lodash/_assignValue.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_assignValue.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

module.exports = assignValue;


/***/ }),

/***/ "./node_modules/lodash/_assocIndexOf.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_assocIndexOf.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js");

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

module.exports = assocIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseAssign.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseAssign.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.assign` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return object && copyObject(source, keys(source), object);
}

module.exports = baseAssign;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseAssignIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * The base implementation of `_.assignIn` without support for multiple sources
 * or `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssignIn(object, source) {
  return object && copyObject(source, keysIn(source), object);
}

module.exports = baseAssignIn;


/***/ }),

/***/ "./node_modules/lodash/_baseAssignValue.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseAssignValue.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var defineProperty = __webpack_require__(/*! ./_defineProperty */ "./node_modules/lodash/_defineProperty.js");

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

module.exports = baseAssignValue;


/***/ }),

/***/ "./node_modules/lodash/_baseClone.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseClone.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    arrayEach = __webpack_require__(/*! ./_arrayEach */ "./node_modules/lodash/_arrayEach.js"),
    assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssign = __webpack_require__(/*! ./_baseAssign */ "./node_modules/lodash/_baseAssign.js"),
    baseAssignIn = __webpack_require__(/*! ./_baseAssignIn */ "./node_modules/lodash/_baseAssignIn.js"),
    cloneBuffer = __webpack_require__(/*! ./_cloneBuffer */ "./node_modules/lodash/_cloneBuffer.js"),
    copyArray = __webpack_require__(/*! ./_copyArray */ "./node_modules/lodash/_copyArray.js"),
    copySymbols = __webpack_require__(/*! ./_copySymbols */ "./node_modules/lodash/_copySymbols.js"),
    copySymbolsIn = __webpack_require__(/*! ./_copySymbolsIn */ "./node_modules/lodash/_copySymbolsIn.js"),
    getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js"),
    getAllKeysIn = __webpack_require__(/*! ./_getAllKeysIn */ "./node_modules/lodash/_getAllKeysIn.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    initCloneArray = __webpack_require__(/*! ./_initCloneArray */ "./node_modules/lodash/_initCloneArray.js"),
    initCloneByTag = __webpack_require__(/*! ./_initCloneByTag */ "./node_modules/lodash/_initCloneByTag.js"),
    initCloneObject = __webpack_require__(/*! ./_initCloneObject */ "./node_modules/lodash/_initCloneObject.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isMap = __webpack_require__(/*! ./isMap */ "./node_modules/lodash/isMap.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSet = __webpack_require__(/*! ./isSet */ "./node_modules/lodash/isSet.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/** Used to compose bitmasks for cloning. */
var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values supported by `_.clone`. */
var cloneableTags = {};
cloneableTags[argsTag] = cloneableTags[arrayTag] =
cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
cloneableTags[boolTag] = cloneableTags[dateTag] =
cloneableTags[float32Tag] = cloneableTags[float64Tag] =
cloneableTags[int8Tag] = cloneableTags[int16Tag] =
cloneableTags[int32Tag] = cloneableTags[mapTag] =
cloneableTags[numberTag] = cloneableTags[objectTag] =
cloneableTags[regexpTag] = cloneableTags[setTag] =
cloneableTags[stringTag] = cloneableTags[symbolTag] =
cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
cloneableTags[errorTag] = cloneableTags[funcTag] =
cloneableTags[weakMapTag] = false;

/**
 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
 * traversed objects.
 *
 * @private
 * @param {*} value The value to clone.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Deep clone
 *  2 - Flatten inherited properties
 *  4 - Clone symbols
 * @param {Function} [customizer] The function to customize cloning.
 * @param {string} [key] The key of `value`.
 * @param {Object} [object] The parent object of `value`.
 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
 * @returns {*} Returns the cloned value.
 */
function baseClone(value, bitmask, customizer, key, object, stack) {
  var result,
      isDeep = bitmask & CLONE_DEEP_FLAG,
      isFlat = bitmask & CLONE_FLAT_FLAG,
      isFull = bitmask & CLONE_SYMBOLS_FLAG;

  if (customizer) {
    result = object ? customizer(value, key, object, stack) : customizer(value);
  }
  if (result !== undefined) {
    return result;
  }
  if (!isObject(value)) {
    return value;
  }
  var isArr = isArray(value);
  if (isArr) {
    result = initCloneArray(value);
    if (!isDeep) {
      return copyArray(value, result);
    }
  } else {
    var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag;

    if (isBuffer(value)) {
      return cloneBuffer(value, isDeep);
    }
    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
      result = (isFlat || isFunc) ? {} : initCloneObject(value);
      if (!isDeep) {
        return isFlat
          ? copySymbolsIn(value, baseAssignIn(result, value))
          : copySymbols(value, baseAssign(result, value));
      }
    } else {
      if (!cloneableTags[tag]) {
        return object ? value : {};
      }
      result = initCloneByTag(value, tag, isDeep);
    }
  }
  // Check for circular references and return its corresponding clone.
  stack || (stack = new Stack);
  var stacked = stack.get(value);
  if (stacked) {
    return stacked;
  }
  stack.set(value, result);

  if (isSet(value)) {
    value.forEach(function(subValue) {
      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
    });
  } else if (isMap(value)) {
    value.forEach(function(subValue, key) {
      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
    });
  }

  var keysFunc = isFull
    ? (isFlat ? getAllKeysIn : getAllKeys)
    : (isFlat ? keysIn : keys);

  var props = isArr ? undefined : keysFunc(value);
  arrayEach(props || value, function(subValue, key) {
    if (props) {
      key = subValue;
      subValue = value[key];
    }
    // Recursively populate clone (susceptible to call stack limits).
    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
  });
  return result;
}

module.exports = baseClone;


/***/ }),

/***/ "./node_modules/lodash/_baseCreate.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseCreate.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

module.exports = baseCreate;


/***/ }),

/***/ "./node_modules/lodash/_baseEach.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseEach.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseForOwn = __webpack_require__(/*! ./_baseForOwn */ "./node_modules/lodash/_baseForOwn.js"),
    createBaseEach = __webpack_require__(/*! ./_createBaseEach */ "./node_modules/lodash/_createBaseEach.js");

/**
 * The base implementation of `_.forEach` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;


/***/ }),

/***/ "./node_modules/lodash/_baseFindIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_baseFindIndex.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.findIndex` and `_.findLastIndex` without
 * support for iteratee shorthands.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {Function} predicate The function invoked per iteration.
 * @param {number} fromIndex The index to search from.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseFindIndex(array, predicate, fromIndex, fromRight) {
  var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1);

  while ((fromRight ? index-- : ++index < length)) {
    if (predicate(array[index], index, array)) {
      return index;
    }
  }
  return -1;
}

module.exports = baseFindIndex;


/***/ }),

/***/ "./node_modules/lodash/_baseFor.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseFor.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createBaseFor = __webpack_require__(/*! ./_createBaseFor */ "./node_modules/lodash/_createBaseFor.js");

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;


/***/ }),

/***/ "./node_modules/lodash/_baseForOwn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseForOwn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFor = __webpack_require__(/*! ./_baseFor */ "./node_modules/lodash/_baseFor.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * The base implementation of `_.forOwn` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return object && baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;


/***/ }),

/***/ "./node_modules/lodash/_baseGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * The base implementation of `_.get` without support for default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path) {
  path = castPath(path, object);

  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[toKey(path[index++])];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;


/***/ }),

/***/ "./node_modules/lodash/_baseGetAllKeys.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_baseGetAllKeys.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @param {Function} symbolsFunc The function to get the symbols of `object`.
 * @returns {Array} Returns the array of property names and symbols.
 */
function baseGetAllKeys(object, keysFunc, symbolsFunc) {
  var result = keysFunc(object);
  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
}

module.exports = baseGetAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseGetTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseGetTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    getRawTag = __webpack_require__(/*! ./_getRawTag */ "./node_modules/lodash/_getRawTag.js"),
    objectToString = __webpack_require__(/*! ./_objectToString */ "./node_modules/lodash/_objectToString.js");

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

module.exports = baseGetTag;


/***/ }),

/***/ "./node_modules/lodash/_baseHasIn.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseHasIn.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.hasIn` without support for deep paths.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {Array|string} key The key to check.
 * @returns {boolean} Returns `true` if `key` exists, else `false`.
 */
function baseHasIn(object, key) {
  return object != null && key in Object(object);
}

module.exports = baseHasIn;


/***/ }),

/***/ "./node_modules/lodash/_baseIndexOf.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIndexOf.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseFindIndex = __webpack_require__(/*! ./_baseFindIndex */ "./node_modules/lodash/_baseFindIndex.js"),
    baseIsNaN = __webpack_require__(/*! ./_baseIsNaN */ "./node_modules/lodash/_baseIsNaN.js"),
    strictIndexOf = __webpack_require__(/*! ./_strictIndexOf */ "./node_modules/lodash/_strictIndexOf.js");

/**
 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function baseIndexOf(array, value, fromIndex) {
  return value === value
    ? strictIndexOf(array, value, fromIndex)
    : baseFindIndex(array, baseIsNaN, fromIndex);
}

module.exports = baseIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_baseIsArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsArguments.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag;
}

module.exports = baseIsArguments;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqual.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsEqual.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqualDeep = __webpack_require__(/*! ./_baseIsEqualDeep */ "./node_modules/lodash/_baseIsEqualDeep.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/**
 * The base implementation of `_.isEqual` which supports partial comparisons
 * and tracks traversed objects.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {boolean} bitmask The bitmask flags.
 *  1 - Unordered comparison
 *  2 - Partial comparison
 * @param {Function} [customizer] The function to customize comparisons.
 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, bitmask, customizer, stack) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
}

module.exports = baseIsEqual;


/***/ }),

/***/ "./node_modules/lodash/_baseIsEqualDeep.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_baseIsEqualDeep.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    equalByTag = __webpack_require__(/*! ./_equalByTag */ "./node_modules/lodash/_equalByTag.js"),
    equalObjects = __webpack_require__(/*! ./_equalObjects */ "./node_modules/lodash/_equalObjects.js"),
    getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isBuffer = __webpack_require__(/*! ./isBuffer */ "./node_modules/lodash/isBuffer.js"),
    isTypedArray = __webpack_require__(/*! ./isTypedArray */ "./node_modules/lodash/isTypedArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = objIsArr ? arrayTag : getTag(object),
      othTag = othIsArr ? arrayTag : getTag(other);

  objTag = objTag == argsTag ? objectTag : objTag;
  othTag = othTag == argsTag ? objectTag : othTag;

  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && isBuffer(object)) {
    if (!isBuffer(other)) {
      return false;
    }
    objIsArr = true;
    objIsObj = false;
  }
  if (isSameTag && !objIsObj) {
    stack || (stack = new Stack);
    return (objIsArr || isTypedArray(object))
      ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
      : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
  }
  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other;

      stack || (stack = new Stack);
      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
    }
  }
  if (!isSameTag) {
    return false;
  }
  stack || (stack = new Stack);
  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
}

module.exports = baseIsEqualDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMap.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsMap.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]';

/**
 * The base implementation of `_.isMap` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 */
function baseIsMap(value) {
  return isObjectLike(value) && getTag(value) == mapTag;
}

module.exports = baseIsMap;


/***/ }),

/***/ "./node_modules/lodash/_baseIsMatch.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseIsMatch.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Stack = __webpack_require__(/*! ./_Stack */ "./node_modules/lodash/_Stack.js"),
    baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.isMatch` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Object} source The object of property values to match.
 * @param {Array} matchData The property names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparisons.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, source, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = Object(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var stack = new Stack;
      if (customizer) {
        var result = customizer(objValue, srcValue, key, object, source, stack);
      }
      if (!(result === undefined
            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
            : result
          )) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNaN.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsNaN.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.isNaN` without support for number objects.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
 */
function baseIsNaN(value) {
  return value !== value;
}

module.exports = baseIsNaN;


/***/ }),

/***/ "./node_modules/lodash/_baseIsNative.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIsNative.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isMasked = __webpack_require__(/*! ./_isMasked */ "./node_modules/lodash/_isMasked.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

module.exports = baseIsNative;


/***/ }),

/***/ "./node_modules/lodash/_baseIsSet.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseIsSet.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getTag = __webpack_require__(/*! ./_getTag */ "./node_modules/lodash/_getTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var setTag = '[object Set]';

/**
 * The base implementation of `_.isSet` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 */
function baseIsSet(value) {
  return isObjectLike(value) && getTag(value) == setTag;
}

module.exports = baseIsSet;


/***/ }),

/***/ "./node_modules/lodash/_baseIsTypedArray.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_baseIsTypedArray.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

module.exports = baseIsTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_baseIteratee.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseIteratee.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseMatches = __webpack_require__(/*! ./_baseMatches */ "./node_modules/lodash/_baseMatches.js"),
    baseMatchesProperty = __webpack_require__(/*! ./_baseMatchesProperty */ "./node_modules/lodash/_baseMatchesProperty.js"),
    identity = __webpack_require__(/*! ./identity */ "./node_modules/lodash/identity.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    property = __webpack_require__(/*! ./property */ "./node_modules/lodash/property.js");

/**
 * The base implementation of `_.iteratee`.
 *
 * @private
 * @param {*} [value=_.identity] The value to convert to an iteratee.
 * @returns {Function} Returns the iteratee.
 */
function baseIteratee(value) {
  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
  if (typeof value == 'function') {
    return value;
  }
  if (value == null) {
    return identity;
  }
  if (typeof value == 'object') {
    return isArray(value)
      ? baseMatchesProperty(value[0], value[1])
      : baseMatches(value);
  }
  return property(value);
}

module.exports = baseIteratee;


/***/ }),

/***/ "./node_modules/lodash/_baseKeys.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseKeys.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeys = __webpack_require__(/*! ./_nativeKeys */ "./node_modules/lodash/_nativeKeys.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeys(object) {
  if (!isPrototype(object)) {
    return nativeKeys(object);
  }
  var result = [];
  for (var key in Object(object)) {
    if (hasOwnProperty.call(object, key) && key != 'constructor') {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeys;


/***/ }),

/***/ "./node_modules/lodash/_baseKeysIn.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseKeysIn.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js"),
    nativeKeysIn = __webpack_require__(/*! ./_nativeKeysIn */ "./node_modules/lodash/_nativeKeysIn.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = baseKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_baseMap.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_baseMap.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseEach = __webpack_require__(/*! ./_baseEach */ "./node_modules/lodash/_baseEach.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * The base implementation of `_.map` without support for iteratee shorthands.
 *
 * @private
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */
function baseMap(collection, iteratee) {
  var index = -1,
      result = isArrayLike(collection) ? Array(collection.length) : [];

  baseEach(collection, function(value, key, collection) {
    result[++index] = iteratee(value, key, collection);
  });
  return result;
}

module.exports = baseMap;


/***/ }),

/***/ "./node_modules/lodash/_baseMatches.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_baseMatches.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMatch = __webpack_require__(/*! ./_baseIsMatch */ "./node_modules/lodash/_baseIsMatch.js"),
    getMatchData = __webpack_require__(/*! ./_getMatchData */ "./node_modules/lodash/_getMatchData.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js");

/**
 * The base implementation of `_.matches` which doesn't clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
  }
  return function(object) {
    return object === source || baseIsMatch(object, source, matchData);
  };
}

module.exports = baseMatches;


/***/ }),

/***/ "./node_modules/lodash/_baseMatchesProperty.js":
/*!*****************************************************!*\
  !*** ./node_modules/lodash/_baseMatchesProperty.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsEqual = __webpack_require__(/*! ./_baseIsEqual */ "./node_modules/lodash/_baseIsEqual.js"),
    get = __webpack_require__(/*! ./get */ "./node_modules/lodash/get.js"),
    hasIn = __webpack_require__(/*! ./hasIn */ "./node_modules/lodash/hasIn.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    matchesStrictComparable = __webpack_require__(/*! ./_matchesStrictComparable */ "./node_modules/lodash/_matchesStrictComparable.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function baseMatchesProperty(path, srcValue) {
  if (isKey(path) && isStrictComparable(srcValue)) {
    return matchesStrictComparable(toKey(path), srcValue);
  }
  return function(object) {
    var objValue = get(object, path);
    return (objValue === undefined && objValue === srcValue)
      ? hasIn(object, path)
      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
  };
}

module.exports = baseMatchesProperty;


/***/ }),

/***/ "./node_modules/lodash/_baseProperty.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseProperty.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;


/***/ }),

/***/ "./node_modules/lodash/_basePropertyDeep.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_basePropertyDeep.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 */
function basePropertyDeep(path) {
  return function(object) {
    return baseGet(object, path);
  };
}

module.exports = basePropertyDeep;


/***/ }),

/***/ "./node_modules/lodash/_baseRepeat.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_baseRepeat.js ***!
  \********************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeFloor = Math.floor;

/**
 * The base implementation of `_.repeat` which doesn't coerce arguments.
 *
 * @private
 * @param {string} string The string to repeat.
 * @param {number} n The number of times to repeat the string.
 * @returns {string} Returns the repeated string.
 */
function baseRepeat(string, n) {
  var result = '';
  if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
    return result;
  }
  // Leverage the exponentiation by squaring algorithm for a faster repeat.
  // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
  do {
    if (n % 2) {
      result += string;
    }
    n = nativeFloor(n / 2);
    if (n) {
      string += string;
    }
  } while (n);

  return result;
}

module.exports = baseRepeat;


/***/ }),

/***/ "./node_modules/lodash/_baseSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseSlice.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = end > length ? length : end;
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;


/***/ }),

/***/ "./node_modules/lodash/_baseTimes.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseTimes.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

module.exports = baseTimes;


/***/ }),

/***/ "./node_modules/lodash/_baseToString.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_baseToString.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolToString = symbolProto ? symbolProto.toString : undefined;

/**
 * The base implementation of `_.toString` which doesn't convert nullish
 * values to empty strings.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  // Exit early for strings to avoid a performance hit in some environments.
  if (typeof value == 'string') {
    return value;
  }
  if (isArray(value)) {
    // Recursively convert values (susceptible to call stack limits).
    return arrayMap(value, baseToString) + '';
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : '';
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = baseToString;


/***/ }),

/***/ "./node_modules/lodash/_baseTrim.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_baseTrim.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");

/** Used to match leading whitespace. */
var reTrimStart = /^\s+/;

/**
 * The base implementation of `_.trim`.
 *
 * @private
 * @param {string} string The string to trim.
 * @returns {string} Returns the trimmed string.
 */
function baseTrim(string) {
  return string
    ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
    : string;
}

module.exports = baseTrim;


/***/ }),

/***/ "./node_modules/lodash/_baseUnary.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_baseUnary.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

module.exports = baseUnary;


/***/ }),

/***/ "./node_modules/lodash/_cacheHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_cacheHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a `cache` value for `key` exists.
 *
 * @private
 * @param {Object} cache The cache to query.
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function cacheHas(cache, key) {
  return cache.has(key);
}

module.exports = cacheHas;


/***/ }),

/***/ "./node_modules/lodash/_castPath.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_castPath.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    stringToPath = __webpack_require__(/*! ./_stringToPath */ "./node_modules/lodash/_stringToPath.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Casts `value` to a path array if it's not one.
 *
 * @private
 * @param {*} value The value to inspect.
 * @param {Object} [object] The object to query keys on.
 * @returns {Array} Returns the cast property path array.
 */
function castPath(value, object) {
  if (isArray(value)) {
    return value;
  }
  return isKey(value, object) ? [value] : stringToPath(toString(value));
}

module.exports = castPath;


/***/ }),

/***/ "./node_modules/lodash/_castSlice.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_castSlice.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseSlice = __webpack_require__(/*! ./_baseSlice */ "./node_modules/lodash/_baseSlice.js");

/**
 * Casts `array` to a slice if it's needed.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {number} start The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the cast slice.
 */
function castSlice(array, start, end) {
  var length = array.length;
  end = end === undefined ? length : end;
  return (!start && end >= length) ? array : baseSlice(array, start, end);
}

module.exports = castSlice;


/***/ }),

/***/ "./node_modules/lodash/_charsEndIndex.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_charsEndIndex.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIndexOf = __webpack_require__(/*! ./_baseIndexOf */ "./node_modules/lodash/_baseIndexOf.js");

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
 * that is not found in the character symbols.
 *
 * @private
 * @param {Array} strSymbols The string symbols to inspect.
 * @param {Array} chrSymbols The character symbols to find.
 * @returns {number} Returns the index of the last unmatched string symbol.
 */
function charsEndIndex(strSymbols, chrSymbols) {
  var index = strSymbols.length;

  while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
  return index;
}

module.exports = charsEndIndex;


/***/ }),

/***/ "./node_modules/lodash/_cloneArrayBuffer.js":
/*!**************************************************!*\
  !*** ./node_modules/lodash/_cloneArrayBuffer.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js");

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

module.exports = cloneArrayBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneBuffer.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneBuffer.js ***!
  \*********************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined,
    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

module.exports = cloneBuffer;


/***/ }),

/***/ "./node_modules/lodash/_cloneDataView.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_cloneDataView.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `dataView`.
 *
 * @private
 * @param {Object} dataView The data view to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned data view.
 */
function cloneDataView(dataView, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
}

module.exports = cloneDataView;


/***/ }),

/***/ "./node_modules/lodash/_cloneRegExp.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneRegExp.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to match `RegExp` flags from their coerced string values. */
var reFlags = /\w*$/;

/**
 * Creates a clone of `regexp`.
 *
 * @private
 * @param {Object} regexp The regexp to clone.
 * @returns {Object} Returns the cloned regexp.
 */
function cloneRegExp(regexp) {
  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
  result.lastIndex = regexp.lastIndex;
  return result;
}

module.exports = cloneRegExp;


/***/ }),

/***/ "./node_modules/lodash/_cloneSymbol.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_cloneSymbol.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * Creates a clone of the `symbol` object.
 *
 * @private
 * @param {Object} symbol The symbol object to clone.
 * @returns {Object} Returns the cloned symbol object.
 */
function cloneSymbol(symbol) {
  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
}

module.exports = cloneSymbol;


/***/ }),

/***/ "./node_modules/lodash/_cloneTypedArray.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_cloneTypedArray.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js");

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

module.exports = cloneTypedArray;


/***/ }),

/***/ "./node_modules/lodash/_copyArray.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_copyArray.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

module.exports = copyArray;


/***/ }),

/***/ "./node_modules/lodash/_copyObject.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_copyObject.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assignValue = __webpack_require__(/*! ./_assignValue */ "./node_modules/lodash/_assignValue.js"),
    baseAssignValue = __webpack_require__(/*! ./_baseAssignValue */ "./node_modules/lodash/_baseAssignValue.js");

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

module.exports = copyObject;


/***/ }),

/***/ "./node_modules/lodash/_copySymbols.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_copySymbols.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js");

/**
 * Copies own symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbols(source, object) {
  return copyObject(source, getSymbols(source), object);
}

module.exports = copySymbols;


/***/ }),

/***/ "./node_modules/lodash/_copySymbolsIn.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_copySymbolsIn.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var copyObject = __webpack_require__(/*! ./_copyObject */ "./node_modules/lodash/_copyObject.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js");

/**
 * Copies own and inherited symbols of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy symbols from.
 * @param {Object} [object={}] The object to copy symbols to.
 * @returns {Object} Returns `object`.
 */
function copySymbolsIn(source, object) {
  return copyObject(source, getSymbolsIn(source), object);
}

module.exports = copySymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_coreJsData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_coreJsData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

module.exports = coreJsData;


/***/ }),

/***/ "./node_modules/lodash/_createBaseEach.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_createBaseEach.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    if (collection == null) {
      return collection;
    }
    if (!isArrayLike(collection)) {
      return eachFunc(collection, iteratee);
    }
    var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;


/***/ }),

/***/ "./node_modules/lodash/_createBaseFor.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createBaseFor.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;


/***/ }),

/***/ "./node_modules/lodash/_createPadding.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_createPadding.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseRepeat = __webpack_require__(/*! ./_baseRepeat */ "./node_modules/lodash/_baseRepeat.js"),
    baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js"),
    castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    stringSize = __webpack_require__(/*! ./_stringSize */ "./node_modules/lodash/_stringSize.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeCeil = Math.ceil;

/**
 * Creates the padding for `string` based on `length`. The `chars` string
 * is truncated if the number of characters exceeds `length`.
 *
 * @private
 * @param {number} length The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padding for `string`.
 */
function createPadding(length, chars) {
  chars = chars === undefined ? ' ' : baseToString(chars);

  var charsLength = chars.length;
  if (charsLength < 2) {
    return charsLength ? baseRepeat(chars, length) : chars;
  }
  var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
  return hasUnicode(chars)
    ? castSlice(stringToArray(result), 0, length).join('')
    : result.slice(0, length);
}

module.exports = createPadding;


/***/ }),

/***/ "./node_modules/lodash/_defineProperty.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_defineProperty.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

module.exports = defineProperty;


/***/ }),

/***/ "./node_modules/lodash/_equalArrays.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_equalArrays.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var SetCache = __webpack_require__(/*! ./_SetCache */ "./node_modules/lodash/_SetCache.js"),
    arraySome = __webpack_require__(/*! ./_arraySome */ "./node_modules/lodash/_arraySome.js"),
    cacheHas = __webpack_require__(/*! ./_cacheHas */ "./node_modules/lodash/_cacheHas.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `array` and `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
    return false;
  }
  // Check that cyclic values are equal.
  var arrStacked = stack.get(array);
  var othStacked = stack.get(other);
  if (arrStacked && othStacked) {
    return arrStacked == other && othStacked == array;
  }
  var index = -1,
      result = true,
      seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

  stack.set(array, other);
  stack.set(other, array);

  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, arrValue, index, other, array, stack)
        : customizer(arrValue, othValue, index, array, other, stack);
    }
    if (compared !== undefined) {
      if (compared) {
        continue;
      }
      result = false;
      break;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (seen) {
      if (!arraySome(other, function(othValue, othIndex) {
            if (!cacheHas(seen, othIndex) &&
                (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
        result = false;
        break;
      }
    } else if (!(
          arrValue === othValue ||
            equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )) {
      result = false;
      break;
    }
  }
  stack['delete'](array);
  stack['delete'](other);
  return result;
}

module.exports = equalArrays;


/***/ }),

/***/ "./node_modules/lodash/_equalByTag.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_equalByTag.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js"),
    Uint8Array = __webpack_require__(/*! ./_Uint8Array */ "./node_modules/lodash/_Uint8Array.js"),
    eq = __webpack_require__(/*! ./eq */ "./node_modules/lodash/eq.js"),
    equalArrays = __webpack_require__(/*! ./_equalArrays */ "./node_modules/lodash/_equalArrays.js"),
    mapToArray = __webpack_require__(/*! ./_mapToArray */ "./node_modules/lodash/_mapToArray.js"),
    setToArray = __webpack_require__(/*! ./_setToArray */ "./node_modules/lodash/_setToArray.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2;

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]';

/** Used to convert symbols to primitives and strings. */
var symbolProto = Symbol ? Symbol.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
  switch (tag) {
    case dataViewTag:
      if ((object.byteLength != other.byteLength) ||
          (object.byteOffset != other.byteOffset)) {
        return false;
      }
      object = object.buffer;
      other = other.buffer;

    case arrayBufferTag:
      if ((object.byteLength != other.byteLength) ||
          !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
        return false;
      }
      return true;

    case boolTag:
    case dateTag:
    case numberTag:
      // Coerce booleans to `1` or `0` and dates to milliseconds.
      // Invalid dates are coerced to `NaN`.
      return eq(+object, +other);

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings, primitives and objects,
      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
      // for more details.
      return object == (other + '');

    case mapTag:
      var convert = mapToArray;

    case setTag:
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
      convert || (convert = setToArray);

      if (object.size != other.size && !isPartial) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked) {
        return stacked == other;
      }
      bitmask |= COMPARE_UNORDERED_FLAG;

      // Recursively compare objects (susceptible to call stack limits).
      stack.set(object, other);
      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
      stack['delete'](object);
      return result;

    case symbolTag:
      if (symbolValueOf) {
        return symbolValueOf.call(object) == symbolValueOf.call(other);
      }
  }
  return false;
}

module.exports = equalByTag;


/***/ }),

/***/ "./node_modules/lodash/_equalObjects.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_equalObjects.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getAllKeys = __webpack_require__(/*! ./_getAllKeys */ "./node_modules/lodash/_getAllKeys.js");

/** Used to compose bitmasks for value comparisons. */
var COMPARE_PARTIAL_FLAG = 1;

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
 * @param {Function} customizer The function to customize comparisons.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Object} stack Tracks traversed `object` and `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
      objProps = getAllKeys(object),
      objLength = objProps.length,
      othProps = getAllKeys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isPartial) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  // Check that cyclic values are equal.
  var objStacked = stack.get(object);
  var othStacked = stack.get(other);
  if (objStacked && othStacked) {
    return objStacked == other && othStacked == object;
  }
  var result = true;
  stack.set(object, other);
  stack.set(other, object);

  var skipCtor = isPartial;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key];

    if (customizer) {
      var compared = isPartial
        ? customizer(othValue, objValue, key, other, object, stack)
        : customizer(objValue, othValue, key, object, other, stack);
    }
    // Recursively compare objects (susceptible to call stack limits).
    if (!(compared === undefined
          ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
          : compared
        )) {
      result = false;
      break;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (result && !skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      result = false;
    }
  }
  stack['delete'](object);
  stack['delete'](other);
  return result;
}

module.exports = equalObjects;


/***/ }),

/***/ "./node_modules/lodash/_freeGlobal.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_freeGlobal.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof __webpack_require__.g == 'object' && __webpack_require__.g && __webpack_require__.g.Object === Object && __webpack_require__.g;

module.exports = freeGlobal;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getAllKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Creates an array of own enumerable property names and symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeys(object) {
  return baseGetAllKeys(object, keys, getSymbols);
}

module.exports = getAllKeys;


/***/ }),

/***/ "./node_modules/lodash/_getAllKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getAllKeysIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetAllKeys = __webpack_require__(/*! ./_baseGetAllKeys */ "./node_modules/lodash/_baseGetAllKeys.js"),
    getSymbolsIn = __webpack_require__(/*! ./_getSymbolsIn */ "./node_modules/lodash/_getSymbolsIn.js"),
    keysIn = __webpack_require__(/*! ./keysIn */ "./node_modules/lodash/keysIn.js");

/**
 * Creates an array of own and inherited enumerable property names and
 * symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names and symbols.
 */
function getAllKeysIn(object) {
  return baseGetAllKeys(object, keysIn, getSymbolsIn);
}

module.exports = getAllKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_getMapData.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getMapData.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isKeyable = __webpack_require__(/*! ./_isKeyable */ "./node_modules/lodash/_isKeyable.js");

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

module.exports = getMapData;


/***/ }),

/***/ "./node_modules/lodash/_getMatchData.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getMatchData.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isStrictComparable = __webpack_require__(/*! ./_isStrictComparable */ "./node_modules/lodash/_isStrictComparable.js"),
    keys = __webpack_require__(/*! ./keys */ "./node_modules/lodash/keys.js");

/**
 * Gets the property names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = keys(object),
      length = result.length;

  while (length--) {
    var key = result[length],
        value = object[key];

    result[length] = [key, value, isStrictComparable(value)];
  }
  return result;
}

module.exports = getMatchData;


/***/ }),

/***/ "./node_modules/lodash/_getNative.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getNative.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsNative = __webpack_require__(/*! ./_baseIsNative */ "./node_modules/lodash/_baseIsNative.js"),
    getValue = __webpack_require__(/*! ./_getValue */ "./node_modules/lodash/_getValue.js");

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

module.exports = getNative;


/***/ }),

/***/ "./node_modules/lodash/_getPrototype.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getPrototype.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

module.exports = getPrototype;


/***/ }),

/***/ "./node_modules/lodash/_getRawTag.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_getRawTag.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Symbol = __webpack_require__(/*! ./_Symbol */ "./node_modules/lodash/_Symbol.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/** Built-in value references. */
var symToStringTag = Symbol ? Symbol.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag),
      tag = value[symToStringTag];

  try {
    value[symToStringTag] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}

module.exports = getRawTag;


/***/ }),

/***/ "./node_modules/lodash/_getSymbols.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_getSymbols.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayFilter = __webpack_require__(/*! ./_arrayFilter */ "./node_modules/lodash/_arrayFilter.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
  if (object == null) {
    return [];
  }
  object = Object(object);
  return arrayFilter(nativeGetSymbols(object), function(symbol) {
    return propertyIsEnumerable.call(object, symbol);
  });
};

module.exports = getSymbols;


/***/ }),

/***/ "./node_modules/lodash/_getSymbolsIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_getSymbolsIn.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayPush = __webpack_require__(/*! ./_arrayPush */ "./node_modules/lodash/_arrayPush.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    getSymbols = __webpack_require__(/*! ./_getSymbols */ "./node_modules/lodash/_getSymbols.js"),
    stubArray = __webpack_require__(/*! ./stubArray */ "./node_modules/lodash/stubArray.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeGetSymbols = Object.getOwnPropertySymbols;

/**
 * Creates an array of the own and inherited enumerable symbols of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of symbols.
 */
var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
  var result = [];
  while (object) {
    arrayPush(result, getSymbols(object));
    object = getPrototype(object);
  }
  return result;
};

module.exports = getSymbolsIn;


/***/ }),

/***/ "./node_modules/lodash/_getTag.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/_getTag.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DataView = __webpack_require__(/*! ./_DataView */ "./node_modules/lodash/_DataView.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    Promise = __webpack_require__(/*! ./_Promise */ "./node_modules/lodash/_Promise.js"),
    Set = __webpack_require__(/*! ./_Set */ "./node_modules/lodash/_Set.js"),
    WeakMap = __webpack_require__(/*! ./_WeakMap */ "./node_modules/lodash/_WeakMap.js"),
    baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    toSource = __webpack_require__(/*! ./_toSource */ "./node_modules/lodash/_toSource.js");

/** `Object#toString` result references. */
var mapTag = '[object Map]',
    objectTag = '[object Object]',
    promiseTag = '[object Promise]',
    setTag = '[object Set]',
    weakMapTag = '[object WeakMap]';

var dataViewTag = '[object DataView]';

/** Used to detect maps, sets, and weakmaps. */
var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map),
    promiseCtorString = toSource(Promise),
    setCtorString = toSource(Set),
    weakMapCtorString = toSource(WeakMap);

/**
 * Gets the `toStringTag` of `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
var getTag = baseGetTag;

// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
    (Map && getTag(new Map) != mapTag) ||
    (Promise && getTag(Promise.resolve()) != promiseTag) ||
    (Set && getTag(new Set) != setTag) ||
    (WeakMap && getTag(new WeakMap) != weakMapTag)) {
  getTag = function(value) {
    var result = baseGetTag(value),
        Ctor = result == objectTag ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : '';

    if (ctorString) {
      switch (ctorString) {
        case dataViewCtorString: return dataViewTag;
        case mapCtorString: return mapTag;
        case promiseCtorString: return promiseTag;
        case setCtorString: return setTag;
        case weakMapCtorString: return weakMapTag;
      }
    }
    return result;
  };
}

module.exports = getTag;


/***/ }),

/***/ "./node_modules/lodash/_getValue.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_getValue.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

module.exports = getValue;


/***/ }),

/***/ "./node_modules/lodash/_hasPath.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hasPath.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var castPath = __webpack_require__(/*! ./_castPath */ "./node_modules/lodash/_castPath.js"),
    isArguments = __webpack_require__(/*! ./isArguments */ "./node_modules/lodash/isArguments.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isIndex = __webpack_require__(/*! ./_isIndex */ "./node_modules/lodash/_isIndex.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Checks if `path` exists on `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @param {Function} hasFunc The function to check properties.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 */
function hasPath(object, path, hasFunc) {
  path = castPath(path, object);

  var index = -1,
      length = path.length,
      result = false;

  while (++index < length) {
    var key = toKey(path[index]);
    if (!(result = object != null && hasFunc(object, key))) {
      break;
    }
    object = object[key];
  }
  if (result || ++index != length) {
    return result;
  }
  length = object == null ? 0 : object.length;
  return !!length && isLength(length) && isIndex(key, length) &&
    (isArray(object) || isArguments(object));
}

module.exports = hasPath;


/***/ }),

/***/ "./node_modules/lodash/_hasUnicode.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hasUnicode.js ***!
  \********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsZWJ = '\\u200d';

/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

/**
 * Checks if `string` contains Unicode symbols.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
 */
function hasUnicode(string) {
  return reHasUnicode.test(string);
}

module.exports = hasUnicode;


/***/ }),

/***/ "./node_modules/lodash/_hashClear.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_hashClear.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

module.exports = hashClear;


/***/ }),

/***/ "./node_modules/lodash/_hashDelete.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_hashDelete.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = hashDelete;


/***/ }),

/***/ "./node_modules/lodash/_hashGet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashGet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED ? undefined : result;
  }
  return hasOwnProperty.call(data, key) ? data[key] : undefined;
}

module.exports = hashGet;


/***/ }),

/***/ "./node_modules/lodash/_hashHas.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashHas.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
}

module.exports = hashHas;


/***/ }),

/***/ "./node_modules/lodash/_hashSet.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_hashSet.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var nativeCreate = __webpack_require__(/*! ./_nativeCreate */ "./node_modules/lodash/_nativeCreate.js");

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

module.exports = hashSet;


/***/ }),

/***/ "./node_modules/lodash/_initCloneArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Initializes an array clone.
 *
 * @private
 * @param {Array} array The array to clone.
 * @returns {Array} Returns the initialized clone.
 */
function initCloneArray(array) {
  var length = array.length,
      result = new array.constructor(length);

  // Add properties assigned by `RegExp#exec`.
  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
    result.index = array.index;
    result.input = array.input;
  }
  return result;
}

module.exports = initCloneArray;


/***/ }),

/***/ "./node_modules/lodash/_initCloneByTag.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_initCloneByTag.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var cloneArrayBuffer = __webpack_require__(/*! ./_cloneArrayBuffer */ "./node_modules/lodash/_cloneArrayBuffer.js"),
    cloneDataView = __webpack_require__(/*! ./_cloneDataView */ "./node_modules/lodash/_cloneDataView.js"),
    cloneRegExp = __webpack_require__(/*! ./_cloneRegExp */ "./node_modules/lodash/_cloneRegExp.js"),
    cloneSymbol = __webpack_require__(/*! ./_cloneSymbol */ "./node_modules/lodash/_cloneSymbol.js"),
    cloneTypedArray = __webpack_require__(/*! ./_cloneTypedArray */ "./node_modules/lodash/_cloneTypedArray.js");

/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/**
 * Initializes an object clone based on its `toStringTag`.
 *
 * **Note:** This function only supports cloning values with tags of
 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
 *
 * @private
 * @param {Object} object The object to clone.
 * @param {string} tag The `toStringTag` of the object to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneByTag(object, tag, isDeep) {
  var Ctor = object.constructor;
  switch (tag) {
    case arrayBufferTag:
      return cloneArrayBuffer(object);

    case boolTag:
    case dateTag:
      return new Ctor(+object);

    case dataViewTag:
      return cloneDataView(object, isDeep);

    case float32Tag: case float64Tag:
    case int8Tag: case int16Tag: case int32Tag:
    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
      return cloneTypedArray(object, isDeep);

    case mapTag:
      return new Ctor;

    case numberTag:
    case stringTag:
      return new Ctor(object);

    case regexpTag:
      return cloneRegExp(object);

    case setTag:
      return new Ctor;

    case symbolTag:
      return cloneSymbol(object);
  }
}

module.exports = initCloneByTag;


/***/ }),

/***/ "./node_modules/lodash/_initCloneObject.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_initCloneObject.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseCreate = __webpack_require__(/*! ./_baseCreate */ "./node_modules/lodash/_baseCreate.js"),
    getPrototype = __webpack_require__(/*! ./_getPrototype */ "./node_modules/lodash/_getPrototype.js"),
    isPrototype = __webpack_require__(/*! ./_isPrototype */ "./node_modules/lodash/_isPrototype.js");

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

module.exports = initCloneObject;


/***/ }),

/***/ "./node_modules/lodash/_isIndex.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_isIndex.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

module.exports = isIndex;


/***/ }),

/***/ "./node_modules/lodash/_isKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_isKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  if (isArray(value)) {
    return false;
  }
  var type = typeof value;
  if (type == 'number' || type == 'symbol' || type == 'boolean' ||
      value == null || isSymbol(value)) {
    return true;
  }
  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
    (object != null && value in Object(object));
}

module.exports = isKey;


/***/ }),

/***/ "./node_modules/lodash/_isKeyable.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/_isKeyable.js ***!
  \*******************************************/
/***/ ((module) => {

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

module.exports = isKeyable;


/***/ }),

/***/ "./node_modules/lodash/_isMasked.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_isMasked.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var coreJsData = __webpack_require__(/*! ./_coreJsData */ "./node_modules/lodash/_coreJsData.js");

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

module.exports = isMasked;


/***/ }),

/***/ "./node_modules/lodash/_isPrototype.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_isPrototype.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

  return value === proto;
}

module.exports = isPrototype;


/***/ }),

/***/ "./node_modules/lodash/_isStrictComparable.js":
/*!****************************************************!*\
  !*** ./node_modules/lodash/_isStrictComparable.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_listCacheClear.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_listCacheClear.js ***!
  \************************************************/
/***/ ((module) => {

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

module.exports = listCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_listCacheDelete.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_listCacheDelete.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

module.exports = listCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_listCacheGet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheGet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

module.exports = listCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_listCacheHas.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheHas.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

module.exports = listCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_listCacheSet.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_listCacheSet.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var assocIndexOf = __webpack_require__(/*! ./_assocIndexOf */ "./node_modules/lodash/_assocIndexOf.js");

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

module.exports = listCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheClear.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_mapCacheClear.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Hash = __webpack_require__(/*! ./_Hash */ "./node_modules/lodash/_Hash.js"),
    ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js");

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

module.exports = mapCacheClear;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheDelete.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_mapCacheDelete.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

module.exports = mapCacheDelete;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheGet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheGet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

module.exports = mapCacheGet;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheHas.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

module.exports = mapCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_mapCacheSet.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_mapCacheSet.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getMapData = __webpack_require__(/*! ./_getMapData */ "./node_modules/lodash/_getMapData.js");

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

module.exports = mapCacheSet;


/***/ }),

/***/ "./node_modules/lodash/_mapToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_mapToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `map` to its key-value pairs.
 *
 * @private
 * @param {Object} map The map to convert.
 * @returns {Array} Returns the key-value pairs.
 */
function mapToArray(map) {
  var index = -1,
      result = Array(map.size);

  map.forEach(function(value, key) {
    result[++index] = [key, value];
  });
  return result;
}

module.exports = mapToArray;


/***/ }),

/***/ "./node_modules/lodash/_matchesStrictComparable.js":
/*!*********************************************************!*\
  !*** ./node_modules/lodash/_matchesStrictComparable.js ***!
  \*********************************************************/
/***/ ((module) => {

/**
 * A specialized version of `matchesProperty` for source values suitable
 * for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @param {*} srcValue The value to match.
 * @returns {Function} Returns the new spec function.
 */
function matchesStrictComparable(key, srcValue) {
  return function(object) {
    if (object == null) {
      return false;
    }
    return object[key] === srcValue &&
      (srcValue !== undefined || (key in Object(object)));
  };
}

module.exports = matchesStrictComparable;


/***/ }),

/***/ "./node_modules/lodash/_memoizeCapped.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_memoizeCapped.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoize = __webpack_require__(/*! ./memoize */ "./node_modules/lodash/memoize.js");

/** Used as the maximum memoize cache size. */
var MAX_MEMOIZE_SIZE = 500;

/**
 * A specialized version of `_.memoize` which clears the memoized function's
 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
 *
 * @private
 * @param {Function} func The function to have its output memoized.
 * @returns {Function} Returns the new memoized function.
 */
function memoizeCapped(func) {
  var result = memoize(func, function(key) {
    if (cache.size === MAX_MEMOIZE_SIZE) {
      cache.clear();
    }
    return key;
  });

  var cache = result.cache;
  return result;
}

module.exports = memoizeCapped;


/***/ }),

/***/ "./node_modules/lodash/_nativeCreate.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeCreate.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getNative = __webpack_require__(/*! ./_getNative */ "./node_modules/lodash/_getNative.js");

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

module.exports = nativeCreate;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeys.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_nativeKeys.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var overArg = __webpack_require__(/*! ./_overArg */ "./node_modules/lodash/_overArg.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeKeys = overArg(Object.keys, Object);

module.exports = nativeKeys;


/***/ }),

/***/ "./node_modules/lodash/_nativeKeysIn.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_nativeKeysIn.js ***!
  \**********************************************/
/***/ ((module) => {

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = nativeKeysIn;


/***/ }),

/***/ "./node_modules/lodash/_nodeUtil.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_nodeUtil.js ***!
  \******************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

module.exports = nodeUtil;


/***/ }),

/***/ "./node_modules/lodash/_objectToString.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_objectToString.js ***!
  \************************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

module.exports = objectToString;


/***/ }),

/***/ "./node_modules/lodash/_overArg.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/_overArg.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

module.exports = overArg;


/***/ }),

/***/ "./node_modules/lodash/_root.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/_root.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var freeGlobal = __webpack_require__(/*! ./_freeGlobal */ "./node_modules/lodash/_freeGlobal.js");

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

module.exports = root;


/***/ }),

/***/ "./node_modules/lodash/_setCacheAdd.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheAdd.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Adds `value` to the array cache.
 *
 * @private
 * @name add
 * @memberOf SetCache
 * @alias push
 * @param {*} value The value to cache.
 * @returns {Object} Returns the cache instance.
 */
function setCacheAdd(value) {
  this.__data__.set(value, HASH_UNDEFINED);
  return this;
}

module.exports = setCacheAdd;


/***/ }),

/***/ "./node_modules/lodash/_setCacheHas.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_setCacheHas.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is in the array cache.
 *
 * @private
 * @name has
 * @memberOf SetCache
 * @param {*} value The value to search for.
 * @returns {number} Returns `true` if `value` is found, else `false`.
 */
function setCacheHas(value) {
  return this.__data__.has(value);
}

module.exports = setCacheHas;


/***/ }),

/***/ "./node_modules/lodash/_setToArray.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_setToArray.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Converts `set` to an array of its values.
 *
 * @private
 * @param {Object} set The set to convert.
 * @returns {Array} Returns the values.
 */
function setToArray(set) {
  var index = -1,
      result = Array(set.size);

  set.forEach(function(value) {
    result[++index] = value;
  });
  return result;
}

module.exports = setToArray;


/***/ }),

/***/ "./node_modules/lodash/_stackClear.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stackClear.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js");

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

module.exports = stackClear;


/***/ }),

/***/ "./node_modules/lodash/_stackDelete.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_stackDelete.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

module.exports = stackDelete;


/***/ }),

/***/ "./node_modules/lodash/_stackGet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackGet.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

module.exports = stackGet;


/***/ }),

/***/ "./node_modules/lodash/_stackHas.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackHas.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

module.exports = stackHas;


/***/ }),

/***/ "./node_modules/lodash/_stackSet.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_stackSet.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var ListCache = __webpack_require__(/*! ./_ListCache */ "./node_modules/lodash/_ListCache.js"),
    Map = __webpack_require__(/*! ./_Map */ "./node_modules/lodash/_Map.js"),
    MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

module.exports = stackSet;


/***/ }),

/***/ "./node_modules/lodash/_strictIndexOf.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_strictIndexOf.js ***!
  \***********************************************/
/***/ ((module) => {

/**
 * A specialized version of `_.indexOf` which performs strict equality
 * comparisons of values, i.e. `===`.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} value The value to search for.
 * @param {number} fromIndex The index to search from.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function strictIndexOf(array, value, fromIndex) {
  var index = fromIndex - 1,
      length = array.length;

  while (++index < length) {
    if (array[index] === value) {
      return index;
    }
  }
  return -1;
}

module.exports = strictIndexOf;


/***/ }),

/***/ "./node_modules/lodash/_stringSize.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/_stringSize.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiSize = __webpack_require__(/*! ./_asciiSize */ "./node_modules/lodash/_asciiSize.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeSize = __webpack_require__(/*! ./_unicodeSize */ "./node_modules/lodash/_unicodeSize.js");

/**
 * Gets the number of symbols in `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the string size.
 */
function stringSize(string) {
  return hasUnicode(string)
    ? unicodeSize(string)
    : asciiSize(string);
}

module.exports = stringSize;


/***/ }),

/***/ "./node_modules/lodash/_stringToArray.js":
/*!***********************************************!*\
  !*** ./node_modules/lodash/_stringToArray.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var asciiToArray = __webpack_require__(/*! ./_asciiToArray */ "./node_modules/lodash/_asciiToArray.js"),
    hasUnicode = __webpack_require__(/*! ./_hasUnicode */ "./node_modules/lodash/_hasUnicode.js"),
    unicodeToArray = __webpack_require__(/*! ./_unicodeToArray */ "./node_modules/lodash/_unicodeToArray.js");

/**
 * Converts `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function stringToArray(string) {
  return hasUnicode(string)
    ? unicodeToArray(string)
    : asciiToArray(string);
}

module.exports = stringToArray;


/***/ }),

/***/ "./node_modules/lodash/_stringToPath.js":
/*!**********************************************!*\
  !*** ./node_modules/lodash/_stringToPath.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var memoizeCapped = __webpack_require__(/*! ./_memoizeCapped */ "./node_modules/lodash/_memoizeCapped.js");

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `string` to a property path array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the property path array.
 */
var stringToPath = memoizeCapped(function(string) {
  var result = [];
  if (string.charCodeAt(0) === 46 /* . */) {
    result.push('');
  }
  string.replace(rePropName, function(match, number, quote, subString) {
    result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
});

module.exports = stringToPath;


/***/ }),

/***/ "./node_modules/lodash/_toKey.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/_toKey.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0;

/**
 * Converts `value` to a string key if it's not a string or symbol.
 *
 * @private
 * @param {*} value The value to inspect.
 * @returns {string|symbol} Returns the key.
 */
function toKey(value) {
  if (typeof value == 'string' || isSymbol(value)) {
    return value;
  }
  var result = (value + '');
  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
}

module.exports = toKey;


/***/ }),

/***/ "./node_modules/lodash/_toSource.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/_toSource.js ***!
  \******************************************/
/***/ ((module) => {

/** Used for built-in method references. */
var funcProto = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

module.exports = toSource;


/***/ }),

/***/ "./node_modules/lodash/_trimmedEndIndex.js":
/*!*************************************************!*\
  !*** ./node_modules/lodash/_trimmedEndIndex.js ***!
  \*************************************************/
/***/ ((module) => {

/** Used to match a single whitespace character. */
var reWhitespace = /\s/;

/**
 * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
 * character of `string`.
 *
 * @private
 * @param {string} string The string to inspect.
 * @returns {number} Returns the index of the last non-whitespace character.
 */
function trimmedEndIndex(string) {
  var index = string.length;

  while (index-- && reWhitespace.test(string.charAt(index))) {}
  return index;
}

module.exports = trimmedEndIndex;


/***/ }),

/***/ "./node_modules/lodash/_unicodeSize.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/_unicodeSize.js ***!
  \*********************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Gets the size of a Unicode `string`.
 *
 * @private
 * @param {string} string The string inspect.
 * @returns {number} Returns the string size.
 */
function unicodeSize(string) {
  var result = reUnicode.lastIndex = 0;
  while (reUnicode.test(string)) {
    ++result;
  }
  return result;
}

module.exports = unicodeSize;


/***/ }),

/***/ "./node_modules/lodash/_unicodeToArray.js":
/*!************************************************!*\
  !*** ./node_modules/lodash/_unicodeToArray.js ***!
  \************************************************/
/***/ ((module) => {

/** Used to compose unicode character classes. */
var rsAstralRange = '\\ud800-\\udfff',
    rsComboMarksRange = '\\u0300-\\u036f',
    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
    rsComboSymbolsRange = '\\u20d0-\\u20ff',
    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
    rsVarRange = '\\ufe0e\\ufe0f';

/** Used to compose unicode capture groups. */
var rsAstral = '[' + rsAstralRange + ']',
    rsCombo = '[' + rsComboRange + ']',
    rsFitz = '\\ud83c[\\udffb-\\udfff]',
    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
    rsNonAstral = '[^' + rsAstralRange + ']',
    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
    rsZWJ = '\\u200d';

/** Used to compose unicode regexes. */
var reOptMod = rsModifier + '?',
    rsOptVar = '[' + rsVarRange + ']?',
    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
    rsSeq = rsOptVar + reOptMod + rsOptJoin,
    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

/**
 * Converts a Unicode `string` to an array.
 *
 * @private
 * @param {string} string The string to convert.
 * @returns {Array} Returns the converted array.
 */
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}

module.exports = unicodeToArray;


/***/ }),

/***/ "./node_modules/lodash/clone.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/clone.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseClone = __webpack_require__(/*! ./_baseClone */ "./node_modules/lodash/_baseClone.js");

/** Used to compose bitmasks for cloning. */
var CLONE_SYMBOLS_FLAG = 4;

/**
 * Creates a shallow clone of `value`.
 *
 * **Note:** This method is loosely based on the
 * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
 * and supports cloning arrays, array buffers, booleans, date objects, maps,
 * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
 * arrays. The own enumerable properties of `arguments` objects are cloned
 * as plain objects. An empty object is returned for uncloneable values such
 * as error objects, functions, DOM nodes, and WeakMaps.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to clone.
 * @returns {*} Returns the cloned value.
 * @see _.cloneDeep
 * @example
 *
 * var objects = [{ 'a': 1 }, { 'b': 2 }];
 *
 * var shallow = _.clone(objects);
 * console.log(shallow[0] === objects[0]);
 * // => true
 */
function clone(value) {
  return baseClone(value, CLONE_SYMBOLS_FLAG);
}

module.exports = clone;


/***/ }),

/***/ "./node_modules/lodash/eq.js":
/*!***********************************!*\
  !*** ./node_modules/lodash/eq.js ***!
  \***********************************/
/***/ ((module) => {

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

module.exports = eq;


/***/ }),

/***/ "./node_modules/lodash/get.js":
/*!************************************!*\
  !*** ./node_modules/lodash/get.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGet = __webpack_require__(/*! ./_baseGet */ "./node_modules/lodash/_baseGet.js");

/**
 * Gets the value at `path` of `object`. If the resolved value is
 * `undefined`, the `defaultValue` is returned in its place.
 *
 * @static
 * @memberOf _
 * @since 3.7.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path of the property to get.
 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
 * @returns {*} Returns the resolved value.
 * @example
 *
 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
 *
 * _.get(object, 'a[0].b.c');
 * // => 3
 *
 * _.get(object, ['a', '0', 'b', 'c']);
 * // => 3
 *
 * _.get(object, 'a.b.c', 'default');
 * // => 'default'
 */
function get(object, path, defaultValue) {
  var result = object == null ? undefined : baseGet(object, path);
  return result === undefined ? defaultValue : result;
}

module.exports = get;


/***/ }),

/***/ "./node_modules/lodash/hasIn.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/hasIn.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseHasIn = __webpack_require__(/*! ./_baseHasIn */ "./node_modules/lodash/_baseHasIn.js"),
    hasPath = __webpack_require__(/*! ./_hasPath */ "./node_modules/lodash/_hasPath.js");

/**
 * Checks if `path` is a direct or inherited property of `object`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @param {Array|string} path The path to check.
 * @returns {boolean} Returns `true` if `path` exists, else `false`.
 * @example
 *
 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
 *
 * _.hasIn(object, 'a');
 * // => true
 *
 * _.hasIn(object, 'a.b');
 * // => true
 *
 * _.hasIn(object, ['a', 'b']);
 * // => true
 *
 * _.hasIn(object, 'b');
 * // => false
 */
function hasIn(object, path) {
  return object != null && hasPath(object, path, baseHasIn);
}

module.exports = hasIn;


/***/ }),

/***/ "./node_modules/lodash/identity.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/identity.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;


/***/ }),

/***/ "./node_modules/lodash/isArguments.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArguments.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsArguments = __webpack_require__(/*! ./_baseIsArguments */ "./node_modules/lodash/_baseIsArguments.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

module.exports = isArguments;


/***/ }),

/***/ "./node_modules/lodash/isArray.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/isArray.js ***!
  \****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

module.exports = isArray;


/***/ }),

/***/ "./node_modules/lodash/isArrayLike.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isArrayLike.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isFunction = __webpack_require__(/*! ./isFunction */ "./node_modules/lodash/isFunction.js"),
    isLength = __webpack_require__(/*! ./isLength */ "./node_modules/lodash/isLength.js");

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

module.exports = isArrayLike;


/***/ }),

/***/ "./node_modules/lodash/isBuffer.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isBuffer.js ***!
  \*****************************************/
/***/ ((module, exports, __webpack_require__) => {

/* module decorator */ module = __webpack_require__.nmd(module);
var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js"),
    stubFalse = __webpack_require__(/*! ./stubFalse */ "./node_modules/lodash/stubFalse.js");

/** Detect free variable `exports`. */
var freeExports =  true && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && "object" == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Built-in value references. */
var Buffer = moduleExports ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

module.exports = isBuffer;


/***/ }),

/***/ "./node_modules/lodash/isFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isFinite.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var root = __webpack_require__(/*! ./_root */ "./node_modules/lodash/_root.js");

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsFinite = root.isFinite;

/**
 * Checks if `value` is a finite primitive number.
 *
 * **Note:** This method is based on
 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
 * @example
 *
 * _.isFinite(3);
 * // => true
 *
 * _.isFinite(Number.MIN_VALUE);
 * // => true
 *
 * _.isFinite(Infinity);
 * // => false
 *
 * _.isFinite('3');
 * // => false
 */
function isFinite(value) {
  return typeof value == 'number' && nativeIsFinite(value);
}

module.exports = isFinite;


/***/ }),

/***/ "./node_modules/lodash/isFunction.js":
/*!*******************************************!*\
  !*** ./node_modules/lodash/isFunction.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js");

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}

module.exports = isFunction;


/***/ }),

/***/ "./node_modules/lodash/isLength.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isLength.js ***!
  \*****************************************/
/***/ ((module) => {

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;


/***/ }),

/***/ "./node_modules/lodash/isMap.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isMap.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsMap = __webpack_require__(/*! ./_baseIsMap */ "./node_modules/lodash/_baseIsMap.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsMap = nodeUtil && nodeUtil.isMap;

/**
 * Checks if `value` is classified as a `Map` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
 * @example
 *
 * _.isMap(new Map);
 * // => true
 *
 * _.isMap(new WeakMap);
 * // => false
 */
var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

module.exports = isMap;


/***/ }),

/***/ "./node_modules/lodash/isNull.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/isNull.js ***!
  \***************************************/
/***/ ((module) => {

/**
 * Checks if `value` is `null`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
 * @example
 *
 * _.isNull(null);
 * // => true
 *
 * _.isNull(void 0);
 * // => false
 */
function isNull(value) {
  return value === null;
}

module.exports = isNull;


/***/ }),

/***/ "./node_modules/lodash/isNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isNumber.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var numberTag = '[object Number]';

/**
 * Checks if `value` is classified as a `Number` primitive or object.
 *
 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
 * classified as numbers, use the `_.isFinite` method.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
 * @example
 *
 * _.isNumber(3);
 * // => true
 *
 * _.isNumber(Number.MIN_VALUE);
 * // => true
 *
 * _.isNumber(Infinity);
 * // => true
 *
 * _.isNumber('3');
 * // => false
 */
function isNumber(value) {
  return typeof value == 'number' ||
    (isObjectLike(value) && baseGetTag(value) == numberTag);
}

module.exports = isNumber;


/***/ }),

/***/ "./node_modules/lodash/isObject.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isObject.js ***!
  \*****************************************/
/***/ ((module) => {

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

module.exports = isObject;


/***/ }),

/***/ "./node_modules/lodash/isObjectLike.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isObjectLike.js ***!
  \*********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

module.exports = isObjectLike;


/***/ }),

/***/ "./node_modules/lodash/isSet.js":
/*!**************************************!*\
  !*** ./node_modules/lodash/isSet.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsSet = __webpack_require__(/*! ./_baseIsSet */ "./node_modules/lodash/_baseIsSet.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsSet = nodeUtil && nodeUtil.isSet;

/**
 * Checks if `value` is classified as a `Set` object.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
 * @example
 *
 * _.isSet(new Set);
 * // => true
 *
 * _.isSet(new WeakSet);
 * // => false
 */
var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

module.exports = isSet;


/***/ }),

/***/ "./node_modules/lodash/isString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var stringTag = '[object String]';

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a string, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' ||
    (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
}

module.exports = isString;


/***/ }),

/***/ "./node_modules/lodash/isSymbol.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/isSymbol.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseGetTag = __webpack_require__(/*! ./_baseGetTag */ "./node_modules/lodash/_baseGetTag.js"),
    isObjectLike = __webpack_require__(/*! ./isObjectLike */ "./node_modules/lodash/isObjectLike.js");

/** `Object#toString` result references. */
var symbolTag = '[object Symbol]';

/**
 * Checks if `value` is classified as a `Symbol` primitive or object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
 * @example
 *
 * _.isSymbol(Symbol.iterator);
 * // => true
 *
 * _.isSymbol('abc');
 * // => false
 */
function isSymbol(value) {
  return typeof value == 'symbol' ||
    (isObjectLike(value) && baseGetTag(value) == symbolTag);
}

module.exports = isSymbol;


/***/ }),

/***/ "./node_modules/lodash/isTypedArray.js":
/*!*********************************************!*\
  !*** ./node_modules/lodash/isTypedArray.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseIsTypedArray = __webpack_require__(/*! ./_baseIsTypedArray */ "./node_modules/lodash/_baseIsTypedArray.js"),
    baseUnary = __webpack_require__(/*! ./_baseUnary */ "./node_modules/lodash/_baseUnary.js"),
    nodeUtil = __webpack_require__(/*! ./_nodeUtil */ "./node_modules/lodash/_nodeUtil.js");

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

module.exports = isTypedArray;


/***/ }),

/***/ "./node_modules/lodash/isUndefined.js":
/*!********************************************!*\
  !*** ./node_modules/lodash/isUndefined.js ***!
  \********************************************/
/***/ ((module) => {

/**
 * Checks if `value` is `undefined`.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
 * @example
 *
 * _.isUndefined(void 0);
 * // => true
 *
 * _.isUndefined(null);
 * // => false
 */
function isUndefined(value) {
  return value === undefined;
}

module.exports = isUndefined;


/***/ }),

/***/ "./node_modules/lodash/keys.js":
/*!*************************************!*\
  !*** ./node_modules/lodash/keys.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeys = __webpack_require__(/*! ./_baseKeys */ "./node_modules/lodash/_baseKeys.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
function keys(object) {
  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}

module.exports = keys;


/***/ }),

/***/ "./node_modules/lodash/keysIn.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/keysIn.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayLikeKeys = __webpack_require__(/*! ./_arrayLikeKeys */ "./node_modules/lodash/_arrayLikeKeys.js"),
    baseKeysIn = __webpack_require__(/*! ./_baseKeysIn */ "./node_modules/lodash/_baseKeysIn.js"),
    isArrayLike = __webpack_require__(/*! ./isArrayLike */ "./node_modules/lodash/isArrayLike.js");

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

module.exports = keysIn;


/***/ }),

/***/ "./node_modules/lodash/map.js":
/*!************************************!*\
  !*** ./node_modules/lodash/map.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var arrayMap = __webpack_require__(/*! ./_arrayMap */ "./node_modules/lodash/_arrayMap.js"),
    baseIteratee = __webpack_require__(/*! ./_baseIteratee */ "./node_modules/lodash/_baseIteratee.js"),
    baseMap = __webpack_require__(/*! ./_baseMap */ "./node_modules/lodash/_baseMap.js"),
    isArray = __webpack_require__(/*! ./isArray */ "./node_modules/lodash/isArray.js");

/**
 * Creates an array of values by running each element in `collection` thru
 * `iteratee`. The iteratee is invoked with three arguments:
 * (value, index|key, collection).
 *
 * Many lodash methods are guarded to work as iteratees for methods like
 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
 *
 * The guarded methods are:
 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Collection
 * @param {Array|Object} collection The collection to iterate over.
 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 * @example
 *
 * function square(n) {
 *   return n * n;
 * }
 *
 * _.map([4, 8], square);
 * // => [16, 64]
 *
 * _.map({ 'a': 4, 'b': 8 }, square);
 * // => [16, 64] (iteration order is not guaranteed)
 *
 * var users = [
 *   { 'user': 'barney' },
 *   { 'user': 'fred' }
 * ];
 *
 * // The `_.property` iteratee shorthand.
 * _.map(users, 'user');
 * // => ['barney', 'fred']
 */
function map(collection, iteratee) {
  var func = isArray(collection) ? arrayMap : baseMap;
  return func(collection, baseIteratee(iteratee, 3));
}

module.exports = map;


/***/ }),

/***/ "./node_modules/lodash/memoize.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/memoize.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var MapCache = __webpack_require__(/*! ./_MapCache */ "./node_modules/lodash/_MapCache.js");

/** Error message constants. */
var FUNC_ERROR_TEXT = 'Expected a function';

/**
 * Creates a function that memoizes the result of `func`. If `resolver` is
 * provided, it determines the cache key for storing the result based on the
 * arguments provided to the memoized function. By default, the first argument
 * provided to the memoized function is used as the map cache key. The `func`
 * is invoked with the `this` binding of the memoized function.
 *
 * **Note:** The cache is exposed as the `cache` property on the memoized
 * function. Its creation may be customized by replacing the `_.memoize.Cache`
 * constructor with one whose instances implement the
 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Function
 * @param {Function} func The function to have its output memoized.
 * @param {Function} [resolver] The function to resolve the cache key.
 * @returns {Function} Returns the new memoized function.
 * @example
 *
 * var object = { 'a': 1, 'b': 2 };
 * var other = { 'c': 3, 'd': 4 };
 *
 * var values = _.memoize(_.values);
 * values(object);
 * // => [1, 2]
 *
 * values(other);
 * // => [3, 4]
 *
 * object.a = 2;
 * values(object);
 * // => [1, 2]
 *
 * // Modify the result cache.
 * values.cache.set(object, ['a', 'b']);
 * values(object);
 * // => ['a', 'b']
 *
 * // Replace `_.memoize.Cache`.
 * _.memoize.Cache = WeakMap;
 */
function memoize(func, resolver) {
  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  var memoized = function() {
    var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache;

    if (cache.has(key)) {
      return cache.get(key);
    }
    var result = func.apply(this, args);
    memoized.cache = cache.set(key, result) || cache;
    return result;
  };
  memoized.cache = new (memoize.Cache || MapCache);
  return memoized;
}

// Expose `MapCache`.
memoize.Cache = MapCache;

module.exports = memoize;


/***/ }),

/***/ "./node_modules/lodash/padEnd.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/padEnd.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var createPadding = __webpack_require__(/*! ./_createPadding */ "./node_modules/lodash/_createPadding.js"),
    stringSize = __webpack_require__(/*! ./_stringSize */ "./node_modules/lodash/_stringSize.js"),
    toInteger = __webpack_require__(/*! ./toInteger */ "./node_modules/lodash/toInteger.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js");

/**
 * Pads `string` on the right side if it's shorter than `length`. Padding
 * characters are truncated if they exceed `length`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to pad.
 * @param {number} [length=0] The padding length.
 * @param {string} [chars=' '] The string used as padding.
 * @returns {string} Returns the padded string.
 * @example
 *
 * _.padEnd('abc', 6);
 * // => 'abc   '
 *
 * _.padEnd('abc', 6, '_-');
 * // => 'abc_-_'
 *
 * _.padEnd('abc', 3);
 * // => 'abc'
 */
function padEnd(string, length, chars) {
  string = toString(string);
  length = toInteger(length);

  var strLength = length ? stringSize(string) : 0;
  return (length && strLength < length)
    ? (string + createPadding(length - strLength, chars))
    : string;
}

module.exports = padEnd;


/***/ }),

/***/ "./node_modules/lodash/property.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/property.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseProperty = __webpack_require__(/*! ./_baseProperty */ "./node_modules/lodash/_baseProperty.js"),
    basePropertyDeep = __webpack_require__(/*! ./_basePropertyDeep */ "./node_modules/lodash/_basePropertyDeep.js"),
    isKey = __webpack_require__(/*! ./_isKey */ "./node_modules/lodash/_isKey.js"),
    toKey = __webpack_require__(/*! ./_toKey */ "./node_modules/lodash/_toKey.js");

/**
 * Creates a function that returns the value at `path` of a given object.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new accessor function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': 2 } },
 *   { 'a': { 'b': 1 } }
 * ];
 *
 * _.map(objects, _.property('a.b'));
 * // => [2, 1]
 *
 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
}

module.exports = property;


/***/ }),

/***/ "./node_modules/lodash/stubArray.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubArray.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns a new empty array.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {Array} Returns the new empty array.
 * @example
 *
 * var arrays = _.times(2, _.stubArray);
 *
 * console.log(arrays);
 * // => [[], []]
 *
 * console.log(arrays[0] === arrays[1]);
 * // => false
 */
function stubArray() {
  return [];
}

module.exports = stubArray;


/***/ }),

/***/ "./node_modules/lodash/stubFalse.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/stubFalse.js ***!
  \******************************************/
/***/ ((module) => {

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

module.exports = stubFalse;


/***/ }),

/***/ "./node_modules/lodash/toFinite.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toFinite.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toNumber = __webpack_require__(/*! ./toNumber */ "./node_modules/lodash/toNumber.js");

/** Used as references for various `Number` constants. */
var INFINITY = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e+308;

/**
 * Converts `value` to a finite number.
 *
 * @static
 * @memberOf _
 * @since 4.12.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted number.
 * @example
 *
 * _.toFinite(3.2);
 * // => 3.2
 *
 * _.toFinite(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toFinite(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toFinite('3.2');
 * // => 3.2
 */
function toFinite(value) {
  if (!value) {
    return value === 0 ? value : 0;
  }
  value = toNumber(value);
  if (value === INFINITY || value === -INFINITY) {
    var sign = (value < 0 ? -1 : 1);
    return sign * MAX_INTEGER;
  }
  return value === value ? value : 0;
}

module.exports = toFinite;


/***/ }),

/***/ "./node_modules/lodash/toInteger.js":
/*!******************************************!*\
  !*** ./node_modules/lodash/toInteger.js ***!
  \******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toFinite = __webpack_require__(/*! ./toFinite */ "./node_modules/lodash/toFinite.js");

/**
 * Converts `value` to an integer.
 *
 * **Note:** This method is loosely based on
 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {number} Returns the converted integer.
 * @example
 *
 * _.toInteger(3.2);
 * // => 3
 *
 * _.toInteger(Number.MIN_VALUE);
 * // => 0
 *
 * _.toInteger(Infinity);
 * // => 1.7976931348623157e+308
 *
 * _.toInteger('3.2');
 * // => 3
 */
function toInteger(value) {
  var result = toFinite(value),
      remainder = result % 1;

  return result === result ? (remainder ? result - remainder : result) : 0;
}

module.exports = toInteger;


/***/ }),

/***/ "./node_modules/lodash/toNumber.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toNumber.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseTrim = __webpack_require__(/*! ./_baseTrim */ "./node_modules/lodash/_baseTrim.js"),
    isObject = __webpack_require__(/*! ./isObject */ "./node_modules/lodash/isObject.js"),
    isSymbol = __webpack_require__(/*! ./isSymbol */ "./node_modules/lodash/isSymbol.js");

/** Used as references for various `Number` constants. */
var NAN = 0 / 0;

/** Used to detect bad signed hexadecimal string values. */
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

/** Used to detect binary string values. */
var reIsBinary = /^0b[01]+$/i;

/** Used to detect octal string values. */
var reIsOctal = /^0o[0-7]+$/i;

/** Built-in method references without a dependency on `root`. */
var freeParseInt = parseInt;

/**
 * Converts `value` to a number.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to process.
 * @returns {number} Returns the number.
 * @example
 *
 * _.toNumber(3.2);
 * // => 3.2
 *
 * _.toNumber(Number.MIN_VALUE);
 * // => 5e-324
 *
 * _.toNumber(Infinity);
 * // => Infinity
 *
 * _.toNumber('3.2');
 * // => 3.2
 */
function toNumber(value) {
  if (typeof value == 'number') {
    return value;
  }
  if (isSymbol(value)) {
    return NAN;
  }
  if (isObject(value)) {
    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
    value = isObject(other) ? (other + '') : other;
  }
  if (typeof value != 'string') {
    return value === 0 ? value : +value;
  }
  value = baseTrim(value);
  var isBinary = reIsBinary.test(value);
  return (isBinary || reIsOctal.test(value))
    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
    : (reIsBadHex.test(value) ? NAN : +value);
}

module.exports = toNumber;


/***/ }),

/***/ "./node_modules/lodash/toString.js":
/*!*****************************************!*\
  !*** ./node_modules/lodash/toString.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js");

/**
 * Converts `value` to a string. An empty string is returned for `null`
 * and `undefined` values. The sign of `-0` is preserved.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 * @example
 *
 * _.toString(null);
 * // => ''
 *
 * _.toString(-0);
 * // => '-0'
 *
 * _.toString([1, 2, 3]);
 * // => '1,2,3'
 */
function toString(value) {
  return value == null ? '' : baseToString(value);
}

module.exports = toString;


/***/ }),

/***/ "./node_modules/lodash/trimEnd.js":
/*!****************************************!*\
  !*** ./node_modules/lodash/trimEnd.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var baseToString = __webpack_require__(/*! ./_baseToString */ "./node_modules/lodash/_baseToString.js"),
    castSlice = __webpack_require__(/*! ./_castSlice */ "./node_modules/lodash/_castSlice.js"),
    charsEndIndex = __webpack_require__(/*! ./_charsEndIndex */ "./node_modules/lodash/_charsEndIndex.js"),
    stringToArray = __webpack_require__(/*! ./_stringToArray */ "./node_modules/lodash/_stringToArray.js"),
    toString = __webpack_require__(/*! ./toString */ "./node_modules/lodash/toString.js"),
    trimmedEndIndex = __webpack_require__(/*! ./_trimmedEndIndex */ "./node_modules/lodash/_trimmedEndIndex.js");

/**
 * Removes trailing whitespace or specified characters from `string`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category String
 * @param {string} [string=''] The string to trim.
 * @param {string} [chars=whitespace] The characters to trim.
 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
 * @returns {string} Returns the trimmed string.
 * @example
 *
 * _.trimEnd('  abc  ');
 * // => '  abc'
 *
 * _.trimEnd('-_-abc-_-', '_-');
 * // => '-_-abc'
 */
function trimEnd(string, chars, guard) {
  string = toString(string);
  if (string && (guard || chars === undefined)) {
    return string.slice(0, trimmedEndIndex(string) + 1);
  }
  if (!string || !(chars = baseToString(chars))) {
    return string;
  }
  var strSymbols = stringToArray(string),
      end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

  return castSlice(strSymbols, 0, end).join('');
}

module.exports = trimEnd;


/***/ }),

/***/ "./node_modules/object-is/implementation.js":
/*!**************************************************!*\
  !*** ./node_modules/object-is/implementation.js ***!
  \**************************************************/
/***/ ((module) => {

"use strict";


var numberIsNaN = function (value) {
	return value !== value;
};

module.exports = function is(a, b) {
	if (a === 0 && b === 0) {
		return 1 / a === 1 / b;
	}
	if (a === b) {
		return true;
	}
	if (numberIsNaN(a) && numberIsNaN(b)) {
		return true;
	}
	return false;
};



/***/ }),

/***/ "./node_modules/object-is/index.js":
/*!*****************************************!*\
  !*** ./node_modules/object-is/index.js ***!
  \*****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");
var callBind = __webpack_require__(/*! call-bind */ "./node_modules/call-bind/index.js");

var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");
var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var shim = __webpack_require__(/*! ./shim */ "./node_modules/object-is/shim.js");

var polyfill = callBind(getPolyfill(), Object);

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),

/***/ "./node_modules/object-is/polyfill.js":
/*!********************************************!*\
  !*** ./node_modules/object-is/polyfill.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var implementation = __webpack_require__(/*! ./implementation */ "./node_modules/object-is/implementation.js");

module.exports = function getPolyfill() {
	return typeof Object.is === 'function' ? Object.is : implementation;
};


/***/ }),

/***/ "./node_modules/object-is/shim.js":
/*!****************************************!*\
  !*** ./node_modules/object-is/shim.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var getPolyfill = __webpack_require__(/*! ./polyfill */ "./node_modules/object-is/polyfill.js");
var define = __webpack_require__(/*! define-properties */ "./node_modules/define-properties/index.js");

module.exports = function shimObjectIs() {
	var polyfill = getPolyfill();
	define(Object, { is: polyfill }, {
		is: function testObjectIs() {
			return Object.is !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),

/***/ "./node_modules/object-keys/implementation.js":
/*!****************************************************!*\
  !*** ./node_modules/object-keys/implementation.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var keysShim;
if (!Object.keys) {
	// modified from https://github.com/es-shims/es5-shim
	var has = Object.prototype.hasOwnProperty;
	var toStr = Object.prototype.toString;
	var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js"); // eslint-disable-line global-require
	var isEnumerable = Object.prototype.propertyIsEnumerable;
	var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
	var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
	var dontEnums = [
		'toString',
		'toLocaleString',
		'valueOf',
		'hasOwnProperty',
		'isPrototypeOf',
		'propertyIsEnumerable',
		'constructor'
	];
	var equalsConstructorPrototype = function (o) {
		var ctor = o.constructor;
		return ctor && ctor.prototype === o;
	};
	var excludedKeys = {
		$applicationCache: true,
		$console: true,
		$external: true,
		$frame: true,
		$frameElement: true,
		$frames: true,
		$innerHeight: true,
		$innerWidth: true,
		$onmozfullscreenchange: true,
		$onmozfullscreenerror: true,
		$outerHeight: true,
		$outerWidth: true,
		$pageXOffset: true,
		$pageYOffset: true,
		$parent: true,
		$scrollLeft: true,
		$scrollTop: true,
		$scrollX: true,
		$scrollY: true,
		$self: true,
		$webkitIndexedDB: true,
		$webkitStorageInfo: true,
		$window: true
	};
	var hasAutomationEqualityBug = (function () {
		/* global window */
		if (typeof window === 'undefined') { return false; }
		for (var k in window) {
			try {
				if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
					try {
						equalsConstructorPrototype(window[k]);
					} catch (e) {
						return true;
					}
				}
			} catch (e) {
				return true;
			}
		}
		return false;
	}());
	var equalsConstructorPrototypeIfNotBuggy = function (o) {
		/* global window */
		if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
			return equalsConstructorPrototype(o);
		}
		try {
			return equalsConstructorPrototype(o);
		} catch (e) {
			return false;
		}
	};

	keysShim = function keys(object) {
		var isObject = object !== null && typeof object === 'object';
		var isFunction = toStr.call(object) === '[object Function]';
		var isArguments = isArgs(object);
		var isString = isObject && toStr.call(object) === '[object String]';
		var theKeys = [];

		if (!isObject && !isFunction && !isArguments) {
			throw new TypeError('Object.keys called on a non-object');
		}

		var skipProto = hasProtoEnumBug && isFunction;
		if (isString && object.length > 0 && !has.call(object, 0)) {
			for (var i = 0; i < object.length; ++i) {
				theKeys.push(String(i));
			}
		}

		if (isArguments && object.length > 0) {
			for (var j = 0; j < object.length; ++j) {
				theKeys.push(String(j));
			}
		} else {
			for (var name in object) {
				if (!(skipProto && name === 'prototype') && has.call(object, name)) {
					theKeys.push(String(name));
				}
			}
		}

		if (hasDontEnumBug) {
			var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

			for (var k = 0; k < dontEnums.length; ++k) {
				if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
					theKeys.push(dontEnums[k]);
				}
			}
		}
		return theKeys;
	};
}
module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/index.js":
/*!*******************************************!*\
  !*** ./node_modules/object-keys/index.js ***!
  \*******************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var slice = Array.prototype.slice;
var isArgs = __webpack_require__(/*! ./isArguments */ "./node_modules/object-keys/isArguments.js");

var origKeys = Object.keys;
var keysShim = origKeys ? function keys(o) { return origKeys(o); } : __webpack_require__(/*! ./implementation */ "./node_modules/object-keys/implementation.js");

var originalKeys = Object.keys;

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			var args = Object.keys(arguments);
			return args && args.length === arguments.length;
		}(1, 2));
		if (!keysWorksWithArguments) {
			Object.keys = function keys(object) { // eslint-disable-line func-name-matching
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				}
				return originalKeys(object);
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),

/***/ "./node_modules/object-keys/isArguments.js":
/*!*************************************************!*\
  !*** ./node_modules/object-keys/isArguments.js ***!
  \*************************************************/
/***/ ((module) => {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/***/ ((module) => {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/safe-buffer/index.js":
/*!*******************************************!*\
  !*** ./node_modules/safe-buffer/index.js ***!
  \*******************************************/
/***/ ((module, exports, __webpack_require__) => {

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
/* eslint-disable node/no-deprecated-api */
var buffer = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js")
var Buffer = buffer.Buffer

// alternative to using Object.keys for old browsers
function copyProps (src, dst) {
  for (var key in src) {
    dst[key] = src[key]
  }
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
  module.exports = buffer
} else {
  // Copy properties from require('buffer')
  copyProps(buffer, exports)
  exports.Buffer = SafeBuffer
}

function SafeBuffer (arg, encodingOrOffset, length) {
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.prototype = Object.create(Buffer.prototype)

// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer)

SafeBuffer.from = function (arg, encodingOrOffset, length) {
  if (typeof arg === 'number') {
    throw new TypeError('Argument must not be a number')
  }
  return Buffer(arg, encodingOrOffset, length)
}

SafeBuffer.alloc = function (size, fill, encoding) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  var buf = Buffer(size)
  if (fill !== undefined) {
    if (typeof encoding === 'string') {
      buf.fill(fill, encoding)
    } else {
      buf.fill(fill)
    }
  } else {
    buf.fill(0)
  }
  return buf
}

SafeBuffer.allocUnsafe = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return Buffer(size)
}

SafeBuffer.allocUnsafeSlow = function (size) {
  if (typeof size !== 'number') {
    throw new TypeError('Argument must be a number')
  }
  return buffer.SlowBuffer(size)
}


/***/ }),

/***/ "./node_modules/sha.js/hash.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/hash.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

// prototype class for hash functions
function Hash (blockSize, finalSize) {
  this._block = Buffer.alloc(blockSize)
  this._finalSize = finalSize
  this._blockSize = blockSize
  this._len = 0
}

Hash.prototype.update = function (data, enc) {
  if (typeof data === 'string') {
    enc = enc || 'utf8'
    data = Buffer.from(data, enc)
  }

  var block = this._block
  var blockSize = this._blockSize
  var length = data.length
  var accum = this._len

  for (var offset = 0; offset < length;) {
    var assigned = accum % blockSize
    var remainder = Math.min(length - offset, blockSize - assigned)

    for (var i = 0; i < remainder; i++) {
      block[assigned + i] = data[offset + i]
    }

    accum += remainder
    offset += remainder

    if ((accum % blockSize) === 0) {
      this._update(block)
    }
  }

  this._len += length
  return this
}

Hash.prototype.digest = function (enc) {
  var rem = this._len % this._blockSize

  this._block[rem] = 0x80

  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
  this._block.fill(0, rem + 1)

  if (rem >= this._finalSize) {
    this._update(this._block)
    this._block.fill(0)
  }

  var bits = this._len * 8

  // uint32
  if (bits <= 0xffffffff) {
    this._block.writeUInt32BE(bits, this._blockSize - 4)

  // uint64
  } else {
    var lowBits = (bits & 0xffffffff) >>> 0
    var highBits = (bits - lowBits) / 0x100000000

    this._block.writeUInt32BE(highBits, this._blockSize - 8)
    this._block.writeUInt32BE(lowBits, this._blockSize - 4)
  }

  this._update(this._block)
  var hash = this._hash()

  return enc ? hash.toString(enc) : hash
}

Hash.prototype._update = function () {
  throw new Error('_update must be implemented by subclass')
}

module.exports = Hash


/***/ }),

/***/ "./node_modules/sha.js/index.js":
/*!**************************************!*\
  !*** ./node_modules/sha.js/index.js ***!
  \**************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var exports = module.exports = function SHA (algorithm) {
  algorithm = algorithm.toLowerCase()

  var Algorithm = exports[algorithm]
  if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)')

  return new Algorithm()
}

exports.sha = __webpack_require__(/*! ./sha */ "./node_modules/sha.js/sha.js")
exports.sha1 = __webpack_require__(/*! ./sha1 */ "./node_modules/sha.js/sha1.js")
exports.sha224 = __webpack_require__(/*! ./sha224 */ "./node_modules/sha.js/sha224.js")
exports.sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js")
exports.sha384 = __webpack_require__(/*! ./sha384 */ "./node_modules/sha.js/sha384.js")
exports.sha512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js")


/***/ }),

/***/ "./node_modules/sha.js/sha.js":
/*!************************************!*\
  !*** ./node_modules/sha.js/sha.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha, Hash)

Sha.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha


/***/ }),

/***/ "./node_modules/sha.js/sha1.js":
/*!*************************************!*\
  !*** ./node_modules/sha.js/sha1.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var K = [
  0x5a827999, 0x6ed9eba1, 0x8f1bbcdc | 0, 0xca62c1d6 | 0
]

var W = new Array(80)

function Sha1 () {
  this.init()
  this._w = W

  Hash.call(this, 64, 56)
}

inherits(Sha1, Hash)

Sha1.prototype.init = function () {
  this._a = 0x67452301
  this._b = 0xefcdab89
  this._c = 0x98badcfe
  this._d = 0x10325476
  this._e = 0xc3d2e1f0

  return this
}

function rotl1 (num) {
  return (num << 1) | (num >>> 31)
}

function rotl5 (num) {
  return (num << 5) | (num >>> 27)
}

function rotl30 (num) {
  return (num << 30) | (num >>> 2)
}

function ft (s, b, c, d) {
  if (s === 0) return (b & c) | ((~b) & d)
  if (s === 2) return (b & c) | (b & d) | (c & d)
  return b ^ c ^ d
}

Sha1.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 80; ++i) W[i] = rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16])

  for (var j = 0; j < 80; ++j) {
    var s = ~~(j / 20)
    var t = (rotl5(a) + ft(s, b, c, d) + e + W[j] + K[s]) | 0

    e = d
    d = c
    c = rotl30(b)
    b = a
    a = t
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
}

Sha1.prototype._hash = function () {
  var H = Buffer.allocUnsafe(20)

  H.writeInt32BE(this._a | 0, 0)
  H.writeInt32BE(this._b | 0, 4)
  H.writeInt32BE(this._c | 0, 8)
  H.writeInt32BE(this._d | 0, 12)
  H.writeInt32BE(this._e | 0, 16)

  return H
}

module.exports = Sha1


/***/ }),

/***/ "./node_modules/sha.js/sha224.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha224.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Sha256 = __webpack_require__(/*! ./sha256 */ "./node_modules/sha.js/sha256.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var W = new Array(64)

function Sha224 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha224, Sha256)

Sha224.prototype.init = function () {
  this._a = 0xc1059ed8
  this._b = 0x367cd507
  this._c = 0x3070dd17
  this._d = 0xf70e5939
  this._e = 0xffc00b31
  this._f = 0x68581511
  this._g = 0x64f98fa7
  this._h = 0xbefa4fa4

  return this
}

Sha224.prototype._hash = function () {
  var H = Buffer.allocUnsafe(28)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)

  return H
}

module.exports = Sha224


/***/ }),

/***/ "./node_modules/sha.js/sha256.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha256.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var K = [
  0x428A2F98, 0x71374491, 0xB5C0FBCF, 0xE9B5DBA5,
  0x3956C25B, 0x59F111F1, 0x923F82A4, 0xAB1C5ED5,
  0xD807AA98, 0x12835B01, 0x243185BE, 0x550C7DC3,
  0x72BE5D74, 0x80DEB1FE, 0x9BDC06A7, 0xC19BF174,
  0xE49B69C1, 0xEFBE4786, 0x0FC19DC6, 0x240CA1CC,
  0x2DE92C6F, 0x4A7484AA, 0x5CB0A9DC, 0x76F988DA,
  0x983E5152, 0xA831C66D, 0xB00327C8, 0xBF597FC7,
  0xC6E00BF3, 0xD5A79147, 0x06CA6351, 0x14292967,
  0x27B70A85, 0x2E1B2138, 0x4D2C6DFC, 0x53380D13,
  0x650A7354, 0x766A0ABB, 0x81C2C92E, 0x92722C85,
  0xA2BFE8A1, 0xA81A664B, 0xC24B8B70, 0xC76C51A3,
  0xD192E819, 0xD6990624, 0xF40E3585, 0x106AA070,
  0x19A4C116, 0x1E376C08, 0x2748774C, 0x34B0BCB5,
  0x391C0CB3, 0x4ED8AA4A, 0x5B9CCA4F, 0x682E6FF3,
  0x748F82EE, 0x78A5636F, 0x84C87814, 0x8CC70208,
  0x90BEFFFA, 0xA4506CEB, 0xBEF9A3F7, 0xC67178F2
]

var W = new Array(64)

function Sha256 () {
  this.init()

  this._w = W // new Array(64)

  Hash.call(this, 64, 56)
}

inherits(Sha256, Hash)

Sha256.prototype.init = function () {
  this._a = 0x6a09e667
  this._b = 0xbb67ae85
  this._c = 0x3c6ef372
  this._d = 0xa54ff53a
  this._e = 0x510e527f
  this._f = 0x9b05688c
  this._g = 0x1f83d9ab
  this._h = 0x5be0cd19

  return this
}

function ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x) {
  return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10)
}

function sigma1 (x) {
  return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)
}

function gamma0 (x) {
  return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ (x >>> 3)
}

function gamma1 (x) {
  return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ (x >>> 10)
}

Sha256.prototype._update = function (M) {
  var W = this._w

  var a = this._a | 0
  var b = this._b | 0
  var c = this._c | 0
  var d = this._d | 0
  var e = this._e | 0
  var f = this._f | 0
  var g = this._g | 0
  var h = this._h | 0

  for (var i = 0; i < 16; ++i) W[i] = M.readInt32BE(i * 4)
  for (; i < 64; ++i) W[i] = (gamma1(W[i - 2]) + W[i - 7] + gamma0(W[i - 15]) + W[i - 16]) | 0

  for (var j = 0; j < 64; ++j) {
    var T1 = (h + sigma1(e) + ch(e, f, g) + K[j] + W[j]) | 0
    var T2 = (sigma0(a) + maj(a, b, c)) | 0

    h = g
    g = f
    f = e
    e = (d + T1) | 0
    d = c
    c = b
    b = a
    a = (T1 + T2) | 0
  }

  this._a = (a + this._a) | 0
  this._b = (b + this._b) | 0
  this._c = (c + this._c) | 0
  this._d = (d + this._d) | 0
  this._e = (e + this._e) | 0
  this._f = (f + this._f) | 0
  this._g = (g + this._g) | 0
  this._h = (h + this._h) | 0
}

Sha256.prototype._hash = function () {
  var H = Buffer.allocUnsafe(32)

  H.writeInt32BE(this._a, 0)
  H.writeInt32BE(this._b, 4)
  H.writeInt32BE(this._c, 8)
  H.writeInt32BE(this._d, 12)
  H.writeInt32BE(this._e, 16)
  H.writeInt32BE(this._f, 20)
  H.writeInt32BE(this._g, 24)
  H.writeInt32BE(this._h, 28)

  return H
}

module.exports = Sha256


/***/ }),

/***/ "./node_modules/sha.js/sha384.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha384.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var SHA512 = __webpack_require__(/*! ./sha512 */ "./node_modules/sha.js/sha512.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var W = new Array(160)

function Sha384 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha384, SHA512)

Sha384.prototype.init = function () {
  this._ah = 0xcbbb9d5d
  this._bh = 0x629a292a
  this._ch = 0x9159015a
  this._dh = 0x152fecd8
  this._eh = 0x67332667
  this._fh = 0x8eb44a87
  this._gh = 0xdb0c2e0d
  this._hh = 0x47b5481d

  this._al = 0xc1059ed8
  this._bl = 0x367cd507
  this._cl = 0x3070dd17
  this._dl = 0xf70e5939
  this._el = 0xffc00b31
  this._fl = 0x68581511
  this._gl = 0x64f98fa7
  this._hl = 0xbefa4fa4

  return this
}

Sha384.prototype._hash = function () {
  var H = Buffer.allocUnsafe(48)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)

  return H
}

module.exports = Sha384


/***/ }),

/***/ "./node_modules/sha.js/sha512.js":
/*!***************************************!*\
  !*** ./node_modules/sha.js/sha512.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js")
var Hash = __webpack_require__(/*! ./hash */ "./node_modules/sha.js/hash.js")
var Buffer = (__webpack_require__(/*! safe-buffer */ "./node_modules/safe-buffer/index.js").Buffer)

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
]

var W = new Array(160)

function Sha512 () {
  this.init()
  this._w = W

  Hash.call(this, 128, 112)
}

inherits(Sha512, Hash)

Sha512.prototype.init = function () {
  this._ah = 0x6a09e667
  this._bh = 0xbb67ae85
  this._ch = 0x3c6ef372
  this._dh = 0xa54ff53a
  this._eh = 0x510e527f
  this._fh = 0x9b05688c
  this._gh = 0x1f83d9ab
  this._hh = 0x5be0cd19

  this._al = 0xf3bcc908
  this._bl = 0x84caa73b
  this._cl = 0xfe94f82b
  this._dl = 0x5f1d36f1
  this._el = 0xade682d1
  this._fl = 0x2b3e6c1f
  this._gl = 0xfb41bd6b
  this._hl = 0x137e2179

  return this
}

function Ch (x, y, z) {
  return z ^ (x & (y ^ z))
}

function maj (x, y, z) {
  return (x & y) | (z & (x | y))
}

function sigma0 (x, xl) {
  return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25)
}

function sigma1 (x, xl) {
  return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23)
}

function Gamma0 (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7)
}

function Gamma0l (x, xl) {
  return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25)
}

function Gamma1 (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6)
}

function Gamma1l (x, xl) {
  return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26)
}

function getCarry (a, b) {
  return (a >>> 0) < (b >>> 0) ? 1 : 0
}

Sha512.prototype._update = function (M) {
  var W = this._w

  var ah = this._ah | 0
  var bh = this._bh | 0
  var ch = this._ch | 0
  var dh = this._dh | 0
  var eh = this._eh | 0
  var fh = this._fh | 0
  var gh = this._gh | 0
  var hh = this._hh | 0

  var al = this._al | 0
  var bl = this._bl | 0
  var cl = this._cl | 0
  var dl = this._dl | 0
  var el = this._el | 0
  var fl = this._fl | 0
  var gl = this._gl | 0
  var hl = this._hl | 0

  for (var i = 0; i < 32; i += 2) {
    W[i] = M.readInt32BE(i * 4)
    W[i + 1] = M.readInt32BE(i * 4 + 4)
  }
  for (; i < 160; i += 2) {
    var xh = W[i - 15 * 2]
    var xl = W[i - 15 * 2 + 1]
    var gamma0 = Gamma0(xh, xl)
    var gamma0l = Gamma0l(xl, xh)

    xh = W[i - 2 * 2]
    xl = W[i - 2 * 2 + 1]
    var gamma1 = Gamma1(xh, xl)
    var gamma1l = Gamma1l(xl, xh)

    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
    var Wi7h = W[i - 7 * 2]
    var Wi7l = W[i - 7 * 2 + 1]

    var Wi16h = W[i - 16 * 2]
    var Wi16l = W[i - 16 * 2 + 1]

    var Wil = (gamma0l + Wi7l) | 0
    var Wih = (gamma0 + Wi7h + getCarry(Wil, gamma0l)) | 0
    Wil = (Wil + gamma1l) | 0
    Wih = (Wih + gamma1 + getCarry(Wil, gamma1l)) | 0
    Wil = (Wil + Wi16l) | 0
    Wih = (Wih + Wi16h + getCarry(Wil, Wi16l)) | 0

    W[i] = Wih
    W[i + 1] = Wil
  }

  for (var j = 0; j < 160; j += 2) {
    Wih = W[j]
    Wil = W[j + 1]

    var majh = maj(ah, bh, ch)
    var majl = maj(al, bl, cl)

    var sigma0h = sigma0(ah, al)
    var sigma0l = sigma0(al, ah)
    var sigma1h = sigma1(eh, el)
    var sigma1l = sigma1(el, eh)

    // t1 = h + sigma1 + ch + K[j] + W[j]
    var Kih = K[j]
    var Kil = K[j + 1]

    var chh = Ch(eh, fh, gh)
    var chl = Ch(el, fl, gl)

    var t1l = (hl + sigma1l) | 0
    var t1h = (hh + sigma1h + getCarry(t1l, hl)) | 0
    t1l = (t1l + chl) | 0
    t1h = (t1h + chh + getCarry(t1l, chl)) | 0
    t1l = (t1l + Kil) | 0
    t1h = (t1h + Kih + getCarry(t1l, Kil)) | 0
    t1l = (t1l + Wil) | 0
    t1h = (t1h + Wih + getCarry(t1l, Wil)) | 0

    // t2 = sigma0 + maj
    var t2l = (sigma0l + majl) | 0
    var t2h = (sigma0h + majh + getCarry(t2l, sigma0l)) | 0

    hh = gh
    hl = gl
    gh = fh
    gl = fl
    fh = eh
    fl = el
    el = (dl + t1l) | 0
    eh = (dh + t1h + getCarry(el, dl)) | 0
    dh = ch
    dl = cl
    ch = bh
    cl = bl
    bh = ah
    bl = al
    al = (t1l + t2l) | 0
    ah = (t1h + t2h + getCarry(al, t1l)) | 0
  }

  this._al = (this._al + al) | 0
  this._bl = (this._bl + bl) | 0
  this._cl = (this._cl + cl) | 0
  this._dl = (this._dl + dl) | 0
  this._el = (this._el + el) | 0
  this._fl = (this._fl + fl) | 0
  this._gl = (this._gl + gl) | 0
  this._hl = (this._hl + hl) | 0

  this._ah = (this._ah + ah + getCarry(this._al, al)) | 0
  this._bh = (this._bh + bh + getCarry(this._bl, bl)) | 0
  this._ch = (this._ch + ch + getCarry(this._cl, cl)) | 0
  this._dh = (this._dh + dh + getCarry(this._dl, dl)) | 0
  this._eh = (this._eh + eh + getCarry(this._el, el)) | 0
  this._fh = (this._fh + fh + getCarry(this._fl, fl)) | 0
  this._gh = (this._gh + gh + getCarry(this._gl, gl)) | 0
  this._hh = (this._hh + hh + getCarry(this._hl, hl)) | 0
}

Sha512.prototype._hash = function () {
  var H = Buffer.allocUnsafe(64)

  function writeInt64BE (h, l, offset) {
    H.writeInt32BE(h, offset)
    H.writeInt32BE(l, offset + 4)
  }

  writeInt64BE(this._ah, this._al, 0)
  writeInt64BE(this._bh, this._bl, 8)
  writeInt64BE(this._ch, this._cl, 16)
  writeInt64BE(this._dh, this._dl, 24)
  writeInt64BE(this._eh, this._el, 32)
  writeInt64BE(this._fh, this._fl, 40)
  writeInt64BE(this._gh, this._gl, 48)
  writeInt64BE(this._hh, this._hl, 56)

  return H
}

module.exports = Sha512


/***/ }),

/***/ "./node_modules/tweetnacl/nacl-fast.js":
/*!*********************************************!*\
  !*** ./node_modules/tweetnacl/nacl-fast.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

(function(nacl) {
'use strict';

// Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
//
// Implementation derived from TweetNaCl version 20140427.
// See for details: http://tweetnacl.cr.yp.to/

var gf = function(init) {
  var i, r = new Float64Array(16);
  if (init) for (i = 0; i < init.length; i++) r[i] = init[i];
  return r;
};

//  Pluggable, initialized in high-level API below.
var randombytes = function(/* x, n */) { throw new Error('no PRNG'); };

var _0 = new Uint8Array(16);
var _9 = new Uint8Array(32); _9[0] = 9;

var gf0 = gf(),
    gf1 = gf([1]),
    _121665 = gf([0xdb41, 1]),
    D = gf([0x78a3, 0x1359, 0x4dca, 0x75eb, 0xd8ab, 0x4141, 0x0a4d, 0x0070, 0xe898, 0x7779, 0x4079, 0x8cc7, 0xfe73, 0x2b6f, 0x6cee, 0x5203]),
    D2 = gf([0xf159, 0x26b2, 0x9b94, 0xebd6, 0xb156, 0x8283, 0x149a, 0x00e0, 0xd130, 0xeef3, 0x80f2, 0x198e, 0xfce7, 0x56df, 0xd9dc, 0x2406]),
    X = gf([0xd51a, 0x8f25, 0x2d60, 0xc956, 0xa7b2, 0x9525, 0xc760, 0x692c, 0xdc5c, 0xfdd6, 0xe231, 0xc0a4, 0x53fe, 0xcd6e, 0x36d3, 0x2169]),
    Y = gf([0x6658, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666, 0x6666]),
    I = gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);

function ts64(x, i, h, l) {
  x[i]   = (h >> 24) & 0xff;
  x[i+1] = (h >> 16) & 0xff;
  x[i+2] = (h >>  8) & 0xff;
  x[i+3] = h & 0xff;
  x[i+4] = (l >> 24)  & 0xff;
  x[i+5] = (l >> 16)  & 0xff;
  x[i+6] = (l >>  8)  & 0xff;
  x[i+7] = l & 0xff;
}

function vn(x, xi, y, yi, n) {
  var i,d = 0;
  for (i = 0; i < n; i++) d |= x[xi+i]^y[yi+i];
  return (1 & ((d - 1) >>> 8)) - 1;
}

function crypto_verify_16(x, xi, y, yi) {
  return vn(x,xi,y,yi,16);
}

function crypto_verify_32(x, xi, y, yi) {
  return vn(x,xi,y,yi,32);
}

function core_salsa20(o, p, k, c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }
   x0 =  x0 +  j0 | 0;
   x1 =  x1 +  j1 | 0;
   x2 =  x2 +  j2 | 0;
   x3 =  x3 +  j3 | 0;
   x4 =  x4 +  j4 | 0;
   x5 =  x5 +  j5 | 0;
   x6 =  x6 +  j6 | 0;
   x7 =  x7 +  j7 | 0;
   x8 =  x8 +  j8 | 0;
   x9 =  x9 +  j9 | 0;
  x10 = x10 + j10 | 0;
  x11 = x11 + j11 | 0;
  x12 = x12 + j12 | 0;
  x13 = x13 + j13 | 0;
  x14 = x14 + j14 | 0;
  x15 = x15 + j15 | 0;

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x1 >>>  0 & 0xff;
  o[ 5] = x1 >>>  8 & 0xff;
  o[ 6] = x1 >>> 16 & 0xff;
  o[ 7] = x1 >>> 24 & 0xff;

  o[ 8] = x2 >>>  0 & 0xff;
  o[ 9] = x2 >>>  8 & 0xff;
  o[10] = x2 >>> 16 & 0xff;
  o[11] = x2 >>> 24 & 0xff;

  o[12] = x3 >>>  0 & 0xff;
  o[13] = x3 >>>  8 & 0xff;
  o[14] = x3 >>> 16 & 0xff;
  o[15] = x3 >>> 24 & 0xff;

  o[16] = x4 >>>  0 & 0xff;
  o[17] = x4 >>>  8 & 0xff;
  o[18] = x4 >>> 16 & 0xff;
  o[19] = x4 >>> 24 & 0xff;

  o[20] = x5 >>>  0 & 0xff;
  o[21] = x5 >>>  8 & 0xff;
  o[22] = x5 >>> 16 & 0xff;
  o[23] = x5 >>> 24 & 0xff;

  o[24] = x6 >>>  0 & 0xff;
  o[25] = x6 >>>  8 & 0xff;
  o[26] = x6 >>> 16 & 0xff;
  o[27] = x6 >>> 24 & 0xff;

  o[28] = x7 >>>  0 & 0xff;
  o[29] = x7 >>>  8 & 0xff;
  o[30] = x7 >>> 16 & 0xff;
  o[31] = x7 >>> 24 & 0xff;

  o[32] = x8 >>>  0 & 0xff;
  o[33] = x8 >>>  8 & 0xff;
  o[34] = x8 >>> 16 & 0xff;
  o[35] = x8 >>> 24 & 0xff;

  o[36] = x9 >>>  0 & 0xff;
  o[37] = x9 >>>  8 & 0xff;
  o[38] = x9 >>> 16 & 0xff;
  o[39] = x9 >>> 24 & 0xff;

  o[40] = x10 >>>  0 & 0xff;
  o[41] = x10 >>>  8 & 0xff;
  o[42] = x10 >>> 16 & 0xff;
  o[43] = x10 >>> 24 & 0xff;

  o[44] = x11 >>>  0 & 0xff;
  o[45] = x11 >>>  8 & 0xff;
  o[46] = x11 >>> 16 & 0xff;
  o[47] = x11 >>> 24 & 0xff;

  o[48] = x12 >>>  0 & 0xff;
  o[49] = x12 >>>  8 & 0xff;
  o[50] = x12 >>> 16 & 0xff;
  o[51] = x12 >>> 24 & 0xff;

  o[52] = x13 >>>  0 & 0xff;
  o[53] = x13 >>>  8 & 0xff;
  o[54] = x13 >>> 16 & 0xff;
  o[55] = x13 >>> 24 & 0xff;

  o[56] = x14 >>>  0 & 0xff;
  o[57] = x14 >>>  8 & 0xff;
  o[58] = x14 >>> 16 & 0xff;
  o[59] = x14 >>> 24 & 0xff;

  o[60] = x15 >>>  0 & 0xff;
  o[61] = x15 >>>  8 & 0xff;
  o[62] = x15 >>> 16 & 0xff;
  o[63] = x15 >>> 24 & 0xff;
}

function core_hsalsa20(o,p,k,c) {
  var j0  = c[ 0] & 0xff | (c[ 1] & 0xff)<<8 | (c[ 2] & 0xff)<<16 | (c[ 3] & 0xff)<<24,
      j1  = k[ 0] & 0xff | (k[ 1] & 0xff)<<8 | (k[ 2] & 0xff)<<16 | (k[ 3] & 0xff)<<24,
      j2  = k[ 4] & 0xff | (k[ 5] & 0xff)<<8 | (k[ 6] & 0xff)<<16 | (k[ 7] & 0xff)<<24,
      j3  = k[ 8] & 0xff | (k[ 9] & 0xff)<<8 | (k[10] & 0xff)<<16 | (k[11] & 0xff)<<24,
      j4  = k[12] & 0xff | (k[13] & 0xff)<<8 | (k[14] & 0xff)<<16 | (k[15] & 0xff)<<24,
      j5  = c[ 4] & 0xff | (c[ 5] & 0xff)<<8 | (c[ 6] & 0xff)<<16 | (c[ 7] & 0xff)<<24,
      j6  = p[ 0] & 0xff | (p[ 1] & 0xff)<<8 | (p[ 2] & 0xff)<<16 | (p[ 3] & 0xff)<<24,
      j7  = p[ 4] & 0xff | (p[ 5] & 0xff)<<8 | (p[ 6] & 0xff)<<16 | (p[ 7] & 0xff)<<24,
      j8  = p[ 8] & 0xff | (p[ 9] & 0xff)<<8 | (p[10] & 0xff)<<16 | (p[11] & 0xff)<<24,
      j9  = p[12] & 0xff | (p[13] & 0xff)<<8 | (p[14] & 0xff)<<16 | (p[15] & 0xff)<<24,
      j10 = c[ 8] & 0xff | (c[ 9] & 0xff)<<8 | (c[10] & 0xff)<<16 | (c[11] & 0xff)<<24,
      j11 = k[16] & 0xff | (k[17] & 0xff)<<8 | (k[18] & 0xff)<<16 | (k[19] & 0xff)<<24,
      j12 = k[20] & 0xff | (k[21] & 0xff)<<8 | (k[22] & 0xff)<<16 | (k[23] & 0xff)<<24,
      j13 = k[24] & 0xff | (k[25] & 0xff)<<8 | (k[26] & 0xff)<<16 | (k[27] & 0xff)<<24,
      j14 = k[28] & 0xff | (k[29] & 0xff)<<8 | (k[30] & 0xff)<<16 | (k[31] & 0xff)<<24,
      j15 = c[12] & 0xff | (c[13] & 0xff)<<8 | (c[14] & 0xff)<<16 | (c[15] & 0xff)<<24;

  var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7,
      x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14,
      x15 = j15, u;

  for (var i = 0; i < 20; i += 2) {
    u = x0 + x12 | 0;
    x4 ^= u<<7 | u>>>(32-7);
    u = x4 + x0 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x4 | 0;
    x12 ^= u<<13 | u>>>(32-13);
    u = x12 + x8 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x1 | 0;
    x9 ^= u<<7 | u>>>(32-7);
    u = x9 + x5 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x9 | 0;
    x1 ^= u<<13 | u>>>(32-13);
    u = x1 + x13 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x6 | 0;
    x14 ^= u<<7 | u>>>(32-7);
    u = x14 + x10 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x14 | 0;
    x6 ^= u<<13 | u>>>(32-13);
    u = x6 + x2 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x11 | 0;
    x3 ^= u<<7 | u>>>(32-7);
    u = x3 + x15 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x3 | 0;
    x11 ^= u<<13 | u>>>(32-13);
    u = x11 + x7 | 0;
    x15 ^= u<<18 | u>>>(32-18);

    u = x0 + x3 | 0;
    x1 ^= u<<7 | u>>>(32-7);
    u = x1 + x0 | 0;
    x2 ^= u<<9 | u>>>(32-9);
    u = x2 + x1 | 0;
    x3 ^= u<<13 | u>>>(32-13);
    u = x3 + x2 | 0;
    x0 ^= u<<18 | u>>>(32-18);

    u = x5 + x4 | 0;
    x6 ^= u<<7 | u>>>(32-7);
    u = x6 + x5 | 0;
    x7 ^= u<<9 | u>>>(32-9);
    u = x7 + x6 | 0;
    x4 ^= u<<13 | u>>>(32-13);
    u = x4 + x7 | 0;
    x5 ^= u<<18 | u>>>(32-18);

    u = x10 + x9 | 0;
    x11 ^= u<<7 | u>>>(32-7);
    u = x11 + x10 | 0;
    x8 ^= u<<9 | u>>>(32-9);
    u = x8 + x11 | 0;
    x9 ^= u<<13 | u>>>(32-13);
    u = x9 + x8 | 0;
    x10 ^= u<<18 | u>>>(32-18);

    u = x15 + x14 | 0;
    x12 ^= u<<7 | u>>>(32-7);
    u = x12 + x15 | 0;
    x13 ^= u<<9 | u>>>(32-9);
    u = x13 + x12 | 0;
    x14 ^= u<<13 | u>>>(32-13);
    u = x14 + x13 | 0;
    x15 ^= u<<18 | u>>>(32-18);
  }

  o[ 0] = x0 >>>  0 & 0xff;
  o[ 1] = x0 >>>  8 & 0xff;
  o[ 2] = x0 >>> 16 & 0xff;
  o[ 3] = x0 >>> 24 & 0xff;

  o[ 4] = x5 >>>  0 & 0xff;
  o[ 5] = x5 >>>  8 & 0xff;
  o[ 6] = x5 >>> 16 & 0xff;
  o[ 7] = x5 >>> 24 & 0xff;

  o[ 8] = x10 >>>  0 & 0xff;
  o[ 9] = x10 >>>  8 & 0xff;
  o[10] = x10 >>> 16 & 0xff;
  o[11] = x10 >>> 24 & 0xff;

  o[12] = x15 >>>  0 & 0xff;
  o[13] = x15 >>>  8 & 0xff;
  o[14] = x15 >>> 16 & 0xff;
  o[15] = x15 >>> 24 & 0xff;

  o[16] = x6 >>>  0 & 0xff;
  o[17] = x6 >>>  8 & 0xff;
  o[18] = x6 >>> 16 & 0xff;
  o[19] = x6 >>> 24 & 0xff;

  o[20] = x7 >>>  0 & 0xff;
  o[21] = x7 >>>  8 & 0xff;
  o[22] = x7 >>> 16 & 0xff;
  o[23] = x7 >>> 24 & 0xff;

  o[24] = x8 >>>  0 & 0xff;
  o[25] = x8 >>>  8 & 0xff;
  o[26] = x8 >>> 16 & 0xff;
  o[27] = x8 >>> 24 & 0xff;

  o[28] = x9 >>>  0 & 0xff;
  o[29] = x9 >>>  8 & 0xff;
  o[30] = x9 >>> 16 & 0xff;
  o[31] = x9 >>> 24 & 0xff;
}

function crypto_core_salsa20(out,inp,k,c) {
  core_salsa20(out,inp,k,c);
}

function crypto_core_hsalsa20(out,inp,k,c) {
  core_hsalsa20(out,inp,k,c);
}

var sigma = new Uint8Array([101, 120, 112, 97, 110, 100, 32, 51, 50, 45, 98, 121, 116, 101, 32, 107]);
            // "expand 32-byte k"

function crypto_stream_salsa20_xor(c,cpos,m,mpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = m[mpos+i] ^ x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
    mpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = m[mpos+i] ^ x[i];
  }
  return 0;
}

function crypto_stream_salsa20(c,cpos,b,n,k) {
  var z = new Uint8Array(16), x = new Uint8Array(64);
  var u, i;
  for (i = 0; i < 16; i++) z[i] = 0;
  for (i = 0; i < 8; i++) z[i] = n[i];
  while (b >= 64) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < 64; i++) c[cpos+i] = x[i];
    u = 1;
    for (i = 8; i < 16; i++) {
      u = u + (z[i] & 0xff) | 0;
      z[i] = u & 0xff;
      u >>>= 8;
    }
    b -= 64;
    cpos += 64;
  }
  if (b > 0) {
    crypto_core_salsa20(x,z,k,sigma);
    for (i = 0; i < b; i++) c[cpos+i] = x[i];
  }
  return 0;
}

function crypto_stream(c,cpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20(c,cpos,d,sn,s);
}

function crypto_stream_xor(c,cpos,m,mpos,d,n,k) {
  var s = new Uint8Array(32);
  crypto_core_hsalsa20(s,n,k,sigma);
  var sn = new Uint8Array(8);
  for (var i = 0; i < 8; i++) sn[i] = n[i+16];
  return crypto_stream_salsa20_xor(c,cpos,m,mpos,d,sn,s);
}

/*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/

var poly1305 = function(key) {
  this.buffer = new Uint8Array(16);
  this.r = new Uint16Array(10);
  this.h = new Uint16Array(10);
  this.pad = new Uint16Array(8);
  this.leftover = 0;
  this.fin = 0;

  var t0, t1, t2, t3, t4, t5, t6, t7;

  t0 = key[ 0] & 0xff | (key[ 1] & 0xff) << 8; this.r[0] = ( t0                     ) & 0x1fff;
  t1 = key[ 2] & 0xff | (key[ 3] & 0xff) << 8; this.r[1] = ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
  t2 = key[ 4] & 0xff | (key[ 5] & 0xff) << 8; this.r[2] = ((t1 >>> 10) | (t2 <<  6)) & 0x1f03;
  t3 = key[ 6] & 0xff | (key[ 7] & 0xff) << 8; this.r[3] = ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
  t4 = key[ 8] & 0xff | (key[ 9] & 0xff) << 8; this.r[4] = ((t3 >>>  4) | (t4 << 12)) & 0x00ff;
  this.r[5] = ((t4 >>>  1)) & 0x1ffe;
  t5 = key[10] & 0xff | (key[11] & 0xff) << 8; this.r[6] = ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
  t6 = key[12] & 0xff | (key[13] & 0xff) << 8; this.r[7] = ((t5 >>> 11) | (t6 <<  5)) & 0x1f81;
  t7 = key[14] & 0xff | (key[15] & 0xff) << 8; this.r[8] = ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
  this.r[9] = ((t7 >>>  5)) & 0x007f;

  this.pad[0] = key[16] & 0xff | (key[17] & 0xff) << 8;
  this.pad[1] = key[18] & 0xff | (key[19] & 0xff) << 8;
  this.pad[2] = key[20] & 0xff | (key[21] & 0xff) << 8;
  this.pad[3] = key[22] & 0xff | (key[23] & 0xff) << 8;
  this.pad[4] = key[24] & 0xff | (key[25] & 0xff) << 8;
  this.pad[5] = key[26] & 0xff | (key[27] & 0xff) << 8;
  this.pad[6] = key[28] & 0xff | (key[29] & 0xff) << 8;
  this.pad[7] = key[30] & 0xff | (key[31] & 0xff) << 8;
};

poly1305.prototype.blocks = function(m, mpos, bytes) {
  var hibit = this.fin ? 0 : (1 << 11);
  var t0, t1, t2, t3, t4, t5, t6, t7, c;
  var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;

  var h0 = this.h[0],
      h1 = this.h[1],
      h2 = this.h[2],
      h3 = this.h[3],
      h4 = this.h[4],
      h5 = this.h[5],
      h6 = this.h[6],
      h7 = this.h[7],
      h8 = this.h[8],
      h9 = this.h[9];

  var r0 = this.r[0],
      r1 = this.r[1],
      r2 = this.r[2],
      r3 = this.r[3],
      r4 = this.r[4],
      r5 = this.r[5],
      r6 = this.r[6],
      r7 = this.r[7],
      r8 = this.r[8],
      r9 = this.r[9];

  while (bytes >= 16) {
    t0 = m[mpos+ 0] & 0xff | (m[mpos+ 1] & 0xff) << 8; h0 += ( t0                     ) & 0x1fff;
    t1 = m[mpos+ 2] & 0xff | (m[mpos+ 3] & 0xff) << 8; h1 += ((t0 >>> 13) | (t1 <<  3)) & 0x1fff;
    t2 = m[mpos+ 4] & 0xff | (m[mpos+ 5] & 0xff) << 8; h2 += ((t1 >>> 10) | (t2 <<  6)) & 0x1fff;
    t3 = m[mpos+ 6] & 0xff | (m[mpos+ 7] & 0xff) << 8; h3 += ((t2 >>>  7) | (t3 <<  9)) & 0x1fff;
    t4 = m[mpos+ 8] & 0xff | (m[mpos+ 9] & 0xff) << 8; h4 += ((t3 >>>  4) | (t4 << 12)) & 0x1fff;
    h5 += ((t4 >>>  1)) & 0x1fff;
    t5 = m[mpos+10] & 0xff | (m[mpos+11] & 0xff) << 8; h6 += ((t4 >>> 14) | (t5 <<  2)) & 0x1fff;
    t6 = m[mpos+12] & 0xff | (m[mpos+13] & 0xff) << 8; h7 += ((t5 >>> 11) | (t6 <<  5)) & 0x1fff;
    t7 = m[mpos+14] & 0xff | (m[mpos+15] & 0xff) << 8; h8 += ((t6 >>>  8) | (t7 <<  8)) & 0x1fff;
    h9 += ((t7 >>> 5)) | hibit;

    c = 0;

    d0 = c;
    d0 += h0 * r0;
    d0 += h1 * (5 * r9);
    d0 += h2 * (5 * r8);
    d0 += h3 * (5 * r7);
    d0 += h4 * (5 * r6);
    c = (d0 >>> 13); d0 &= 0x1fff;
    d0 += h5 * (5 * r5);
    d0 += h6 * (5 * r4);
    d0 += h7 * (5 * r3);
    d0 += h8 * (5 * r2);
    d0 += h9 * (5 * r1);
    c += (d0 >>> 13); d0 &= 0x1fff;

    d1 = c;
    d1 += h0 * r1;
    d1 += h1 * r0;
    d1 += h2 * (5 * r9);
    d1 += h3 * (5 * r8);
    d1 += h4 * (5 * r7);
    c = (d1 >>> 13); d1 &= 0x1fff;
    d1 += h5 * (5 * r6);
    d1 += h6 * (5 * r5);
    d1 += h7 * (5 * r4);
    d1 += h8 * (5 * r3);
    d1 += h9 * (5 * r2);
    c += (d1 >>> 13); d1 &= 0x1fff;

    d2 = c;
    d2 += h0 * r2;
    d2 += h1 * r1;
    d2 += h2 * r0;
    d2 += h3 * (5 * r9);
    d2 += h4 * (5 * r8);
    c = (d2 >>> 13); d2 &= 0x1fff;
    d2 += h5 * (5 * r7);
    d2 += h6 * (5 * r6);
    d2 += h7 * (5 * r5);
    d2 += h8 * (5 * r4);
    d2 += h9 * (5 * r3);
    c += (d2 >>> 13); d2 &= 0x1fff;

    d3 = c;
    d3 += h0 * r3;
    d3 += h1 * r2;
    d3 += h2 * r1;
    d3 += h3 * r0;
    d3 += h4 * (5 * r9);
    c = (d3 >>> 13); d3 &= 0x1fff;
    d3 += h5 * (5 * r8);
    d3 += h6 * (5 * r7);
    d3 += h7 * (5 * r6);
    d3 += h8 * (5 * r5);
    d3 += h9 * (5 * r4);
    c += (d3 >>> 13); d3 &= 0x1fff;

    d4 = c;
    d4 += h0 * r4;
    d4 += h1 * r3;
    d4 += h2 * r2;
    d4 += h3 * r1;
    d4 += h4 * r0;
    c = (d4 >>> 13); d4 &= 0x1fff;
    d4 += h5 * (5 * r9);
    d4 += h6 * (5 * r8);
    d4 += h7 * (5 * r7);
    d4 += h8 * (5 * r6);
    d4 += h9 * (5 * r5);
    c += (d4 >>> 13); d4 &= 0x1fff;

    d5 = c;
    d5 += h0 * r5;
    d5 += h1 * r4;
    d5 += h2 * r3;
    d5 += h3 * r2;
    d5 += h4 * r1;
    c = (d5 >>> 13); d5 &= 0x1fff;
    d5 += h5 * r0;
    d5 += h6 * (5 * r9);
    d5 += h7 * (5 * r8);
    d5 += h8 * (5 * r7);
    d5 += h9 * (5 * r6);
    c += (d5 >>> 13); d5 &= 0x1fff;

    d6 = c;
    d6 += h0 * r6;
    d6 += h1 * r5;
    d6 += h2 * r4;
    d6 += h3 * r3;
    d6 += h4 * r2;
    c = (d6 >>> 13); d6 &= 0x1fff;
    d6 += h5 * r1;
    d6 += h6 * r0;
    d6 += h7 * (5 * r9);
    d6 += h8 * (5 * r8);
    d6 += h9 * (5 * r7);
    c += (d6 >>> 13); d6 &= 0x1fff;

    d7 = c;
    d7 += h0 * r7;
    d7 += h1 * r6;
    d7 += h2 * r5;
    d7 += h3 * r4;
    d7 += h4 * r3;
    c = (d7 >>> 13); d7 &= 0x1fff;
    d7 += h5 * r2;
    d7 += h6 * r1;
    d7 += h7 * r0;
    d7 += h8 * (5 * r9);
    d7 += h9 * (5 * r8);
    c += (d7 >>> 13); d7 &= 0x1fff;

    d8 = c;
    d8 += h0 * r8;
    d8 += h1 * r7;
    d8 += h2 * r6;
    d8 += h3 * r5;
    d8 += h4 * r4;
    c = (d8 >>> 13); d8 &= 0x1fff;
    d8 += h5 * r3;
    d8 += h6 * r2;
    d8 += h7 * r1;
    d8 += h8 * r0;
    d8 += h9 * (5 * r9);
    c += (d8 >>> 13); d8 &= 0x1fff;

    d9 = c;
    d9 += h0 * r9;
    d9 += h1 * r8;
    d9 += h2 * r7;
    d9 += h3 * r6;
    d9 += h4 * r5;
    c = (d9 >>> 13); d9 &= 0x1fff;
    d9 += h5 * r4;
    d9 += h6 * r3;
    d9 += h7 * r2;
    d9 += h8 * r1;
    d9 += h9 * r0;
    c += (d9 >>> 13); d9 &= 0x1fff;

    c = (((c << 2) + c)) | 0;
    c = (c + d0) | 0;
    d0 = c & 0x1fff;
    c = (c >>> 13);
    d1 += c;

    h0 = d0;
    h1 = d1;
    h2 = d2;
    h3 = d3;
    h4 = d4;
    h5 = d5;
    h6 = d6;
    h7 = d7;
    h8 = d8;
    h9 = d9;

    mpos += 16;
    bytes -= 16;
  }
  this.h[0] = h0;
  this.h[1] = h1;
  this.h[2] = h2;
  this.h[3] = h3;
  this.h[4] = h4;
  this.h[5] = h5;
  this.h[6] = h6;
  this.h[7] = h7;
  this.h[8] = h8;
  this.h[9] = h9;
};

poly1305.prototype.finish = function(mac, macpos) {
  var g = new Uint16Array(10);
  var c, mask, f, i;

  if (this.leftover) {
    i = this.leftover;
    this.buffer[i++] = 1;
    for (; i < 16; i++) this.buffer[i] = 0;
    this.fin = 1;
    this.blocks(this.buffer, 0, 16);
  }

  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  for (i = 2; i < 10; i++) {
    this.h[i] += c;
    c = this.h[i] >>> 13;
    this.h[i] &= 0x1fff;
  }
  this.h[0] += (c * 5);
  c = this.h[0] >>> 13;
  this.h[0] &= 0x1fff;
  this.h[1] += c;
  c = this.h[1] >>> 13;
  this.h[1] &= 0x1fff;
  this.h[2] += c;

  g[0] = this.h[0] + 5;
  c = g[0] >>> 13;
  g[0] &= 0x1fff;
  for (i = 1; i < 10; i++) {
    g[i] = this.h[i] + c;
    c = g[i] >>> 13;
    g[i] &= 0x1fff;
  }
  g[9] -= (1 << 13);

  mask = (c ^ 1) - 1;
  for (i = 0; i < 10; i++) g[i] &= mask;
  mask = ~mask;
  for (i = 0; i < 10; i++) this.h[i] = (this.h[i] & mask) | g[i];

  this.h[0] = ((this.h[0]       ) | (this.h[1] << 13)                    ) & 0xffff;
  this.h[1] = ((this.h[1] >>>  3) | (this.h[2] << 10)                    ) & 0xffff;
  this.h[2] = ((this.h[2] >>>  6) | (this.h[3] <<  7)                    ) & 0xffff;
  this.h[3] = ((this.h[3] >>>  9) | (this.h[4] <<  4)                    ) & 0xffff;
  this.h[4] = ((this.h[4] >>> 12) | (this.h[5] <<  1) | (this.h[6] << 14)) & 0xffff;
  this.h[5] = ((this.h[6] >>>  2) | (this.h[7] << 11)                    ) & 0xffff;
  this.h[6] = ((this.h[7] >>>  5) | (this.h[8] <<  8)                    ) & 0xffff;
  this.h[7] = ((this.h[8] >>>  8) | (this.h[9] <<  5)                    ) & 0xffff;

  f = this.h[0] + this.pad[0];
  this.h[0] = f & 0xffff;
  for (i = 1; i < 8; i++) {
    f = (((this.h[i] + this.pad[i]) | 0) + (f >>> 16)) | 0;
    this.h[i] = f & 0xffff;
  }

  mac[macpos+ 0] = (this.h[0] >>> 0) & 0xff;
  mac[macpos+ 1] = (this.h[0] >>> 8) & 0xff;
  mac[macpos+ 2] = (this.h[1] >>> 0) & 0xff;
  mac[macpos+ 3] = (this.h[1] >>> 8) & 0xff;
  mac[macpos+ 4] = (this.h[2] >>> 0) & 0xff;
  mac[macpos+ 5] = (this.h[2] >>> 8) & 0xff;
  mac[macpos+ 6] = (this.h[3] >>> 0) & 0xff;
  mac[macpos+ 7] = (this.h[3] >>> 8) & 0xff;
  mac[macpos+ 8] = (this.h[4] >>> 0) & 0xff;
  mac[macpos+ 9] = (this.h[4] >>> 8) & 0xff;
  mac[macpos+10] = (this.h[5] >>> 0) & 0xff;
  mac[macpos+11] = (this.h[5] >>> 8) & 0xff;
  mac[macpos+12] = (this.h[6] >>> 0) & 0xff;
  mac[macpos+13] = (this.h[6] >>> 8) & 0xff;
  mac[macpos+14] = (this.h[7] >>> 0) & 0xff;
  mac[macpos+15] = (this.h[7] >>> 8) & 0xff;
};

poly1305.prototype.update = function(m, mpos, bytes) {
  var i, want;

  if (this.leftover) {
    want = (16 - this.leftover);
    if (want > bytes)
      want = bytes;
    for (i = 0; i < want; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    bytes -= want;
    mpos += want;
    this.leftover += want;
    if (this.leftover < 16)
      return;
    this.blocks(this.buffer, 0, 16);
    this.leftover = 0;
  }

  if (bytes >= 16) {
    want = bytes - (bytes % 16);
    this.blocks(m, mpos, want);
    mpos += want;
    bytes -= want;
  }

  if (bytes) {
    for (i = 0; i < bytes; i++)
      this.buffer[this.leftover + i] = m[mpos+i];
    this.leftover += bytes;
  }
};

function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
  var s = new poly1305(k);
  s.update(m, mpos, n);
  s.finish(out, outpos);
  return 0;
}

function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
  var x = new Uint8Array(16);
  crypto_onetimeauth(x,0,m,mpos,n,k);
  return crypto_verify_16(h,hpos,x,0);
}

function crypto_secretbox(c,m,d,n,k) {
  var i;
  if (d < 32) return -1;
  crypto_stream_xor(c,0,m,0,d,n,k);
  crypto_onetimeauth(c, 16, c, 32, d - 32, c);
  for (i = 0; i < 16; i++) c[i] = 0;
  return 0;
}

function crypto_secretbox_open(m,c,d,n,k) {
  var i;
  var x = new Uint8Array(32);
  if (d < 32) return -1;
  crypto_stream(x,0,32,n,k);
  if (crypto_onetimeauth_verify(c, 16,c, 32,d - 32,x) !== 0) return -1;
  crypto_stream_xor(m,0,c,0,d,n,k);
  for (i = 0; i < 32; i++) m[i] = 0;
  return 0;
}

function set25519(r, a) {
  var i;
  for (i = 0; i < 16; i++) r[i] = a[i]|0;
}

function car25519(o) {
  var i, v, c = 1;
  for (i = 0; i < 16; i++) {
    v = o[i] + c + 65535;
    c = Math.floor(v / 65536);
    o[i] = v - c * 65536;
  }
  o[0] += c-1 + 37 * (c-1);
}

function sel25519(p, q, b) {
  var t, c = ~(b-1);
  for (var i = 0; i < 16; i++) {
    t = c & (p[i] ^ q[i]);
    p[i] ^= t;
    q[i] ^= t;
  }
}

function pack25519(o, n) {
  var i, j, b;
  var m = gf(), t = gf();
  for (i = 0; i < 16; i++) t[i] = n[i];
  car25519(t);
  car25519(t);
  car25519(t);
  for (j = 0; j < 2; j++) {
    m[0] = t[0] - 0xffed;
    for (i = 1; i < 15; i++) {
      m[i] = t[i] - 0xffff - ((m[i-1]>>16) & 1);
      m[i-1] &= 0xffff;
    }
    m[15] = t[15] - 0x7fff - ((m[14]>>16) & 1);
    b = (m[15]>>16) & 1;
    m[14] &= 0xffff;
    sel25519(t, m, 1-b);
  }
  for (i = 0; i < 16; i++) {
    o[2*i] = t[i] & 0xff;
    o[2*i+1] = t[i]>>8;
  }
}

function neq25519(a, b) {
  var c = new Uint8Array(32), d = new Uint8Array(32);
  pack25519(c, a);
  pack25519(d, b);
  return crypto_verify_32(c, 0, d, 0);
}

function par25519(a) {
  var d = new Uint8Array(32);
  pack25519(d, a);
  return d[0] & 1;
}

function unpack25519(o, n) {
  var i;
  for (i = 0; i < 16; i++) o[i] = n[2*i] + (n[2*i+1] << 8);
  o[15] &= 0x7fff;
}

function A(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] + b[i];
}

function Z(o, a, b) {
  for (var i = 0; i < 16; i++) o[i] = a[i] - b[i];
}

function M(o, a, b) {
  var v, c,
     t0 = 0,  t1 = 0,  t2 = 0,  t3 = 0,  t4 = 0,  t5 = 0,  t6 = 0,  t7 = 0,
     t8 = 0,  t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0,
    t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0,
    t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0,
    b0 = b[0],
    b1 = b[1],
    b2 = b[2],
    b3 = b[3],
    b4 = b[4],
    b5 = b[5],
    b6 = b[6],
    b7 = b[7],
    b8 = b[8],
    b9 = b[9],
    b10 = b[10],
    b11 = b[11],
    b12 = b[12],
    b13 = b[13],
    b14 = b[14],
    b15 = b[15];

  v = a[0];
  t0 += v * b0;
  t1 += v * b1;
  t2 += v * b2;
  t3 += v * b3;
  t4 += v * b4;
  t5 += v * b5;
  t6 += v * b6;
  t7 += v * b7;
  t8 += v * b8;
  t9 += v * b9;
  t10 += v * b10;
  t11 += v * b11;
  t12 += v * b12;
  t13 += v * b13;
  t14 += v * b14;
  t15 += v * b15;
  v = a[1];
  t1 += v * b0;
  t2 += v * b1;
  t3 += v * b2;
  t4 += v * b3;
  t5 += v * b4;
  t6 += v * b5;
  t7 += v * b6;
  t8 += v * b7;
  t9 += v * b8;
  t10 += v * b9;
  t11 += v * b10;
  t12 += v * b11;
  t13 += v * b12;
  t14 += v * b13;
  t15 += v * b14;
  t16 += v * b15;
  v = a[2];
  t2 += v * b0;
  t3 += v * b1;
  t4 += v * b2;
  t5 += v * b3;
  t6 += v * b4;
  t7 += v * b5;
  t8 += v * b6;
  t9 += v * b7;
  t10 += v * b8;
  t11 += v * b9;
  t12 += v * b10;
  t13 += v * b11;
  t14 += v * b12;
  t15 += v * b13;
  t16 += v * b14;
  t17 += v * b15;
  v = a[3];
  t3 += v * b0;
  t4 += v * b1;
  t5 += v * b2;
  t6 += v * b3;
  t7 += v * b4;
  t8 += v * b5;
  t9 += v * b6;
  t10 += v * b7;
  t11 += v * b8;
  t12 += v * b9;
  t13 += v * b10;
  t14 += v * b11;
  t15 += v * b12;
  t16 += v * b13;
  t17 += v * b14;
  t18 += v * b15;
  v = a[4];
  t4 += v * b0;
  t5 += v * b1;
  t6 += v * b2;
  t7 += v * b3;
  t8 += v * b4;
  t9 += v * b5;
  t10 += v * b6;
  t11 += v * b7;
  t12 += v * b8;
  t13 += v * b9;
  t14 += v * b10;
  t15 += v * b11;
  t16 += v * b12;
  t17 += v * b13;
  t18 += v * b14;
  t19 += v * b15;
  v = a[5];
  t5 += v * b0;
  t6 += v * b1;
  t7 += v * b2;
  t8 += v * b3;
  t9 += v * b4;
  t10 += v * b5;
  t11 += v * b6;
  t12 += v * b7;
  t13 += v * b8;
  t14 += v * b9;
  t15 += v * b10;
  t16 += v * b11;
  t17 += v * b12;
  t18 += v * b13;
  t19 += v * b14;
  t20 += v * b15;
  v = a[6];
  t6 += v * b0;
  t7 += v * b1;
  t8 += v * b2;
  t9 += v * b3;
  t10 += v * b4;
  t11 += v * b5;
  t12 += v * b6;
  t13 += v * b7;
  t14 += v * b8;
  t15 += v * b9;
  t16 += v * b10;
  t17 += v * b11;
  t18 += v * b12;
  t19 += v * b13;
  t20 += v * b14;
  t21 += v * b15;
  v = a[7];
  t7 += v * b0;
  t8 += v * b1;
  t9 += v * b2;
  t10 += v * b3;
  t11 += v * b4;
  t12 += v * b5;
  t13 += v * b6;
  t14 += v * b7;
  t15 += v * b8;
  t16 += v * b9;
  t17 += v * b10;
  t18 += v * b11;
  t19 += v * b12;
  t20 += v * b13;
  t21 += v * b14;
  t22 += v * b15;
  v = a[8];
  t8 += v * b0;
  t9 += v * b1;
  t10 += v * b2;
  t11 += v * b3;
  t12 += v * b4;
  t13 += v * b5;
  t14 += v * b6;
  t15 += v * b7;
  t16 += v * b8;
  t17 += v * b9;
  t18 += v * b10;
  t19 += v * b11;
  t20 += v * b12;
  t21 += v * b13;
  t22 += v * b14;
  t23 += v * b15;
  v = a[9];
  t9 += v * b0;
  t10 += v * b1;
  t11 += v * b2;
  t12 += v * b3;
  t13 += v * b4;
  t14 += v * b5;
  t15 += v * b6;
  t16 += v * b7;
  t17 += v * b8;
  t18 += v * b9;
  t19 += v * b10;
  t20 += v * b11;
  t21 += v * b12;
  t22 += v * b13;
  t23 += v * b14;
  t24 += v * b15;
  v = a[10];
  t10 += v * b0;
  t11 += v * b1;
  t12 += v * b2;
  t13 += v * b3;
  t14 += v * b4;
  t15 += v * b5;
  t16 += v * b6;
  t17 += v * b7;
  t18 += v * b8;
  t19 += v * b9;
  t20 += v * b10;
  t21 += v * b11;
  t22 += v * b12;
  t23 += v * b13;
  t24 += v * b14;
  t25 += v * b15;
  v = a[11];
  t11 += v * b0;
  t12 += v * b1;
  t13 += v * b2;
  t14 += v * b3;
  t15 += v * b4;
  t16 += v * b5;
  t17 += v * b6;
  t18 += v * b7;
  t19 += v * b8;
  t20 += v * b9;
  t21 += v * b10;
  t22 += v * b11;
  t23 += v * b12;
  t24 += v * b13;
  t25 += v * b14;
  t26 += v * b15;
  v = a[12];
  t12 += v * b0;
  t13 += v * b1;
  t14 += v * b2;
  t15 += v * b3;
  t16 += v * b4;
  t17 += v * b5;
  t18 += v * b6;
  t19 += v * b7;
  t20 += v * b8;
  t21 += v * b9;
  t22 += v * b10;
  t23 += v * b11;
  t24 += v * b12;
  t25 += v * b13;
  t26 += v * b14;
  t27 += v * b15;
  v = a[13];
  t13 += v * b0;
  t14 += v * b1;
  t15 += v * b2;
  t16 += v * b3;
  t17 += v * b4;
  t18 += v * b5;
  t19 += v * b6;
  t20 += v * b7;
  t21 += v * b8;
  t22 += v * b9;
  t23 += v * b10;
  t24 += v * b11;
  t25 += v * b12;
  t26 += v * b13;
  t27 += v * b14;
  t28 += v * b15;
  v = a[14];
  t14 += v * b0;
  t15 += v * b1;
  t16 += v * b2;
  t17 += v * b3;
  t18 += v * b4;
  t19 += v * b5;
  t20 += v * b6;
  t21 += v * b7;
  t22 += v * b8;
  t23 += v * b9;
  t24 += v * b10;
  t25 += v * b11;
  t26 += v * b12;
  t27 += v * b13;
  t28 += v * b14;
  t29 += v * b15;
  v = a[15];
  t15 += v * b0;
  t16 += v * b1;
  t17 += v * b2;
  t18 += v * b3;
  t19 += v * b4;
  t20 += v * b5;
  t21 += v * b6;
  t22 += v * b7;
  t23 += v * b8;
  t24 += v * b9;
  t25 += v * b10;
  t26 += v * b11;
  t27 += v * b12;
  t28 += v * b13;
  t29 += v * b14;
  t30 += v * b15;

  t0  += 38 * t16;
  t1  += 38 * t17;
  t2  += 38 * t18;
  t3  += 38 * t19;
  t4  += 38 * t20;
  t5  += 38 * t21;
  t6  += 38 * t22;
  t7  += 38 * t23;
  t8  += 38 * t24;
  t9  += 38 * t25;
  t10 += 38 * t26;
  t11 += 38 * t27;
  t12 += 38 * t28;
  t13 += 38 * t29;
  t14 += 38 * t30;
  // t15 left as is

  // first car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  // second car
  c = 1;
  v =  t0 + c + 65535; c = Math.floor(v / 65536);  t0 = v - c * 65536;
  v =  t1 + c + 65535; c = Math.floor(v / 65536);  t1 = v - c * 65536;
  v =  t2 + c + 65535; c = Math.floor(v / 65536);  t2 = v - c * 65536;
  v =  t3 + c + 65535; c = Math.floor(v / 65536);  t3 = v - c * 65536;
  v =  t4 + c + 65535; c = Math.floor(v / 65536);  t4 = v - c * 65536;
  v =  t5 + c + 65535; c = Math.floor(v / 65536);  t5 = v - c * 65536;
  v =  t6 + c + 65535; c = Math.floor(v / 65536);  t6 = v - c * 65536;
  v =  t7 + c + 65535; c = Math.floor(v / 65536);  t7 = v - c * 65536;
  v =  t8 + c + 65535; c = Math.floor(v / 65536);  t8 = v - c * 65536;
  v =  t9 + c + 65535; c = Math.floor(v / 65536);  t9 = v - c * 65536;
  v = t10 + c + 65535; c = Math.floor(v / 65536); t10 = v - c * 65536;
  v = t11 + c + 65535; c = Math.floor(v / 65536); t11 = v - c * 65536;
  v = t12 + c + 65535; c = Math.floor(v / 65536); t12 = v - c * 65536;
  v = t13 + c + 65535; c = Math.floor(v / 65536); t13 = v - c * 65536;
  v = t14 + c + 65535; c = Math.floor(v / 65536); t14 = v - c * 65536;
  v = t15 + c + 65535; c = Math.floor(v / 65536); t15 = v - c * 65536;
  t0 += c-1 + 37 * (c-1);

  o[ 0] = t0;
  o[ 1] = t1;
  o[ 2] = t2;
  o[ 3] = t3;
  o[ 4] = t4;
  o[ 5] = t5;
  o[ 6] = t6;
  o[ 7] = t7;
  o[ 8] = t8;
  o[ 9] = t9;
  o[10] = t10;
  o[11] = t11;
  o[12] = t12;
  o[13] = t13;
  o[14] = t14;
  o[15] = t15;
}

function S(o, a) {
  M(o, a, a);
}

function inv25519(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 253; a >= 0; a--) {
    S(c, c);
    if(a !== 2 && a !== 4) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function pow2523(o, i) {
  var c = gf();
  var a;
  for (a = 0; a < 16; a++) c[a] = i[a];
  for (a = 250; a >= 0; a--) {
      S(c, c);
      if(a !== 1) M(c, c, i);
  }
  for (a = 0; a < 16; a++) o[a] = c[a];
}

function crypto_scalarmult(q, n, p) {
  var z = new Uint8Array(32);
  var x = new Float64Array(80), r, i;
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf();
  for (i = 0; i < 31; i++) z[i] = n[i];
  z[31]=(n[31]&127)|64;
  z[0]&=248;
  unpack25519(x,p);
  for (i = 0; i < 16; i++) {
    b[i]=x[i];
    d[i]=a[i]=c[i]=0;
  }
  a[0]=d[0]=1;
  for (i=254; i>=0; --i) {
    r=(z[i>>>3]>>>(i&7))&1;
    sel25519(a,b,r);
    sel25519(c,d,r);
    A(e,a,c);
    Z(a,a,c);
    A(c,b,d);
    Z(b,b,d);
    S(d,e);
    S(f,a);
    M(a,c,a);
    M(c,b,e);
    A(e,a,c);
    Z(a,a,c);
    S(b,a);
    Z(c,d,f);
    M(a,c,_121665);
    A(a,a,d);
    M(c,c,a);
    M(a,d,f);
    M(d,b,x);
    S(b,e);
    sel25519(a,b,r);
    sel25519(c,d,r);
  }
  for (i = 0; i < 16; i++) {
    x[i+16]=a[i];
    x[i+32]=c[i];
    x[i+48]=b[i];
    x[i+64]=d[i];
  }
  var x32 = x.subarray(32);
  var x16 = x.subarray(16);
  inv25519(x32,x32);
  M(x16,x16,x32);
  pack25519(q,x16);
  return 0;
}

function crypto_scalarmult_base(q, n) {
  return crypto_scalarmult(q, n, _9);
}

function crypto_box_keypair(y, x) {
  randombytes(x, 32);
  return crypto_scalarmult_base(y, x);
}

function crypto_box_beforenm(k, y, x) {
  var s = new Uint8Array(32);
  crypto_scalarmult(s, x, y);
  return crypto_core_hsalsa20(k, _0, s, sigma);
}

var crypto_box_afternm = crypto_secretbox;
var crypto_box_open_afternm = crypto_secretbox_open;

function crypto_box(c, m, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_afternm(c, m, d, n, k);
}

function crypto_box_open(m, c, d, n, y, x) {
  var k = new Uint8Array(32);
  crypto_box_beforenm(k, y, x);
  return crypto_box_open_afternm(m, c, d, n, k);
}

var K = [
  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,
  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,
  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,
  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,
  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,
  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,
  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,
  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,
  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,
  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,
  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,
  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,
  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,
  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,
  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,
  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,
  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,
  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,
  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,
  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,
  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,
  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,
  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,
  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,
  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,
  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,
  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,
  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,
  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,
  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,
  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,
  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,
  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,
  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,
  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,
  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,
  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,
  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,
  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,
  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817
];

function crypto_hashblocks_hl(hh, hl, m, n) {
  var wh = new Int32Array(16), wl = new Int32Array(16),
      bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7,
      bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7,
      th, tl, i, j, h, l, a, b, c, d;

  var ah0 = hh[0],
      ah1 = hh[1],
      ah2 = hh[2],
      ah3 = hh[3],
      ah4 = hh[4],
      ah5 = hh[5],
      ah6 = hh[6],
      ah7 = hh[7],

      al0 = hl[0],
      al1 = hl[1],
      al2 = hl[2],
      al3 = hl[3],
      al4 = hl[4],
      al5 = hl[5],
      al6 = hl[6],
      al7 = hl[7];

  var pos = 0;
  while (n >= 128) {
    for (i = 0; i < 16; i++) {
      j = 8 * i + pos;
      wh[i] = (m[j+0] << 24) | (m[j+1] << 16) | (m[j+2] << 8) | m[j+3];
      wl[i] = (m[j+4] << 24) | (m[j+5] << 16) | (m[j+6] << 8) | m[j+7];
    }
    for (i = 0; i < 80; i++) {
      bh0 = ah0;
      bh1 = ah1;
      bh2 = ah2;
      bh3 = ah3;
      bh4 = ah4;
      bh5 = ah5;
      bh6 = ah6;
      bh7 = ah7;

      bl0 = al0;
      bl1 = al1;
      bl2 = al2;
      bl3 = al3;
      bl4 = al4;
      bl5 = al5;
      bl6 = al6;
      bl7 = al7;

      // add
      h = ah7;
      l = al7;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma1
      h = ((ah4 >>> 14) | (al4 << (32-14))) ^ ((ah4 >>> 18) | (al4 << (32-18))) ^ ((al4 >>> (41-32)) | (ah4 << (32-(41-32))));
      l = ((al4 >>> 14) | (ah4 << (32-14))) ^ ((al4 >>> 18) | (ah4 << (32-18))) ^ ((ah4 >>> (41-32)) | (al4 << (32-(41-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Ch
      h = (ah4 & ah5) ^ (~ah4 & ah6);
      l = (al4 & al5) ^ (~al4 & al6);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // K
      h = K[i*2];
      l = K[i*2+1];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // w
      h = wh[i%16];
      l = wl[i%16];

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      th = c & 0xffff | d << 16;
      tl = a & 0xffff | b << 16;

      // add
      h = th;
      l = tl;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      // Sigma0
      h = ((ah0 >>> 28) | (al0 << (32-28))) ^ ((al0 >>> (34-32)) | (ah0 << (32-(34-32)))) ^ ((al0 >>> (39-32)) | (ah0 << (32-(39-32))));
      l = ((al0 >>> 28) | (ah0 << (32-28))) ^ ((ah0 >>> (34-32)) | (al0 << (32-(34-32)))) ^ ((ah0 >>> (39-32)) | (al0 << (32-(39-32))));

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      // Maj
      h = (ah0 & ah1) ^ (ah0 & ah2) ^ (ah1 & ah2);
      l = (al0 & al1) ^ (al0 & al2) ^ (al1 & al2);

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh7 = (c & 0xffff) | (d << 16);
      bl7 = (a & 0xffff) | (b << 16);

      // add
      h = bh3;
      l = bl3;

      a = l & 0xffff; b = l >>> 16;
      c = h & 0xffff; d = h >>> 16;

      h = th;
      l = tl;

      a += l & 0xffff; b += l >>> 16;
      c += h & 0xffff; d += h >>> 16;

      b += a >>> 16;
      c += b >>> 16;
      d += c >>> 16;

      bh3 = (c & 0xffff) | (d << 16);
      bl3 = (a & 0xffff) | (b << 16);

      ah1 = bh0;
      ah2 = bh1;
      ah3 = bh2;
      ah4 = bh3;
      ah5 = bh4;
      ah6 = bh5;
      ah7 = bh6;
      ah0 = bh7;

      al1 = bl0;
      al2 = bl1;
      al3 = bl2;
      al4 = bl3;
      al5 = bl4;
      al6 = bl5;
      al7 = bl6;
      al0 = bl7;

      if (i%16 === 15) {
        for (j = 0; j < 16; j++) {
          // add
          h = wh[j];
          l = wl[j];

          a = l & 0xffff; b = l >>> 16;
          c = h & 0xffff; d = h >>> 16;

          h = wh[(j+9)%16];
          l = wl[(j+9)%16];

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma0
          th = wh[(j+1)%16];
          tl = wl[(j+1)%16];
          h = ((th >>> 1) | (tl << (32-1))) ^ ((th >>> 8) | (tl << (32-8))) ^ (th >>> 7);
          l = ((tl >>> 1) | (th << (32-1))) ^ ((tl >>> 8) | (th << (32-8))) ^ ((tl >>> 7) | (th << (32-7)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          // sigma1
          th = wh[(j+14)%16];
          tl = wl[(j+14)%16];
          h = ((th >>> 19) | (tl << (32-19))) ^ ((tl >>> (61-32)) | (th << (32-(61-32)))) ^ (th >>> 6);
          l = ((tl >>> 19) | (th << (32-19))) ^ ((th >>> (61-32)) | (tl << (32-(61-32)))) ^ ((tl >>> 6) | (th << (32-6)));

          a += l & 0xffff; b += l >>> 16;
          c += h & 0xffff; d += h >>> 16;

          b += a >>> 16;
          c += b >>> 16;
          d += c >>> 16;

          wh[j] = (c & 0xffff) | (d << 16);
          wl[j] = (a & 0xffff) | (b << 16);
        }
      }
    }

    // add
    h = ah0;
    l = al0;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[0];
    l = hl[0];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[0] = ah0 = (c & 0xffff) | (d << 16);
    hl[0] = al0 = (a & 0xffff) | (b << 16);

    h = ah1;
    l = al1;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[1];
    l = hl[1];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[1] = ah1 = (c & 0xffff) | (d << 16);
    hl[1] = al1 = (a & 0xffff) | (b << 16);

    h = ah2;
    l = al2;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[2];
    l = hl[2];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[2] = ah2 = (c & 0xffff) | (d << 16);
    hl[2] = al2 = (a & 0xffff) | (b << 16);

    h = ah3;
    l = al3;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[3];
    l = hl[3];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[3] = ah3 = (c & 0xffff) | (d << 16);
    hl[3] = al3 = (a & 0xffff) | (b << 16);

    h = ah4;
    l = al4;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[4];
    l = hl[4];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[4] = ah4 = (c & 0xffff) | (d << 16);
    hl[4] = al4 = (a & 0xffff) | (b << 16);

    h = ah5;
    l = al5;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[5];
    l = hl[5];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[5] = ah5 = (c & 0xffff) | (d << 16);
    hl[5] = al5 = (a & 0xffff) | (b << 16);

    h = ah6;
    l = al6;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[6];
    l = hl[6];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[6] = ah6 = (c & 0xffff) | (d << 16);
    hl[6] = al6 = (a & 0xffff) | (b << 16);

    h = ah7;
    l = al7;

    a = l & 0xffff; b = l >>> 16;
    c = h & 0xffff; d = h >>> 16;

    h = hh[7];
    l = hl[7];

    a += l & 0xffff; b += l >>> 16;
    c += h & 0xffff; d += h >>> 16;

    b += a >>> 16;
    c += b >>> 16;
    d += c >>> 16;

    hh[7] = ah7 = (c & 0xffff) | (d << 16);
    hl[7] = al7 = (a & 0xffff) | (b << 16);

    pos += 128;
    n -= 128;
  }

  return n;
}

function crypto_hash(out, m, n) {
  var hh = new Int32Array(8),
      hl = new Int32Array(8),
      x = new Uint8Array(256),
      i, b = n;

  hh[0] = 0x6a09e667;
  hh[1] = 0xbb67ae85;
  hh[2] = 0x3c6ef372;
  hh[3] = 0xa54ff53a;
  hh[4] = 0x510e527f;
  hh[5] = 0x9b05688c;
  hh[6] = 0x1f83d9ab;
  hh[7] = 0x5be0cd19;

  hl[0] = 0xf3bcc908;
  hl[1] = 0x84caa73b;
  hl[2] = 0xfe94f82b;
  hl[3] = 0x5f1d36f1;
  hl[4] = 0xade682d1;
  hl[5] = 0x2b3e6c1f;
  hl[6] = 0xfb41bd6b;
  hl[7] = 0x137e2179;

  crypto_hashblocks_hl(hh, hl, m, n);
  n %= 128;

  for (i = 0; i < n; i++) x[i] = m[b-n+i];
  x[n] = 128;

  n = 256-128*(n<112?1:0);
  x[n-9] = 0;
  ts64(x, n-8,  (b / 0x20000000) | 0, b << 3);
  crypto_hashblocks_hl(hh, hl, x, n);

  for (i = 0; i < 8; i++) ts64(out, 8*i, hh[i], hl[i]);

  return 0;
}

function add(p, q) {
  var a = gf(), b = gf(), c = gf(),
      d = gf(), e = gf(), f = gf(),
      g = gf(), h = gf(), t = gf();

  Z(a, p[1], p[0]);
  Z(t, q[1], q[0]);
  M(a, a, t);
  A(b, p[0], p[1]);
  A(t, q[0], q[1]);
  M(b, b, t);
  M(c, p[3], q[3]);
  M(c, c, D2);
  M(d, p[2], q[2]);
  A(d, d, d);
  Z(e, b, a);
  Z(f, d, c);
  A(g, d, c);
  A(h, b, a);

  M(p[0], e, f);
  M(p[1], h, g);
  M(p[2], g, f);
  M(p[3], e, h);
}

function cswap(p, q, b) {
  var i;
  for (i = 0; i < 4; i++) {
    sel25519(p[i], q[i], b);
  }
}

function pack(r, p) {
  var tx = gf(), ty = gf(), zi = gf();
  inv25519(zi, p[2]);
  M(tx, p[0], zi);
  M(ty, p[1], zi);
  pack25519(r, ty);
  r[31] ^= par25519(tx) << 7;
}

function scalarmult(p, q, s) {
  var b, i;
  set25519(p[0], gf0);
  set25519(p[1], gf1);
  set25519(p[2], gf1);
  set25519(p[3], gf0);
  for (i = 255; i >= 0; --i) {
    b = (s[(i/8)|0] >> (i&7)) & 1;
    cswap(p, q, b);
    add(q, p);
    add(p, p);
    cswap(p, q, b);
  }
}

function scalarbase(p, s) {
  var q = [gf(), gf(), gf(), gf()];
  set25519(q[0], X);
  set25519(q[1], Y);
  set25519(q[2], gf1);
  M(q[3], X, Y);
  scalarmult(p, q, s);
}

function crypto_sign_keypair(pk, sk, seeded) {
  var d = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()];
  var i;

  if (!seeded) randombytes(sk, 32);
  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  scalarbase(p, d);
  pack(pk, p);

  for (i = 0; i < 32; i++) sk[i+32] = pk[i];
  return 0;
}

var L = new Float64Array([0xed, 0xd3, 0xf5, 0x5c, 0x1a, 0x63, 0x12, 0x58, 0xd6, 0x9c, 0xf7, 0xa2, 0xde, 0xf9, 0xde, 0x14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x10]);

function modL(r, x) {
  var carry, i, j, k;
  for (i = 63; i >= 32; --i) {
    carry = 0;
    for (j = i - 32, k = i - 12; j < k; ++j) {
      x[j] += carry - 16 * x[i] * L[j - (i - 32)];
      carry = Math.floor((x[j] + 128) / 256);
      x[j] -= carry * 256;
    }
    x[j] += carry;
    x[i] = 0;
  }
  carry = 0;
  for (j = 0; j < 32; j++) {
    x[j] += carry - (x[31] >> 4) * L[j];
    carry = x[j] >> 8;
    x[j] &= 255;
  }
  for (j = 0; j < 32; j++) x[j] -= carry * L[j];
  for (i = 0; i < 32; i++) {
    x[i+1] += x[i] >> 8;
    r[i] = x[i] & 255;
  }
}

function reduce(r) {
  var x = new Float64Array(64), i;
  for (i = 0; i < 64; i++) x[i] = r[i];
  for (i = 0; i < 64; i++) r[i] = 0;
  modL(r, x);
}

// Note: difference from C - smlen returned, not passed as argument.
function crypto_sign(sm, m, n, sk) {
  var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
  var i, j, x = new Float64Array(64);
  var p = [gf(), gf(), gf(), gf()];

  crypto_hash(d, sk, 32);
  d[0] &= 248;
  d[31] &= 127;
  d[31] |= 64;

  var smlen = n + 64;
  for (i = 0; i < n; i++) sm[64 + i] = m[i];
  for (i = 0; i < 32; i++) sm[32 + i] = d[32 + i];

  crypto_hash(r, sm.subarray(32), n+32);
  reduce(r);
  scalarbase(p, r);
  pack(sm, p);

  for (i = 32; i < 64; i++) sm[i] = sk[i];
  crypto_hash(h, sm, n + 64);
  reduce(h);

  for (i = 0; i < 64; i++) x[i] = 0;
  for (i = 0; i < 32; i++) x[i] = r[i];
  for (i = 0; i < 32; i++) {
    for (j = 0; j < 32; j++) {
      x[i+j] += h[i] * d[j];
    }
  }

  modL(sm.subarray(32), x);
  return smlen;
}

function unpackneg(r, p) {
  var t = gf(), chk = gf(), num = gf(),
      den = gf(), den2 = gf(), den4 = gf(),
      den6 = gf();

  set25519(r[2], gf1);
  unpack25519(r[1], p);
  S(num, r[1]);
  M(den, num, D);
  Z(num, num, r[2]);
  A(den, r[2], den);

  S(den2, den);
  S(den4, den2);
  M(den6, den4, den2);
  M(t, den6, num);
  M(t, t, den);

  pow2523(t, t);
  M(t, t, num);
  M(t, t, den);
  M(t, t, den);
  M(r[0], t, den);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) M(r[0], r[0], I);

  S(chk, r[0]);
  M(chk, chk, den);
  if (neq25519(chk, num)) return -1;

  if (par25519(r[0]) === (p[31]>>7)) Z(r[0], gf0, r[0]);

  M(r[3], r[0], r[1]);
  return 0;
}

function crypto_sign_open(m, sm, n, pk) {
  var i;
  var t = new Uint8Array(32), h = new Uint8Array(64);
  var p = [gf(), gf(), gf(), gf()],
      q = [gf(), gf(), gf(), gf()];

  if (n < 64) return -1;

  if (unpackneg(q, pk)) return -1;

  for (i = 0; i < n; i++) m[i] = sm[i];
  for (i = 0; i < 32; i++) m[i+32] = pk[i];
  crypto_hash(h, m, n);
  reduce(h);
  scalarmult(p, q, h);

  scalarbase(q, sm.subarray(32));
  add(p, q);
  pack(t, p);

  n -= 64;
  if (crypto_verify_32(sm, 0, t, 0)) {
    for (i = 0; i < n; i++) m[i] = 0;
    return -1;
  }

  for (i = 0; i < n; i++) m[i] = sm[i + 64];
  return n;
}

var crypto_secretbox_KEYBYTES = 32,
    crypto_secretbox_NONCEBYTES = 24,
    crypto_secretbox_ZEROBYTES = 32,
    crypto_secretbox_BOXZEROBYTES = 16,
    crypto_scalarmult_BYTES = 32,
    crypto_scalarmult_SCALARBYTES = 32,
    crypto_box_PUBLICKEYBYTES = 32,
    crypto_box_SECRETKEYBYTES = 32,
    crypto_box_BEFORENMBYTES = 32,
    crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES,
    crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES,
    crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES,
    crypto_sign_BYTES = 64,
    crypto_sign_PUBLICKEYBYTES = 32,
    crypto_sign_SECRETKEYBYTES = 64,
    crypto_sign_SEEDBYTES = 32,
    crypto_hash_BYTES = 64;

nacl.lowlevel = {
  crypto_core_hsalsa20: crypto_core_hsalsa20,
  crypto_stream_xor: crypto_stream_xor,
  crypto_stream: crypto_stream,
  crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
  crypto_stream_salsa20: crypto_stream_salsa20,
  crypto_onetimeauth: crypto_onetimeauth,
  crypto_onetimeauth_verify: crypto_onetimeauth_verify,
  crypto_verify_16: crypto_verify_16,
  crypto_verify_32: crypto_verify_32,
  crypto_secretbox: crypto_secretbox,
  crypto_secretbox_open: crypto_secretbox_open,
  crypto_scalarmult: crypto_scalarmult,
  crypto_scalarmult_base: crypto_scalarmult_base,
  crypto_box_beforenm: crypto_box_beforenm,
  crypto_box_afternm: crypto_box_afternm,
  crypto_box: crypto_box,
  crypto_box_open: crypto_box_open,
  crypto_box_keypair: crypto_box_keypair,
  crypto_hash: crypto_hash,
  crypto_sign: crypto_sign,
  crypto_sign_keypair: crypto_sign_keypair,
  crypto_sign_open: crypto_sign_open,

  crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
  crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
  crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
  crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
  crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
  crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
  crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
  crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
  crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
  crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
  crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
  crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
  crypto_sign_BYTES: crypto_sign_BYTES,
  crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
  crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
  crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
  crypto_hash_BYTES: crypto_hash_BYTES,

  gf: gf,
  D: D,
  L: L,
  pack25519: pack25519,
  unpack25519: unpack25519,
  M: M,
  A: A,
  S: S,
  Z: Z,
  pow2523: pow2523,
  add: add,
  set25519: set25519,
  modL: modL,
  scalarmult: scalarmult,
  scalarbase: scalarbase,
};

/* High-level API */

function checkLengths(k, n) {
  if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
  if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
}

function checkBoxLengths(pk, sk) {
  if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
  if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
}

function checkArrayTypes() {
  for (var i = 0; i < arguments.length; i++) {
    if (!(arguments[i] instanceof Uint8Array))
      throw new TypeError('unexpected type, use Uint8Array');
  }
}

function cleanup(arr) {
  for (var i = 0; i < arr.length; i++) arr[i] = 0;
}

nacl.randomBytes = function(n) {
  var b = new Uint8Array(n);
  randombytes(b, n);
  return b;
};

nacl.secretbox = function(msg, nonce, key) {
  checkArrayTypes(msg, nonce, key);
  checkLengths(key, nonce);
  var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
  var c = new Uint8Array(m.length);
  for (var i = 0; i < msg.length; i++) m[i+crypto_secretbox_ZEROBYTES] = msg[i];
  crypto_secretbox(c, m, m.length, nonce, key);
  return c.subarray(crypto_secretbox_BOXZEROBYTES);
};

nacl.secretbox.open = function(box, nonce, key) {
  checkArrayTypes(box, nonce, key);
  checkLengths(key, nonce);
  var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
  var m = new Uint8Array(c.length);
  for (var i = 0; i < box.length; i++) c[i+crypto_secretbox_BOXZEROBYTES] = box[i];
  if (c.length < 32) return null;
  if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
  return m.subarray(crypto_secretbox_ZEROBYTES);
};

nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;

nacl.scalarMult = function(n, p) {
  checkArrayTypes(n, p);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult(q, n, p);
  return q;
};

nacl.scalarMult.base = function(n) {
  checkArrayTypes(n);
  if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
  var q = new Uint8Array(crypto_scalarmult_BYTES);
  crypto_scalarmult_base(q, n);
  return q;
};

nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;

nacl.box = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox(msg, nonce, k);
};

nacl.box.before = function(publicKey, secretKey) {
  checkArrayTypes(publicKey, secretKey);
  checkBoxLengths(publicKey, secretKey);
  var k = new Uint8Array(crypto_box_BEFORENMBYTES);
  crypto_box_beforenm(k, publicKey, secretKey);
  return k;
};

nacl.box.after = nacl.secretbox;

nacl.box.open = function(msg, nonce, publicKey, secretKey) {
  var k = nacl.box.before(publicKey, secretKey);
  return nacl.secretbox.open(msg, nonce, k);
};

nacl.box.open.after = nacl.secretbox.open;

nacl.box.keyPair = function() {
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
  crypto_box_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.box.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_box_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
  crypto_scalarmult_base(pk, secretKey);
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
nacl.box.nonceLength = crypto_box_NONCEBYTES;
nacl.box.overheadLength = nacl.secretbox.overheadLength;

nacl.sign = function(msg, secretKey) {
  checkArrayTypes(msg, secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var signedMsg = new Uint8Array(crypto_sign_BYTES+msg.length);
  crypto_sign(signedMsg, msg, msg.length, secretKey);
  return signedMsg;
};

nacl.sign.open = function(signedMsg, publicKey) {
  checkArrayTypes(signedMsg, publicKey);
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var tmp = new Uint8Array(signedMsg.length);
  var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
  if (mlen < 0) return null;
  var m = new Uint8Array(mlen);
  for (var i = 0; i < m.length; i++) m[i] = tmp[i];
  return m;
};

nacl.sign.detached = function(msg, secretKey) {
  var signedMsg = nacl.sign(msg, secretKey);
  var sig = new Uint8Array(crypto_sign_BYTES);
  for (var i = 0; i < sig.length; i++) sig[i] = signedMsg[i];
  return sig;
};

nacl.sign.detached.verify = function(msg, sig, publicKey) {
  checkArrayTypes(msg, sig, publicKey);
  if (sig.length !== crypto_sign_BYTES)
    throw new Error('bad signature size');
  if (publicKey.length !== crypto_sign_PUBLICKEYBYTES)
    throw new Error('bad public key size');
  var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
  var m = new Uint8Array(crypto_sign_BYTES + msg.length);
  var i;
  for (i = 0; i < crypto_sign_BYTES; i++) sm[i] = sig[i];
  for (i = 0; i < msg.length; i++) sm[i+crypto_sign_BYTES] = msg[i];
  return (crypto_sign_open(m, sm, sm.length, publicKey) >= 0);
};

nacl.sign.keyPair = function() {
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  crypto_sign_keypair(pk, sk);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.keyPair.fromSecretKey = function(secretKey) {
  checkArrayTypes(secretKey);
  if (secretKey.length !== crypto_sign_SECRETKEYBYTES)
    throw new Error('bad secret key size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  for (var i = 0; i < pk.length; i++) pk[i] = secretKey[32+i];
  return {publicKey: pk, secretKey: new Uint8Array(secretKey)};
};

nacl.sign.keyPair.fromSeed = function(seed) {
  checkArrayTypes(seed);
  if (seed.length !== crypto_sign_SEEDBYTES)
    throw new Error('bad seed size');
  var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
  var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
  for (var i = 0; i < 32; i++) sk[i] = seed[i];
  crypto_sign_keypair(pk, sk, true);
  return {publicKey: pk, secretKey: sk};
};

nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
nacl.sign.seedLength = crypto_sign_SEEDBYTES;
nacl.sign.signatureLength = crypto_sign_BYTES;

nacl.hash = function(msg) {
  checkArrayTypes(msg);
  var h = new Uint8Array(crypto_hash_BYTES);
  crypto_hash(h, msg, msg.length);
  return h;
};

nacl.hash.hashLength = crypto_hash_BYTES;

nacl.verify = function(x, y) {
  checkArrayTypes(x, y);
  // Zero length arguments are considered not equal.
  if (x.length === 0 || y.length === 0) return false;
  if (x.length !== y.length) return false;
  return (vn(x, 0, y, 0, x.length) === 0) ? true : false;
};

nacl.setPRNG = function(fn) {
  randombytes = fn;
};

(function() {
  // Initialize PRNG if environment provides CSPRNG.
  // If not, methods calling randombytes will throw.
  var crypto = typeof self !== 'undefined' ? (self.crypto || self.msCrypto) : null;
  if (crypto && crypto.getRandomValues) {
    // Browsers.
    var QUOTA = 65536;
    nacl.setPRNG(function(x, n) {
      var i, v = new Uint8Array(n);
      for (i = 0; i < n; i += QUOTA) {
        crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
      }
      for (i = 0; i < n; i++) x[i] = v[i];
      cleanup(v);
    });
  } else if (true) {
    // Node.js.
    crypto = __webpack_require__(/*! crypto */ "?dba7");
    if (crypto && crypto.randomBytes) {
      nacl.setPRNG(function(x, n) {
        var i, v = crypto.randomBytes(n);
        for (i = 0; i < n; i++) x[i] = v[i];
        cleanup(v);
      });
    }
  }
})();

})( true && module.exports ? module.exports : (self.nacl = self.nacl || {}));


/***/ }),

/***/ "./node_modules/util/support/isBufferBrowser.js":
/*!******************************************************!*\
  !*** ./node_modules/util/support/isBufferBrowser.js ***!
  \******************************************************/
/***/ ((module) => {

module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}

/***/ }),

/***/ "./node_modules/util/support/types.js":
/*!********************************************!*\
  !*** ./node_modules/util/support/types.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9



var isArgumentsObject = __webpack_require__(/*! is-arguments */ "./node_modules/is-arguments/index.js");
var isGeneratorFunction = __webpack_require__(/*! is-generator-function */ "./node_modules/is-generator-function/index.js");
var whichTypedArray = __webpack_require__(/*! which-typed-array */ "./node_modules/which-typed-array/index.js");
var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/is-typed-array/index.js");

function uncurryThis(f) {
  return f.call.bind(f);
}

var BigIntSupported = typeof BigInt !== 'undefined';
var SymbolSupported = typeof Symbol !== 'undefined';

var ObjectToString = uncurryThis(Object.prototype.toString);

var numberValue = uncurryThis(Number.prototype.valueOf);
var stringValue = uncurryThis(String.prototype.valueOf);
var booleanValue = uncurryThis(Boolean.prototype.valueOf);

if (BigIntSupported) {
  var bigIntValue = uncurryThis(BigInt.prototype.valueOf);
}

if (SymbolSupported) {
  var symbolValue = uncurryThis(Symbol.prototype.valueOf);
}

function checkBoxedPrimitive(value, prototypeValueOf) {
  if (typeof value !== 'object') {
    return false;
  }
  try {
    prototypeValueOf(value);
    return true;
  } catch(e) {
    return false;
  }
}

exports.isArgumentsObject = isArgumentsObject;
exports.isGeneratorFunction = isGeneratorFunction;
exports.isTypedArray = isTypedArray;

// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function isPromise(input) {
	return (
		(
			typeof Promise !== 'undefined' &&
			input instanceof Promise
		) ||
		(
			input !== null &&
			typeof input === 'object' &&
			typeof input.then === 'function' &&
			typeof input.catch === 'function'
		)
	);
}
exports.isPromise = isPromise;

function isArrayBufferView(value) {
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    return ArrayBuffer.isView(value);
  }

  return (
    isTypedArray(value) ||
    isDataView(value)
  );
}
exports.isArrayBufferView = isArrayBufferView;


function isUint8Array(value) {
  return whichTypedArray(value) === 'Uint8Array';
}
exports.isUint8Array = isUint8Array;

function isUint8ClampedArray(value) {
  return whichTypedArray(value) === 'Uint8ClampedArray';
}
exports.isUint8ClampedArray = isUint8ClampedArray;

function isUint16Array(value) {
  return whichTypedArray(value) === 'Uint16Array';
}
exports.isUint16Array = isUint16Array;

function isUint32Array(value) {
  return whichTypedArray(value) === 'Uint32Array';
}
exports.isUint32Array = isUint32Array;

function isInt8Array(value) {
  return whichTypedArray(value) === 'Int8Array';
}
exports.isInt8Array = isInt8Array;

function isInt16Array(value) {
  return whichTypedArray(value) === 'Int16Array';
}
exports.isInt16Array = isInt16Array;

function isInt32Array(value) {
  return whichTypedArray(value) === 'Int32Array';
}
exports.isInt32Array = isInt32Array;

function isFloat32Array(value) {
  return whichTypedArray(value) === 'Float32Array';
}
exports.isFloat32Array = isFloat32Array;

function isFloat64Array(value) {
  return whichTypedArray(value) === 'Float64Array';
}
exports.isFloat64Array = isFloat64Array;

function isBigInt64Array(value) {
  return whichTypedArray(value) === 'BigInt64Array';
}
exports.isBigInt64Array = isBigInt64Array;

function isBigUint64Array(value) {
  return whichTypedArray(value) === 'BigUint64Array';
}
exports.isBigUint64Array = isBigUint64Array;

function isMapToString(value) {
  return ObjectToString(value) === '[object Map]';
}
isMapToString.working = (
  typeof Map !== 'undefined' &&
  isMapToString(new Map())
);

function isMap(value) {
  if (typeof Map === 'undefined') {
    return false;
  }

  return isMapToString.working
    ? isMapToString(value)
    : value instanceof Map;
}
exports.isMap = isMap;

function isSetToString(value) {
  return ObjectToString(value) === '[object Set]';
}
isSetToString.working = (
  typeof Set !== 'undefined' &&
  isSetToString(new Set())
);
function isSet(value) {
  if (typeof Set === 'undefined') {
    return false;
  }

  return isSetToString.working
    ? isSetToString(value)
    : value instanceof Set;
}
exports.isSet = isSet;

function isWeakMapToString(value) {
  return ObjectToString(value) === '[object WeakMap]';
}
isWeakMapToString.working = (
  typeof WeakMap !== 'undefined' &&
  isWeakMapToString(new WeakMap())
);
function isWeakMap(value) {
  if (typeof WeakMap === 'undefined') {
    return false;
  }

  return isWeakMapToString.working
    ? isWeakMapToString(value)
    : value instanceof WeakMap;
}
exports.isWeakMap = isWeakMap;

function isWeakSetToString(value) {
  return ObjectToString(value) === '[object WeakSet]';
}
isWeakSetToString.working = (
  typeof WeakSet !== 'undefined' &&
  isWeakSetToString(new WeakSet())
);
function isWeakSet(value) {
  return isWeakSetToString(value);
}
exports.isWeakSet = isWeakSet;

function isArrayBufferToString(value) {
  return ObjectToString(value) === '[object ArrayBuffer]';
}
isArrayBufferToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  isArrayBufferToString(new ArrayBuffer())
);
function isArrayBuffer(value) {
  if (typeof ArrayBuffer === 'undefined') {
    return false;
  }

  return isArrayBufferToString.working
    ? isArrayBufferToString(value)
    : value instanceof ArrayBuffer;
}
exports.isArrayBuffer = isArrayBuffer;

function isDataViewToString(value) {
  return ObjectToString(value) === '[object DataView]';
}
isDataViewToString.working = (
  typeof ArrayBuffer !== 'undefined' &&
  typeof DataView !== 'undefined' &&
  isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1))
);
function isDataView(value) {
  if (typeof DataView === 'undefined') {
    return false;
  }

  return isDataViewToString.working
    ? isDataViewToString(value)
    : value instanceof DataView;
}
exports.isDataView = isDataView;

// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function isSharedArrayBufferToString(value) {
  return ObjectToString(value) === '[object SharedArrayBuffer]';
}
function isSharedArrayBuffer(value) {
  if (typeof SharedArrayBufferCopy === 'undefined') {
    return false;
  }

  if (typeof isSharedArrayBufferToString.working === 'undefined') {
    isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
  }

  return isSharedArrayBufferToString.working
    ? isSharedArrayBufferToString(value)
    : value instanceof SharedArrayBufferCopy;
}
exports.isSharedArrayBuffer = isSharedArrayBuffer;

function isAsyncFunction(value) {
  return ObjectToString(value) === '[object AsyncFunction]';
}
exports.isAsyncFunction = isAsyncFunction;

function isMapIterator(value) {
  return ObjectToString(value) === '[object Map Iterator]';
}
exports.isMapIterator = isMapIterator;

function isSetIterator(value) {
  return ObjectToString(value) === '[object Set Iterator]';
}
exports.isSetIterator = isSetIterator;

function isGeneratorObject(value) {
  return ObjectToString(value) === '[object Generator]';
}
exports.isGeneratorObject = isGeneratorObject;

function isWebAssemblyCompiledModule(value) {
  return ObjectToString(value) === '[object WebAssembly.Module]';
}
exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;

function isNumberObject(value) {
  return checkBoxedPrimitive(value, numberValue);
}
exports.isNumberObject = isNumberObject;

function isStringObject(value) {
  return checkBoxedPrimitive(value, stringValue);
}
exports.isStringObject = isStringObject;

function isBooleanObject(value) {
  return checkBoxedPrimitive(value, booleanValue);
}
exports.isBooleanObject = isBooleanObject;

function isBigIntObject(value) {
  return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
}
exports.isBigIntObject = isBigIntObject;

function isSymbolObject(value) {
  return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
}
exports.isSymbolObject = isSymbolObject;

function isBoxedPrimitive(value) {
  return (
    isNumberObject(value) ||
    isStringObject(value) ||
    isBooleanObject(value) ||
    isBigIntObject(value) ||
    isSymbolObject(value)
  );
}
exports.isBoxedPrimitive = isBoxedPrimitive;

function isAnyArrayBuffer(value) {
  return typeof Uint8Array !== 'undefined' && (
    isArrayBuffer(value) ||
    isSharedArrayBuffer(value)
  );
}
exports.isAnyArrayBuffer = isAnyArrayBuffer;

['isProxy', 'isExternal', 'isModuleNamespaceObject'].forEach(function(method) {
  Object.defineProperty(exports, method, {
    enumerable: false,
    value: function() {
      throw new Error(method + ' is not supported in userland');
    }
  });
});


/***/ }),

/***/ "./node_modules/util/util.js":
/*!***********************************!*\
  !*** ./node_modules/util/util.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

/* provided dependency */ var process = __webpack_require__(/*! ./node_modules/process/browser.js */ "./node_modules/process/browser.js");
/* provided dependency */ var console = __webpack_require__(/*! ./node_modules/console-browserify/index.js */ "./node_modules/console-browserify/index.js");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||
  function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for (var i = 0; i < keys.length; i++) {
      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    }
    return descriptors;
  };

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  if (typeof process !== 'undefined' && process.noDeprecation === true) {
    return fn;
  }

  // Allow for deprecating things in the process of starting up.
  if (typeof process === 'undefined') {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnvRegex = /^$/;

if (process.env.NODE_DEBUG) {
  var debugEnv = process.env.NODE_DEBUG;
  debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, '\\$&')
    .replace(/\*/g, '.*')
    .replace(/,/g, '$|^')
    .toUpperCase();
  debugEnvRegex = new RegExp('^' + debugEnv + '$', 'i');
}
exports.debuglog = function(set) {
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (debugEnvRegex.test(set)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').slice(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.slice(1, -1);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
exports.types = __webpack_require__(/*! ./support/types */ "./node_modules/util/support/types.js");

function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;
exports.types.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;
exports.types.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;
exports.types.isNativeError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = __webpack_require__(/*! ./support/isBuffer */ "./node_modules/util/support/isBufferBrowser.js");

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = __webpack_require__(/*! inherits */ "./node_modules/inherits/inherits_browser.js");

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

var kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;

exports.promisify = function promisify(original) {
  if (typeof original !== 'function')
    throw new TypeError('The "original" argument must be of type Function');

  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
    var fn = original[kCustomPromisifiedSymbol];
    if (typeof fn !== 'function') {
      throw new TypeError('The "util.promisify.custom" argument must be of type Function');
    }
    Object.defineProperty(fn, kCustomPromisifiedSymbol, {
      value: fn, enumerable: false, writable: false, configurable: true
    });
    return fn;
  }

  function fn() {
    var promiseResolve, promiseReject;
    var promise = new Promise(function (resolve, reject) {
      promiseResolve = resolve;
      promiseReject = reject;
    });

    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }
    args.push(function (err, value) {
      if (err) {
        promiseReject(err);
      } else {
        promiseResolve(value);
      }
    });

    try {
      original.apply(this, args);
    } catch (err) {
      promiseReject(err);
    }

    return promise;
  }

  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));

  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
    value: fn, enumerable: false, writable: false, configurable: true
  });
  return Object.defineProperties(
    fn,
    getOwnPropertyDescriptors(original)
  );
}

exports.promisify.custom = kCustomPromisifiedSymbol

function callbackifyOnRejected(reason, cb) {
  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
  // Because `null` is a special error value in callbacks which means "no error
  // occurred", we error-wrap so the callback consumer can distinguish between
  // "the promise rejected with null" or "the promise fulfilled with undefined".
  if (!reason) {
    var newReason = new Error('Promise was rejected with a falsy value');
    newReason.reason = reason;
    reason = newReason;
  }
  return cb(reason);
}

function callbackify(original) {
  if (typeof original !== 'function') {
    throw new TypeError('The "original" argument must be of type Function');
  }

  // We DO NOT return the promise as it gives the user a false sense that
  // the promise is actually somehow related to the callback's execution
  // and that the callback throwing will reject the promise.
  function callbackified() {
    var args = [];
    for (var i = 0; i < arguments.length; i++) {
      args.push(arguments[i]);
    }

    var maybeCb = args.pop();
    if (typeof maybeCb !== 'function') {
      throw new TypeError('The last argument must be of type Function');
    }
    var self = this;
    var cb = function() {
      return maybeCb.apply(self, arguments);
    };
    // In true node style we process the callback on `nextTick` with all the
    // implications (stack, `uncaughtException`, `async_hooks`)
    original.apply(this, args)
      .then(function(ret) { process.nextTick(cb.bind(null, null, ret)) },
            function(rej) { process.nextTick(callbackifyOnRejected.bind(null, rej, cb)) });
  }

  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
  Object.defineProperties(callbackified,
                          getOwnPropertyDescriptors(original));
  return callbackified;
}
exports.callbackify = callbackify;


/***/ }),

/***/ "./node_modules/which-typed-array/index.js":
/*!*************************************************!*\
  !*** ./node_modules/which-typed-array/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var forEach = __webpack_require__(/*! for-each */ "./node_modules/for-each/index.js");
var availableTypedArrays = __webpack_require__(/*! available-typed-arrays */ "./node_modules/available-typed-arrays/index.js");
var callBound = __webpack_require__(/*! call-bind/callBound */ "./node_modules/call-bind/callBound.js");
var gOPD = __webpack_require__(/*! gopd */ "./node_modules/gopd/index.js");

var $toString = callBound('Object.prototype.toString');
var hasToStringTag = __webpack_require__(/*! has-tostringtag/shams */ "./node_modules/has-tostringtag/shams.js")();

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;
var typedArrays = availableTypedArrays();

var $slice = callBound('String.prototype.slice');
var toStrTags = {};
var getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if (hasToStringTag && gOPD && getPrototypeOf) {
	forEach(typedArrays, function (typedArray) {
		if (typeof g[typedArray] === 'function') {
			var arr = new g[typedArray]();
			if (Symbol.toStringTag in arr) {
				var proto = getPrototypeOf(arr);
				var descriptor = gOPD(proto, Symbol.toStringTag);
				if (!descriptor) {
					var superProto = getPrototypeOf(proto);
					descriptor = gOPD(superProto, Symbol.toStringTag);
				}
				toStrTags[typedArray] = descriptor.get;
			}
		}
	});
}

var tryTypedArrays = function tryAllTypedArrays(value) {
	var foundName = false;
	forEach(toStrTags, function (getter, typedArray) {
		if (!foundName) {
			try {
				var name = getter.call(value);
				if (name === typedArray) {
					foundName = name;
				}
			} catch (e) {}
		}
	});
	return foundName;
};

var isTypedArray = __webpack_require__(/*! is-typed-array */ "./node_modules/is-typed-array/index.js");

module.exports = function whichTypedArray(value) {
	if (!isTypedArray(value)) { return false; }
	if (!hasToStringTag || !(Symbol.toStringTag in value)) { return $slice($toString(value), 8, -1); }
	return tryTypedArrays(value);
};


/***/ }),

/***/ "?dba7":
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/***/ (() => {

/* (ignored) */

/***/ }),

/***/ "./node_modules/available-typed-arrays/index.js":
/*!******************************************************!*\
  !*** ./node_modules/available-typed-arrays/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var possibleNames = [
	'BigInt64Array',
	'BigUint64Array',
	'Float32Array',
	'Float64Array',
	'Int16Array',
	'Int32Array',
	'Int8Array',
	'Uint16Array',
	'Uint32Array',
	'Uint8Array',
	'Uint8ClampedArray'
];

var g = typeof globalThis === 'undefined' ? __webpack_require__.g : globalThis;

module.exports = function availableTypedArrays() {
	var out = [];
	for (var i = 0; i < possibleNames.length; i++) {
		if (typeof g[possibleNames[i]] === 'function') {
			out[out.length] = possibleNames[i];
		}
	}
	return out;
};


/***/ }),

/***/ "./node_modules/bignumber.js/bignumber.mjs":
/*!*************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BigNumber": () => (/* binding */ BigNumber),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/*
 *      bignumber.js v9.1.1
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */


var
  isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i,
  mathceil = Math.ceil,
  mathfloor = Math.floor,

  bignumberError = '[BigNumber Error] ',
  tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',

  BASE = 1e14,
  LOG_BASE = 14,
  MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1
  // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
  POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],
  SQRT_BASE = 1e7,

  // EDITABLE
  // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
  // the arguments to toExponential, toFixed, toFormat, and toPrecision.
  MAX = 1E9;                                   // 0 to MAX_INT32


/*
 * Create and return a BigNumber constructor.
 */
function clone(configObject) {
  var div, convertBase, parseNumeric,
    P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },
    ONE = new BigNumber(1),


    //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------


    // The default values below must be integers within the inclusive ranges stated.
    // The values can also be changed at run-time using BigNumber.set.

    // The maximum number of decimal places for operations involving division.
    DECIMAL_PLACES = 20,                     // 0 to MAX

    // The rounding mode used when rounding to the above decimal places, and when using
    // toExponential, toFixed, toFormat and toPrecision, and round (default value).
    // UP         0 Away from zero.
    // DOWN       1 Towards zero.
    // CEIL       2 Towards +Infinity.
    // FLOOR      3 Towards -Infinity.
    // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
    // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
    // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
    // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
    // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
    ROUNDING_MODE = 4,                       // 0 to 8

    // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]

    // The exponent value at and beneath which toString returns exponential notation.
    // Number type: -7
    TO_EXP_NEG = -7,                         // 0 to -MAX

    // The exponent value at and above which toString returns exponential notation.
    // Number type: 21
    TO_EXP_POS = 21,                         // 0 to MAX

    // RANGE : [MIN_EXP, MAX_EXP]

    // The minimum exponent value, beneath which underflow to zero occurs.
    // Number type: -324  (5e-324)
    MIN_EXP = -1e7,                          // -1 to -MAX

    // The maximum exponent value, above which overflow to Infinity occurs.
    // Number type:  308  (1.7976931348623157e+308)
    // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
    MAX_EXP = 1e7,                           // 1 to MAX

    // Whether to use cryptographically-secure random number generation, if available.
    CRYPTO = false,                          // true or false

    // The modulo mode used when calculating the modulus: a mod n.
    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
    // The remainder (r) is calculated as: r = a - n * q.
    //
    // UP        0 The remainder is positive if the dividend is negative, else is negative.
    // DOWN      1 The remainder has the same sign as the dividend.
    //             This modulo mode is commonly known as 'truncated division' and is
    //             equivalent to (a % n) in JavaScript.
    // FLOOR     3 The remainder has the same sign as the divisor (Python %).
    // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
    // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
    //             The remainder is always positive.
    //
    // The truncated division, floored division, Euclidian division and IEEE 754 remainder
    // modes are commonly used for the modulus operation.
    // Although the other rounding modes can also be used, they may not give useful results.
    MODULO_MODE = 1,                         // 0 to 9

    // The maximum number of significant digits of the result of the exponentiatedBy operation.
    // If POW_PRECISION is 0, there will be unlimited significant digits.
    POW_PRECISION = 0,                       // 0 to MAX

    // The format specification used by the BigNumber.prototype.toFormat method.
    FORMAT = {
      prefix: '',
      groupSize: 3,
      secondaryGroupSize: 0,
      groupSeparator: ',',
      decimalSeparator: '.',
      fractionGroupSize: 0,
      fractionGroupSeparator: '\xA0',        // non-breaking space
      suffix: ''
    },

    // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
    // '-', '.', whitespace, or repeated character.
    // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
    ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',
    alphabetHasNormalDecimalDigits = true;


  //------------------------------------------------------------------------------------------


  // CONSTRUCTOR


  /*
   * The BigNumber constructor and exported function.
   * Create and return a new instance of a BigNumber object.
   *
   * v {number|string|BigNumber} A numeric value.
   * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.
   */
  function BigNumber(v, b) {
    var alphabet, c, caseChanged, e, i, isNum, len, str,
      x = this;

    // Enable constructor call without `new`.
    if (!(x instanceof BigNumber)) return new BigNumber(v, b);

    if (b == null) {

      if (v && v._isBigNumber === true) {
        x.s = v.s;

        if (!v.c || v.e > MAX_EXP) {
          x.c = x.e = null;
        } else if (v.e < MIN_EXP) {
          x.c = [x.e = 0];
        } else {
          x.e = v.e;
          x.c = v.c.slice();
        }

        return;
      }

      if ((isNum = typeof v == 'number') && v * 0 == 0) {

        // Use `1 / n` to handle minus zero also.
        x.s = 1 / v < 0 ? (v = -v, -1) : 1;

        // Fast path for integers, where n < 2147483648 (2**31).
        if (v === ~~v) {
          for (e = 0, i = v; i >= 10; i /= 10, e++);

          if (e > MAX_EXP) {
            x.c = x.e = null;
          } else {
            x.e = e;
            x.c = [v];
          }

          return;
        }

        str = String(v);
      } else {

        if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);

        x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
      }

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');

      // Exponential form?
      if ((i = str.search(/e/i)) > 0) {

        // Determine exponent.
        if (e < 0) e = i;
        e += +str.slice(i + 1);
        str = str.substring(0, i);
      } else if (e < 0) {

        // Integer.
        e = str.length;
      }

    } else {

      // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
      intCheck(b, 2, ALPHABET.length, 'Base');

      // Allow exponential notation to be used with base 10 argument, while
      // also rounding to DECIMAL_PLACES as with other bases.
      if (b == 10 && alphabetHasNormalDecimalDigits) {
        x = new BigNumber(v);
        return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
      }

      str = String(v);

      if (isNum = typeof v == 'number') {

        // Avoid potential interpretation of Infinity and NaN as base 44+ values.
        if (v * 0 != 0) return parseNumeric(x, str, isNum, b);

        x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;

        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
        if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) {
          throw Error
           (tooManyDigits + v);
        }
      } else {
        x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
      }

      alphabet = ALPHABET.slice(0, b);
      e = i = 0;

      // Check that str is a valid base b number.
      // Don't use RegExp, so alphabet can contain special characters.
      for (len = str.length; i < len; i++) {
        if (alphabet.indexOf(c = str.charAt(i)) < 0) {
          if (c == '.') {

            // If '.' is not the first character and it has not be found before.
            if (i > e) {
              e = len;
              continue;
            }
          } else if (!caseChanged) {

            // Allow e.g. hexadecimal 'FF' as well as 'ff'.
            if (str == str.toUpperCase() && (str = str.toLowerCase()) ||
                str == str.toLowerCase() && (str = str.toUpperCase())) {
              caseChanged = true;
              i = -1;
              e = 0;
              continue;
            }
          }

          return parseNumeric(x, String(v), isNum, b);
        }
      }

      // Prevent later check for length on converted number.
      isNum = false;
      str = convertBase(str, b, 10, x.s);

      // Decimal point?
      if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
      else e = str.length;
    }

    // Determine leading zeros.
    for (i = 0; str.charCodeAt(i) === 48; i++);

    // Determine trailing zeros.
    for (len = str.length; str.charCodeAt(--len) === 48;);

    if (str = str.slice(i, ++len)) {
      len -= i;

      // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
      if (isNum && BigNumber.DEBUG &&
        len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {
          throw Error
           (tooManyDigits + (x.s * v));
      }

       // Overflow?
      if ((e = e - i - 1) > MAX_EXP) {

        // Infinity.
        x.c = x.e = null;

      // Underflow?
      } else if (e < MIN_EXP) {

        // Zero.
        x.c = [x.e = 0];
      } else {
        x.e = e;
        x.c = [];

        // Transform base

        // e is the base 10 exponent.
        // i is where to slice str to get the first element of the coefficient array.
        i = (e + 1) % LOG_BASE;
        if (e < 0) i += LOG_BASE;  // i < 1

        if (i < len) {
          if (i) x.c.push(+str.slice(0, i));

          for (len -= LOG_BASE; i < len;) {
            x.c.push(+str.slice(i, i += LOG_BASE));
          }

          i = LOG_BASE - (str = str.slice(i)).length;
        } else {
          i -= len;
        }

        for (; i--; str += '0');
        x.c.push(+str);
      }
    } else {

      // Zero.
      x.c = [x.e = 0];
    }
  }


  // CONSTRUCTOR PROPERTIES


  BigNumber.clone = clone;

  BigNumber.ROUND_UP = 0;
  BigNumber.ROUND_DOWN = 1;
  BigNumber.ROUND_CEIL = 2;
  BigNumber.ROUND_FLOOR = 3;
  BigNumber.ROUND_HALF_UP = 4;
  BigNumber.ROUND_HALF_DOWN = 5;
  BigNumber.ROUND_HALF_EVEN = 6;
  BigNumber.ROUND_HALF_CEIL = 7;
  BigNumber.ROUND_HALF_FLOOR = 8;
  BigNumber.EUCLID = 9;


  /*
   * Configure infrequently-changing library-wide settings.
   *
   * Accept an object with the following optional properties (if the value of a property is
   * a number, it must be an integer within the inclusive range stated):
   *
   *   DECIMAL_PLACES   {number}           0 to MAX
   *   ROUNDING_MODE    {number}           0 to 8
   *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
   *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
   *   CRYPTO           {boolean}          true or false
   *   MODULO_MODE      {number}           0 to 9
   *   POW_PRECISION       {number}           0 to MAX
   *   ALPHABET         {string}           A string of two or more unique characters which does
   *                                       not contain '.'.
   *   FORMAT           {object}           An object with some of the following properties:
   *     prefix                 {string}
   *     groupSize              {number}
   *     secondaryGroupSize     {number}
   *     groupSeparator         {string}
   *     decimalSeparator       {string}
   *     fractionGroupSize      {number}
   *     fractionGroupSeparator {string}
   *     suffix                 {string}
   *
   * (The values assigned to the above FORMAT object properties are not checked for validity.)
   *
   * E.g.
   * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
   *
   * Ignore properties/parameters set to null or undefined, except for ALPHABET.
   *
   * Return an object with the properties current values.
   */
  BigNumber.config = BigNumber.set = function (obj) {
    var p, v;

    if (obj != null) {

      if (typeof obj == 'object') {

        // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          DECIMAL_PLACES = v;
        }

        // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
        // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
          v = obj[p];
          intCheck(v, 0, 8, p);
          ROUNDING_MODE = v;
        }

        // EXPONENTIAL_AT {number|number[]}
        // Integer, -MAX to MAX inclusive or
        // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
        // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, 0, p);
            intCheck(v[1], 0, MAX, p);
            TO_EXP_NEG = v[0];
            TO_EXP_POS = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
          }
        }

        // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
        // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
        // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
        if (obj.hasOwnProperty(p = 'RANGE')) {
          v = obj[p];
          if (v && v.pop) {
            intCheck(v[0], -MAX, -1, p);
            intCheck(v[1], 1, MAX, p);
            MIN_EXP = v[0];
            MAX_EXP = v[1];
          } else {
            intCheck(v, -MAX, MAX, p);
            if (v) {
              MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
            } else {
              throw Error
               (bignumberError + p + ' cannot be zero: ' + v);
            }
          }
        }

        // CRYPTO {boolean} true or false.
        // '[BigNumber Error] CRYPTO not true or false: {v}'
        // '[BigNumber Error] crypto unavailable'
        if (obj.hasOwnProperty(p = 'CRYPTO')) {
          v = obj[p];
          if (v === !!v) {
            if (v) {
              if (typeof crypto != 'undefined' && crypto &&
               (crypto.getRandomValues || crypto.randomBytes)) {
                CRYPTO = v;
              } else {
                CRYPTO = !v;
                throw Error
                 (bignumberError + 'crypto unavailable');
              }
            } else {
              CRYPTO = v;
            }
          } else {
            throw Error
             (bignumberError + p + ' not true or false: ' + v);
          }
        }

        // MODULO_MODE {number} Integer, 0 to 9 inclusive.
        // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
          v = obj[p];
          intCheck(v, 0, 9, p);
          MODULO_MODE = v;
        }

        // POW_PRECISION {number} Integer, 0 to MAX inclusive.
        // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
        if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
          v = obj[p];
          intCheck(v, 0, MAX, p);
          POW_PRECISION = v;
        }

        // FORMAT {object}
        // '[BigNumber Error] FORMAT not an object: {v}'
        if (obj.hasOwnProperty(p = 'FORMAT')) {
          v = obj[p];
          if (typeof v == 'object') FORMAT = v;
          else throw Error
           (bignumberError + p + ' not an object: ' + v);
        }

        // ALPHABET {string}
        // '[BigNumber Error] ALPHABET invalid: {v}'
        if (obj.hasOwnProperty(p = 'ALPHABET')) {
          v = obj[p];

          // Disallow if less than two characters,
          // or if it contains '+', '-', '.', whitespace, or a repeated character.
          if (typeof v == 'string' && !/^.?$|[+\-.\s]|(.).*\1/.test(v)) {
            alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';
            ALPHABET = v;
          } else {
            throw Error
             (bignumberError + p + ' invalid: ' + v);
          }
        }

      } else {

        // '[BigNumber Error] Object expected: {v}'
        throw Error
         (bignumberError + 'Object expected: ' + obj);
      }
    }

    return {
      DECIMAL_PLACES: DECIMAL_PLACES,
      ROUNDING_MODE: ROUNDING_MODE,
      EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
      RANGE: [MIN_EXP, MAX_EXP],
      CRYPTO: CRYPTO,
      MODULO_MODE: MODULO_MODE,
      POW_PRECISION: POW_PRECISION,
      FORMAT: FORMAT,
      ALPHABET: ALPHABET
    };
  };


  /*
   * Return true if v is a BigNumber instance, otherwise return false.
   *
   * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.
   *
   * v {any}
   *
   * '[BigNumber Error] Invalid BigNumber: {v}'
   */
  BigNumber.isBigNumber = function (v) {
    if (!v || v._isBigNumber !== true) return false;
    if (!BigNumber.DEBUG) return true;

    var i, n,
      c = v.c,
      e = v.e,
      s = v.s;

    out: if ({}.toString.call(c) == '[object Array]') {

      if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {

        // If the first element is zero, the BigNumber value must be zero.
        if (c[0] === 0) {
          if (e === 0 && c.length === 1) return true;
          break out;
        }

        // Calculate number of digits that c[0] should have, based on the exponent.
        i = (e + 1) % LOG_BASE;
        if (i < 1) i += LOG_BASE;

        // Calculate number of digits of c[0].
        //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {
        if (String(c[0]).length == i) {

          for (i = 0; i < c.length; i++) {
            n = c[i];
            if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;
          }

          // Last element cannot be zero, unless it is the only element.
          if (n !== 0) return true;
        }
      }

    // Infinity/NaN
    } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
      return true;
    }

    throw Error
      (bignumberError + 'Invalid BigNumber: ' + v);
  };


  /*
   * Return a new BigNumber whose value is the maximum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.maximum = BigNumber.max = function () {
    return maxOrMin(arguments, P.lt);
  };


  /*
   * Return a new BigNumber whose value is the minimum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.minimum = BigNumber.min = function () {
    return maxOrMin(arguments, P.gt);
  };


  /*
   * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
   * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
   * zeros are produced).
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
   * '[BigNumber Error] crypto unavailable'
   */
  BigNumber.random = (function () {
    var pow2_53 = 0x20000000000000;

    // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
    // Check if Math.random() produces more than 32 bits of randomness.
    // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
    // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
    var random53bitInt = (Math.random() * pow2_53) & 0x1fffff
     ? function () { return mathfloor(Math.random() * pow2_53); }
     : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +
       (Math.random() * 0x800000 | 0); };

    return function (dp) {
      var a, b, e, k, v,
        i = 0,
        c = [],
        rand = new BigNumber(ONE);

      if (dp == null) dp = DECIMAL_PLACES;
      else intCheck(dp, 0, MAX);

      k = mathceil(dp / LOG_BASE);

      if (CRYPTO) {

        // Browsers supporting crypto.getRandomValues.
        if (crypto.getRandomValues) {

          a = crypto.getRandomValues(new Uint32Array(k *= 2));

          for (; i < k;) {

            // 53 bits:
            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
            //                                     11111 11111111 11111111
            // 0x20000 is 2^21.
            v = a[i] * 0x20000 + (a[i + 1] >>> 11);

            // Rejection sampling:
            // 0 <= v < 9007199254740992
            // Probability that v >= 9e15, is
            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
            if (v >= 9e15) {
              b = crypto.getRandomValues(new Uint32Array(2));
              a[i] = b[0];
              a[i + 1] = b[1];
            } else {

              // 0 <= v <= 8999999999999999
              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 2;
            }
          }
          i = k / 2;

        // Node.js supporting crypto.randomBytes.
        } else if (crypto.randomBytes) {

          // buffer
          a = crypto.randomBytes(k *= 7);

          for (; i < k;) {

            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
            // 0x100000000 is 2^32, 0x1000000 is 2^24
            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
            // 0 <= v < 9007199254740992
            v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +
               (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +
               (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];

            if (v >= 9e15) {
              crypto.randomBytes(7).copy(a, i);
            } else {

              // 0 <= (v % 1e14) <= 99999999999999
              c.push(v % 1e14);
              i += 7;
            }
          }
          i = k / 7;
        } else {
          CRYPTO = false;
          throw Error
           (bignumberError + 'crypto unavailable');
        }
      }

      // Use Math.random.
      if (!CRYPTO) {

        for (; i < k;) {
          v = random53bitInt();
          if (v < 9e15) c[i++] = v % 1e14;
        }
      }

      k = c[--i];
      dp %= LOG_BASE;

      // Convert trailing digits to zeros according to dp.
      if (k && dp) {
        v = POWS_TEN[LOG_BASE - dp];
        c[i] = mathfloor(k / v) * v;
      }

      // Remove trailing elements which are zero.
      for (; c[i] === 0; c.pop(), i--);

      // Zero?
      if (i < 0) {
        c = [e = 0];
      } else {

        // Remove leading elements which are zero and adjust exponent accordingly.
        for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);

        // Count the digits of the first element of c to determine leading zeros, and...
        for (i = 1, v = c[0]; v >= 10; v /= 10, i++);

        // adjust the exponent accordingly.
        if (i < LOG_BASE) e -= LOG_BASE - i;
      }

      rand.e = e;
      rand.c = c;
      return rand;
    };
  })();


   /*
   * Return a BigNumber whose value is the sum of the arguments.
   *
   * arguments {number|string|BigNumber}
   */
  BigNumber.sum = function () {
    var i = 1,
      args = arguments,
      sum = new BigNumber(args[0]);
    for (; i < args.length;) sum = sum.plus(args[i++]);
    return sum;
  };


  // PRIVATE FUNCTIONS


  // Called by BigNumber and BigNumber.prototype.toString.
  convertBase = (function () {
    var decimal = '0123456789';

    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. toBaseOut('255', 10, 16) returns [15, 15].
     * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
     */
    function toBaseOut(str, baseIn, baseOut, alphabet) {
      var j,
        arr = [0],
        arrL,
        i = 0,
        len = str.length;

      for (; i < len;) {
        for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);

        arr[0] += alphabet.indexOf(str.charAt(i++));

        for (j = 0; j < arr.length; j++) {

          if (arr[j] > baseOut - 1) {
            if (arr[j + 1] == null) arr[j + 1] = 0;
            arr[j + 1] += arr[j] / baseOut | 0;
            arr[j] %= baseOut;
          }
        }
      }

      return arr.reverse();
    }

    // Convert a numeric string of baseIn to a numeric string of baseOut.
    // If the caller is toString, we are converting from base 10 to baseOut.
    // If the caller is BigNumber, we are converting from baseIn to base 10.
    return function (str, baseIn, baseOut, sign, callerIsToString) {
      var alphabet, d, e, k, r, x, xc, y,
        i = str.indexOf('.'),
        dp = DECIMAL_PLACES,
        rm = ROUNDING_MODE;

      // Non-integer.
      if (i >= 0) {
        k = POW_PRECISION;

        // Unlimited precision.
        POW_PRECISION = 0;
        str = str.replace('.', '');
        y = new BigNumber(baseIn);
        x = y.pow(str.length - i);
        POW_PRECISION = k;

        // Convert str as if an integer, then restore the fraction part by dividing the
        // result by its base raised to a power.

        y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),
         10, baseOut, decimal);
        y.e = y.c.length;
      }

      // Convert the number as integer.

      xc = toBaseOut(str, baseIn, baseOut, callerIsToString
       ? (alphabet = ALPHABET, decimal)
       : (alphabet = decimal, ALPHABET));

      // xc now represents str as an integer and converted to baseOut. e is the exponent.
      e = k = xc.length;

      // Remove trailing zeros.
      for (; xc[--k] == 0; xc.pop());

      // Zero?
      if (!xc[0]) return alphabet.charAt(0);

      // Does str represent an integer? If so, no need for the division.
      if (i < 0) {
        --e;
      } else {
        x.c = xc;
        x.e = e;

        // The sign is needed for correct rounding.
        x.s = sign;
        x = div(x, y, dp, rm, baseOut);
        xc = x.c;
        r = x.r;
        e = x.e;
      }

      // xc now represents str converted to baseOut.

      // THe index of the rounding digit.
      d = e + dp + 1;

      // The rounding digit: the digit to the right of the digit that may be rounded up.
      i = xc[d];

      // Look at the rounding digits and mode to determine whether to round up.

      k = baseOut / 2;
      r = r || d < 0 || xc[d + 1] != null;

      r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
            : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||
             rm == (x.s < 0 ? 8 : 7));

      // If the index of the rounding digit is not greater than zero, or xc represents
      // zero, then the result of the base conversion is zero or, if rounding up, a value
      // such as 0.00001.
      if (d < 1 || !xc[0]) {

        // 1^-dp or 0
        str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
      } else {

        // Truncate xc to the required number of decimal places.
        xc.length = d;

        // Round up?
        if (r) {

          // Rounding up may mean the previous digit has to be rounded up and so on.
          for (--baseOut; ++xc[--d] > baseOut;) {
            xc[d] = 0;

            if (!d) {
              ++e;
              xc = [1].concat(xc);
            }
          }
        }

        // Determine trailing zeros.
        for (k = xc.length; !xc[--k];);

        // E.g. [4, 11, 15] becomes 4bf.
        for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));

        // Add leading zeros, decimal point and trailing zeros as required.
        str = toFixedPoint(str, e, alphabet.charAt(0));
      }

      // The caller will add the sign.
      return str;
    };
  })();


  // Perform division in the specified base. Called by div and convertBase.
  div = (function () {

    // Assume non-zero x and k.
    function multiply(x, k, base) {
      var m, temp, xlo, xhi,
        carry = 0,
        i = x.length,
        klo = k % SQRT_BASE,
        khi = k / SQRT_BASE | 0;

      for (x = x.slice(); i--;) {
        xlo = x[i] % SQRT_BASE;
        xhi = x[i] / SQRT_BASE | 0;
        m = khi * xlo + xhi * klo;
        temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;
        carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
        x[i] = temp % base;
      }

      if (carry) x = [carry].concat(x);

      return x;
    }

    function compare(a, b, aL, bL) {
      var i, cmp;

      if (aL != bL) {
        cmp = aL > bL ? 1 : -1;
      } else {

        for (i = cmp = 0; i < aL; i++) {

          if (a[i] != b[i]) {
            cmp = a[i] > b[i] ? 1 : -1;
            break;
          }
        }
      }

      return cmp;
    }

    function subtract(a, b, aL, base) {
      var i = 0;

      // Subtract b from a.
      for (; aL--;) {
        a[aL] -= i;
        i = a[aL] < b[aL] ? 1 : 0;
        a[aL] = i * base + a[aL] - b[aL];
      }

      // Remove leading zeros.
      for (; !a[0] && a.length > 1; a.splice(0, 1));
    }

    // x: dividend, y: divisor.
    return function (x, y, dp, rm, base) {
      var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,
        yL, yz,
        s = x.s == y.s ? 1 : -1,
        xc = x.c,
        yc = y.c;

      // Either NaN, Infinity or 0?
      if (!xc || !xc[0] || !yc || !yc[0]) {

        return new BigNumber(

         // Return NaN if either NaN, or both Infinity or 0.
         !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :

          // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
          xc && xc[0] == 0 || !yc ? s * 0 : s / 0
       );
      }

      q = new BigNumber(s);
      qc = q.c = [];
      e = x.e - y.e;
      s = dp + e + 1;

      if (!base) {
        base = BASE;
        e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
        s = s / LOG_BASE | 0;
      }

      // Result exponent may be one less then the current value of e.
      // The coefficients of the BigNumbers from convertBase may have trailing zeros.
      for (i = 0; yc[i] == (xc[i] || 0); i++);

      if (yc[i] > (xc[i] || 0)) e--;

      if (s < 0) {
        qc.push(1);
        more = true;
      } else {
        xL = xc.length;
        yL = yc.length;
        i = 0;
        s += 2;

        // Normalise xc and yc so highest order digit of yc is >= base / 2.

        n = mathfloor(base / (yc[0] + 1));

        // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
        // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
        if (n > 1) {
          yc = multiply(yc, n, base);
          xc = multiply(xc, n, base);
          yL = yc.length;
          xL = xc.length;
        }

        xi = yL;
        rem = xc.slice(0, yL);
        remL = rem.length;

        // Add zeros to make remainder as long as divisor.
        for (; remL < yL; rem[remL++] = 0);
        yz = yc.slice();
        yz = [0].concat(yz);
        yc0 = yc[0];
        if (yc[1] >= base / 2) yc0++;
        // Not necessary, but to prevent trial digit n > base, when using base 3.
        // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;

        do {
          n = 0;

          // Compare divisor and remainder.
          cmp = compare(yc, rem, yL, remL);

          // If divisor < remainder.
          if (cmp < 0) {

            // Calculate trial digit, n.

            rem0 = rem[0];
            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);

            // n is how many times the divisor goes into the current remainder.
            n = mathfloor(rem0 / yc0);

            //  Algorithm:
            //  product = divisor multiplied by trial digit (n).
            //  Compare product and remainder.
            //  If product is greater than remainder:
            //    Subtract divisor from product, decrement trial digit.
            //  Subtract product from remainder.
            //  If product was less than remainder at the last compare:
            //    Compare new remainder and divisor.
            //    If remainder is greater than divisor:
            //      Subtract divisor from remainder, increment trial digit.

            if (n > 1) {

              // n may be > base only when base is 3.
              if (n >= base) n = base - 1;

              // product = divisor * trial digit.
              prod = multiply(yc, n, base);
              prodL = prod.length;
              remL = rem.length;

              // Compare product and remainder.
              // If product > remainder then trial digit n too high.
              // n is 1 too high about 5% of the time, and is not known to have
              // ever been more than 1 too high.
              while (compare(prod, rem, prodL, remL) == 1) {
                n--;

                // Subtract divisor from product.
                subtract(prod, yL < prodL ? yz : yc, prodL, base);
                prodL = prod.length;
                cmp = 1;
              }
            } else {

              // n is 0 or 1, cmp is -1.
              // If n is 0, there is no need to compare yc and rem again below,
              // so change cmp to 1 to avoid it.
              // If n is 1, leave cmp as -1, so yc and rem are compared again.
              if (n == 0) {

                // divisor < remainder, so n must be at least 1.
                cmp = n = 1;
              }

              // product = divisor
              prod = yc.slice();
              prodL = prod.length;
            }

            if (prodL < remL) prod = [0].concat(prod);

            // Subtract product from remainder.
            subtract(rem, prod, remL, base);
            remL = rem.length;

             // If product was < remainder.
            if (cmp == -1) {

              // Compare divisor and new remainder.
              // If divisor < new remainder, subtract divisor from remainder.
              // Trial digit n too low.
              // n is 1 too low about 5% of the time, and very rarely 2 too low.
              while (compare(yc, rem, yL, remL) < 1) {
                n++;

                // Subtract divisor from remainder.
                subtract(rem, yL < remL ? yz : yc, remL, base);
                remL = rem.length;
              }
            }
          } else if (cmp === 0) {
            n++;
            rem = [0];
          } // else cmp === 1 and n will be 0

          // Add the next digit, n, to the result array.
          qc[i++] = n;

          // Update the remainder.
          if (rem[0]) {
            rem[remL++] = xc[xi] || 0;
          } else {
            rem = [xc[xi]];
            remL = 1;
          }
        } while ((xi++ < xL || rem[0] != null) && s--);

        more = rem[0] != null;

        // Leading zero?
        if (!qc[0]) qc.splice(0, 1);
      }

      if (base == BASE) {

        // To calculate q.e, first get the number of digits of qc[0].
        for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);

        round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);

      // Caller is convertBase.
      } else {
        q.e = e;
        q.r = +more;
      }

      return q;
    };
  })();


  /*
   * Return a string representing the value of BigNumber n in fixed-point or exponential
   * notation rounded to the specified decimal places or significant digits.
   *
   * n: a BigNumber.
   * i: the index of the last digit required (i.e. the digit that may be rounded up).
   * rm: the rounding mode.
   * id: 1 (toExponential) or 2 (toPrecision).
   */
  function format(n, i, rm, id) {
    var c0, e, ne, len, str;

    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);

    if (!n.c) return n.toString();

    c0 = n.c[0];
    ne = n.e;

    if (i == null) {
      str = coeffToString(n.c);
      str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)
       ? toExponential(str, ne)
       : toFixedPoint(str, ne, '0');
    } else {
      n = round(new BigNumber(n), i, rm);

      // n.e may have changed if the value was rounded up.
      e = n.e;

      str = coeffToString(n.c);
      len = str.length;

      // toPrecision returns exponential notation if the number of significant digits
      // specified is less than the number of digits necessary to represent the integer
      // part of the value in fixed-point notation.

      // Exponential notation.
      if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {

        // Append zeros?
        for (; len < i; str += '0', len++);
        str = toExponential(str, e);

      // Fixed-point notation.
      } else {
        i -= ne;
        str = toFixedPoint(str, e, '0');

        // Append zeros?
        if (e + 1 > len) {
          if (--i > 0) for (str += '.'; i--; str += '0');
        } else {
          i += e - len;
          if (i > 0) {
            if (e + 1 == len) str += '.';
            for (; i--; str += '0');
          }
        }
      }
    }

    return n.s < 0 && c0 ? '-' + str : str;
  }


  // Handle BigNumber.max and BigNumber.min.
  function maxOrMin(args, method) {
    var n,
      i = 1,
      m = new BigNumber(args[0]);

    for (; i < args.length; i++) {
      n = new BigNumber(args[i]);

      // If any number is NaN, return NaN.
      if (!n.s) {
        m = n;
        break;
      } else if (method.call(m, n)) {
        m = n;
      }
    }

    return m;
  }


  /*
   * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
   * Called by minus, plus and times.
   */
  function normalise(n, c, e) {
    var i = 1,
      j = c.length;

     // Remove trailing zeros.
    for (; !c[--j]; c.pop());

    // Calculate the base 10 exponent. First get the number of digits of c[0].
    for (j = c[0]; j >= 10; j /= 10, i++);

    // Overflow?
    if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {

      // Infinity.
      n.c = n.e = null;

    // Underflow?
    } else if (e < MIN_EXP) {

      // Zero.
      n.c = [n.e = 0];
    } else {
      n.e = e;
      n.c = c;
    }

    return n;
  }


  // Handle values that fail the validity test in BigNumber.
  parseNumeric = (function () {
    var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i,
      dotAfter = /^([^.]+)\.$/,
      dotBefore = /^\.([^.]+)$/,
      isInfinityOrNaN = /^-?(Infinity|NaN)$/,
      whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;

    return function (x, str, isNum, b) {
      var base,
        s = isNum ? str : str.replace(whitespaceOrPlus, '');

      // No exception on ±Infinity or NaN.
      if (isInfinityOrNaN.test(s)) {
        x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
      } else {
        if (!isNum) {

          // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
          s = s.replace(basePrefix, function (m, p1, p2) {
            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
            return !b || b == base ? p1 : m;
          });

          if (b) {
            base = b;

            // E.g. '1.' to '1', '.1' to '0.1'
            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
          }

          if (str != s) return new BigNumber(s, base);
        }

        // '[BigNumber Error] Not a number: {n}'
        // '[BigNumber Error] Not a base {b} number: {n}'
        if (BigNumber.DEBUG) {
          throw Error
            (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
        }

        // NaN
        x.s = null;
      }

      x.c = x.e = null;
    }
  })();


  /*
   * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
   * If r is truthy, it is known that there are more digits after the rounding digit.
   */
  function round(x, sd, rm, r) {
    var d, i, j, k, n, ni, rd,
      xc = x.c,
      pows10 = POWS_TEN;

    // if x is not Infinity or NaN...
    if (xc) {

      // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
      // n is a base 1e14 number, the value of the element of array x.c containing rd.
      // ni is the index of n within x.c.
      // d is the number of digits of n.
      // i is the index of rd within n including leading zeros.
      // j is the actual index of rd within n (if < 0, rd is a leading zero).
      out: {

        // Get the number of digits of the first element of xc.
        for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);
        i = sd - d;

        // If the rounding digit is in the first element of xc...
        if (i < 0) {
          i += LOG_BASE;
          j = sd;
          n = xc[ni = 0];

          // Get the rounding digit at index j of n.
          rd = n / pows10[d - j - 1] % 10 | 0;
        } else {
          ni = mathceil((i + 1) / LOG_BASE);

          if (ni >= xc.length) {

            if (r) {

              // Needed by sqrt.
              for (; xc.length <= ni; xc.push(0));
              n = rd = 0;
              d = 1;
              i %= LOG_BASE;
              j = i - LOG_BASE + 1;
            } else {
              break out;
            }
          } else {
            n = k = xc[ni];

            // Get the number of digits of n.
            for (d = 1; k >= 10; k /= 10, d++);

            // Get the index of rd within n.
            i %= LOG_BASE;

            // Get the index of rd within n, adjusted for leading zeros.
            // The number of leading zeros of n is given by LOG_BASE - d.
            j = i - LOG_BASE + d;

            // Get the rounding digit at index j of n.
            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
          }
        }

        r = r || sd < 0 ||

        // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
         xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);

        r = rm < 4
         ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))
         : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&

          // Check whether the digit to the left of the rounding digit is odd.
          ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||
           rm == (x.s < 0 ? 8 : 7));

        if (sd < 1 || !xc[0]) {
          xc.length = 0;

          if (r) {

            // Convert sd to decimal places.
            sd -= x.e + 1;

            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
            x.e = -sd || 0;
          } else {

            // Zero.
            xc[0] = x.e = 0;
          }

          return x;
        }

        // Remove excess digits.
        if (i == 0) {
          xc.length = ni;
          k = 1;
          ni--;
        } else {
          xc.length = ni + 1;
          k = pows10[LOG_BASE - i];

          // E.g. 56700 becomes 56000 if 7 is the rounding digit.
          // j > 0 means i > number of leading zeros of n.
          xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
        }

        // Round up?
        if (r) {

          for (; ;) {

            // If the digit to be rounded up is in the first element of xc...
            if (ni == 0) {

              // i will be the length of xc[0] before k is added.
              for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);
              j = xc[0] += k;
              for (k = 1; j >= 10; j /= 10, k++);

              // if i != k the length has increased.
              if (i != k) {
                x.e++;
                if (xc[0] == BASE) xc[0] = 1;
              }

              break;
            } else {
              xc[ni] += k;
              if (xc[ni] != BASE) break;
              xc[ni--] = 0;
              k = 1;
            }
          }
        }

        // Remove trailing zeros.
        for (i = xc.length; xc[--i] === 0; xc.pop());
      }

      // Overflow? Infinity.
      if (x.e > MAX_EXP) {
        x.c = x.e = null;

      // Underflow? Zero.
      } else if (x.e < MIN_EXP) {
        x.c = [x.e = 0];
      }
    }

    return x;
  }


  function valueOf(n) {
    var str,
      e = n.e;

    if (e === null) return n.toString();

    str = coeffToString(n.c);

    str = e <= TO_EXP_NEG || e >= TO_EXP_POS
      ? toExponential(str, e)
      : toFixedPoint(str, e, '0');

    return n.s < 0 ? '-' + str : str;
  }


  // PROTOTYPE/INSTANCE METHODS


  /*
   * Return a new BigNumber whose value is the absolute value of this BigNumber.
   */
  P.absoluteValue = P.abs = function () {
    var x = new BigNumber(this);
    if (x.s < 0) x.s = 1;
    return x;
  };


  /*
   * Return
   *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
   *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
   *   0 if they have the same value,
   *   or null if the value of either is NaN.
   */
  P.comparedTo = function (y, b) {
    return compare(this, new BigNumber(y, b));
  };


  /*
   * If dp is undefined or null or true or false, return the number of decimal places of the
   * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   *
   * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.decimalPlaces = P.dp = function (dp, rm) {
    var c, n, v,
      x = this;

    if (dp != null) {
      intCheck(dp, 0, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), dp + x.e + 1, rm);
    }

    if (!(c = x.c)) return null;
    n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;

    // Subtract the number of trailing zeros of the last number.
    if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);
    if (n < 0) n = 0;

    return n;
  };


  /*
   *  n / 0 = I
   *  n / N = N
   *  n / I = 0
   *  0 / n = 0
   *  0 / 0 = N
   *  0 / N = N
   *  0 / I = 0
   *  N / n = N
   *  N / 0 = N
   *  N / N = N
   *  N / I = N
   *  I / n = I
   *  I / 0 = I
   *  I / N = N
   *  I / I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
   * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.dividedBy = P.div = function (y, b) {
    return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
  };


  /*
   * Return a new BigNumber whose value is the integer part of dividing the value of this
   * BigNumber by the value of BigNumber(y, b).
   */
  P.dividedToIntegerBy = P.idiv = function (y, b) {
    return div(this, new BigNumber(y, b), 0, 1);
  };


  /*
   * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
   *
   * If m is present, return the result modulo m.
   * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
   * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
   *
   * The modular power operation works efficiently when x, n, and m are integers, otherwise it
   * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
   *
   * n {number|string|BigNumber} The exponent. An integer.
   * [m] {number|string|BigNumber} The modulus.
   *
   * '[BigNumber Error] Exponent not an integer: {n}'
   */
  P.exponentiatedBy = P.pow = function (n, m) {
    var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,
      x = this;

    n = new BigNumber(n);

    // Allow NaN and ±Infinity, but not other non-integers.
    if (n.c && !n.isInteger()) {
      throw Error
        (bignumberError + 'Exponent not an integer: ' + valueOf(n));
    }

    if (m != null) m = new BigNumber(m);

    // Exponent of MAX_SAFE_INTEGER is 15.
    nIsBig = n.e > 14;

    // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
    if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {

      // The sign of the result of pow when x is negative depends on the evenness of n.
      // If +n overflows to ±Infinity, the evenness of n would be not be known.
      y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
      return m ? y.mod(m) : y;
    }

    nIsNeg = n.s < 0;

    if (m) {

      // x % m returns NaN if abs(m) is zero, or m is NaN.
      if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);

      isModExp = !nIsNeg && x.isInteger() && m.isInteger();

      if (isModExp) x = x.mod(m);

    // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
    // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
    } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0
      // [1, 240000000]
      ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7
      // [80000000000000]  [99999750000000]
      : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {

      // If x is negative and n is odd, k = -0, else k = 0.
      k = x.s < 0 && isOdd(n) ? -0 : 0;

      // If x >= 1, k = ±Infinity.
      if (x.e > -1) k = 1 / k;

      // If n is negative return ±0, else return ±Infinity.
      return new BigNumber(nIsNeg ? 1 / k : k);

    } else if (POW_PRECISION) {

      // Truncating each coefficient array to a length of k after each multiplication
      // equates to truncating significant digits to POW_PRECISION + [28, 41],
      // i.e. there will be a minimum of 28 guard digits retained.
      k = mathceil(POW_PRECISION / LOG_BASE + 2);
    }

    if (nIsBig) {
      half = new BigNumber(0.5);
      if (nIsNeg) n.s = 1;
      nIsOdd = isOdd(n);
    } else {
      i = Math.abs(+valueOf(n));
      nIsOdd = i % 2;
    }

    y = new BigNumber(ONE);

    // Performs 54 loop iterations for n of 9007199254740991.
    for (; ;) {

      if (nIsOdd) {
        y = y.times(x);
        if (!y.c) break;

        if (k) {
          if (y.c.length > k) y.c.length = k;
        } else if (isModExp) {
          y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
        }
      }

      if (i) {
        i = mathfloor(i / 2);
        if (i === 0) break;
        nIsOdd = i % 2;
      } else {
        n = n.times(half);
        round(n, n.e + 1, 1);

        if (n.e > 14) {
          nIsOdd = isOdd(n);
        } else {
          i = +valueOf(n);
          if (i === 0) break;
          nIsOdd = i % 2;
        }
      }

      x = x.times(x);

      if (k) {
        if (x.c && x.c.length > k) x.c.length = k;
      } else if (isModExp) {
        x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
      }
    }

    if (isModExp) return y;
    if (nIsNeg) y = ONE.div(y);

    return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
   * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
   */
  P.integerValue = function (rm) {
    var n = new BigNumber(this);
    if (rm == null) rm = ROUNDING_MODE;
    else intCheck(rm, 0, 8);
    return round(n, n.e + 1, rm);
  };


  /*
   * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isEqualTo = P.eq = function (y, b) {
    return compare(this, new BigNumber(y, b)) === 0;
  };


  /*
   * Return true if the value of this BigNumber is a finite number, otherwise return false.
   */
  P.isFinite = function () {
    return !!this.c;
  };


  /*
   * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isGreaterThan = P.gt = function (y, b) {
    return compare(this, new BigNumber(y, b)) > 0;
  };


  /*
   * Return true if the value of this BigNumber is greater than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isGreaterThanOrEqualTo = P.gte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;

  };


  /*
   * Return true if the value of this BigNumber is an integer, otherwise return false.
   */
  P.isInteger = function () {
    return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
  };


  /*
   * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
   * otherwise return false.
   */
  P.isLessThan = P.lt = function (y, b) {
    return compare(this, new BigNumber(y, b)) < 0;
  };


  /*
   * Return true if the value of this BigNumber is less than or equal to the value of
   * BigNumber(y, b), otherwise return false.
   */
  P.isLessThanOrEqualTo = P.lte = function (y, b) {
    return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;
  };


  /*
   * Return true if the value of this BigNumber is NaN, otherwise return false.
   */
  P.isNaN = function () {
    return !this.s;
  };


  /*
   * Return true if the value of this BigNumber is negative, otherwise return false.
   */
  P.isNegative = function () {
    return this.s < 0;
  };


  /*
   * Return true if the value of this BigNumber is positive, otherwise return false.
   */
  P.isPositive = function () {
    return this.s > 0;
  };


  /*
   * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
   */
  P.isZero = function () {
    return !!this.c && this.c[0] == 0;
  };


  /*
   *  n - 0 = n
   *  n - N = N
   *  n - I = -I
   *  0 - n = -n
   *  0 - 0 = 0
   *  0 - N = N
   *  0 - I = -I
   *  N - n = N
   *  N - 0 = N
   *  N - N = N
   *  N - I = N
   *  I - n = I
   *  I - 0 = I
   *  I - N = N
   *  I - I = N
   *
   * Return a new BigNumber whose value is the value of this BigNumber minus the value of
   * BigNumber(y, b).
   */
  P.minus = function (y, b) {
    var i, j, t, xLTy,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
    if (a != b) {
      y.s = -b;
      return x.plus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Either Infinity?
      if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);

      // Either zero?
      if (!xc[0] || !yc[0]) {

        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
        return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :

         // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
         ROUNDING_MODE == 3 ? -0 : 0);
      }
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Determine which is the bigger number.
    if (a = xe - ye) {

      if (xLTy = a < 0) {
        a = -a;
        t = xc;
      } else {
        ye = xe;
        t = yc;
      }

      t.reverse();

      // Prepend zeros to equalise exponents.
      for (b = a; b--; t.push(0));
      t.reverse();
    } else {

      // Exponents equal. Check digit by digit.
      j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;

      for (a = b = 0; b < j; b++) {

        if (xc[b] != yc[b]) {
          xLTy = xc[b] < yc[b];
          break;
        }
      }
    }

    // x < y? Point xc to the array of the bigger number.
    if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;

    b = (j = yc.length) - (i = xc.length);

    // Append zeros to xc if shorter.
    // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
    if (b > 0) for (; b--; xc[i++] = 0);
    b = BASE - 1;

    // Subtract yc from xc.
    for (; j > a;) {

      if (xc[--j] < yc[j]) {
        for (i = j; i && !xc[--i]; xc[i] = b);
        --xc[i];
        xc[j] += BASE;
      }

      xc[j] -= yc[j];
    }

    // Remove leading zeros and adjust exponent accordingly.
    for (; xc[0] == 0; xc.splice(0, 1), --ye);

    // Zero?
    if (!xc[0]) {

      // Following IEEE 754 (2008) 6.3,
      // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
      y.s = ROUNDING_MODE == 3 ? -1 : 1;
      y.c = [y.e = 0];
      return y;
    }

    // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
    // for finite x and y.
    return normalise(y, xc, ye);
  };


  /*
   *   n % 0 =  N
   *   n % N =  N
   *   n % I =  n
   *   0 % n =  0
   *  -0 % n = -0
   *   0 % 0 =  N
   *   0 % N =  N
   *   0 % I =  0
   *   N % n =  N
   *   N % 0 =  N
   *   N % N =  N
   *   N % I =  N
   *   I % n =  N
   *   I % 0 =  N
   *   I % N =  N
   *   I % I =  N
   *
   * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
   * BigNumber(y, b). The result depends on the value of MODULO_MODE.
   */
  P.modulo = P.mod = function (y, b) {
    var q, s,
      x = this;

    y = new BigNumber(y, b);

    // Return NaN if x is Infinity or NaN, or y is NaN or zero.
    if (!x.c || !y.s || y.c && !y.c[0]) {
      return new BigNumber(NaN);

    // Return x if y is Infinity or x is zero.
    } else if (!y.c || x.c && !x.c[0]) {
      return new BigNumber(x);
    }

    if (MODULO_MODE == 9) {

      // Euclidian division: q = sign(y) * floor(x / abs(y))
      // r = x - qy    where  0 <= r < abs(y)
      s = y.s;
      y.s = 1;
      q = div(x, y, 0, 3);
      y.s = s;
      q.s *= s;
    } else {
      q = div(x, y, 0, MODULO_MODE);
    }

    y = x.minus(q.times(y));

    // To match JavaScript %, ensure sign of zero is sign of dividend.
    if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;

    return y;
  };


  /*
   *  n * 0 = 0
   *  n * N = N
   *  n * I = I
   *  0 * n = 0
   *  0 * 0 = 0
   *  0 * N = N
   *  0 * I = N
   *  N * n = N
   *  N * 0 = N
   *  N * N = N
   *  N * I = N
   *  I * n = I
   *  I * 0 = N
   *  I * N = N
   *  I * I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
   * of BigNumber(y, b).
   */
  P.multipliedBy = P.times = function (y, b) {
    var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,
      base, sqrtBase,
      x = this,
      xc = x.c,
      yc = (y = new BigNumber(y, b)).c;

    // Either NaN, ±Infinity or ±0?
    if (!xc || !yc || !xc[0] || !yc[0]) {

      // Return NaN if either is NaN, or one is 0 and the other is Infinity.
      if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
        y.c = y.e = y.s = null;
      } else {
        y.s *= x.s;

        // Return ±Infinity if either is ±Infinity.
        if (!xc || !yc) {
          y.c = y.e = null;

        // Return ±0 if either is ±0.
        } else {
          y.c = [0];
          y.e = 0;
        }
      }

      return y;
    }

    e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
    y.s *= x.s;
    xcL = xc.length;
    ycL = yc.length;

    // Ensure xc points to longer array and xcL to its length.
    if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;

    // Initialise the result array with zeros.
    for (i = xcL + ycL, zc = []; i--; zc.push(0));

    base = BASE;
    sqrtBase = SQRT_BASE;

    for (i = ycL; --i >= 0;) {
      c = 0;
      ylo = yc[i] % sqrtBase;
      yhi = yc[i] / sqrtBase | 0;

      for (k = xcL, j = i + k; j > i;) {
        xlo = xc[--k] % sqrtBase;
        xhi = xc[k] / sqrtBase | 0;
        m = yhi * xlo + xhi * ylo;
        xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;
        c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
        zc[j--] = xlo % base;
      }

      zc[j] = c;
    }

    if (c) {
      ++e;
    } else {
      zc.splice(0, 1);
    }

    return normalise(y, zc, e);
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber negated,
   * i.e. multiplied by -1.
   */
  P.negated = function () {
    var x = new BigNumber(this);
    x.s = -x.s || null;
    return x;
  };


  /*
   *  n + 0 = n
   *  n + N = N
   *  n + I = I
   *  0 + n = n
   *  0 + 0 = 0
   *  0 + N = N
   *  0 + I = I
   *  N + n = N
   *  N + 0 = N
   *  N + N = N
   *  N + I = N
   *  I + n = I
   *  I + 0 = I
   *  I + N = N
   *  I + I = I
   *
   * Return a new BigNumber whose value is the value of this BigNumber plus the value of
   * BigNumber(y, b).
   */
  P.plus = function (y, b) {
    var t,
      x = this,
      a = x.s;

    y = new BigNumber(y, b);
    b = y.s;

    // Either NaN?
    if (!a || !b) return new BigNumber(NaN);

    // Signs differ?
     if (a != b) {
      y.s = -b;
      return x.minus(y);
    }

    var xe = x.e / LOG_BASE,
      ye = y.e / LOG_BASE,
      xc = x.c,
      yc = y.c;

    if (!xe || !ye) {

      // Return ±Infinity if either ±Infinity.
      if (!xc || !yc) return new BigNumber(a / 0);

      // Either zero?
      // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
      if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
    }

    xe = bitFloor(xe);
    ye = bitFloor(ye);
    xc = xc.slice();

    // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
    if (a = xe - ye) {
      if (a > 0) {
        ye = xe;
        t = yc;
      } else {
        a = -a;
        t = xc;
      }

      t.reverse();
      for (; a--; t.push(0));
      t.reverse();
    }

    a = xc.length;
    b = yc.length;

    // Point xc to the longer array, and b to the shorter length.
    if (a - b < 0) t = yc, yc = xc, xc = t, b = a;

    // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
    for (a = 0; b;) {
      a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
      xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
    }

    if (a) {
      xc = [a].concat(xc);
      ++ye;
    }

    // No need to check for zero, as +x + +y != 0 && -x + -y != 0
    // ye = MAX_EXP + 1 possible
    return normalise(y, xc, ye);
  };


  /*
   * If sd is undefined or null or true or false, return the number of significant digits of
   * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
   * If sd is true include integer-part trailing zeros in the count.
   *
   * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
   * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
   * ROUNDING_MODE if rm is omitted.
   *
   * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
   *                     boolean: whether to count integer-part trailing zeros: true or false.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.precision = P.sd = function (sd, rm) {
    var c, n, v,
      x = this;

    if (sd != null && sd !== !!sd) {
      intCheck(sd, 1, MAX);
      if (rm == null) rm = ROUNDING_MODE;
      else intCheck(rm, 0, 8);

      return round(new BigNumber(x), sd, rm);
    }

    if (!(c = x.c)) return null;
    v = c.length - 1;
    n = v * LOG_BASE + 1;

    if (v = c[v]) {

      // Subtract the number of trailing zeros of the last element.
      for (; v % 10 == 0; v /= 10, n--);

      // Add the number of digits of the first element.
      for (v = c[0]; v >= 10; v /= 10, n++);
    }

    if (sd && x.e + 1 > n) n = x.e + 1;

    return n;
  };


  /*
   * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
   * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
   *
   * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
   */
  P.shiftedBy = function (k) {
    intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
    return this.times('1e' + k);
  };


  /*
   *  sqrt(-n) =  N
   *  sqrt(N) =  N
   *  sqrt(-I) =  N
   *  sqrt(I) =  I
   *  sqrt(0) =  0
   *  sqrt(-0) = -0
   *
   * Return a new BigNumber whose value is the square root of the value of this BigNumber,
   * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
   */
  P.squareRoot = P.sqrt = function () {
    var m, n, r, rep, t,
      x = this,
      c = x.c,
      s = x.s,
      e = x.e,
      dp = DECIMAL_PLACES + 4,
      half = new BigNumber('0.5');

    // Negative/NaN/Infinity/zero?
    if (s !== 1 || !c || !c[0]) {
      return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
    }

    // Initial estimate.
    s = Math.sqrt(+valueOf(x));

    // Math.sqrt underflow/overflow?
    // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
    if (s == 0 || s == 1 / 0) {
      n = coeffToString(c);
      if ((n.length + e) % 2 == 0) n += '0';
      s = Math.sqrt(+n);
      e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);

      if (s == 1 / 0) {
        n = '5e' + e;
      } else {
        n = s.toExponential();
        n = n.slice(0, n.indexOf('e') + 1) + e;
      }

      r = new BigNumber(n);
    } else {
      r = new BigNumber(s + '');
    }

    // Check for zero.
    // r could be zero if MIN_EXP is changed after the this value was created.
    // This would cause a division by zero (x/t) and hence Infinity below, which would cause
    // coeffToString to throw.
    if (r.c[0]) {
      e = r.e;
      s = e + dp;
      if (s < 3) s = 0;

      // Newton-Raphson iteration.
      for (; ;) {
        t = r;
        r = half.times(t.plus(div(x, t, dp, 1)));

        if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {

          // The exponent of r may here be one less than the final result exponent,
          // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
          // are indexed correctly.
          if (r.e < e) --s;
          n = n.slice(s - 3, s + 1);

          // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
          // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
          // iteration.
          if (n == '9999' || !rep && n == '4999') {

            // On the first iteration only, check to see if rounding up gives the
            // exact result as the nines may infinitely repeat.
            if (!rep) {
              round(t, t.e + DECIMAL_PLACES + 2, 0);

              if (t.times(t).eq(x)) {
                r = t;
                break;
              }
            }

            dp += 4;
            s += 4;
            rep = 1;
          } else {

            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
            // result. If not, then there are further digits and m will be truthy.
            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {

              // Truncate to the first rounding digit.
              round(r, r.e + DECIMAL_PLACES + 2, 1);
              m = !r.times(r).eq(x);
            }

            break;
          }
        }
      }
    }

    return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
  };


  /*
   * Return a string representing the value of this BigNumber in exponential notation and
   * rounded using ROUNDING_MODE to dp fixed decimal places.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toExponential = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp++;
    }
    return format(this, dp, rm, 1);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounding
   * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
   *
   * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
   * but e.g. (-0.00001).toFixed(0) is '-0'.
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   */
  P.toFixed = function (dp, rm) {
    if (dp != null) {
      intCheck(dp, 0, MAX);
      dp = dp + this.e + 1;
    }
    return format(this, dp, rm);
  };


  /*
   * Return a string representing the value of this BigNumber in fixed-point notation rounded
   * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
   * of the format or FORMAT object (see BigNumber.set).
   *
   * The formatting object may contain some or all of the properties shown below.
   *
   * FORMAT = {
   *   prefix: '',
   *   groupSize: 3,
   *   secondaryGroupSize: 0,
   *   groupSeparator: ',',
   *   decimalSeparator: '.',
   *   fractionGroupSize: 0,
   *   fractionGroupSeparator: '\xA0',      // non-breaking space
   *   suffix: ''
   * };
   *
   * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   * [format] {object} Formatting options. See FORMAT pbject above.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
   * '[BigNumber Error] Argument not an object: {format}'
   */
  P.toFormat = function (dp, rm, format) {
    var str,
      x = this;

    if (format == null) {
      if (dp != null && rm && typeof rm == 'object') {
        format = rm;
        rm = null;
      } else if (dp && typeof dp == 'object') {
        format = dp;
        dp = rm = null;
      } else {
        format = FORMAT;
      }
    } else if (typeof format != 'object') {
      throw Error
        (bignumberError + 'Argument not an object: ' + format);
    }

    str = x.toFixed(dp, rm);

    if (x.c) {
      var i,
        arr = str.split('.'),
        g1 = +format.groupSize,
        g2 = +format.secondaryGroupSize,
        groupSeparator = format.groupSeparator || '',
        intPart = arr[0],
        fractionPart = arr[1],
        isNeg = x.s < 0,
        intDigits = isNeg ? intPart.slice(1) : intPart,
        len = intDigits.length;

      if (g2) i = g1, g1 = g2, g2 = i, len -= i;

      if (g1 > 0 && len > 0) {
        i = len % g1 || g1;
        intPart = intDigits.substr(0, i);
        for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);
        if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
        if (isNeg) intPart = '-' + intPart;
      }

      str = fractionPart
       ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)
        ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'),
         '$&' + (format.fractionGroupSeparator || ''))
        : fractionPart)
       : intPart;
    }

    return (format.prefix || '') + str + (format.suffix || '');
  };


  /*
   * Return an array of two BigNumbers representing the value of this BigNumber as a simple
   * fraction with an integer numerator and an integer denominator.
   * The denominator will be a positive non-zero value less than or equal to the specified
   * maximum denominator. If a maximum denominator is not specified, the denominator will be
   * the lowest value necessary to represent the number exactly.
   *
   * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
   *
   * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
   */
  P.toFraction = function (md) {
    var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,
      x = this,
      xc = x.c;

    if (md != null) {
      n = new BigNumber(md);

      // Throw if md is less than one or is not an integer, unless it is Infinity.
      if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
        throw Error
          (bignumberError + 'Argument ' +
            (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
      }
    }

    if (!xc) return new BigNumber(x);

    d = new BigNumber(ONE);
    n1 = d0 = new BigNumber(ONE);
    d1 = n0 = new BigNumber(ONE);
    s = coeffToString(xc);

    // Determine initial denominator.
    // d is a power of 10 and the minimum max denominator that specifies the value exactly.
    e = d.e = s.length - x.e - 1;
    d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
    md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;

    exp = MAX_EXP;
    MAX_EXP = 1 / 0;
    n = new BigNumber(s);

    // n0 = d1 = 0
    n0.c[0] = 0;

    for (; ;)  {
      q = div(n, d, 0, 1);
      d2 = d0.plus(q.times(d1));
      if (d2.comparedTo(md) == 1) break;
      d0 = d1;
      d1 = d2;
      n1 = n0.plus(q.times(d2 = n1));
      n0 = d2;
      d = n.minus(q.times(d2 = d));
      n = d2;
    }

    d2 = div(md.minus(d0), d1, 0, 1);
    n0 = n0.plus(d2.times(n1));
    d0 = d0.plus(d2.times(d1));
    n0.s = n1.s = x.s;
    e = e * 2;

    // Determine which fraction is closer to x, n0/d0 or n1/d1
    r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(
        div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];

    MAX_EXP = exp;

    return r;
  };


  /*
   * Return the value of this BigNumber converted to a number primitive.
   */
  P.toNumber = function () {
    return +valueOf(this);
  };


  /*
   * Return a string representing the value of this BigNumber rounded to sd significant digits
   * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
   * necessary to represent the integer part of the value in fixed-point notation, then use
   * exponential notation.
   *
   * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
   * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
   *
   * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
   */
  P.toPrecision = function (sd, rm) {
    if (sd != null) intCheck(sd, 1, MAX);
    return format(this, sd, rm, 2);
  };


  /*
   * Return a string representing the value of this BigNumber in base b, or base 10 if b is
   * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
   * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
   * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
   * TO_EXP_NEG, return exponential notation.
   *
   * [b] {number} Integer, 2 to ALPHABET.length inclusive.
   *
   * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
   */
  P.toString = function (b) {
    var str,
      n = this,
      s = n.s,
      e = n.e;

    // Infinity or NaN?
    if (e === null) {
      if (s) {
        str = 'Infinity';
        if (s < 0) str = '-' + str;
      } else {
        str = 'NaN';
      }
    } else {
      if (b == null) {
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS
         ? toExponential(coeffToString(n.c), e)
         : toFixedPoint(coeffToString(n.c), e, '0');
      } else if (b === 10 && alphabetHasNormalDecimalDigits) {
        n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
        str = toFixedPoint(coeffToString(n.c), n.e, '0');
      } else {
        intCheck(b, 2, ALPHABET.length, 'Base');
        str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
      }

      if (s < 0 && n.c[0]) str = '-' + str;
    }

    return str;
  };


  /*
   * Return as toString, but do not accept a base argument, and include the minus sign for
   * negative zero.
   */
  P.valueOf = P.toJSON = function () {
    return valueOf(this);
  };


  P._isBigNumber = true;

  P[Symbol.toStringTag] = 'BigNumber';

  // Node.js v10.12.0+
  P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;

  if (configObject != null) BigNumber.set(configObject);

  return BigNumber;
}


// PRIVATE HELPER FUNCTIONS

// These functions don't need access to variables,
// e.g. DECIMAL_PLACES, in the scope of the `clone` function above.


function bitFloor(n) {
  var i = n | 0;
  return n > 0 || n === i ? i : i - 1;
}


// Return a coefficient array as a string of base 10 digits.
function coeffToString(a) {
  var s, z,
    i = 1,
    j = a.length,
    r = a[0] + '';

  for (; i < j;) {
    s = a[i++] + '';
    z = LOG_BASE - s.length;
    for (; z--; s = '0' + s);
    r += s;
  }

  // Determine trailing zeros.
  for (j = r.length; r.charCodeAt(--j) === 48;);

  return r.slice(0, j + 1 || 1);
}


// Compare the value of BigNumbers x and y.
function compare(x, y) {
  var a, b,
    xc = x.c,
    yc = y.c,
    i = x.s,
    j = y.s,
    k = x.e,
    l = y.e;

  // Either NaN?
  if (!i || !j) return null;

  a = xc && !xc[0];
  b = yc && !yc[0];

  // Either zero?
  if (a || b) return a ? b ? 0 : -j : i;

  // Signs differ?
  if (i != j) return i;

  a = i < 0;
  b = k == l;

  // Either Infinity?
  if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;

  // Compare exponents.
  if (!b) return k > l ^ a ? 1 : -1;

  j = (k = xc.length) < (l = yc.length) ? k : l;

  // Compare digit by digit.
  for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;

  // Compare lengths.
  return k == l ? 0 : k > l ^ a ? 1 : -1;
}


/*
 * Check that n is a primitive number, an integer, and in range, otherwise throw.
 */
function intCheck(n, min, max, name) {
  if (n < min || n > max || n !== mathfloor(n)) {
    throw Error
     (bignumberError + (name || 'Argument') + (typeof n == 'number'
       ? n < min || n > max ? ' out of range: ' : ' not an integer: '
       : ' not a primitive number: ') + String(n));
  }
}


// Assumes finite n.
function isOdd(n) {
  var k = n.c.length - 1;
  return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
}


function toExponential(str, e) {
  return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +
   (e < 0 ? 'e' : 'e+') + e;
}


function toFixedPoint(str, e, z) {
  var len, zs;

  // Negative exponent?
  if (e < 0) {

    // Prepend zeros.
    for (zs = z + '.'; ++e; zs += z);
    str = zs + str;

  // Positive exponent
  } else {
    len = str.length;

    // Append zeros.
    if (++e > len) {
      for (zs = z, e -= len; --e; zs += z);
      str += zs;
    } else if (e < len) {
      str = str.slice(0, e) + '.' + str.slice(e);
    }
  }

  return str;
}


// EXPORT


var BigNumber = clone();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (BigNumber);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc1.js":
/*!**************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc1.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const crc1 = (current, previous = 0) => {
    let crc = ~~previous;
    let accum = 0;
    for (let index = 0; index < current.length; index++) {
        accum += current[index];
    }
    crc += accum % 256;
    return crc % 256;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc1);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`
let TABLE = [
    0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741,
    0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,
    0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941,
    0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
    0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341,
    0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,
    0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40,
    0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
    0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41,
    0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,
    0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141,
    0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
    0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,
    0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,
    0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541,
    0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
    0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741,
    0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,
    0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941,
    0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341,
    0x4100, 0x81c1, 0x8081, 0x4040,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc16 = (current, previous = 0) => {
    let crc = ~~previous;
    for (let index = 0; index < current.length; index++) {
        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc16);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16ccitt.js":
/*!********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16ccitt.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`
let TABLE = [
    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b,
    0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,
    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401,
    0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,
    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738,
    0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,
    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96,
    0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,
    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd,
    0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,
    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb,
    0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,
    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2,
    0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,
    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8,
    0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,
    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827,
    0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,
    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d,
    0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,
    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74,
    0x2e93, 0x3eb2, 0x0ed1, 0x1ef0,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc16ccitt = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;
    for (let index = 0; index < current.length; index++) {
        crc = (TABLE[((crc >> 8) ^ current[index]) & 0xff] ^ (crc << 8)) & 0xffff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc16ccitt);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16kermit.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16kermit.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`
let TABLE = [
    0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3,
    0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e,
    0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399,
    0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5,
    0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50,
    0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb,
    0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e,
    0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72,
    0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5,
    0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738,
    0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693,
    0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff,
    0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a,
    0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5,
    0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710,
    0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c,
    0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df,
    0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232,
    0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595,
    0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9,
    0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c,
    0x3de3, 0x2c6a, 0x1ef1, 0x0f78,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc16kermit = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0x0000;
    for (let index = 0; index < current.length; index++) {
        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc16kermit);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16modbus.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16modbus.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`
let TABLE = [
    0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741,
    0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40,
    0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941,
    0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41,
    0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341,
    0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240,
    0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40,
    0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840,
    0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41,
    0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640,
    0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141,
    0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441,
    0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41,
    0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41,
    0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541,
    0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041,
    0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741,
    0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40,
    0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941,
    0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41,
    0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341,
    0x4100, 0x81c1, 0x8081, 0x4040,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc16modbus = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;
    for (let index = 0; index < current.length; index++) {
        crc = (TABLE[(crc ^ current[index]) & 0xff] ^ (crc >> 8)) & 0xffff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc16modbus);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc16xmodem.js":
/*!*********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc16xmodem.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
const crc16xmodem = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0x0;
    for (let index = 0; index < current.length; index++) {
        let code = (crc >>> 8) & 0xff;
        code ^= current[index] & 0xff;
        code ^= code >>> 4;
        crc = (crc << 8) & 0xffff;
        crc ^= code;
        code = (code << 5) & 0xffff;
        crc ^= code;
        code = (code << 7) & 0xffff;
        crc ^= code;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc16xmodem);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc24.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc24.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`
let TABLE = [
    0x000000, 0x864cfb, 0x8ad50d, 0x0c99f6, 0x93e6e1, 0x15aa1a, 0x1933ec, 0x9f7f17, 0xa18139,
    0x27cdc2, 0x2b5434, 0xad18cf, 0x3267d8, 0xb42b23, 0xb8b2d5, 0x3efe2e, 0xc54e89, 0x430272,
    0x4f9b84, 0xc9d77f, 0x56a868, 0xd0e493, 0xdc7d65, 0x5a319e, 0x64cfb0, 0xe2834b, 0xee1abd,
    0x685646, 0xf72951, 0x7165aa, 0x7dfc5c, 0xfbb0a7, 0x0cd1e9, 0x8a9d12, 0x8604e4, 0x00481f,
    0x9f3708, 0x197bf3, 0x15e205, 0x93aefe, 0xad50d0, 0x2b1c2b, 0x2785dd, 0xa1c926, 0x3eb631,
    0xb8faca, 0xb4633c, 0x322fc7, 0xc99f60, 0x4fd39b, 0x434a6d, 0xc50696, 0x5a7981, 0xdc357a,
    0xd0ac8c, 0x56e077, 0x681e59, 0xee52a2, 0xe2cb54, 0x6487af, 0xfbf8b8, 0x7db443, 0x712db5,
    0xf7614e, 0x19a3d2, 0x9fef29, 0x9376df, 0x153a24, 0x8a4533, 0x0c09c8, 0x00903e, 0x86dcc5,
    0xb822eb, 0x3e6e10, 0x32f7e6, 0xb4bb1d, 0x2bc40a, 0xad88f1, 0xa11107, 0x275dfc, 0xdced5b,
    0x5aa1a0, 0x563856, 0xd074ad, 0x4f0bba, 0xc94741, 0xc5deb7, 0x43924c, 0x7d6c62, 0xfb2099,
    0xf7b96f, 0x71f594, 0xee8a83, 0x68c678, 0x645f8e, 0xe21375, 0x15723b, 0x933ec0, 0x9fa736,
    0x19ebcd, 0x8694da, 0x00d821, 0x0c41d7, 0x8a0d2c, 0xb4f302, 0x32bff9, 0x3e260f, 0xb86af4,
    0x2715e3, 0xa15918, 0xadc0ee, 0x2b8c15, 0xd03cb2, 0x567049, 0x5ae9bf, 0xdca544, 0x43da53,
    0xc596a8, 0xc90f5e, 0x4f43a5, 0x71bd8b, 0xf7f170, 0xfb6886, 0x7d247d, 0xe25b6a, 0x641791,
    0x688e67, 0xeec29c, 0x3347a4, 0xb50b5f, 0xb992a9, 0x3fde52, 0xa0a145, 0x26edbe, 0x2a7448,
    0xac38b3, 0x92c69d, 0x148a66, 0x181390, 0x9e5f6b, 0x01207c, 0x876c87, 0x8bf571, 0x0db98a,
    0xf6092d, 0x7045d6, 0x7cdc20, 0xfa90db, 0x65efcc, 0xe3a337, 0xef3ac1, 0x69763a, 0x578814,
    0xd1c4ef, 0xdd5d19, 0x5b11e2, 0xc46ef5, 0x42220e, 0x4ebbf8, 0xc8f703, 0x3f964d, 0xb9dab6,
    0xb54340, 0x330fbb, 0xac70ac, 0x2a3c57, 0x26a5a1, 0xa0e95a, 0x9e1774, 0x185b8f, 0x14c279,
    0x928e82, 0x0df195, 0x8bbd6e, 0x872498, 0x016863, 0xfad8c4, 0x7c943f, 0x700dc9, 0xf64132,
    0x693e25, 0xef72de, 0xe3eb28, 0x65a7d3, 0x5b59fd, 0xdd1506, 0xd18cf0, 0x57c00b, 0xc8bf1c,
    0x4ef3e7, 0x426a11, 0xc426ea, 0x2ae476, 0xaca88d, 0xa0317b, 0x267d80, 0xb90297, 0x3f4e6c,
    0x33d79a, 0xb59b61, 0x8b654f, 0x0d29b4, 0x01b042, 0x87fcb9, 0x1883ae, 0x9ecf55, 0x9256a3,
    0x141a58, 0xefaaff, 0x69e604, 0x657ff2, 0xe33309, 0x7c4c1e, 0xfa00e5, 0xf69913, 0x70d5e8,
    0x4e2bc6, 0xc8673d, 0xc4fecb, 0x42b230, 0xddcd27, 0x5b81dc, 0x57182a, 0xd154d1, 0x26359f,
    0xa07964, 0xace092, 0x2aac69, 0xb5d37e, 0x339f85, 0x3f0673, 0xb94a88, 0x87b4a6, 0x01f85d,
    0x0d61ab, 0x8b2d50, 0x145247, 0x921ebc, 0x9e874a, 0x18cbb1, 0xe37b16, 0x6537ed, 0x69ae1b,
    0xefe2e0, 0x709df7, 0xf6d10c, 0xfa48fa, 0x7c0401, 0x42fa2f, 0xc4b6d4, 0xc82f22, 0x4e63d9,
    0xd11cce, 0x575035, 0x5bc9c3, 0xdd8538,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc24 = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0xb704ce;
    for (let index = 0; index < current.length; index++) {
        crc = (TABLE[((crc >> 16) ^ current[index]) & 0xff] ^ (crc << 8)) & 0xffffff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc24);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc32.js":
/*!***************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc32.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`
let TABLE = [
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc32 = (current, previous) => {
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    let crc = previous === 0 ? 0 : ~~previous ^ -1;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);
    }
    return crc ^ -1;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc32);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc32mpeg2.js":
/*!********************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc32mpeg2.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32-mpeg --generate=c`
let TABLE = [
    0x00000000, 0x04c11db7, 0x09823b6e, 0x0d4326d9, 0x130476dc, 0x17c56b6b, 0x1a864db2, 0x1e475005,
    0x2608edb8, 0x22c9f00f, 0x2f8ad6d6, 0x2b4bcb61, 0x350c9b64, 0x31cd86d3, 0x3c8ea00a, 0x384fbdbd,
    0x4c11db70, 0x48d0c6c7, 0x4593e01e, 0x4152fda9, 0x5f15adac, 0x5bd4b01b, 0x569796c2, 0x52568b75,
    0x6a1936c8, 0x6ed82b7f, 0x639b0da6, 0x675a1011, 0x791d4014, 0x7ddc5da3, 0x709f7b7a, 0x745e66cd,
    0x9823b6e0, 0x9ce2ab57, 0x91a18d8e, 0x95609039, 0x8b27c03c, 0x8fe6dd8b, 0x82a5fb52, 0x8664e6e5,
    0xbe2b5b58, 0xbaea46ef, 0xb7a96036, 0xb3687d81, 0xad2f2d84, 0xa9ee3033, 0xa4ad16ea, 0xa06c0b5d,
    0xd4326d90, 0xd0f37027, 0xddb056fe, 0xd9714b49, 0xc7361b4c, 0xc3f706fb, 0xceb42022, 0xca753d95,
    0xf23a8028, 0xf6fb9d9f, 0xfbb8bb46, 0xff79a6f1, 0xe13ef6f4, 0xe5ffeb43, 0xe8bccd9a, 0xec7dd02d,
    0x34867077, 0x30476dc0, 0x3d044b19, 0x39c556ae, 0x278206ab, 0x23431b1c, 0x2e003dc5, 0x2ac12072,
    0x128e9dcf, 0x164f8078, 0x1b0ca6a1, 0x1fcdbb16, 0x018aeb13, 0x054bf6a4, 0x0808d07d, 0x0cc9cdca,
    0x7897ab07, 0x7c56b6b0, 0x71159069, 0x75d48dde, 0x6b93dddb, 0x6f52c06c, 0x6211e6b5, 0x66d0fb02,
    0x5e9f46bf, 0x5a5e5b08, 0x571d7dd1, 0x53dc6066, 0x4d9b3063, 0x495a2dd4, 0x44190b0d, 0x40d816ba,
    0xaca5c697, 0xa864db20, 0xa527fdf9, 0xa1e6e04e, 0xbfa1b04b, 0xbb60adfc, 0xb6238b25, 0xb2e29692,
    0x8aad2b2f, 0x8e6c3698, 0x832f1041, 0x87ee0df6, 0x99a95df3, 0x9d684044, 0x902b669d, 0x94ea7b2a,
    0xe0b41de7, 0xe4750050, 0xe9362689, 0xedf73b3e, 0xf3b06b3b, 0xf771768c, 0xfa325055, 0xfef34de2,
    0xc6bcf05f, 0xc27dede8, 0xcf3ecb31, 0xcbffd686, 0xd5b88683, 0xd1799b34, 0xdc3abded, 0xd8fba05a,
    0x690ce0ee, 0x6dcdfd59, 0x608edb80, 0x644fc637, 0x7a089632, 0x7ec98b85, 0x738aad5c, 0x774bb0eb,
    0x4f040d56, 0x4bc510e1, 0x46863638, 0x42472b8f, 0x5c007b8a, 0x58c1663d, 0x558240e4, 0x51435d53,
    0x251d3b9e, 0x21dc2629, 0x2c9f00f0, 0x285e1d47, 0x36194d42, 0x32d850f5, 0x3f9b762c, 0x3b5a6b9b,
    0x0315d626, 0x07d4cb91, 0x0a97ed48, 0x0e56f0ff, 0x1011a0fa, 0x14d0bd4d, 0x19939b94, 0x1d528623,
    0xf12f560e, 0xf5ee4bb9, 0xf8ad6d60, 0xfc6c70d7, 0xe22b20d2, 0xe6ea3d65, 0xeba91bbc, 0xef68060b,
    0xd727bbb6, 0xd3e6a601, 0xdea580d8, 0xda649d6f, 0xc423cd6a, 0xc0e2d0dd, 0xcda1f604, 0xc960ebb3,
    0xbd3e8d7e, 0xb9ff90c9, 0xb4bcb610, 0xb07daba7, 0xae3afba2, 0xaafbe615, 0xa7b8c0cc, 0xa379dd7b,
    0x9b3660c6, 0x9ff77d71, 0x92b45ba8, 0x9675461f, 0x8832161a, 0x8cf30bad, 0x81b02d74, 0x857130c3,
    0x5d8a9099, 0x594b8d2e, 0x5408abf7, 0x50c9b640, 0x4e8ee645, 0x4a4ffbf2, 0x470cdd2b, 0x43cdc09c,
    0x7b827d21, 0x7f436096, 0x7200464f, 0x76c15bf8, 0x68860bfd, 0x6c47164a, 0x61043093, 0x65c52d24,
    0x119b4be9, 0x155a565e, 0x18197087, 0x1cd86d30, 0x029f3d35, 0x065e2082, 0x0b1d065b, 0x0fdc1bec,
    0x3793a651, 0x3352bbe6, 0x3e119d3f, 0x3ad08088, 0x2497d08d, 0x2056cd3a, 0x2d15ebe3, 0x29d4f654,
    0xc5a92679, 0xc1683bce, 0xcc2b1d17, 0xc8ea00a0, 0xd6ad50a5, 0xd26c4d12, 0xdf2f6bcb, 0xdbee767c,
    0xe3a1cbc1, 0xe760d676, 0xea23f0af, 0xeee2ed18, 0xf0a5bd1d, 0xf464a0aa, 0xf9278673, 0xfde69bc4,
    0x89b8fd09, 0x8d79e0be, 0x803ac667, 0x84fbdbd0, 0x9abc8bd5, 0x9e7d9662, 0x933eb0bb, 0x97ffad0c,
    0xafb010b1, 0xab710d06, 0xa6322bdf, 0xa2f33668, 0xbcb4666d, 0xb8757bda, 0xb5365d03, 0xb1f740b4,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc32mpeg2 = (current, previous) => {
    let crc = typeof previous !== 'undefined' ? ~~previous : 0xffffffff;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[((crc >> 24) ^ current[index]) & 0xff] ^ (crc << 8);
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc32mpeg2);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc8.js":
/*!**************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc8.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`
let TABLE = [
    0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d,
    0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d,
    0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd,
    0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd,
    0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea,
    0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a,
    0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a,
    0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a,
    0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4,
    0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4,
    0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44,
    0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34,
    0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63,
    0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13,
    0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83,
    0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc8 = (current, previous = 0) => {
    let crc = ~~previous;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc8);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc81wire.js":
/*!*******************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc81wire.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`
let TABLE = [
    0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41,
    0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc,
    0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
    0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff,
    0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07,
    0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
    0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24,
    0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9,
    0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
    0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50,
    0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee,
    0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
    0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b,
    0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16,
    0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
    0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc81wire = (current, previous = 0) => {
    let crc = ~~previous;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc81wire);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crc8dvbs2.js":
/*!*******************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crc8dvbs2.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --generate=c --width=8 --poly=0xd5 --reflect-in=false --reflect-out=false --xor-in=0xff --xor-out=0x00`
let TABLE = [
    0x00, 0xd5, 0x7f, 0xaa, 0xfe, 0x2b, 0x81, 0x54, 0x29, 0xfc, 0x56, 0x83, 0xd7, 0x02, 0xa8, 0x7d,
    0x52, 0x87, 0x2d, 0xf8, 0xac, 0x79, 0xd3, 0x06, 0x7b, 0xae, 0x04, 0xd1, 0x85, 0x50, 0xfa, 0x2f,
    0xa4, 0x71, 0xdb, 0x0e, 0x5a, 0x8f, 0x25, 0xf0, 0x8d, 0x58, 0xf2, 0x27, 0x73, 0xa6, 0x0c, 0xd9,
    0xf6, 0x23, 0x89, 0x5c, 0x08, 0xdd, 0x77, 0xa2, 0xdf, 0x0a, 0xa0, 0x75, 0x21, 0xf4, 0x5e, 0x8b,
    0x9d, 0x48, 0xe2, 0x37, 0x63, 0xb6, 0x1c, 0xc9, 0xb4, 0x61, 0xcb, 0x1e, 0x4a, 0x9f, 0x35, 0xe0,
    0xcf, 0x1a, 0xb0, 0x65, 0x31, 0xe4, 0x4e, 0x9b, 0xe6, 0x33, 0x99, 0x4c, 0x18, 0xcd, 0x67, 0xb2,
    0x39, 0xec, 0x46, 0x93, 0xc7, 0x12, 0xb8, 0x6d, 0x10, 0xc5, 0x6f, 0xba, 0xee, 0x3b, 0x91, 0x44,
    0x6b, 0xbe, 0x14, 0xc1, 0x95, 0x40, 0xea, 0x3f, 0x42, 0x97, 0x3d, 0xe8, 0xbc, 0x69, 0xc3, 0x16,
    0xef, 0x3a, 0x90, 0x45, 0x11, 0xc4, 0x6e, 0xbb, 0xc6, 0x13, 0xb9, 0x6c, 0x38, 0xed, 0x47, 0x92,
    0xbd, 0x68, 0xc2, 0x17, 0x43, 0x96, 0x3c, 0xe9, 0x94, 0x41, 0xeb, 0x3e, 0x6a, 0xbf, 0x15, 0xc0,
    0x4b, 0x9e, 0x34, 0xe1, 0xb5, 0x60, 0xca, 0x1f, 0x62, 0xb7, 0x1d, 0xc8, 0x9c, 0x49, 0xe3, 0x36,
    0x19, 0xcc, 0x66, 0xb3, 0xe7, 0x32, 0x98, 0x4d, 0x30, 0xe5, 0x4f, 0x9a, 0xce, 0x1b, 0xb1, 0x64,
    0x72, 0xa7, 0x0d, 0xd8, 0x8c, 0x59, 0xf3, 0x26, 0x5b, 0x8e, 0x24, 0xf1, 0xa5, 0x70, 0xda, 0x0f,
    0x20, 0xf5, 0x5f, 0x8a, 0xde, 0x0b, 0xa1, 0x74, 0x09, 0xdc, 0x76, 0xa3, 0xf7, 0x22, 0x88, 0x5d,
    0xd6, 0x03, 0xa9, 0x7c, 0x28, 0xfd, 0x57, 0x82, 0xff, 0x2a, 0x80, 0x55, 0x01, 0xd4, 0x7e, 0xab,
    0x84, 0x51, 0xfb, 0x2e, 0x7a, 0xaf, 0x05, 0xd0, 0xad, 0x78, 0xd2, 0x07, 0x53, 0x86, 0x2c, 0xf9,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crc8dvbs2 = (current, previous = 0) => {
    let crc = ~~previous;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] & 0xff;
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crc8dvbs2);


/***/ }),

/***/ "./node_modules/crc/mjs/calculators/crcjam.js":
/*!****************************************************!*\
  !*** ./node_modules/crc/mjs/calculators/crcjam.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
// Generated by `./pycrc.py --algorithm=table-driven --model=jam --generate=c`
let TABLE = [
    0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3,
    0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91,
    0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7,
    0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5,
    0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,
    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59,
    0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f,
    0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d,
    0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433,
    0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01,
    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457,
    0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65,
    0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb,
    0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9,
    0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,
    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad,
    0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683,
    0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1,
    0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7,
    0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,
    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b,
    0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79,
    0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f,
    0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d,
    0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713,
    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21,
    0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777,
    0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45,
    0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db,
    0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,
    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf,
    0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d,
];
if (typeof Int32Array !== 'undefined') {
    TABLE = new Int32Array(TABLE);
}
const crcjam = (current, previous = -1) => {
    let crc = previous === 0 ? 0 : ~~previous;
    for (let index = 0; index < current.length; index++) {
        crc = TABLE[(crc ^ current[index]) & 0xff] ^ (crc >>> 8);
    }
    return crc;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (crcjam);


/***/ }),

/***/ "./node_modules/crc/mjs/crc1.js":
/*!**************************************!*\
  !*** ./node_modules/crc/mjs/crc1.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc1.js */ "./node_modules/crc/mjs/calculators/crc1.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc1', _calculators_crc1_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc16.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc16.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc16_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16.js */ "./node_modules/crc/mjs/calculators/crc16.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-16', _calculators_crc16_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc16ccitt.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/crc16ccitt.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc16ccitt_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16ccitt.js */ "./node_modules/crc/mjs/calculators/crc16ccitt.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('ccitt', _calculators_crc16ccitt_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc16kermit.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16kermit.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc16kermit_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16kermit.js */ "./node_modules/crc/mjs/calculators/crc16kermit.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('kermit', _calculators_crc16kermit_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc16modbus.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16modbus.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc16modbus_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16modbus.js */ "./node_modules/crc/mjs/calculators/crc16modbus.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-16-modbus', _calculators_crc16modbus_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc16xmodem.js":
/*!*********************************************!*\
  !*** ./node_modules/crc/mjs/crc16xmodem.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc16xmodem_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc16xmodem.js */ "./node_modules/crc/mjs/calculators/crc16xmodem.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('xmodem', _calculators_crc16xmodem_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc24.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc24.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc24_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc24.js */ "./node_modules/crc/mjs/calculators/crc24.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-24', _calculators_crc24_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc32.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/crc32.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc32_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc32.js */ "./node_modules/crc/mjs/calculators/crc32.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-32', _calculators_crc32_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc32mpeg2.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/crc32mpeg2.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc32mpeg2.js */ "./node_modules/crc/mjs/calculators/crc32mpeg2.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-32-mpeg', _calculators_crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc8.js":
/*!**************************************!*\
  !*** ./node_modules/crc/mjs/crc8.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc8_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc8.js */ "./node_modules/crc/mjs/calculators/crc8.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-8', _calculators_crc8_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc81wire.js":
/*!*******************************************!*\
  !*** ./node_modules/crc/mjs/crc81wire.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc81wire_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc81wire.js */ "./node_modules/crc/mjs/calculators/crc81wire.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('dallas-1-wire', _calculators_crc81wire_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crc8dvbs2.js":
/*!*******************************************!*\
  !*** ./node_modules/crc/mjs/crc8dvbs2.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crc8dvbs2.js */ "./node_modules/crc/mjs/calculators/crc8dvbs2.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('crc-8-dvbs2', _calculators_crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/crcjam.js":
/*!****************************************!*\
  !*** ./node_modules/crc/mjs/crcjam.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _calculators_crcjam_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./calculators/crcjam.js */ "./node_modules/crc/mjs/calculators/crcjam.js");
/* harmony import */ var _define_crc_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./define_crc.js */ "./node_modules/crc/mjs/define_crc.js");


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_define_crc_js__WEBPACK_IMPORTED_MODULE_1__["default"])('jam', _calculators_crcjam_js__WEBPACK_IMPORTED_MODULE_0__["default"]));


/***/ }),

/***/ "./node_modules/crc/mjs/create_buffer.js":
/*!***********************************************!*\
  !*** ./node_modules/crc/mjs/create_buffer.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var buffer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! buffer */ "./node_modules/buffer/index.js");
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-prototype-builtins */

const createBuffer = (value, encoding) => buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value, encoding);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (createBuffer);


/***/ }),

/***/ "./node_modules/crc/mjs/define_crc.js":
/*!********************************************!*\
  !*** ./node_modules/crc/mjs/define_crc.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ defineCrc)
/* harmony export */ });
/* harmony import */ var _create_buffer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./create_buffer.js */ "./node_modules/crc/mjs/create_buffer.js");

function defineCrc(model, calculator) {
    const result = (value, previous) => calculator((0,_create_buffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value), previous) >>> 0;
    result.signed = (value, previous) => calculator((0,_create_buffer_js__WEBPACK_IMPORTED_MODULE_0__["default"])(value), previous);
    result.unsigned = result;
    result.model = model;
    return result;
}


/***/ }),

/***/ "./node_modules/crc/mjs/index.js":
/*!***************************************!*\
  !*** ./node_modules/crc/mjs/index.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "crc1": () => (/* reexport safe */ _crc1_js__WEBPACK_IMPORTED_MODULE_0__["default"]),
/* harmony export */   "crc16": () => (/* reexport safe */ _crc16_js__WEBPACK_IMPORTED_MODULE_4__["default"]),
/* harmony export */   "crc16ccitt": () => (/* reexport safe */ _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__["default"]),
/* harmony export */   "crc16kermit": () => (/* reexport safe */ _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__["default"]),
/* harmony export */   "crc16modbus": () => (/* reexport safe */ _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__["default"]),
/* harmony export */   "crc16xmodem": () => (/* reexport safe */ _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__["default"]),
/* harmony export */   "crc24": () => (/* reexport safe */ _crc24_js__WEBPACK_IMPORTED_MODULE_9__["default"]),
/* harmony export */   "crc32": () => (/* reexport safe */ _crc32_js__WEBPACK_IMPORTED_MODULE_10__["default"]),
/* harmony export */   "crc32mpeg2": () => (/* reexport safe */ _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__["default"]),
/* harmony export */   "crc8": () => (/* reexport safe */ _crc8_js__WEBPACK_IMPORTED_MODULE_1__["default"]),
/* harmony export */   "crc81wire": () => (/* reexport safe */ _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__["default"]),
/* harmony export */   "crc8dvbs2": () => (/* reexport safe */ _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__["default"]),
/* harmony export */   "crcjam": () => (/* reexport safe */ _crcjam_js__WEBPACK_IMPORTED_MODULE_12__["default"]),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _crc1_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./crc1.js */ "./node_modules/crc/mjs/crc1.js");
/* harmony import */ var _crc8_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./crc8.js */ "./node_modules/crc/mjs/crc8.js");
/* harmony import */ var _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./crc81wire.js */ "./node_modules/crc/mjs/crc81wire.js");
/* harmony import */ var _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./crc8dvbs2.js */ "./node_modules/crc/mjs/crc8dvbs2.js");
/* harmony import */ var _crc16_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./crc16.js */ "./node_modules/crc/mjs/crc16.js");
/* harmony import */ var _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./crc16ccitt.js */ "./node_modules/crc/mjs/crc16ccitt.js");
/* harmony import */ var _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./crc16modbus.js */ "./node_modules/crc/mjs/crc16modbus.js");
/* harmony import */ var _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./crc16xmodem.js */ "./node_modules/crc/mjs/crc16xmodem.js");
/* harmony import */ var _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./crc16kermit.js */ "./node_modules/crc/mjs/crc16kermit.js");
/* harmony import */ var _crc24_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./crc24.js */ "./node_modules/crc/mjs/crc24.js");
/* harmony import */ var _crc32_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./crc32.js */ "./node_modules/crc/mjs/crc32.js");
/* harmony import */ var _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./crc32mpeg2.js */ "./node_modules/crc/mjs/crc32mpeg2.js");
/* harmony import */ var _crcjam_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./crcjam.js */ "./node_modules/crc/mjs/crcjam.js");


























/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
    crc1: _crc1_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    crc8: _crc8_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    crc81wire: _crc81wire_js__WEBPACK_IMPORTED_MODULE_2__["default"],
    crc8dvbs2: _crc8dvbs2_js__WEBPACK_IMPORTED_MODULE_3__["default"],
    crc16: _crc16_js__WEBPACK_IMPORTED_MODULE_4__["default"],
    crc16ccitt: _crc16ccitt_js__WEBPACK_IMPORTED_MODULE_5__["default"],
    crc16modbus: _crc16modbus_js__WEBPACK_IMPORTED_MODULE_6__["default"],
    crc16xmodem: _crc16xmodem_js__WEBPACK_IMPORTED_MODULE_7__["default"],
    crc16kermit: _crc16kermit_js__WEBPACK_IMPORTED_MODULE_8__["default"],
    crc24: _crc24_js__WEBPACK_IMPORTED_MODULE_9__["default"],
    crc32: _crc32_js__WEBPACK_IMPORTED_MODULE_10__["default"],
    crc32mpeg2: _crc32mpeg2_js__WEBPACK_IMPORTED_MODULE_11__["default"],
    crcjam: _crcjam_js__WEBPACK_IMPORTED_MODULE_12__["default"],
});


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	StellarBase = __webpack_exports__;
/******/ 	
/******/ })()
;
//# sourceMappingURL=stellar-base.js.map